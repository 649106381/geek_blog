2020-06-15 08:36:59.387 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 08:36:59.395 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 08:36:59.399 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 08:36:59.399 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 08:36:59.400 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 08:36:59.401 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 08:36:59.410 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:36:59.410 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:36:59.409(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:36:59.412 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:36:59.644 DEBUG 2288 --- [http-nio-8889-exec-10] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 08:36:59.645 DEBUG 2288 --- [http-nio-8889-exec-10] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 3(Long)
2020-06-15 08:36:59.646 DEBUG 2288 --- [http-nio-8889-exec-10] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 11
2020-06-15 08:36:59.990 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 08:36:59.991 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 08:36:59.993 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 08:36:59.994 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 08:36:59.994 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 08:36:59.996 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 2
2020-06-15 08:37:00.162 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 08:37:00.163 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 08:37:00.165 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 08:37:00.167 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 08:37:00.167 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 08:37:00.168 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 08:37:00.169 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 08:37:00.169 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 08:37:00.171 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 08:37:00.174 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 08:37:00.174 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 08:37:00.175 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 08:37:00.177 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 08:37:00.177 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 08:37:00.178 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 08:37:00.180 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 08:37:00.180 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 08:37:00.181 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 08:37:00.183 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 08:37:00.183 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 08:37:00.184 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:37:00.185 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 08:37:00.186 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 08:37:00.187 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 08:37:00.191 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 08:37:00.192 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 08:37:00.193 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 08:37:00.194 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 08:37:00.194 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 08:37:00.195 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 08:37:00.197 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 08:37:00.197 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 08:37:00.199 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 08:37:00.201 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 08:37:00.201 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 08:37:00.202 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 08:37:00.205 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 08:37:00.207 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 08:37:00.208 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 08:37:00.209 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:37:00.209 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 08:37:00.251 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 08:37:00.263 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:37:00.264 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 08:37:00.316 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 08:37:00.325 ERROR 2288 --- [http-nio-8889-exec-5] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$4cc72b6d.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$bde4a1f.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 08:37:00.341  WARN 2288 --- [http-nio-8889-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 08:39:38.718 DEBUG 2288 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:39:38.719 DEBUG 2288 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:39:38.717(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:39:38.720 DEBUG 2288 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:39:40.002 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 08:39:40.003 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 08:39:40.004 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:39:40.007 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 08:39:40.007 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 08:39:40.008 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 08:39:40.010 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 08:39:40.010 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 08:39:40.012 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 08:39:40.024 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:39:40.024 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 08:39:40.079 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 08:39:40.082 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:39:40.082 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 08:39:40.169 DEBUG 2288 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 08:39:40.171 ERROR 2288 --- [http-nio-8889-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$4cc72b6d.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$bde4a1f.index(<generated>)
	at sun.reflect.GeneratedMethodAccessor545.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 08:39:40.172  WARN 2288 --- [http-nio-8889-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 08:45:25.291 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:45:25.292 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:45:25.29(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:45:25.293 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:45:25.937 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 08:45:25.938 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 08:45:25.939 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:45:25.940 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 08:45:25.941 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 08:45:25.941 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 08:45:25.942 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 08:45:25.942 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 08:45:25.943 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 08:45:25.947 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:45:25.947 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 08:45:25.983 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 08:45:25.984 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:45:25.984 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 08:45:26.040 DEBUG 2288 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 08:45:26.040 ERROR 2288 --- [http-nio-8889-exec-8] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$4cc72b6d.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$bde4a1f.index(<generated>)
	at sun.reflect.GeneratedMethodAccessor545.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 08:45:26.041  WARN 2288 --- [http-nio-8889-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 08:47:17.007 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 08:47:17.007 DEBUG 2288 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 08:47:17.007 DEBUG 2288 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 08:47:17.007 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 08:47:17.008 DEBUG 2288 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 2
2020-06-15 08:47:17.008 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 08:47:54.629 DEBUG 2288 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:47:54.630 DEBUG 2288 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:47:54.618(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:47:54.631 DEBUG 2288 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:47:54.955 DEBUG 2288 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 08:47:54.955 DEBUG 2288 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 3(Long)
2020-06-15 08:47:54.959 DEBUG 2288 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 11
2020-06-15 08:47:55.696 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 08:47:55.697 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 08:47:55.698 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 08:47:55.700 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 08:47:55.700 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 08:47:55.701 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 08:47:55.703 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 08:47:55.703 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 08:47:55.704 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 08:47:55.706 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 08:47:55.706 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 08:47:55.707 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 08:47:55.711 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 08:47:55.712 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 08:47:55.713 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 08:47:55.716 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 08:47:55.716 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 08:47:55.717 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 08:47:55.718 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 08:47:55.719 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 08:47:55.720 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:47:55.722 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 08:47:55.722 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 08:47:55.723 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 08:47:55.726 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 08:47:55.727 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 08:47:55.729 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 08:47:55.731 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 08:47:55.731 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 08:47:55.732 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 08:47:55.734 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 08:47:55.734 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 08:47:55.735 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 08:47:55.737 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 08:47:55.738 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 08:47:55.738 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 08:47:55.741 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 08:47:55.742 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 08:47:55.745 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 08:47:55.747 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:47:55.747 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 08:47:55.790 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 08:47:55.792 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:47:55.792 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 08:47:55.872 DEBUG 2288 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 08:47:55.873 ERROR 2288 --- [http-nio-8889-exec-2] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$4cc72b6d.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$bde4a1f.index(<generated>)
	at sun.reflect.GeneratedMethodAccessor545.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 08:47:55.874  WARN 2288 --- [http-nio-8889-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 08:50:07.885 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:50:07.885 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:50:07.884(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:50:07.886 DEBUG 2288 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:50:08.608 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 08:50:08.609 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 08:50:08.612 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:50:08.613 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 08:50:08.613 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 08:50:08.614 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 08:50:08.614 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 08:50:08.614 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 08:50:08.616 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 08:50:08.618 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:50:08.618 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 08:50:08.660 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 08:50:08.662 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:50:08.662 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 08:50:08.722 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 08:50:08.723 ERROR 2288 --- [http-nio-8889-exec-9] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$4cc72b6d.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$bde4a1f.index(<generated>)
	at sun.reflect.GeneratedMethodAccessor545.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 08:50:08.724  WARN 2288 --- [http-nio-8889-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 08:50:56.084 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 08:50:56.084 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 08:50:56.085 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:50:56.086 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 08:50:56.086 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 08:50:56.087 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 08:50:56.088 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 08:50:56.088 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 08:50:56.088 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 08:50:56.090 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:50:56.090 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 08:50:56.125 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 08:50:56.126 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:50:56.127 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 08:50:56.165 DEBUG 2288 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 08:50:56.167 ERROR 2288 --- [http-nio-8889-exec-9] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$4cc72b6d.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$bde4a1f.index(<generated>)
	at sun.reflect.GeneratedMethodAccessor545.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 08:50:56.167  WARN 2288 --- [http-nio-8889-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 08:51:07.451  INFO 4832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 4832 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 08:51:07.456 DEBUG 4832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 08:51:07.456  INFO 4832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 08:51:07.500  INFO 4832 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 08:51:07.500  INFO 4832 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 08:51:09.050  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 08:51:09.054  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 08:51:09.215  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 151ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 08:51:09.223  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 08:51:09.224  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 08:51:09.251  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 26ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 08:51:09.286  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 08:51:09.288  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 08:51:09.318  INFO 4832 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 08:51:09.318  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-06-15 08:51:09.853  INFO 4832 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 08:51:09.982  INFO 4832 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 08:51:09.986  INFO 4832 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4177af54' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 08:51:09.987  INFO 4832 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 08:51:09.995  INFO 4832 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 08:51:10.007  INFO 4832 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$f3bc3168] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 08:51:10.601  INFO 4832 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 08:51:10.609  INFO 4832 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 08:51:10.610  INFO 4832 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 08:51:10.719  INFO 4832 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 08:51:10.719  INFO 4832 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3219 ms
2020-06-15 08:51:10.850  INFO 4832 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 08:51:10.852  INFO 4832 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 08:51:10.866 DEBUG 4832 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 08:51:10.986  INFO 4832 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 08:51:11.438  INFO 4832 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 08:51:13.442  WARN 4832 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 08:51:13.443  WARN 4832 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 08:51:13.444  WARN 4832 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 08:51:13.444  WARN 4832 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 08:51:13.486  WARN 4832 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 08:51:13.486  WARN 4832 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 08:51:13.486  WARN 4832 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 08:51:13.487  WARN 4832 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 08:51:13.843  INFO 4832 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 08:51:14.513  WARN 4832 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 08:51:16.067  INFO 4832 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 08:51:16.087  INFO 4832 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 08:51:16.276  INFO 4832 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6fdf2be3, org.springframework.security.web.context.SecurityContextPersistenceFilter@7e5d7117, org.springframework.security.web.header.HeaderWriterFilter@7c9094bd, org.springframework.security.web.authentication.logout.LogoutFilter@425dd2fe, site.alanliang.geekblog.security.ValidateCodeFilter@70a8c6bd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@757e9807, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2d99027f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6fc151b7, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@a33071c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@10ec2976, org.springframework.security.web.session.SessionManagementFilter@23f48f11, org.springframework.security.web.access.ExceptionTranslationFilter@74577762, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@221f6ade]
2020-06-15 08:51:16.362  INFO 4832 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 08:51:16.948  INFO 4832 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 08:51:16.967  INFO 4832 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 08:51:17.037  INFO 4832 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 08:51:17.501  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 08:51:17.503  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 08:51:17.509  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 08:51:17.514  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 08:51:17.517  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 08:51:17.520  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 08:51:17.523  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 08:51:17.530  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 08:51:17.533  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 08:51:17.593  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 08:51:17.597  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 08:51:17.601  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 08:51:17.616  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 08:51:17.617  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 08:51:17.621  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 08:51:17.622  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 08:51:17.628  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 08:51:17.630  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 08:51:17.632  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 08:51:17.634  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 08:51:17.637  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 08:51:17.639  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 08:51:17.645  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 08:51:17.649  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 08:51:17.652  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 08:51:17.655  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 08:51:17.656  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 08:51:17.660  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 08:51:17.663  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 08:51:17.668  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 08:51:17.670  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 08:51:17.674  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 08:51:17.679  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 08:51:17.685  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 08:51:17.687  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 08:51:17.691  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 08:51:17.694  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 08:51:17.699  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 08:51:17.700  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 08:51:17.702  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 08:51:17.704  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 08:51:17.706  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 08:51:17.710  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 08:51:17.716  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 08:51:17.717  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 08:51:17.721  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 08:51:17.722  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 08:51:17.738  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 08:51:17.741  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 08:51:17.747  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 08:51:17.751  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 08:51:17.756  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 08:51:17.757  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 08:51:17.763  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 08:51:17.765  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 08:51:17.767  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 08:51:17.772  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 08:51:17.777  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 08:51:17.781  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 08:51:17.782  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 08:51:17.783  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 08:51:17.786  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 08:51:17.788  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 08:51:17.789  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 08:51:17.801  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 08:51:17.807  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 08:51:17.810  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 08:51:17.814  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 08:51:17.816  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 08:51:17.817  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 08:51:17.822  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 08:51:17.825  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 08:51:17.830  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 08:51:17.831  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 08:51:17.837  INFO 4832 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 08:51:19.796  INFO 4832 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 08:51:20.050  INFO 4832 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 13.477 seconds (JVM running for 15.196)
2020-06-15 08:51:21.301  INFO 4832 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 08:51:21.302  INFO 4832 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 08:51:21.417  INFO 4832 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 115 ms
2020-06-15 08:51:22.373 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 08:51:22.373 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 08:51:22.381 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 08:51:23.814 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 08:51:23.814 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 08:51:23.814 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 08:51:23.828 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 08:51:23.828 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 08:51:23.828 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 08:51:23.839 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 08:51:23.839 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 08:51:23.840 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 08:51:23.958 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 08:51:23.958 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 08:51:23.958 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 08:51:23.988 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 08:51:23.989 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 08:51:23.993 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 08:52:07.468 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 08:52:07.469 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 08:52:07.471 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 08:52:07.472 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 08:52:07.472 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 08:52:07.478 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 08:52:07.576  INFO 4832 --- [http-nio-8889-exec-5] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 08:52:09.756 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:52:09.768 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:52:09.751(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 192.168.150.1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:52:09.770 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:52:10.143  INFO 4832 --- [http-nio-8889-exec-7] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 08:52:10.144  INFO 4832 --- [http-nio-8889-exec-7] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 08:52:10.605 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 08:52:10.608 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 08:52:10.614 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 08:52:10.871 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 08:52:10.873 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 08:52:10.876 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:52:10.886 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 08:52:10.888 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 08:52:10.889 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 08:52:10.891 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 08:52:10.891 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 08:52:10.893 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 08:52:10.916 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:52:10.920 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 08:52:10.952 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 08:52:10.953 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:52:10.953 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 08:52:10.994 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 08:52:10.999 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 08:52:11.000 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 08:52:11.001 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 08:52:11.003 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 08:52:11.004 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-14 19:30:27.0(Timestamp), 2020-06-15 08:52:11.001(Timestamp)
2020-06-15 08:52:11.005 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:52:11.008 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 08:52:11.009 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 08:52:11.010 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 08:52:11.012 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 08:52:11.016 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-14 19:30:27.0(Timestamp), 2020-06-15 08:52:11.01(Timestamp)
2020-06-15 08:52:11.017 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 08:52:11.020 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 08:52:11.020 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 08:52:11.021 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 08:52:11.023 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 08:52:11.024 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-14 19:30:27.0(Timestamp), 2020-06-15 08:52:11.022(Timestamp)
2020-06-15 08:52:11.025 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 08:52:11.027 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 08:52:11.028 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 08:52:11.031 DEBUG 4832 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 08:52:11.033 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 08:52:11.034 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-14 19:30:27.0(Timestamp), 2020-06-15 08:52:11.032(Timestamp)
2020-06-15 08:52:11.035 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 08:52:11.039 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 08:52:11.039 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 08:52:11.040 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 08:52:17.688 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 08:52:17.688 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 08:52:17.700 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-15 08:52:17.701 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 08:52:17.757 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 08:52:17.773 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 08:52:17.773 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 08:52:17.775 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 08:52:17.786 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:52:17.788 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:52:17.785(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 133(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:52:17.789 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:53:36.958 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:53:36.959 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:53:36.955(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:53:36.962 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:53:38.003 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:53:38.004 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:53:38.001(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 14(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:53:38.005 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:53:38.082 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 08:53:38.082 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 08:53:38.084 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:53:38.087 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 08:53:38.087 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 08:53:38.091 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 08:53:38.095 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 08:53:38.096 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 08:53:38.099 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 08:53:38.104 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:53:38.104 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 08:53:38.143 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 08:53:38.145 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 08:53:38.145 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 08:53:38.190 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 08:53:38.194 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 08:53:38.194 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 08:53:38.195 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 08:53:38.197 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 08:53:38.197 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 08:52:10.0(Timestamp), 2020-06-15 08:53:38.196(Timestamp)
2020-06-15 08:53:38.198 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 08:53:38.199 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 08:53:38.199 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 08:53:38.200 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 08:53:38.202 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 08:53:38.203 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 08:52:10.0(Timestamp), 2020-06-15 08:53:38.201(Timestamp)
2020-06-15 08:53:38.204 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 08:53:38.205 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 08:53:38.205 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 08:53:38.206 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 08:53:38.211 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 08:53:38.212 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 08:52:10.0(Timestamp), 2020-06-15 08:53:38.208(Timestamp)
2020-06-15 08:53:38.213 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 08:53:38.214 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 08:53:38.214 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 08:53:38.215 DEBUG 4832 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 08:53:38.217 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 08:53:38.217 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 08:52:10.0(Timestamp), 2020-06-15 08:53:38.216(Timestamp)
2020-06-15 08:53:38.218 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 08:53:41.499 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 08:53:41.500 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-15 08:53:41.505 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 08:53:41.518 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 08:53:41.519 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 08:53:41.520 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 08:54:38.004 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 08:54:38.004 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: SpringMVC(String), #D5F5E3(String), 2020-06-15 08:54:38.003(Timestamp), 2020-06-15 08:54:38.003(Timestamp)
2020-06-15 08:54:38.005 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 08:54:38.006 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 08:54:38.006 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: Mybatis(String), #D5F5E3(String), 2020-06-15 08:54:38.005(Timestamp), 2020-06-15 08:54:38.005(Timestamp)
2020-06-15 08:54:38.007 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 08:54:38.009 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 08:54:38.010 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: Redis(String), #D5F5E3(String), 2020-06-15 08:54:38.007(Timestamp), 2020-06-15 08:54:38.007(Timestamp)
2020-06-15 08:54:38.014 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 08:54:38.018 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, top=?, recommend=?, category_id=?, type=?, update_time=?, sort=?, status=? WHERE id=? 
2020-06-15 08:54:38.023 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第一章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://cdn.alanliang.site/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://cdn.alanliang.site/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://cdn.alanliang.site/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://cdn.alanliang.site/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://cdn.alanliang.site/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://cdn.alanliang.site/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://cdn.alanliang.site/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), false(Boolean), false(Boolean), 1(Long), 1(Integer), 2020-06-15 08:54:38.002(Timestamp), 1(Integer), 1(Integer), 1(Long)
2020-06-15 08:54:38.025 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 08:54:38.029 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-15 08:54:38.030 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-06-15 08:54:38.031 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 2
2020-06-15 08:54:38.080 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-15 08:54:38.081 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 12(Long), 1(Long), 13(Long), 1(Long), 14(Long), 1(Long), 15(Long), 1(Long), 16(Long)
2020-06-15 08:54:38.081 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 5
2020-06-15 08:54:38.087 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-15 08:54:38.087 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 1(Long)
2020-06-15 08:54:38.088 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 08:54:38.263 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:54:38.263 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:54:38.261(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 256(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:54:38.265 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:54:43.077 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 08:54:43.077 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 08:54:43.079 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-15 08:54:43.079 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 08:54:43.081 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 08:54:43.083 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 08:54:43.083 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 08:54:43.085 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 08:54:43.090 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:54:43.091 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:54:43.089(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 14(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:54:43.093 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:54:51.280 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-06-15 08:54:51.281 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-06-15 08:54:51.283 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-06-15 08:54:51.283 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 08:54:51.285 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-06-15 08:54:51.288 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:54:51.289 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:54:51.288(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 19(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:54:51.294 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:54:53.672 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 08:54:53.676 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 08:54:53.679 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 08:54:53.680 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 08:54:53.683 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 5
2020-06-15 08:54:53.687 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:54:53.687 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:54:53.686(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:54:53.693 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:54:56.812 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 08:54:56.813 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 13(Long)
2020-06-15 08:54:56.814 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 08:54:56.906 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 08:54:56.906 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 08:54:56.908 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 08:55:32.498 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 08:55:32.499 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: Spring(String)
2020-06-15 08:55:32.500 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 08:55:32.501 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 08:55:32.502 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: Spring(String), #E8F8F5(String), 2020-06-15 08:55:32.496(Timestamp), 13(Long)
2020-06-15 08:55:32.503 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 08:55:32.507 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:55:32.508 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:55:32.507(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: Tag(id=13, name=Spring, color=#E8F8F5, createTime=null, updateTime=Mon Jun 15 08:55:32 CST 2020, articleCount=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:55:32.509 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:55:34.148 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 08:55:34.148 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 08:55:34.150 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 08:55:34.151 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 08:55:34.152 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 5
2020-06-15 08:55:34.158 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:55:34.158 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:55:34.157(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:55:34.163 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:55:42.525 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 08:55:42.525 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 14(Long)
2020-06-15 08:55:42.527 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 08:55:42.627 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 08:55:42.627 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 08:55:42.629 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 2
2020-06-15 08:55:56.686 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 08:55:56.686 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: SpringMVC(String)
2020-06-15 08:55:56.687 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 08:55:56.687 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 08:55:56.688 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: SpringMVC(String), #82E0AA(String), 2020-06-15 08:55:56.685(Timestamp), 14(Long)
2020-06-15 08:55:56.689 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 08:55:56.694 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:55:56.694 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:55:56.694(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: Tag(id=14, name=SpringMVC, color=#82E0AA, createTime=null, updateTime=Mon Jun 15 08:55:56 CST 2020, articleCount=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:55:56.695 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:55:58.344 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 08:55:58.344 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 08:55:58.346 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 08:55:58.346 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 08:55:58.348 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 5
2020-06-15 08:55:58.353 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:55:58.354 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:55:58.352(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:55:58.358 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:57:06.193 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 08:57:06.193 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 15(Long)
2020-06-15 08:57:06.194 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 08:57:06.293 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 08:57:06.294 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 08:57:06.295 DEBUG 4832 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 3
2020-06-15 08:57:09.854 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 08:57:09.854 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: Mybatis(String)
2020-06-15 08:57:09.855 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 08:57:09.857 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 08:57:09.857 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: Mybatis(String), #A3E4D7(String), 2020-06-15 08:57:09.853(Timestamp), 15(Long)
2020-06-15 08:57:09.858 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 08:57:09.863 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:57:09.864 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:57:09.862(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: Tag(id=15, name=Mybatis, color=#A3E4D7, createTime=null, updateTime=Mon Jun 15 08:57:09 CST 2020, articleCount=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:57:09.865 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:57:11.527 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 08:57:11.527 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 08:57:11.529 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 08:57:11.529 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 08:57:11.531 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 5
2020-06-15 08:57:11.534 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:57:11.536 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:57:11.534(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:57:11.539 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:57:17.478 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 08:57:17.478 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 16(Long)
2020-06-15 08:57:17.481 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 08:57:17.597 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 08:57:17.597 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 08:57:17.599 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 4
2020-06-15 08:57:22.207 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 08:57:22.207 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: Redis(String)
2020-06-15 08:57:22.208 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 08:57:22.208 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 08:57:22.209 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: Redis(String), #FEF9E7(String), 2020-06-15 08:57:22.206(Timestamp), 16(Long)
2020-06-15 08:57:22.209 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 08:57:22.214 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:57:22.214 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:57:22.213(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: Tag(id=16, name=Redis, color=#FEF9E7, createTime=null, updateTime=Mon Jun 15 08:57:22 CST 2020, articleCount=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:57:22.215 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:57:23.868 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 08:57:23.868 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 08:57:23.871 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 08:57:23.871 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 08:57:23.873 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 5
2020-06-15 08:57:23.877 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:57:23.877 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:57:23.876(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:57:23.880 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:57:36.721 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 08:57:36.722 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 08:57:36.723 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 08:57:36.733 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:57:36.733 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:57:36.731(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:57:36.734 DEBUG 4832 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 08:59:15.384 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 08:59:15.385 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 08:59:15.383(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 08:59:15.386 DEBUG 4832 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:07:39.421 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 09:07:39.421 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 09:07:39.422 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 09:07:39.422 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 09:07:39.424 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 5
2020-06-15 09:07:39.425 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 09:08:37.619 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:08:37.619 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:08:37.617(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:08:37.622 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:08:37.910 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 09:08:37.911 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 09:08:37.919 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 09:08:38.452 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 09:08:38.455 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 09:08:38.456 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:08:38.460 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 09:08:38.461 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 09:08:38.462 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 09:08:38.466 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 09:08:38.472 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 09:08:38.474 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 09:08:38.479 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 09:08:38.479 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 09:08:38.481 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 09:08:38.496 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 09:08:38.497 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 09:08:38.499 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 09:08:38.509 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 09:08:38.510 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 09:08:38.512 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 09:08:38.515 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 09:08:38.516 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 09:08:38.519 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:08:38.525 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 09:08:38.525 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 09:08:38.527 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:08:38.531 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 09:08:38.532 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 09:08:38.534 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 09:08:38.538 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 09:08:38.539 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 09:08:38.542 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 09:08:38.544 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 09:08:38.546 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 09:08:38.547 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 09:08:38.555 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 09:08:38.556 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 09:08:38.557 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 09:08:38.562 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 09:08:38.562 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 09:08:38.564 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 09:08:38.569 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:08:38.572 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 09:08:38.647 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 09:08:38.648 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:08:38.649 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 09:08:38.727 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 09:08:38.728 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:08:38.729 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:08:38.732 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:08:38.737 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:08:38.738 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 08:53:37.0(Timestamp), 2020-06-15 09:08:38.733(Timestamp)
2020-06-15 09:08:38.739 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:08:38.742 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:08:38.742 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:08:38.743 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:08:38.745 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:08:38.746 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 08:53:37.0(Timestamp), 2020-06-15 09:08:38.743(Timestamp)
2020-06-15 09:08:38.747 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:08:38.748 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:08:38.748 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:08:38.749 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:08:38.753 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:08:38.754 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 08:53:37.0(Timestamp), 2020-06-15 09:08:38.75(Timestamp)
2020-06-15 09:08:38.755 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:08:38.756 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:08:38.756 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:08:38.758 DEBUG 4832 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:08:38.760 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:08:38.761 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 08:53:37.0(Timestamp), 2020-06-15 09:08:38.758(Timestamp)
2020-06-15 09:08:38.762 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 09:08:38.765 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 09:08:38.766 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 09:08:38.770 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 09:09:15.468 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:09:15.468 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:09:15.467(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:09:15.470 DEBUG 4832 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:09:16.386 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 09:09:16.386 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 09:09:16.387 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:09:16.391 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 09:09:16.391 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 09:09:16.395 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 09:09:16.397 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 09:09:16.398 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 09:09:16.400 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 09:09:16.407 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:09:16.407 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 09:09:16.438 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 09:09:16.439 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:09:16.439 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 09:09:16.501 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 09:09:16.502 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:09:16.502 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:09:16.503 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:09:16.504 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:09:16.505 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 09:08:38.0(Timestamp), 2020-06-15 09:09:16.503(Timestamp)
2020-06-15 09:09:16.506 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:09:16.507 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:09:16.507 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:09:16.510 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:09:16.513 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:09:16.513 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 09:08:38.0(Timestamp), 2020-06-15 09:09:16.511(Timestamp)
2020-06-15 09:09:16.514 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:09:16.515 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:09:16.516 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:09:16.517 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:09:16.521 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:09:16.522 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 09:08:38.0(Timestamp), 2020-06-15 09:09:16.518(Timestamp)
2020-06-15 09:09:16.523 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:09:16.527 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:09:16.527 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:09:16.529 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:09:16.533 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:09:16.534 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 09:08:38.0(Timestamp), 2020-06-15 09:09:16.53(Timestamp)
2020-06-15 09:09:16.535 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 09:12:44.731 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:12:44.731 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:12:44.727(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:12:44.733 DEBUG 4832 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:12:45.153 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 09:12:45.153 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 09:12:45.154 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:12:45.156 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 09:12:45.156 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 09:12:45.160 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 09:12:45.162 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 09:12:45.162 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 09:12:45.164 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 09:12:45.168 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:12:45.168 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 09:12:45.214 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 09:12:45.216 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:12:45.216 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 09:12:45.265 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 09:12:45.266 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:12:45.266 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:12:45.267 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:12:45.269 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:12:45.269 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 09:09:15.0(Timestamp), 2020-06-15 09:12:45.267(Timestamp)
2020-06-15 09:12:45.270 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:12:45.271 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:12:45.271 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:12:45.272 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:12:45.277 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:12:45.277 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 09:09:15.0(Timestamp), 2020-06-15 09:12:45.273(Timestamp)
2020-06-15 09:12:45.278 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:12:45.279 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:12:45.279 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:12:45.280 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:12:45.281 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:12:45.281 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 09:09:15.0(Timestamp), 2020-06-15 09:12:45.28(Timestamp)
2020-06-15 09:12:45.282 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:12:45.283 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:12:45.283 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:12:45.284 DEBUG 4832 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:12:45.285 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:12:45.285 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 09:09:15.0(Timestamp), 2020-06-15 09:12:45.284(Timestamp)
2020-06-15 09:12:45.286 DEBUG 4832 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 09:12:47.691 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 09:12:47.692 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 09:12:47.694 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-15 09:12:47.694 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 09:12:47.698 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 09:12:47.699 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 09:12:47.699 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 09:12:47.702 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 09:12:47.711 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:12:47.711 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:12:47.706(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 20(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:12:47.714 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:12:48.800 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 09:12:48.801 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-15 09:12:48.803 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 09:12:48.808 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 09:12:48.808 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 09:12:48.810 DEBUG 4832 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 09:13:49.336 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:13:49.337 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:13:49.336(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:13:49.338 DEBUG 4832 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:13:50.328 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 09:13:50.329 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 09:13:50.331 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:13:50.334 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 09:13:50.335 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 09:13:50.336 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 09:13:50.339 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 09:13:50.339 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 09:13:50.345 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 09:13:50.351 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:13:50.351 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 09:13:50.369 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:13:50.370 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:13:50.368(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:13:50.373 DEBUG 4832 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:13:50.402 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 09:13:50.403 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:13:50.404 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 09:13:50.468 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 09:13:50.469 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:13:50.469 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:13:50.470 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:13:50.472 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:13:50.472 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 09:12:45.0(Timestamp), 2020-06-15 09:13:50.471(Timestamp)
2020-06-15 09:13:50.473 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:13:50.476 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:13:50.477 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:13:50.479 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:13:50.482 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:13:50.482 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 09:12:45.0(Timestamp), 2020-06-15 09:13:50.48(Timestamp)
2020-06-15 09:13:50.484 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:13:50.486 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:13:50.486 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:13:50.487 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:13:50.489 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:13:50.489 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 09:12:45.0(Timestamp), 2020-06-15 09:13:50.487(Timestamp)
2020-06-15 09:13:50.491 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:13:50.495 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:13:50.495 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:13:50.496 DEBUG 4832 --- [http-nio-8889-exec-6] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:13:50.498 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:13:50.498 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 09:12:45.0(Timestamp), 2020-06-15 09:13:50.497(Timestamp)
2020-06-15 09:13:50.499 DEBUG 4832 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 09:14:04.472  INFO 15440 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 15440 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 09:14:04.474 DEBUG 15440 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 09:14:04.475  INFO 15440 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 09:14:04.507  INFO 15440 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 09:14:04.507  INFO 15440 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 09:14:05.373  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 09:14:05.374  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 09:14:05.441  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 63ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 09:14:05.445  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 09:14:05.446  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 09:14:05.457  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 09:14:05.467  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 09:14:05.468  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 09:14:05.485  INFO 15440 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 09:14:05.485  INFO 15440 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-15 09:14:05.812  INFO 15440 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:14:05.952  INFO 15440 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:14:05.955  INFO 15440 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@ace377a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:14:05.958  INFO 15440 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:14:05.965  INFO 15440 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:14:05.975  INFO 15440 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$8ff4a172] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:14:06.359  INFO 15440 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 09:14:06.366  INFO 15440 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 09:14:06.367  INFO 15440 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 09:14:06.463  INFO 15440 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 09:14:06.464  INFO 15440 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1957 ms
2020-06-15 09:14:06.589  INFO 15440 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 09:14:06.590  INFO 15440 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 09:14:06.603 DEBUG 15440 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 09:14:06.704  INFO 15440 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 09:14:07.042  INFO 15440 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 09:14:08.483  WARN 15440 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:14:08.483  WARN 15440 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:14:08.484  WARN 15440 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:14:08.484  WARN 15440 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:14:08.506  WARN 15440 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:14:08.506  WARN 15440 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:14:08.506  WARN 15440 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:14:08.506  WARN 15440 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:14:08.631  INFO 15440 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 09:14:08.801  WARN 15440 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 09:14:09.815  INFO 15440 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 09:14:09.830  INFO 15440 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 09:14:09.986  INFO 15440 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@d87b916, org.springframework.security.web.context.SecurityContextPersistenceFilter@6b00704b, org.springframework.security.web.header.HeaderWriterFilter@7bb48df4, org.springframework.security.web.authentication.logout.LogoutFilter@59b74a1d, site.alanliang.geekblog.security.ValidateCodeFilter@3257a16d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6f3dd6ec, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@46964bb6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@54304b6a, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@1213f0ce, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@713ad3ab, org.springframework.security.web.session.SessionManagementFilter@1938e2f6, org.springframework.security.web.access.ExceptionTranslationFilter@21b37c4f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4464c305]
2020-06-15 09:14:10.059  INFO 15440 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 09:14:10.479  INFO 15440 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 09:14:10.498  INFO 15440 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 09:14:10.552  INFO 15440 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 09:14:10.750  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 09:14:10.751  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 09:14:10.757  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 09:14:10.759  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 09:14:10.760  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 09:14:10.762  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 09:14:10.763  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 09:14:10.765  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 09:14:10.766  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 09:14:10.794  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 09:14:10.796  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 09:14:10.798  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 09:14:10.806  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 09:14:10.807  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 09:14:10.809  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 09:14:10.810  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 09:14:10.812  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 09:14:10.814  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 09:14:10.815  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 09:14:10.816  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 09:14:10.818  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 09:14:10.819  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 09:14:10.823  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 09:14:10.825  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 09:14:10.827  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 09:14:10.830  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 09:14:10.831  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 09:14:10.832  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 09:14:10.833  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 09:14:10.835  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 09:14:10.836  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 09:14:10.840  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 09:14:10.841  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 09:14:10.845  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 09:14:10.846  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 09:14:10.848  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 09:14:10.849  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 09:14:10.852  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 09:14:10.853  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 09:14:10.855  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 09:14:10.856  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 09:14:10.857  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 09:14:10.858  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 09:14:10.860  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 09:14:10.861  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 09:14:10.863  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 09:14:10.864  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 09:14:10.871  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 09:14:10.872  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 09:14:10.873  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 09:14:10.875  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 09:14:10.877  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 09:14:10.878  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 09:14:10.880  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 09:14:10.880  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 09:14:10.880  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 09:14:10.884  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 09:14:10.887  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 09:14:10.888  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 09:14:10.888  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 09:14:10.889  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 09:14:10.891  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 09:14:10.892  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 09:14:10.892  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 09:14:10.897  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 09:14:10.900  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 09:14:10.901  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 09:14:10.901  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 09:14:10.902  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 09:14:10.903  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 09:14:10.906  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 09:14:10.907  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 09:14:10.908  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 09:14:10.909  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 09:14:10.911  INFO 15440 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 09:14:10.938  INFO 15440 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 09:14:10.940  INFO 15440 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.217 seconds (JVM running for 8.218)
2020-06-15 09:38:06.516  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 16944 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 09:38:06.520 DEBUG 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 09:38:06.521  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 09:38:06.570  INFO 16944 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 09:38:06.570  INFO 16944 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 09:38:08.006  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 09:38:08.007  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 09:38:08.106  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 92ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 09:38:08.117  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 09:38:08.121  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 09:38:08.140  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 09:38:08.153  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 09:38:08.154  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 09:38:08.180  INFO 16944 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 09:38:08.181  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-06-15 09:38:08.530  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:38:08.673  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:38:08.676  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@754e2e3c' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:38:08.679  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:38:08.686  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:38:08.697  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$cafc990a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 09:38:09.060  INFO 16944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 09:38:09.068  INFO 16944 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 09:38:09.068  INFO 16944 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 09:38:09.173  INFO 16944 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 09:38:09.174  INFO 16944 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2604 ms
2020-06-15 09:38:09.304  INFO 16944 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 09:38:09.305  INFO 16944 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 09:38:09.316 DEBUG 16944 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 09:38:09.406  INFO 16944 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 09:38:09.734  INFO 16944 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 09:38:11.171  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:38:11.171  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:38:11.172  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:38:11.172  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:38:11.194  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:38:11.194  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:38:11.194  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:38:11.194  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 09:38:11.327  INFO 16944 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 09:38:11.499  WARN 16944 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 09:38:12.537  INFO 16944 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 09:38:12.551  INFO 16944 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 09:38:12.685  INFO 16944 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@cb08662, org.springframework.security.web.context.SecurityContextPersistenceFilter@7749d5b8, org.springframework.security.web.header.HeaderWriterFilter@27783cc6, org.springframework.security.web.authentication.logout.LogoutFilter@5e6679e4, site.alanliang.geekblog.security.ValidateCodeFilter@46f24a6b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@271e76f4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2e00b9e4, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2d5374ee, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@2378dffd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@63e58c82, org.springframework.security.web.session.SessionManagementFilter@48a479b4, org.springframework.security.web.access.ExceptionTranslationFilter@15ca911a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@707a5a76]
2020-06-15 09:38:12.762  INFO 16944 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 09:38:13.196  INFO 16944 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 09:38:13.210  INFO 16944 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 09:38:13.264  INFO 16944 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 09:38:13.446  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 09:38:13.447  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 09:38:13.451  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 09:38:13.453  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 09:38:13.454  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 09:38:13.455  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 09:38:13.456  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 09:38:13.459  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 09:38:13.460  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 09:38:13.485  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 09:38:13.487  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 09:38:13.490  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 09:38:13.497  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 09:38:13.498  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 09:38:13.500  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 09:38:13.501  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 09:38:13.504  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 09:38:13.505  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 09:38:13.506  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 09:38:13.507  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 09:38:13.510  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 09:38:13.512  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 09:38:13.515  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 09:38:13.518  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 09:38:13.520  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 09:38:13.524  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 09:38:13.525  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 09:38:13.527  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 09:38:13.527  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 09:38:13.529  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 09:38:13.530  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 09:38:13.534  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 09:38:13.535  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 09:38:13.539  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 09:38:13.541  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 09:38:13.543  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 09:38:13.544  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 09:38:13.547  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 09:38:13.548  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 09:38:13.549  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 09:38:13.550  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 09:38:13.551  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 09:38:13.553  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 09:38:13.555  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 09:38:13.556  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 09:38:13.558  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 09:38:13.559  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 09:38:13.566  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 09:38:13.569  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 09:38:13.570  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 09:38:13.572  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 09:38:13.575  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 09:38:13.575  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 09:38:13.576  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 09:38:13.577  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 09:38:13.577  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 09:38:13.581  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 09:38:13.583  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 09:38:13.584  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 09:38:13.585  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 09:38:13.585  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 09:38:13.587  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 09:38:13.588  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 09:38:13.589  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 09:38:13.593  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 09:38:13.596  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 09:38:13.597  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 09:38:13.597  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 09:38:13.598  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 09:38:13.599  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 09:38:13.602  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 09:38:13.603  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 09:38:13.604  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 09:38:13.605  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 09:38:13.607  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 09:38:13.631  INFO 16944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 09:38:13.633  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.956 seconds (JVM running for 14.876)
2020-06-15 09:38:16.361  INFO 16944 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 09:38:16.361  INFO 16944 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 09:38:16.377  INFO 16944 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-06-15 09:38:16.468 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 09:38:16.593 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 09:38:16.614 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 09:38:16.622 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 09:38:16.628 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 09:38:16.636 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 09:38:17.116 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 09:38:17.116 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 09:38:17.119 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 09:38:17.121 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 09:38:17.121 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 09:38:17.133 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 09:38:26.546 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 09:38:26.546 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 09:38:26.548 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 09:38:26.549 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 09:38:26.549 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 09:38:26.554 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 09:38:26.649  INFO 16944 --- [http-nio-8889-exec-5] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 09:38:28.842 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:38:28.850 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:38:28.833(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:38:28.852 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:38:29.208  INFO 16944 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 09:38:29.209  INFO 16944 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 09:38:29.649 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 09:38:29.652 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 09:38:29.658 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 09:38:29.901 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 09:38:29.902 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 09:38:29.906 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:38:29.912 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 09:38:29.913 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 09:38:29.915 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 09:38:29.928 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 09:38:29.929 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 09:38:29.930 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 09:38:29.939 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 09:38:29.940 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 09:38:29.942 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 09:38:29.950 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 09:38:29.952 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 09:38:29.954 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 09:38:29.965 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 09:38:29.966 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 09:38:29.968 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 09:38:29.972 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 09:38:29.973 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 09:38:29.975 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:38:29.983 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 09:38:29.984 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 09:38:29.986 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:38:29.994 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 09:38:29.997 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 09:38:30.000 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 09:38:30.005 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 09:38:30.006 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 09:38:30.009 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 09:38:30.012 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 09:38:30.013 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 09:38:30.014 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 09:38:30.018 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 09:38:30.019 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 09:38:30.022 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 09:38:30.026 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 09:38:30.027 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 09:38:30.028 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 09:38:30.035 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:38:30.040 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 09:38:30.067 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 09:38:30.068 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:38:30.069 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 09:38:30.106 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 09:38:30.108 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:38:30.110 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:38:30.111 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:38:30.113 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:38:30.114 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 09:13:49.0(Timestamp), 2020-06-15 09:38:30.111(Timestamp)
2020-06-15 09:38:30.116 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:38:30.117 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:38:30.117 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:38:30.118 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:38:30.120 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:38:30.124 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 09:13:49.0(Timestamp), 2020-06-15 09:38:30.118(Timestamp)
2020-06-15 09:38:30.125 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:38:30.126 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:38:30.126 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:38:30.127 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:38:30.129 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:38:30.130 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 09:13:49.0(Timestamp), 2020-06-15 09:38:30.128(Timestamp)
2020-06-15 09:38:30.131 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:38:30.132 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:38:30.132 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:38:30.133 DEBUG 16944 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:38:30.134 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:38:30.135 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 09:13:49.0(Timestamp), 2020-06-15 09:38:30.133(Timestamp)
2020-06-15 09:38:30.136 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 09:38:30.145 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 09:38:30.146 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 09:38:30.147 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 09:38:38.582 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 09:38:38.583 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 09:38:38.588 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 09:38:38.662 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 09:38:38.663 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 09:38:38.677 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-15 09:38:38.678 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 09:38:38.731 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 09:38:38.734 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 09:38:38.737 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 09:38:38.741 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 09:38:38.749 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:38:38.755 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:38:38.748(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 135(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:38:38.758 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:45:36.852 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:45:36.855 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:45:36.849(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:45:36.856 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:45:37.677 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:45:37.678 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:45:37.674(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 21(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:45:37.683 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:45:37.827 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 09:45:37.827 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 09:45:37.830 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:45:37.839 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 09:45:37.839 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 09:45:37.844 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 09:45:37.846 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 09:45:37.846 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 09:45:37.855 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 09:45:37.863 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:45:37.868 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 09:45:37.926 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 09:45:37.927 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:45:37.927 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 09:45:37.985 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 09:45:37.986 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:45:37.986 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:45:37.987 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:45:37.990 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:45:37.990 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 09:38:29.0(Timestamp), 2020-06-15 09:45:37.987(Timestamp)
2020-06-15 09:45:37.992 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:45:37.993 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:45:37.993 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:45:37.994 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:45:37.997 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:45:38.000 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 09:38:29.0(Timestamp), 2020-06-15 09:45:37.995(Timestamp)
2020-06-15 09:45:38.002 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:45:38.003 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:45:38.004 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:45:38.005 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:45:38.008 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:45:38.008 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 09:38:29.0(Timestamp), 2020-06-15 09:45:38.006(Timestamp)
2020-06-15 09:45:38.009 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:45:38.010 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:45:38.010 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:45:38.012 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:45:38.013 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:45:38.015 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 09:38:29.0(Timestamp), 2020-06-15 09:45:38.012(Timestamp)
2020-06-15 09:45:38.018 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 09:45:58.499 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 09:45:58.500 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 09:45:58.501 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 09:45:58.502 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 09:45:58.502 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 09:45:58.506 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 09:45:58.604  INFO 16944 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 09:46:00.639 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 09:46:00.640 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 09:46:00.638(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 09:46:00.643 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 09:46:01.082 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 09:46:01.082 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 09:46:01.083 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:46:01.085 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 09:46:01.085 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 09:46:01.087 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 09:46:01.089 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 09:46:01.089 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 09:46:01.092 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 09:46:01.101 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:46:01.101 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 09:46:01.137 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 09:46:01.138 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 09:46:01.138 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 09:46:01.178 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 09:46:01.179 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:46:01.180 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:46:01.180 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:46:01.182 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:46:01.182 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 09:45:37.0(Timestamp), 2020-06-15 09:46:01.181(Timestamp)
2020-06-15 09:46:01.183 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 09:46:01.183 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:46:01.183 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:46:01.184 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:46:01.185 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:46:01.186 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 09:45:37.0(Timestamp), 2020-06-15 09:46:01.185(Timestamp)
2020-06-15 09:46:01.187 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 09:46:01.187 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:46:01.187 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:46:01.188 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:46:01.190 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:46:01.190 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 09:45:37.0(Timestamp), 2020-06-15 09:46:01.188(Timestamp)
2020-06-15 09:46:01.191 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 09:46:01.194 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 09:46:01.194 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 09:46:01.195 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 09:46:01.196 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 09:46:01.197 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 09:45:37.0(Timestamp), 2020-06-15 09:46:01.196(Timestamp)
2020-06-15 09:46:01.202 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:07:20.814 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:20.815 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:20.811(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:20.817 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:21.121 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 10:07:21.122 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 10:07:21.129 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 10:07:21.554 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 10:07:21.556 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 10:07:21.558 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:07:21.566 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 10:07:21.567 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 10:07:21.569 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 10:07:21.573 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 10:07:21.573 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 10:07:21.574 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 10:07:21.584 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 10:07:21.584 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 10:07:21.586 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:07:21.590 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 10:07:21.590 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 10:07:21.592 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 10:07:21.600 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 10:07:21.600 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 10:07:21.602 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 10:07:21.605 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 10:07:21.605 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 10:07:21.607 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:07:21.613 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 10:07:21.614 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 10:07:21.616 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:07:21.621 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 10:07:21.621 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 10:07:21.624 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 10:07:21.629 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 10:07:21.630 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 10:07:21.632 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 10:07:21.635 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 10:07:21.636 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 10:07:21.638 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 10:07:21.645 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 10:07:21.646 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 10:07:21.647 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 10:07:21.652 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 10:07:21.652 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 10:07:21.654 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 10:07:21.657 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:07:21.659 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 10:07:21.714 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 10:07:21.716 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:07:21.717 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 10:07:21.780 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 10:07:21.781 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:07:21.781 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:07:21.782 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:07:21.785 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:07:21.786 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 09:46:01.0(Timestamp), 2020-06-15 10:07:21.782(Timestamp)
2020-06-15 10:07:21.787 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:07:21.789 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:07:21.790 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:07:21.791 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:07:21.796 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:07:21.797 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 09:46:01.0(Timestamp), 2020-06-15 10:07:21.792(Timestamp)
2020-06-15 10:07:21.799 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:07:21.800 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:07:21.800 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:07:21.802 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:07:21.804 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:07:21.804 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 09:46:01.0(Timestamp), 2020-06-15 10:07:21.802(Timestamp)
2020-06-15 10:07:21.806 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:07:21.807 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:07:21.808 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:07:21.811 DEBUG 16944 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:07:21.814 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:07:21.815 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 09:46:01.0(Timestamp), 2020-06-15 10:07:21.812(Timestamp)
2020-06-15 10:07:21.817 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:07:21.821 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 10:07:21.822 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 10:07:21.823 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 10:07:23.818 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_user su 
2020-06-15 10:07:23.818 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 
2020-06-15 10:07:23.820 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: select su.id, su.username, su.nickname, su.sex, su.email, su.phone, su.status, su.create_time, su.update_time, sr.id as rid, sr.role_name, sr.color from sys_user su left join sys_role_user sru on su.id = sru.user_id left join sys_role sr on sru.role_id = sr.id order by su.id LIMIT ?,? 
2020-06-15 10:07:23.822 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:07:23.825 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.UserMapper.listTableByPage     : <==      Total: 3
2020-06-15 10:07:23.841 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:23.842 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:23.84(Timestamp), 查询用户(String), INFO(String), site.alanliang.geekblog.controller.admin.UserController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 34(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:23.848 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:24.936 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectList   : ==>  Preparing: SELECT id,role_name FROM sys_role 
2020-06-15 10:07:24.937 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectList   : ==> Parameters: 
2020-06-15 10:07:24.938 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectList   : <==      Total: 3
2020-06-15 10:07:26.769 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectOne    : ==>  Preparing: SELECT id,username,nickname,sex,phone,email,status FROM sys_user WHERE (id = ?) 
2020-06-15 10:07:26.769 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectOne    : ==> Parameters: 1(Long)
2020-06-15 10:07:26.771 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectOne    : <==      Total: 1
2020-06-15 10:07:26.772 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectList      : ==>  Preparing: SELECT role_id FROM sys_role_user WHERE (user_id = ?) 
2020-06-15 10:07:26.772 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectList      : ==> Parameters: 1(Long)
2020-06-15 10:07:26.773 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.RoleUserMapper.selectList      : <==      Total: 1
2020-06-15 10:07:28.733 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_role 
2020-06-15 10:07:28.733 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 
2020-06-15 10:07:28.735 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT id,role_name,description,rank,color,status,create_time,update_time FROM sys_role LIMIT ?,? 
2020-06-15 10:07:28.736 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:07:28.738 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : <==      Total: 3
2020-06-15 10:07:28.742 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 10:07:28.743 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 1(Long)
2020-06-15 10:07:28.745 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 10:07:28.746 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 10:07:28.747 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 2(Long)
2020-06-15 10:07:28.747 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 10:07:28.748 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 10:07:28.749 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 3(Long)
2020-06-15 10:07:28.749 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 10:07:28.753 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:28.754 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:28.752(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 22(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:28.755 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:29.553 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title FROM sys_menu 
2020-06-15 10:07:29.554 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-15 10:07:29.556 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-15 10:07:31.877 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.RoleMapper.selectOne    : ==>  Preparing: SELECT id,role_name,description,rank,color,status FROM sys_role WHERE (id = ?) 
2020-06-15 10:07:31.878 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.RoleMapper.selectOne    : ==> Parameters: 1(Long)
2020-06-15 10:07:31.879 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.RoleMapper.selectOne    : <==      Total: 1
2020-06-15 10:07:31.885 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.RoleMenuMapper.selectList      : ==>  Preparing: SELECT menu_id FROM sys_role_menu WHERE (role_id = ?) 
2020-06-15 10:07:31.886 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.RoleMenuMapper.selectList      : ==> Parameters: 1(Long)
2020-06-15 10:07:31.888 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.RoleMenuMapper.selectList      : <==      Total: 85
2020-06-15 10:07:34.032 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,create_time,update_time FROM sys_menu 
2020-06-15 10:07:34.033 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-15 10:07:34.042 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-15 10:07:34.050 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_menu 
2020-06-15 10:07:34.051 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectCount  : ==> Parameters: 
2020-06-15 10:07:34.051 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MenuMapper.selectCount  : <==      Total: 1
2020-06-15 10:07:34.054 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:34.054 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:34.053(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 22(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:34.058 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:36.139 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title FROM sys_menu 
2020-06-15 10:07:36.139 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-15 10:07:36.143 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-15 10:07:39.082 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT COUNT(1) FROM t_visitor 
2020-06-15 10:07:39.083 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 
2020-06-15 10:07:39.089 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:39.091 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:39.087(Timestamp), 查询访客(String), INFO(String), site.alanliang.geekblog.controller.admin.VisitorController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:39.095 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:40.581 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT COUNT(1) FROM sys_notice 
2020-06-15 10:07:40.581 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 
2020-06-15 10:07:40.586 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:40.587 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:40.586(Timestamp), 查询公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.listTableByPage()(String), { page: 1 limit: 15 noticeQuery: NoticeQuery(title=null, content=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:40.591 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:44.461 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-06-15 10:07:44.461 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-06-15 10:07:44.463 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time,status FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 10:07:44.464 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:07:44.466 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-06-15 10:07:44.472 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:44.474 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:44.469(Timestamp), 查询访问日志(String), INFO(String), site.alanliang.geekblog.controller.admin.AccessLogController.listByPage()(String), { page: 1 limit: 15 logQuery: LogQuery(description=null, requestIp=null, browser=null, startDate=null, endDate=null, address=null, timeRank=null, username=null) }(String), 0:0:0:0:0:0:0:1(String), 15(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:44.477 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:46.650 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-06-15 10:07:46.651 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-06-15 10:07:46.657 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,username,description,browser,time,create_time,status FROM sys_operation_log ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 10:07:46.658 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:07:46.660 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-06-15 10:07:46.662 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:46.662 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:46.662(Timestamp), 查询操作日志(String), INFO(String), site.alanliang.geekblog.controller.admin.OperationLogController.listByPage()(String), { page: 1 limit: 15 logQuery: LogQuery(description=null, requestIp=null, browser=null, startDate=null, endDate=null, address=null, timeRank=null, username=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:46.665 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:48.725 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.LocalStorageMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_local_storage 
2020-06-15 10:07:48.725 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.LocalStorageMapper.selectPage  : ==> Parameters: 
2020-06-15 10:07:48.730 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:48.730 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:48.729(Timestamp), 查询本地文件(String), INFO(String), site.alanliang.geekblog.controller.admin.LocalStorageController.listTableByPage()(String), { page: 1 limit: 15 localStorageQuery: LocalStorageQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 15(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:48.731 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:52.926 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 10:07:52.926 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 10:07:52.928 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 10:07:52.929 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:07:52.930 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 10:07:52.941 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:07:52.941 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:07:52.94(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 21(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:07:52.943 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:07:56.225 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuConfigMapper.selectById   : ==>  Preparing: SELECT id,access_key,secret_key,bucket,zone,host,type FROM qiniu_config WHERE id=? 
2020-06-15 10:07:56.225 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuConfigMapper.selectById   : ==> Parameters: 1(Long)
2020-06-15 10:07:56.230 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuConfigMapper.selectById   : <==      Total: 1
2020-06-15 10:07:59.029  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:07:59.037  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:07:59.041  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.GeneratedMethodAccessor336.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:07:59.042  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.GeneratedMethodAccessor336.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:07:59.047  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.GeneratedMethodAccessor336.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:07:59.053  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.GeneratedMethodAccessor336.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:07:59.057  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.GeneratedMethodAccessor336.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:07:59.059  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.GeneratedMethodAccessor336.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:07:59.061  WARN 16944 --- [http-nio-8889-exec-10] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue null for parameter type integer

java.lang.NumberFormatException: For input string: ""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Long.parseLong(Long.java:601)
	at java.lang.Long.valueOf(Long.java:803)
	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)
	at sun.reflect.GeneratedMethodAccessor336.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:119)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:79)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4110)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3413)
	at springfox.documentation.spring.web.json.JsonSerializer.toJson(JsonSerializer.java:38)
	at springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(Swagger2Controller.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:08:01.353 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 10:08:01.353 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 10:08:01.355 DEBUG 16944 --- [http-nio-8889-exec-8] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 10:08:01.369 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 10:08:01.370 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 10:08:01.371 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-15 10:08:01.372 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:08:01.375 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 10:08:01.376 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:08:01.376 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:08:01.378 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:08:01.384 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:08:01.385 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:08:01.381(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 19(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:08:01.388 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:08:03.397 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 10:08:03.398 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-15 10:08:03.401 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 10:08:03.406 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:08:03.407 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:08:03.408 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:08:03.590 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 10:08:03.591 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 10:08:03.592 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 5
2020-06-15 10:08:06.931 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-06-15 10:08:06.934 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-06-15 10:08:06.937 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-06-15 10:08:06.938 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:08:06.940 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-06-15 10:08:06.944 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:08:06.944 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:08:06.943(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 17(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:08:06.945 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:08:08.036 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT color FROM t_category GROUP BY color 
2020-06-15 10:08:08.037 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 10:08:08.038 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 10:08:10.021 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectById      : ==>  Preparing: SELECT id,name,introduction,color,display,create_time,update_time FROM t_category WHERE id=? 
2020-06-15 10:08:10.022 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectById      : ==> Parameters: 1(Long)
2020-06-15 10:08:10.023 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectById      : <==      Total: 1
2020-06-15 10:08:11.911 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 10:08:11.912 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 10:08:11.918 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 10:08:11.920 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:08:11.921 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 5
2020-06-15 10:08:11.925 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:08:11.925 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:08:11.925(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 16(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:08:11.926 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:08:12.706 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 10:08:12.707 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 10:08:12.708 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 5
2020-06-15 10:08:14.484 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 10:08:14.485 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 12(Long)
2020-06-15 10:08:14.486 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 10:08:16.761 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_comment 
2020-06-15 10:08:16.763 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 
2020-06-15 10:08:16.771 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:08:16.771 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:08:16.77(Timestamp), 查询评论(String), INFO(String), site.alanliang.geekblog.controller.admin.CommentController.listTableByPage()(String), { page: 1 limit: 15 commentQuery: CommentQuery(startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:08:16.772 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:08:18.151 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectPage       : ==>  Preparing: SELECT COUNT(1) FROM t_message 
2020-06-15 10:08:18.152 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectPage       : ==> Parameters: 
2020-06-15 10:08:18.157 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:08:18.157 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:08:18.156(Timestamp), 查询留言(String), INFO(String), site.alanliang.geekblog.controller.admin.MessageController.listTableByPage()(String), { page: 1 limit: 15 messageQuery: MessageQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:08:18.158 DEBUG 16944 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:08:18.926 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-15 10:08:18.927 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-15 10:08:18.935 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:08:18.936 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:08:18.935(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 14(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:08:18.937 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:08:19.920 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-15 10:08:19.920 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-15 10:08:19.925 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:08:19.925 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:08:19.924(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 15(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:08:19.927 DEBUG 16944 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:23:50.891 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 10:23:50.891 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 10:23:50.891 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 10:23:50.905 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 10:23:50.906 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 10:23:50.908 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable, ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color from t_article ta left join t_category tc on ta.category_id = tc.id LIMIT ?,? 
2020-06-15 10:23:50.908 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:23:50.911 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 10:23:50.912 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:23:50.912 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:23:50.914 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:23:50.921 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:23:50.921 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:23:50.92(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:23:50.923 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:24:43.873 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 10:24:43.874 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 10:24:43.876 DEBUG 16944 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 5
2020-06-15 10:24:49.038 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.LocalStorageMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_local_storage 
2020-06-15 10:24:49.039 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.LocalStorageMapper.selectPage  : ==> Parameters: 
2020-06-15 10:24:49.044 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:24:49.044 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:24:49.043(Timestamp), 查询本地文件(String), INFO(String), site.alanliang.geekblog.controller.admin.LocalStorageController.listTableByPage()(String), { page: 1 limit: 15 localStorageQuery: LocalStorageQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:24:49.046 DEBUG 16944 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:25:52.159 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 10:25:52.160 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 10:25:52.161 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 10:25:52.161 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 10:25:52.162 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 10:25:52.164 DEBUG 16944 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 10:25:52.260  INFO 16944 --- [http-nio-8889-exec-10] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 10:25:54.313 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:25:54.313 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:25:54.311(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:25:54.315 DEBUG 16944 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:25:54.523 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 10:25:54.524 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 10:25:54.527 DEBUG 16944 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 10:25:54.738 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 10:25:54.739 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 10:25:54.740 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:25:54.742 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 10:25:54.742 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 10:25:54.743 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 10:25:54.744 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 10:25:54.745 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 10:25:54.746 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 10:25:54.748 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 10:25:54.748 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 10:25:54.750 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:25:54.755 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 10:25:54.756 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 10:25:54.757 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 10:25:54.760 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 10:25:54.761 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 10:25:54.762 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 10:25:54.764 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 10:25:54.764 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 10:25:54.766 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:25:54.768 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 10:25:54.770 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 10:25:54.772 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:25:54.774 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 10:25:54.774 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 10:25:54.775 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 10:25:54.776 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 10:25:54.777 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 10:25:54.779 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 10:25:54.780 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 10:25:54.781 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 10:25:54.782 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 10:25:54.787 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 10:25:54.788 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 10:25:54.789 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 10:25:54.794 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 10:25:54.795 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 10:25:54.796 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 10:25:54.798 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:25:54.799 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 10:25:54.840 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 10:25:54.840 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:25:54.841 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 10:25:54.913 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 10:25:54.914 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:25:54.915 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:25:54.915 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:25:54.916 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:25:54.917 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 10:07:21.0(Timestamp), 2020-06-15 10:25:54.915(Timestamp)
2020-06-15 10:25:54.920 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:25:54.921 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:25:54.921 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:25:54.923 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:25:54.923 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:25:54.923 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 10:07:21.0(Timestamp), 2020-06-15 10:25:54.923(Timestamp)
2020-06-15 10:25:54.924 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:25:54.926 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:25:54.926 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:25:54.927 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:25:54.927 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:25:54.928 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 10:07:21.0(Timestamp), 2020-06-15 10:25:54.927(Timestamp)
2020-06-15 10:25:54.929 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:25:54.929 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:25:54.930 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:25:54.930 DEBUG 16944 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:25:54.932 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:25:54.932 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 10:07:21.0(Timestamp), 2020-06-15 10:25:54.931(Timestamp)
2020-06-15 10:25:54.934 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:25:54.938 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 10:25:54.938 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 10:25:54.939 DEBUG 16944 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 10:26:06.799 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:26:06.803 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:26:06.797(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:26:06.804 DEBUG 16944 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:28:54.443  INFO 16944 --- [Thread-16] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-15 10:28:54.677  INFO 16944 --- [Thread-16] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-06-15 10:28:55.212  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 16944 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 10:28:55.212 DEBUG 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 10:28:55.212  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 10:28:55.550  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:28:55.550  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 10:28:55.577  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 26ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 10:28:55.578  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:28:55.578  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 10:28:55.588  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 9ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 10:28:55.592  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:28:55.592  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 10:28:55.601  INFO 16944 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 10:28:55.601  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 8ms. Found 0 Redis repository interfaces.
2020-06-15 10:28:55.680  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:28:55.685  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:28:55.685  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@21cdbec5' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:28:55.687  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:28:55.688  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:28:55.690  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$cafc990a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:28:55.816  INFO 16944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 10:28:55.817  INFO 16944 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 10:28:55.817  INFO 16944 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 10:28:55.875  INFO 16944 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 10:28:55.875  INFO 16944 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 661 ms
2020-06-15 10:28:55.952  INFO 16944 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 10:28:55.952  INFO 16944 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 10:28:55.962 DEBUG 16944 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 10:28:55.990  INFO 16944 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 10:28:56.110  INFO 16944 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-06-15 10:28:56.733  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:28:56.733  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:28:56.733  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:28:56.734  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:28:56.747  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:28:56.747  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:28:56.747  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:28:56.747  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:28:56.817  INFO 16944 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 10:28:56.885  WARN 16944 --- [I/O dispatcher 25] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 10:28:57.570  INFO 16944 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 10:28:57.578  INFO 16944 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 10:28:57.641  INFO 16944 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@8956d22, org.springframework.security.web.context.SecurityContextPersistenceFilter@15a00023, org.springframework.security.web.header.HeaderWriterFilter@3877b745, org.springframework.security.web.authentication.logout.LogoutFilter@72a3c15c, site.alanliang.geekblog.security.ValidateCodeFilter@59e2c699, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@63542222, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@54c316db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@518b5e99, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@5295b962, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@742f2c31, org.springframework.security.web.session.SessionManagementFilter@4bbfa2a7, org.springframework.security.web.access.ExceptionTranslationFilter@4a91766a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4936ae17]
2020-06-15 10:28:57.689  INFO 16944 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 10:28:57.969  INFO 16944 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 10:28:57.969  INFO 16944 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 10:28:57.984  INFO 16944 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 10:28:58.046  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 10:28:58.047  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 10:28:58.050  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 10:28:58.051  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 10:28:58.052  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 10:28:58.053  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 10:28:58.054  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 10:28:58.056  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 10:28:58.057  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 10:28:58.078  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 10:28:58.079  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 10:28:58.080  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 10:28:58.088  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 10:28:58.089  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 10:28:58.091  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 10:28:58.092  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 10:28:58.094  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 10:28:58.095  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 10:28:58.096  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 10:28:58.097  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 10:28:58.099  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 10:28:58.100  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 10:28:58.101  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 10:28:58.103  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 10:28:58.105  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 10:28:58.108  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 10:28:58.108  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 10:28:58.109  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 10:28:58.110  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 10:28:58.112  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 10:28:58.113  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 10:28:58.115  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 10:28:58.116  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 10:28:58.119  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 10:28:58.120  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 10:28:58.123  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 10:28:58.123  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 10:28:58.125  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 10:28:58.126  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 10:28:58.127  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 10:28:58.127  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 10:28:58.128  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 10:28:58.129  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 10:28:58.131  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 10:28:58.131  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 10:28:58.133  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 10:28:58.133  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 10:28:58.139  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 10:28:58.141  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 10:28:58.142  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 10:28:58.143  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 10:28:58.145  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 10:28:58.146  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 10:28:58.146  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 10:28:58.147  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 10:28:58.148  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 10:28:58.151  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 10:28:58.153  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 10:28:58.154  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 10:28:58.154  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 10:28:58.154  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 10:28:58.157  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 10:28:58.158  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 10:28:58.159  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 10:28:58.163  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 10:28:58.166  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 10:28:58.167  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 10:28:58.167  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 10:28:58.168  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 10:28:58.169  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 10:28:58.173  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 10:28:58.174  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 10:28:58.176  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 10:28:58.177  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 10:28:58.179  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 10:28:58.187  INFO 16944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 10:28:58.187  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 3.013 seconds (JVM running for 3059.431)
2020-06-15 10:28:58.190  INFO 16944 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-06-15 10:30:08.921  INFO 16944 --- [Thread-31] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-06-15 10:30:08.931  INFO 16944 --- [Thread-31] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} closed
2020-06-15 10:30:09.596  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 16944 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 10:30:09.596 DEBUG 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 10:30:09.596  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 10:30:09.918  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:30:09.918  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 10:30:09.944  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 25ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 10:30:09.945  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:30:09.945  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 10:30:09.954  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 8ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 10:30:09.957  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:30:09.957  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 10:30:09.965  INFO 16944 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 10:30:09.965  INFO 16944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 8ms. Found 0 Redis repository interfaces.
2020-06-15 10:30:10.030  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:10.034  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:10.034  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@499fba3c' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:10.035  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:10.037  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:10.039  INFO 16944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$cafc990a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:10.149  INFO 16944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 10:30:10.149  INFO 16944 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 10:30:10.149  INFO 16944 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 10:30:10.178  INFO 16944 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 10:30:10.178  INFO 16944 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 580 ms
2020-06-15 10:30:10.256  INFO 16944 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 10:30:10.256  INFO 16944 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 10:30:10.262 DEBUG 16944 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 10:30:10.286  INFO 16944 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 10:30:10.392  INFO 16944 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} inited
2020-06-15 10:30:10.889  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:10.889  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:10.889  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:10.889  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:10.897  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:10.897  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:10.897  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:10.897  WARN 16944 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:10.935  INFO 16944 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 10:30:10.968  WARN 16944 --- [I/O dispatcher 41] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 10:30:11.412  INFO 16944 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 10:30:11.419  INFO 16944 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 10:30:11.474  INFO 16944 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@12df8668, org.springframework.security.web.context.SecurityContextPersistenceFilter@1fd7b774, org.springframework.security.web.header.HeaderWriterFilter@15489751, org.springframework.security.web.authentication.logout.LogoutFilter@5f885c21, site.alanliang.geekblog.security.ValidateCodeFilter@3d7875eb, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6c035567, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7c68e9ab, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2dcb0b68, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4b065508, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7acc2ae2, org.springframework.security.web.session.SessionManagementFilter@6f07eb50, org.springframework.security.web.access.ExceptionTranslationFilter@6ed1a1a4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@53577584]
2020-06-15 10:30:11.516  INFO 16944 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 10:30:11.777  INFO 16944 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 10:30:11.778  INFO 16944 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 10:30:11.789  INFO 16944 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 10:30:11.836  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 10:30:11.837  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 10:30:11.839  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 10:30:11.840  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 10:30:11.841  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 10:30:11.841  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 10:30:11.842  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 10:30:11.844  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 10:30:11.844  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 10:30:11.862  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 10:30:11.863  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 10:30:11.865  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 10:30:11.871  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 10:30:11.872  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 10:30:11.874  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 10:30:11.874  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 10:30:11.876  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 10:30:11.877  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 10:30:11.878  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 10:30:11.878  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 10:30:11.880  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 10:30:11.881  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 10:30:11.882  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 10:30:11.884  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 10:30:11.886  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 10:30:11.888  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 10:30:11.889  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 10:30:11.890  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 10:30:11.890  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 10:30:11.892  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 10:30:11.893  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 10:30:11.896  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 10:30:11.897  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 10:30:11.899  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 10:30:11.900  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 10:30:11.902  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 10:30:11.903  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 10:30:11.904  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 10:30:11.905  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 10:30:11.906  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 10:30:11.906  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 10:30:11.907  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 10:30:11.907  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 10:30:11.909  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 10:30:11.910  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 10:30:11.911  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 10:30:11.911  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 10:30:11.917  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 10:30:11.918  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 10:30:11.919  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 10:30:11.921  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 10:30:11.923  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 10:30:11.923  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 10:30:11.924  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 10:30:11.925  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 10:30:11.926  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 10:30:11.929  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 10:30:11.930  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 10:30:11.931  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 10:30:11.932  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 10:30:11.932  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 10:30:11.934  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 10:30:11.935  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 10:30:11.935  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 10:30:11.939  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 10:30:11.941  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 10:30:11.942  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 10:30:11.942  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 10:30:11.943  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 10:30:11.943  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 10:30:11.945  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 10:30:11.946  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 10:30:11.947  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 10:30:11.947  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 10:30:11.949  INFO 16944 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 10:30:11.956  INFO 16944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 10:30:11.957  INFO 16944 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 2.402 seconds (JVM running for 3133.2)
2020-06-15 10:30:11.958  INFO 16944 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-06-15 10:30:47.453  INFO 1272 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 1272 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 10:30:47.456 DEBUG 1272 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 10:30:47.456  INFO 1272 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 10:30:47.501  INFO 1272 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 10:30:47.501  INFO 1272 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 10:30:48.350  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:30:48.352  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 10:30:48.419  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 62ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 10:30:48.422  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:30:48.423  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 10:30:48.434  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 10:30:48.443  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:30:48.445  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 10:30:48.462  INFO 1272 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 10:30:48.462  INFO 1272 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-15 10:30:48.809  INFO 1272 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:48.961  INFO 1272 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:48.964  INFO 1272 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5257137c' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:48.965  INFO 1272 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:48.972  INFO 1272 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:48.984  INFO 1272 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$7d564cf5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:30:49.340  INFO 1272 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 10:30:49.347  INFO 1272 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 10:30:49.348  INFO 1272 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 10:30:49.448  INFO 1272 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 10:30:49.448  INFO 1272 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1947 ms
2020-06-15 10:30:49.575  INFO 1272 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 10:30:49.576  INFO 1272 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 10:30:49.591 DEBUG 1272 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 10:30:49.710  INFO 1272 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 10:30:50.061  INFO 1272 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 10:30:51.435  WARN 1272 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:51.436  WARN 1272 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:51.436  WARN 1272 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:51.437  WARN 1272 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:51.459  WARN 1272 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:51.459  WARN 1272 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:51.459  WARN 1272 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:51.459  WARN 1272 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:30:51.581  INFO 1272 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 10:30:51.799  WARN 1272 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 10:30:52.827  INFO 1272 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 10:30:52.841  INFO 1272 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 10:30:52.994  INFO 1272 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@40a9b44f, org.springframework.security.web.context.SecurityContextPersistenceFilter@4fdd3713, org.springframework.security.web.header.HeaderWriterFilter@4ab1af55, org.springframework.security.web.authentication.logout.LogoutFilter@352748e5, site.alanliang.geekblog.security.ValidateCodeFilter@4a905256, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4d53d369, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3afb19fc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@30ff438f, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@6f517561, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7723018c, org.springframework.security.web.session.SessionManagementFilter@597e99ce, org.springframework.security.web.access.ExceptionTranslationFilter@393a8693, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5d7cac48]
2020-06-15 10:30:53.066  INFO 1272 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 10:30:53.480  INFO 1272 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 10:30:53.497  INFO 1272 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 10:30:53.550  INFO 1272 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 10:30:53.749  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 10:30:53.750  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 10:30:53.753  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 10:30:53.755  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 10:30:53.756  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 10:30:53.757  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 10:30:53.758  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 10:30:53.761  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 10:30:53.763  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 10:30:53.788  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 10:30:53.789  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 10:30:53.792  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 10:30:53.800  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 10:30:53.800  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 10:30:53.803  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 10:30:53.804  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 10:30:53.807  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 10:30:53.808  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 10:30:53.809  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 10:30:53.810  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 10:30:53.812  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 10:30:53.813  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 10:30:53.816  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 10:30:53.817  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 10:30:53.819  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 10:30:53.822  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 10:30:53.823  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 10:30:53.825  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 10:30:53.825  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 10:30:53.828  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 10:30:53.829  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 10:30:53.833  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 10:30:53.834  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 10:30:53.838  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 10:30:53.839  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 10:30:53.841  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 10:30:53.842  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 10:30:53.845  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 10:30:53.846  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 10:30:53.847  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 10:30:53.848  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 10:30:53.849  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 10:30:53.850  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 10:30:53.853  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 10:30:53.854  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 10:30:53.856  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 10:30:53.857  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 10:30:53.863  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 10:30:53.865  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 10:30:53.867  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 10:30:53.868  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 10:30:53.871  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 10:30:53.871  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 10:30:53.872  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 10:30:53.873  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 10:30:53.874  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 10:30:53.877  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 10:30:53.880  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 10:30:53.880  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 10:30:53.881  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 10:30:53.881  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 10:30:53.883  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 10:30:53.884  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 10:30:53.884  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 10:30:53.890  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 10:30:53.893  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 10:30:53.894  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 10:30:53.895  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 10:30:53.896  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 10:30:53.897  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 10:30:53.900  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 10:30:53.901  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 10:30:53.902  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 10:30:53.902  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 10:30:53.905  INFO 1272 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 10:30:53.933  INFO 1272 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 10:30:53.935  INFO 1272 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.239 seconds (JVM running for 8.23)
2020-06-15 10:33:17.370  INFO 1272 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 10:33:17.370  INFO 1272 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 10:33:17.380  INFO 1272 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-06-15 10:33:17.447 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 10:33:17.547 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 10:33:17.560 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 10:33:17.567 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 10:33:17.571 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 10:33:17.581 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 10:33:26.298 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 10:33:26.299 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 10:33:26.301 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 10:33:26.302 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 10:33:26.302 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 10:33:26.309 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 10:33:26.411  INFO 1272 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 10:33:28.565 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:33:28.574 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:33:28.56(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:33:28.578 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:33:28.912  INFO 1272 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 10:33:28.913  INFO 1272 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 10:33:29.358 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 10:33:29.361 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 10:33:29.366 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 10:33:29.643 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 10:33:29.644 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 10:33:29.645 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:29.654 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 10:33:29.656 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 10:33:29.659 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 10:33:29.665 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 10:33:29.666 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 10:33:29.667 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 10:33:29.675 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 10:33:29.676 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 10:33:29.677 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:29.683 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 10:33:29.684 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 10:33:29.685 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 10:33:29.695 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 10:33:29.696 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 10:33:29.697 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:29.704 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 10:33:29.704 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 10:33:29.708 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:33:29.712 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 10:33:29.713 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 10:33:29.714 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:29.717 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 10:33:29.718 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 10:33:29.721 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 10:33:29.725 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 10:33:29.726 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 10:33:29.728 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 10:33:29.731 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 10:33:29.733 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 10:33:29.734 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 10:33:29.742 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 10:33:29.743 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 10:33:29.744 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 10:33:29.748 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 10:33:29.748 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 10:33:29.749 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 10:33:29.761 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:33:29.765 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 10:33:29.798 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 10:33:29.799 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:33:29.800 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 10:33:29.840 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 10:33:29.843 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:33:29.844 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:33:29.845 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:33:29.847 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:33:29.848 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 10:25:54.0(Timestamp), 2020-06-15 10:33:29.845(Timestamp)
2020-06-15 10:33:29.849 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:33:29.850 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:33:29.850 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:33:29.851 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:33:29.853 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:33:29.853 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 10:25:54.0(Timestamp), 2020-06-15 10:33:29.852(Timestamp)
2020-06-15 10:33:29.855 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:29.858 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:33:29.859 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:33:29.860 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:33:29.861 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:33:29.862 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 10:25:54.0(Timestamp), 2020-06-15 10:33:29.86(Timestamp)
2020-06-15 10:33:29.863 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:29.864 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:33:29.864 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:33:29.865 DEBUG 1272 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:33:29.867 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:33:29.867 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 10:25:54.0(Timestamp), 2020-06-15 10:33:29.865(Timestamp)
2020-06-15 10:33:29.868 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:29.876 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 10:33:29.877 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 10:33:29.878 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 10:33:32.999 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 10:33:32.999 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 10:33:33.000 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 10:33:33.080 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 10:33:33.080 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 10:33:33.092 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 10:33:33.094 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:33:33.170 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 10:33:33.185 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:33:33.186 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:33:33.193 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:33:33.202 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:33:33.211 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:33:33.201(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 167(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:33:33.212 DEBUG 1272 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:33:43.711 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:33:43.712 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:33:43.708(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:33:43.713 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:33:44.485 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 10:33:44.486 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 10:33:44.488 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:33:44.492 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 10:33:44.492 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 10:33:44.496 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 10:33:44.499 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 10:33:44.499 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 10:33:44.505 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 10:33:44.517 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:33:44.518 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 10:33:44.539 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:33:44.540 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:33:44.537(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:33:44.542 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:33:44.555 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 10:33:44.556 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:33:44.556 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 10:33:44.604 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 10:33:44.606 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:33:44.606 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:33:44.607 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:33:44.609 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:33:44.609 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 10:33:29.0(Timestamp), 2020-06-15 10:33:44.607(Timestamp)
2020-06-15 10:33:44.610 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:33:44.612 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:33:44.612 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:33:44.613 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:33:44.615 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:33:44.616 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 10:33:29.0(Timestamp), 2020-06-15 10:33:44.613(Timestamp)
2020-06-15 10:33:44.617 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:44.619 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:33:44.620 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:33:44.622 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:33:44.625 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:33:44.626 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 10:33:29.0(Timestamp), 2020-06-15 10:33:44.623(Timestamp)
2020-06-15 10:33:44.627 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:33:44.628 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:33:44.628 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:33:44.629 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:33:44.630 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:33:44.631 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 10:33:29.0(Timestamp), 2020-06-15 10:33:44.629(Timestamp)
2020-06-15 10:33:44.631 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:34:50.598 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:34:50.599 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:34:50.595(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:34:50.601 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:35:55.550 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:35:55.551 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:35:55.548(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:35:55.553 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:36:18.100 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 10:36:18.101 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-15 10:36:18.105 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 10:36:18.115 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:36:18.116 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:36:18.118 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:36:18.263 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 10:36:18.265 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 10:36:18.274 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 5
2020-06-15 10:37:05.521 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 10:37:05.523 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 10:37:05.524 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 10:37:05.526 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:37:05.528 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 10:37:05.533 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:37:05.534 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:37:05.533(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:37:05.539 DEBUG 1272 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:37:07.575 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 10:37:07.575 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 10:37:07.577 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 10:37:07.577 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 10:37:07.580 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 10:37:07.583 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:37:07.584 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:37:07.582(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:37:07.586 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:37:09.559 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 10:37:09.559 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 10:37:09.560 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 10:37:09.561 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 30(Long), 15(Long)
2020-06-15 10:37:09.562 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 10:37:09.565 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:37:09.565 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:37:09.564(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 3 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:37:09.566 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:37:10.963 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 10:37:10.963 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 10:37:10.965 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 10:37:10.965 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 45(Long), 15(Long)
2020-06-15 10:37:10.966 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 1
2020-06-15 10:37:10.969 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:37:10.970 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:37:10.969(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 4 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:37:10.971 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:37:12.464 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:37:12.465 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:37:12.464(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:37:12.465 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:37:16.313 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:37:16.313 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:37:16.312(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:37:16.314 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:37:17.208 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:37:17.208 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:37:17.207(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:37:17.209 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:42:27.169 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, published=?, top=?, recommend=?, category_id=?, type=?, update_time=?, sort=?, status=? WHERE id=? 
2020-06-15 10:42:27.178 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 认识SSM框架和Redis(String), JavaEE互联网轻量级框架整合开发第一章(String), <h2 id="h2-spring-"><a name="Spring框架：应用最广泛的框架" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring框架：应用最广泛的框架</h2><p>成功来自于理念：</p>
<ul>
<li>IoC（Inversion of Control，控制反转）</li><li>AOP（Aspect Oriented Programming，面向切面编程）</li></ul>
<h3 id="h3-spring-ioc"><a name="Spring IoC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring IoC</h3><p>IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。</p>
<p>JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。</p>
<p>Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。</p>
<p>例子：使用插座</p>
<p><img src="http://cdn.alanliang.site/note/使用插座图.jpg" alt="使用插座"></p>
<p>用传统的方式管理对象</p>
<p>现在使用插座1,代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：</p>
<pre><code class="lang-java">Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
</code></pre>
<p>可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。</p>
<p>用Spring IoC容器管理对象</p>
<p>现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket1&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;socket&quot; class=&quot;Socket2&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user&quot; class=&quot;User&quot;&gt;
    &lt;property name=&quot;socket&quot; ref=&quot;socket&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：</p>
<p><img src="http://cdn.alanliang.site/note/Spring的控制反转.png" alt="Spring的控制反转"></p>
<p>图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。</p>
<p>这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。</p>
<h3 id="h3-spring-aop"><a name="Spring AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring AOP</h3><p>订单超预算例子：</p>
<p><img src="http://cdn.alanliang.site/note/订单超预算.png" alt="订单超预算"></p>
<p>实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。</p>
<p>Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：</p>
<pre><code class="lang-java">/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException(&quot;预算超限！！！&quot;);
        }
    }
}
</code></pre>
<p>这里我们完全看不到数据库代码，也没有复杂的try…catch…finally…语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。</p>
<h2 id="h2-mybatis"><a name="MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>MyBatis</h2><p>一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。</p>
<h2 id="h2-hibernate"><a name="Hibernate" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Hibernate</h2><p>完全面向POJO</p>
<p>Hibernate和Mybatis的区别</p>
<ul>
<li><p>Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；</p>
</li><li><p>Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。</p>
</li><li><p>Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等</p>
</li></ul>
<h2 id="h2-spring-mvc"><a name="Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Spring MVC</h2><p>结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。</p>
<h2 id="h2-redis"><a name="Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>Redis</h2><p>最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。</p>
(String), ##Spring框架：应用最广泛的框架

成功来自于理念：

- IoC（Inversion of Control，控制反转）
- AOP（Aspect Oriented Programming，面向切面编程）

###Spring IoC

IoC是一个容器，容器的目标是管理Java Bean和他们之间的关系。

JavaBean之间存在一定的依赖关系，比如班级是依赖学生和老师组成的。

Spring Ioc管理对象及其依赖关系，采用的不是人为的主动创建，而是由Spring IoC自己通过描述创建的，也就是说Spring是依靠描述来完成对象的创建及其依赖关系的。

例子：使用插座

![使用插座](http://cdn.alanliang.site/note/使用插座图.jpg)

用传统的方式管理对象

现在使用插座1,代码如下：

```java
Socket socket = new Socket1();
user.setSocket(socket);
user.userSocket;
```

这样会使接口Socket和实现类Socket1捆绑起来，即发生了耦合。如果想要使用其他插座，就要修改代码。比如现在换成使用插座2，代码如下：

```java
Socket socket = new Socket2();
user.setSocket(socket);
user.userSocket;
```

可以看出，每一次更换插座都需要修改源代码。一个大型的互联网项目中的对象成千上万，修改源代码会使得项目难以维护。

用Spring IoC容器管理对象

现在，我们不用new的方式创建对象了，而是使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。先用一段XML描述插座和用户的引用插座1，代码如下：

```xml
<bean id="socket" class="Socket1"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

当我们想要更换成使用插座2时，只需要修改上面的配置文件，就可以向用户注入插座2，代码如下：

```xml
<bean id="socket" class="Socket2"></bean>
<bean id="user" class="User">
	<property name="socket" ref="socket"></property>
</bean>
```

这个时候Socket接口就可以不依赖于任何插座了，而是通过配置进行切换，如图所示：

![Spring的控制反转](http://cdn.alanliang.site/note/Spring的控制反转.png)

图中的配置信息是“我要插座2”，相当于XML依赖关系配置，这个时候Spring IoC只会拿到插座2，然后通过国家插座标准接口注入给使用者，提供给使用者使用。

这样，你不需要去找资源，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源。

###Spring AOP

订单超预算例子：

![订单超预算](http://cdn.alanliang.site/note/订单超预算.png)

实线是订单提交的流程，需显示订单驳回的流程，影响他们的条件是预算超额，这是一个切面条件。

Spring AOP常用于数据库事务的编程，很多情况像上面的例子一样，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失败，会使用数据库事务回滚功能去回滚事务，使得第一步的数据库操作更新也作废。Spring AOP实现了当Spring接收到了异常信息，就会回滚事务，不需要代码实现。伪代码如下：

```java
/**
* Spring AOP处理订单伪代码
* @param order 订单
**/
private void proceed(Order order){
    //判断生产部门是否通过订单，数据库记录订单
    boolean pflag = productionDept.isPass(order);
    if(pflag){//如果生产部门通过进行财务部门审批
        if(financialDept.isOverBudget(order)){//财务审批是否超限
            throw new RuntimeException("预算超限！！！");
        }
    }
}
```

这里我们完全看不到数据库代码，也没有复杂的try...catch...finally...语句。有了Spring AOP，我们只需要关注业务代码，知道只要发生了异常，Spring会回滚事务就足够了。

##MyBatis

一个基于Java的持久层框架。提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性。

##Hibernate

完全面向POJO

Hibernate和Mybatis的区别

- Hibernate不需要接口和SQL，而Mybatis需要，因此Mybatis的工作量较大；

- Hibernate性能较低，但在管理系统时代发挥巨大作用。而Mybatis性能较高，更适合于当今性能要求高、响应快的互联网时代。

- Mybatis较Hibernate更加灵活，可以自由书写SQL、支持动态SQL、支持存储过程等

##Spring MVC

结构层次清晰，与Spring的IoC和AOP无缝对接，成为了互联网时代的主流框架。

##Redis

最为流行的NoSQL，将常用数据放在内存中，可以大幅度提高互联网系统性能。

(String), http://cdn.alanliang.site/note/oilpainting1.jpg(String), false(Boolean), true(Boolean), true(Boolean), false(Boolean), false(Boolean), 1(Long), 1(Integer), 2020-06-15 10:42:27.165(Timestamp), 1(Integer), 1(Integer), 1(Long)
2020-06-15 10:42:27.180 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 10:42:27.181 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-15 10:42:27.182 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 1(Long)
2020-06-15 10:42:27.183 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 5
2020-06-15 10:42:27.258 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-15 10:42:27.259 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 1(Long), 12(Long), 1(Long), 13(Long), 1(Long), 14(Long), 1(Long), 15(Long), 1(Long), 16(Long)
2020-06-15 10:42:27.261 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 5
2020-06-15 10:42:27.484 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:42:27.484 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:42:27.482(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 316(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:42:27.484 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:42:29.234 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 10:42:29.235 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 10:42:29.236 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 10:42:29.237 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:42:29.244 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 10:42:29.245 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:42:29.245 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:42:29.247 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:42:29.252 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:42:29.252 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:42:29.25(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 17(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:42:29.254 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:42:47.627 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:42:47.628 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:42:47.626(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:42:47.629 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:42:52.678 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 10:42:52.679 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 1(Long)
2020-06-15 10:42:52.680 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 10:42:52.695 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 10:42:52.696 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 1(Long)
2020-06-15 10:42:52.697 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 10:42:52.886 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:42:52.888 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:42:52.886(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=1, status=2) }(String), 0:0:0:0:0:0:0:1(String), 207(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:42:52.888 DEBUG 1272 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:42:52.905 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 10:42:52.905 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 10:42:52.906 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 10:42:52.906 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:42:52.909 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 1
2020-06-15 10:42:52.910 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:42:52.910 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:42:52.912 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:42:52.919 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:42:52.919 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:42:52.918(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 14(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:42:52.921 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:43:20.925 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:43:20.926 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:43:20.921(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:43:20.928 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:43:21.496 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 10:43:21.497 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 10:43:21.498 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:21.501 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 10:43:21.501 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 10:43:21.502 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 10:43:21.505 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 10:43:21.505 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 10:43:21.507 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:43:21.512 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 10:43:21.513 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 10:43:21.515 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 10:43:21.516 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 10:43:21.516 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 10:43:21.518 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 10:43:21.522 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 10:43:21.523 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 10:43:21.527 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 10:43:21.530 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:43:21.531 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 10:43:21.570 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 10:43:21.571 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:43:21.572 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 10:43:21.620 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 10:43:21.620 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:43:21.621 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:43:21.621 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:43:21.622 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:43:21.623 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 10:33:44.0(Timestamp), 2020-06-15 10:43:21.622(Timestamp)
2020-06-15 10:43:21.623 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:43:21.624 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:43:21.624 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:43:21.625 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:43:21.627 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:43:21.628 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 10:33:44.0(Timestamp), 2020-06-15 10:43:21.625(Timestamp)
2020-06-15 10:43:21.629 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:21.630 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:43:21.630 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:43:21.631 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:43:21.632 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:43:21.633 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 10:33:44.0(Timestamp), 2020-06-15 10:43:21.631(Timestamp)
2020-06-15 10:43:21.633 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:21.634 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:43:21.634 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:43:21.635 DEBUG 1272 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:43:21.635 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:43:21.636 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 10:33:44.0(Timestamp), 2020-06-15 10:43:21.635(Timestamp)
2020-06-15 10:43:21.637 DEBUG 1272 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:49.425 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 10:43:49.426 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 10:43:49.427 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 10:43:49.428 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 10:43:49.429 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 10:43:49.432 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 10:43:49.525  INFO 1272 --- [http-nio-8889-exec-1] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 10:43:51.561 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:43:51.562 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:43:51.56(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:43:51.563 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:43:51.725 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 10:43:51.725 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 3(Long)
2020-06-15 10:43:51.727 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 11
2020-06-15 10:43:51.938 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 10:43:51.939 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 10:43:51.940 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 10:43:51.942 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 10:43:51.942 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 10:43:51.943 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:51.945 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 10:43:51.946 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 10:43:51.947 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 10:43:51.951 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 10:43:51.953 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 10:43:51.954 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:51.956 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 10:43:51.956 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 10:43:51.957 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:43:51.959 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 10:43:51.960 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 10:43:51.961 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:51.963 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 10:43:51.963 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 10:43:51.965 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 10:43:51.966 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 10:43:51.967 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 10:43:51.970 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 10:43:51.972 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 10:43:51.973 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 10:43:51.974 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 10:43:51.977 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 10:43:51.977 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 10:43:51.979 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 10:43:51.981 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:43:51.982 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 10:43:52.024 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 10:43:52.025 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:43:52.025 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 10:43:52.067 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 10:43:52.069 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:43:52.069 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 10:43:52.071 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:43:52.072 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:43:52.073 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-14 19:46:40.0(Timestamp), 2020-06-15 10:43:52.071(Timestamp)
2020-06-15 10:43:52.074 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:43:52.074 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:43:52.074 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 10:43:52.080 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:43:52.081 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:43:52.082 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-14 19:46:40.0(Timestamp), 2020-06-15 10:43:52.08(Timestamp)
2020-06-15 10:43:52.083 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:52.083 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:43:52.083 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 10:43:52.084 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:43:52.087 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:43:52.088 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-14 19:46:40.0(Timestamp), 2020-06-15 10:43:52.086(Timestamp)
2020-06-15 10:43:52.088 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:52.089 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:43:52.089 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 10:43:52.090 DEBUG 1272 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:43:52.091 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:43:52.092 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-14 19:46:40.0(Timestamp), 2020-06-15 10:43:52.09(Timestamp)
2020-06-15 10:43:52.093 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:43:52.095 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 10:43:52.095 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 10:43:52.096 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 10:44:02.533 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 10:44:02.533 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 10:44:02.534 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 10:44:02.535 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 10:44:02.538 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 10:44:02.538 DEBUG 1272 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 5
2020-06-15 10:44:09.467 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:44:09.469 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:44:09.464(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:44:09.471 DEBUG 1272 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:44:13.147 DEBUG 1272 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 10:44:13.148 DEBUG 1272 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 1(Long)
2020-06-15 10:44:13.150 DEBUG 1272 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 10:44:13.153 DEBUG 1272 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:44:13.154 DEBUG 1272 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:44:13.155 DEBUG 1272 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:44:24.386 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:44:24.387 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:44:24.385(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:44:24.389 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:44:27.080 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:44:27.081 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:44:27.08(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 3 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:44:27.082 DEBUG 1272 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:44:27.803 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:44:27.804 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:44:27.803(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:44:27.805 DEBUG 1272 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:45:54.680 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 10:45:54.681 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: 设计模式(String), #D5F5E3(String), 2020-06-15 10:45:54.679(Timestamp), 2020-06-15 10:45:54.679(Timestamp)
2020-06-15 10:45:54.681 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 10:45:54.682 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 10:45:54.682 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: 反射技术(String), #D5F5E3(String), 2020-06-15 10:45:54.682(Timestamp), 2020-06-15 10:45:54.682(Timestamp)
2020-06-15 10:45:54.683 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 10:45:54.689 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:45:54.692 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第二章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://cdn.alanliang.site/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://cdn.alanliang.site/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://cdn.alanliang.site/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://cdn.alanliang.site/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://cdn.alanliang.site/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://cdn.alanliang.site/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://cdn.alanliang.site/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://cdn.alanliang.site/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://cdn.alanliang.site/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://cdn.alanliang.site/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://cdn.alanliang.site/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://cdn.alanliang.site/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 3(Long), 1(Long), 1(Integer), 2020-06-15 10:45:54.678(Timestamp), 2020-06-15 10:45:54.678(Timestamp), 5(Integer), 1(Integer)
2020-06-15 10:45:54.698 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 10:45:54.699 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 10:45:54.699 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 12(Long), 2(Long), 17(Long), 2(Long), 18(Long)
2020-06-15 10:45:54.700 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 10:45:55.057 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:45:55.058 DEBUG 1272 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:45:55.056(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: Article(id=2, title=Java设计模式, summary=JavaEE互联网轻量级框架整合开发第二章, content=<h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://cdn.alanliang.site/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://cdn.alanliang.site/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://cdn.alanliang.site/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://cdn.alanliang.site/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://cdn.alanliang.site/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://cdn.alanliang.site/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
, textContent=##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://cdn.alanliang.site/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://cdn.alanliang.site/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://cdn.alanliang.site/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://cdn.alanliang.site/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://cdn.alanliang.site/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://cdn.alanliang.site/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》, cover=http://cdn.alanliang.site/note/oilpainting2.jpg, views=0, likes=0, comments=0, appreciable=false, commentable=true, published=true, top=true, recommend=false, authorId=3, categoryId=1, type=1, createTime=Mon Jun 15 10:45:54 CST 2020, updateTime=Mon Jun 15 10:45:54 CST 2020, sort=5, status=1, category=null, tagList=[Tag(id=12, name=JavaEE, color=null, createTime=null, updateTime=null, articleCount=null), Tag(id=17, name=设计模式, color=#D5F5E3, createTime=Mon Jun 15 10:45:54 CST 2020, updateTime=Mon Jun 15 10:45:54 CST 2020, articleCount=null), Tag(id=18, name=反射技术, color=#D5F5E3, createTime=Mon Jun 15 10:45:54 CST 2020, updateTime=Mon Jun 15 10:45:54 CST 2020, articleCount=null)], author=null) }(String), 0:0:0:0:0:0:0:1(String), 374(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:45:55.069 ERROR 1272 --- [http-nio-8889-exec-4] druid.sql.Statement                      : {conn-10001, pstmt-20074} execute error. INSERT INTO sys_operation_log  ( create_time,
description,

log_type,
method,
params,
request_ip,
time,
username,
browser,
address,
status )  VALUES  ( ?,
?,

?,
?,
?,
?,
?,
?,
?,
?,
? )

com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'params' at row 1
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3971)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.GeneratedMethodAccessor206.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy248.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.GeneratedMethodAccessor317.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy246.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.GeneratedMethodAccessor320.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy125.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:60)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy128.insert(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor324.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy129.insert(Unknown Source)
	at site.alanliang.geekblog.service.impl.OperationLogServiceImpl.save(OperationLogServiceImpl.java:80)
	at site.alanliang.geekblog.service.impl.OperationLogServiceImpl$$FastClassBySpringCGLIB$$db1dde9b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.service.impl.OperationLogServiceImpl$$EnhancerBySpringCGLIB$$5031d404.save(<generated>)
	at site.alanliang.geekblog.aspect.OperationLogAspect.logAround(OperationLogAspect.java:62)
	at sun.reflect.GeneratedMethodAccessor322.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.ArticleController$$EnhancerBySpringCGLIB$$54ac0594.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:45:55.125 ERROR 1272 --- [http-nio-8889-exec-4] s.a.g.e.handler.GlobalExceptionHandler   : java.lang.NullPointerException
	at site.alanliang.geekblog.aspect.OperationLogAspect.logAfterThrowing(OperationLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:66)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.ArticleController$$EnhancerBySpringCGLIB$$54ac0594.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 10:45:55.133  WARN 1272 --- [http-nio-8889-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-06-15 10:49:36.805  INFO 16004 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 16004 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 10:49:36.808 DEBUG 16004 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 10:49:36.808  INFO 16004 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 10:49:36.863  INFO 16004 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 10:49:36.863  INFO 16004 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 10:49:37.803  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:49:37.804  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 10:49:37.873  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 65ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 10:49:37.877  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:49:37.878  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 10:49:37.890  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 10:49:37.903  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 10:49:37.904  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 10:49:37.923  INFO 16004 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 10:49:37.923  INFO 16004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 Redis repository interfaces.
2020-06-15 10:49:38.266  INFO 16004 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:49:38.420  INFO 16004 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:49:38.423  INFO 16004 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@22c38c07' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:49:38.424  INFO 16004 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:49:38.430  INFO 16004 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:49:38.443  INFO 16004 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$ef2a05d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 10:49:38.842  INFO 16004 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 10:49:38.851  INFO 16004 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 10:49:38.851  INFO 16004 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 10:49:38.963  INFO 16004 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 10:49:38.964  INFO 16004 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2101 ms
2020-06-15 10:49:39.118  INFO 16004 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 10:49:39.119  INFO 16004 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 10:49:39.133 DEBUG 16004 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 10:49:39.245  INFO 16004 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 10:49:39.613  INFO 16004 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 10:49:41.111  WARN 16004 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:49:41.111  WARN 16004 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:49:41.112  WARN 16004 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:49:41.112  WARN 16004 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:49:41.137  WARN 16004 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:49:41.137  WARN 16004 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:49:41.137  WARN 16004 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:49:41.137  WARN 16004 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 10:49:41.281  INFO 16004 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 10:49:41.505  WARN 16004 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 10:49:42.697  INFO 16004 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 10:49:42.713  INFO 16004 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 10:49:42.862  INFO 16004 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@79a35dc3, org.springframework.security.web.context.SecurityContextPersistenceFilter@20ea662c, org.springframework.security.web.header.HeaderWriterFilter@1040fc1f, org.springframework.security.web.authentication.logout.LogoutFilter@29191c1, site.alanliang.geekblog.security.ValidateCodeFilter@3f2df444, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7a6ea401, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@75af74fa, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@53321fd0, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@362a1474, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5ecc8621, org.springframework.security.web.session.SessionManagementFilter@5647ccf, org.springframework.security.web.access.ExceptionTranslationFilter@3a58da2e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@46b36f2f]
2020-06-15 10:49:42.963  INFO 16004 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 10:49:43.429  INFO 16004 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 10:49:43.451  INFO 16004 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 10:49:43.512  INFO 16004 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 10:49:43.734  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 10:49:43.735  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 10:49:43.740  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 10:49:43.741  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 10:49:43.742  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 10:49:43.744  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 10:49:43.744  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 10:49:43.747  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 10:49:43.749  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 10:49:43.776  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 10:49:43.778  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 10:49:43.781  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 10:49:43.789  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 10:49:43.790  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 10:49:43.793  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 10:49:43.793  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 10:49:43.796  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 10:49:43.797  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 10:49:43.800  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 10:49:43.802  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 10:49:43.804  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 10:49:43.805  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 10:49:43.807  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 10:49:43.809  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 10:49:43.811  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 10:49:43.815  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 10:49:43.816  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 10:49:43.818  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 10:49:43.819  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 10:49:43.821  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 10:49:43.822  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 10:49:43.826  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 10:49:43.827  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 10:49:43.831  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 10:49:43.833  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 10:49:43.836  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 10:49:43.836  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 10:49:43.839  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 10:49:43.839  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 10:49:43.841  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 10:49:43.842  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 10:49:43.843  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 10:49:43.844  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 10:49:43.847  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 10:49:43.848  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 10:49:43.851  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 10:49:43.852  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 10:49:43.859  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 10:49:43.861  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 10:49:43.863  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 10:49:43.866  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 10:49:43.869  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 10:49:43.870  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 10:49:43.870  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 10:49:43.871  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 10:49:43.872  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 10:49:43.875  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 10:49:43.877  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 10:49:43.878  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 10:49:43.878  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 10:49:43.879  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 10:49:43.882  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 10:49:43.884  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 10:49:43.885  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 10:49:43.889  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 10:49:43.892  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 10:49:43.893  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 10:49:43.894  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 10:49:43.895  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 10:49:43.896  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 10:49:43.901  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 10:49:43.902  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 10:49:43.903  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 10:49:43.904  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 10:49:43.906  INFO 16004 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 10:49:43.936  INFO 16004 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 10:49:43.938  INFO 16004 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 8.106 seconds (JVM running for 9.195)
2020-06-15 10:50:04.435  INFO 16004 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 10:50:04.436  INFO 16004 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 10:50:04.446  INFO 16004 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-06-15 10:50:04.519 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 10:50:04.634 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 10:50:04.654 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 10:50:04.668 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 10:50:04.672 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 10:50:04.681 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 10:50:16.750 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 10:50:16.750 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 10:50:16.753 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 10:50:16.754 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 10:50:16.754 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 10:50:16.762 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 10:50:16.864  INFO 16004 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 10:50:19.011 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:50:19.020 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:50:19.005(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:50:19.023 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:50:19.325  INFO 16004 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 10:50:19.326  INFO 16004 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 10:50:20.017 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 10:50:20.020 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 10:50:20.022 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:50:20.044 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 10:50:20.045 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 10:50:20.046 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:50:20.052 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 10:50:20.056 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 10:50:20.059 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 10:50:20.061 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 10:50:20.062 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 10:50:20.064 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 10:50:20.069 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 10:50:20.070 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 10:50:20.072 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-15 10:50:20.082 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:50:20.086 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 10:50:20.124 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 10:50:20.126 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:50:20.127 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 10:50:20.167 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 10:50:20.168 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:50:20.169 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 10:50:20.170 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:50:20.173 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:50:20.175 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 10:43:52.0(Timestamp), 2020-06-15 10:50:20.17(Timestamp)
2020-06-15 10:50:20.176 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:50:20.177 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:50:20.178 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 10:50:20.179 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:50:20.180 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:50:20.181 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 10:43:52.0(Timestamp), 2020-06-15 10:50:20.179(Timestamp)
2020-06-15 10:50:20.182 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:50:20.185 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:50:20.185 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 10:50:20.187 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:50:20.193 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:50:20.195 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 10:43:52.0(Timestamp), 2020-06-15 10:50:20.192(Timestamp)
2020-06-15 10:50:20.196 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:50:20.199 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:50:20.199 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 10:50:20.200 DEBUG 16004 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:50:20.201 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:50:20.202 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 10:43:52.0(Timestamp), 2020-06-15 10:50:20.2(Timestamp)
2020-06-15 10:50:20.203 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:50:27.084 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 10:50:27.085 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 10:50:27.097 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 10:50:27.098 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:50:27.101 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 10:50:27.115 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:50:27.117 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:50:27.114(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 59(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:50:27.119 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:50:31.728 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 10:50:31.730 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 10:50:31.731 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 10:50:31.734 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:50:31.797 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 2
2020-06-15 10:50:31.809 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:50:31.810 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:50:31.812 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:50:31.817 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:50:31.817 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 10:50:31.819 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 10:50:31.827 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:50:31.827 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:50:31.826(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 114(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:50:31.829 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:50:43.839 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 10:50:43.841 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-15 10:50:43.846 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 10:50:43.861 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:50:43.861 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 10:50:43.863 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 10:50:52.107 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 10:50:52.109 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 10:50:52.112 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 10:50:52.114 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 10:50:52.115 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 10:50:52.120 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 10:51:04.437 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 10:51:04.438 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 10:51:04.439 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 10:51:04.441 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 10:51:04.441 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 10:51:04.446 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 10:51:04.547  INFO 16004 --- [http-nio-8889-exec-3] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 10:51:06.592 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:51:06.594 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:51:06.59(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:51:06.600 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:51:06.804 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 10:51:06.805 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 10:51:06.809 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 10:51:07.041 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 10:51:07.041 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 10:51:07.043 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:51:07.048 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 10:51:07.048 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 10:51:07.051 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 10:51:07.053 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 10:51:07.053 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 10:51:07.056 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 10:51:07.072 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:51:07.072 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 10:51:07.116 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 5
2020-06-15 10:51:07.117 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 10:51:07.117 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 10:51:07.167 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 10:51:07.168 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:51:07.168 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:51:07.168 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:51:07.170 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:51:07.170 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 10:43:21.0(Timestamp), 2020-06-15 10:51:07.169(Timestamp)
2020-06-15 10:51:07.171 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 10:51:07.172 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:51:07.172 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:51:07.173 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:51:07.174 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:51:07.175 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 10:43:21.0(Timestamp), 2020-06-15 10:51:07.173(Timestamp)
2020-06-15 10:51:07.177 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 10:51:07.180 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:51:07.180 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:51:07.181 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:51:07.182 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:51:07.183 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 10:43:21.0(Timestamp), 2020-06-15 10:51:07.181(Timestamp)
2020-06-15 10:51:07.184 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 10:51:07.184 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 10:51:07.184 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 10:51:07.185 DEBUG 16004 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 10:51:07.186 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 10:51:07.187 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 10:43:21.0(Timestamp), 2020-06-15 10:51:07.185(Timestamp)
2020-06-15 10:51:07.187 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 10:51:12.980 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:51:12.981 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:51:12.977(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:51:12.984 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:51:24.449 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 10:51:24.450 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 10:51:24.453 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 10:51:24.453 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:51:24.458 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 7
2020-06-15 10:51:24.465 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:51:24.465 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:51:24.464(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 25(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:51:24.467 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:51:41.114 DEBUG 16004 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:51:41.115 DEBUG 16004 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:51:41.113(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:51:41.116 DEBUG 16004 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:51:45.786 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 10:51:45.787 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 17(Long)
2020-06-15 10:51:45.788 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 10:51:45.995 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 10:51:45.996 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 10:51:45.997 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 5
2020-06-15 10:51:50.321 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 10:51:50.321 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 设计模式(String)
2020-06-15 10:51:50.322 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 10:51:50.324 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 10:51:50.328 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: 设计模式(String), #F9E79F(String), 2020-06-15 10:51:50.319(Timestamp), 17(Long)
2020-06-15 10:51:50.335 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 10:51:50.342 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:51:50.343 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:51:50.342(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: Tag(id=17, name=设计模式, color=#F9E79F, createTime=null, updateTime=Mon Jun 15 10:51:50 CST 2020, articleCount=null) }(String), 0:0:0:0:0:0:0:1(String), 21(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:51:50.344 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:51:51.993 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 10:51:51.994 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 10:51:51.995 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 10:51:51.996 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:51:51.998 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 7
2020-06-15 10:51:52.003 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:51:52.004 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:51:52.003(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:51:52.008 DEBUG 16004 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:52:02.453 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 10:52:02.453 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 18(Long)
2020-06-15 10:52:02.455 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 10:52:02.528 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 10:52:02.528 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 10:52:02.529 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 6
2020-06-15 10:52:05.891 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 10:52:05.891 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 反射技术(String)
2020-06-15 10:52:05.892 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 10:52:05.893 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 10:52:05.893 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: 反射技术(String), #F8C471(String), 2020-06-15 10:52:05.89(Timestamp), 18(Long)
2020-06-15 10:52:05.894 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 10:52:05.900 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:52:05.900 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:52:05.899(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: Tag(id=18, name=反射技术, color=#F8C471, createTime=null, updateTime=Mon Jun 15 10:52:05 CST 2020, articleCount=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:52:05.902 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:52:07.549 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 10:52:07.550 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 10:52:07.552 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 10:52:07.552 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:52:07.554 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 7
2020-06-15 10:52:07.559 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:52:07.560 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:52:07.559(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 12(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:52:07.561 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:52:16.858 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:52:16.858 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:52:16.857(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:52:16.861 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:52:34.747 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 10:52:34.749 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 10:52:34.751 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 0
2020-06-15 10:52:34.755 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 10:52:34.757 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 10:52:34.759 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 10:52:34.769 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 10:52:34.770 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 10:52:34.771 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 10:52:34.773 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 10:52:34.779 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 1
2020-06-15 10:52:34.781 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:52:34.782 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:52:34.785 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:52:34.795 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:52:34.797 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 10:52:34.793(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 46(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:52:34.799 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 10:53:20.739 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 10:53:20.739 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 10:53:20.741 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 7
2020-06-15 10:53:37.295 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 10:53:37.299 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 2(Long)
2020-06-15 10:53:37.302 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 10:53:37.393 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 10:53:37.394 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 2(Long)
2020-06-15 10:53:37.397 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 10:53:37.701 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:53:37.702 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:53:37.699(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=2, status=2) }(String), 0:0:0:0:0:0:0:1(String), 411(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:53:37.704 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:53:37.726 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 10:53:37.726 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 10:53:37.728 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 10:53:37.729 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 10:53:37.740 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 2
2020-06-15 10:53:37.742 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:53:37.742 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:53:37.744 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:53:37.746 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:53:37.746 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 10:53:37.748 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 10:53:37.755 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:53:37.755 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 10:53:37.753(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 28(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:53:37.762 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 10:53:46.757 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 10:53:46.757 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 10:53:46.759 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 10:53:46.763 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 10:53:46.763 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 10:53:46.764 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 10:53:46.772 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 10:53:46.773 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 10:53:46.775 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 10:53:46.775 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 10:53:46.780 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 2
2020-06-15 10:53:46.782 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:53:46.782 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 10:53:46.783 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 10:53:46.784 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 10:53:46.784 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 10:53:46.785 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 10:53:46.791 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 10:53:46.791 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 10:53:46.79(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 34(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 10:53:46.793 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:02:11.617 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 11:02:11.617 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 11:02:11.619 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 11:02:11.619 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 11:02:11.623 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 11:02:11.631 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:02:11.631 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:02:11.629(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 12(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:02:11.633 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:02:51.665 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 11:02:51.666 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters:  MyBatis核心组件(String), #D5F5E3(String), 2020-06-15 11:02:51.664(Timestamp), 2020-06-15 11:02:51.664(Timestamp)
2020-06-15 11:02:51.667 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 11:02:51.670 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:02:51.674 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 认识Mybatis核心组件(String), JavaEE互联网轻量级框架整合开发第三章(String), <h2 id="h2-1-mybatis-"><a name="1    持久层的概念和MyBatis的特点" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    持久层的概念和MyBatis的特点</h2><p>持久层可以将业务数据存储到磁盘，具有长期存储能力。</p>
<p>Mybatis成功的原因：</p>
<ul>
<li>不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</li><li>提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</li><li>提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</li></ul>
<h2 id="h2-2-mybatis-"><a name="2    MyBatis的核心组件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    MyBatis的核心组件</h2><p>Mybatis的核心组件分为4个部分：</p>
<ul>
<li><code>SqlSessionFactoryBuilder</code>（构造器）:它会根据配置或者代码来生成<code>SqlSessionFactory</code>，采用的是分步构建的建造者模式。</li><li><code>SqlSessionFactory</code>（工厂接口）：依靠它来生成<code>SqlSession</code>，使用的是工厂模式。</li><li><code>SqlSession</code>（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</li><li><code>SQL Mapper</code>（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</li></ul>
<p>MyBatis核心组件如图1所示:</p>
<p><img src="http://cdn.alanliang.site/note/Mybatis核心组件.jpg" alt="Mybatis核心组件"></p>
<p>&lt;center&gt;图1 MyBatis核心组件&lt;/center&gt;

</p>
<h2 id="h2-3-code-sqlsessionfactory-code-"><a name="3    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    <code>SqlSessionFactory</code></h2><p>为了生成<code>SqlSessionFactory</code>，MyBatis提供了构造器<code>SqlSessionFactoryBuilder</code>，它提供了一个类<code>Configuration</code>作为引导类，采用了<code>builder</code>模式，具体的分步则是在<code>Configuration</code>类中完成。</p>
<p>当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过<code>Configuration</code>类对象构建整个MyBatis的上下文。<code>SqlSessionFactory</code>是一个接口，有两个实现类，一般由<code>DefaultSqlSessionFactory</code>去实现，它们之间的关系如图2所示：</p>
<p><img src="http://cdn.alanliang.site/note/SqlSessionFactory的生成.jpg" alt="SqlSessionFactory的生成"></p>
<p>&lt;center&gt;图1 SqlSessionFactory与其实现类&lt;/center&gt;

</p>
<h4 id="h4-3-1-xml-code-sqlsessionfactory-code-"><a name="3.1    使用XML构建<code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1    使用XML构建<code>SqlSessionFactory</code></h4><p>在MyBatis中的XML分为两类：</p>
<ul>
<li>一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</li><li>一类是映射文件，用来配置映射关系、SQL、参数等信息</li></ul>
<p>创建一份简易的基础配置文件，我们把它命名为<code>mybatis-config.xml</code>，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn/&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>生成<code>SqlSessionFactory</code>，代码如下：</p>
<pre><code class="lang-java">public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = &quot;mybatis-config.xml&quot;;

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<h2 id="h2-4-code-sqlsession-code-"><a name="4    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    <code>SqlSession</code></h2><p>在MyBatis中，<code>SqlSession</code>是其核心接口，作用类似于<code>JDBC</code>中的<code>Connnection</code>对象，代表一个连接资源的启用。</p>
<p>具体而言，它的作用有3个：</p>
<ul>
<li>获取Mapper接口。</li><li>发送SQL给数据库。</li><li>控制数据库事务。</li></ul>
<p>创建方法如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = SqlSessionFactory.openSession();
</code></pre>
<p><code>SqlSession</code>控制数据库事务的方法，代码如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
</code></pre>
<h2 id="h2-5-"><a name="5    映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    映射器</h2><p>映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</p>
<ul>
<li>描述映射规则</li><li>提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</li><li>配置缓存</li><li>提供动态SQL</li></ul>
<p>映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</p>
<h3 id="h3-5-1-xml-"><a name="5.1    用XML实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    用XML实现映射器</h3><p>定义接口，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>mapper中namespace的值对应于所映射接口的全限定名</li><li>select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</li><li>#{id}表示传递进去的参数</li></ul>
<p>MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</p>
<h3 id="h3-5-2-"><a name="5.2    用注解实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2    用注解实现映射器</h3><pre><code class="lang-java">public interface RoleMapper2 {
    @Select(&quot;select id, role_name as roleName, note from t_role where id = #{id}&quot;)
    public Role getRole(Long id);
}
</code></pre>
<h3 id="h3-5-3-xml-"><a name="5.3    对比XML方式和注解方式实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3    对比XML方式和注解方式实现映射器</h3><p>注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</p>
<p>这个接口也可以在XML中定义，例如只需将<code>mybatis-config.xml</code>中配置XML语句：</p>
<pre><code class="lang-xml">  &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
</code></pre>
<p>修改成下面的形式即可：</p>
<pre><code class="lang-xml">&lt;mapper class=&quot;com.ssm.learn.chapter3.mapper.RoleMapper2&quot;/&gt;
</code></pre>
<p>也可以使用<code>configuration</code>对象注册这个接口，比如：</p>
<pre><code class="lang-java">configuration.addMapper(RoleMapper2.class)；
</code></pre>
<h3 id="h3-5-4-code-sqlsession-code-sql"><a name="5.4    <code>SqlSession</code>发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4    <code>SqlSession</code>发送SQL</h3><pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;com.ssm.learn.chapter3.mapper.RoleMapper.getRole&quot;, 1L);
</code></pre>
<p><code>selectOne</code>方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为<code>getRole</code>的SQL，则可以简写为：</p>
<pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;getRole&quot;, 1L);
</code></pre>
<h3 id="h3-5-5-code-mapper-code-sql"><a name="5.5    用<code>Mapper</code>接口发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.5    用<code>Mapper</code>接口发送SQL</h3><p><code>SqlSession</code>还可以获取<code>Mapper</code>接口，通过<code>Mapper</code>接口发送SQL，代码如下：</p>
<pre><code class="lang-java">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
</code></pre>
<p>因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</p>
<h3 id="h3-5-6-sql-"><a name="5.6    对比两种发送SQL的方式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.6    对比两种发送SQL的方式</h3><ul>
<li><p>使用<code>SqlSession</code>直接发送</p>
</li><li><p><code>SqlSession</code>获取<code>Mapper</code>接口，再通过<code>Mapper</code>发送</p>
</li></ul>
<p>使用<code>Mapper</code>接口编程可以消除<code>SqlSession</code>带来的功能性代码，提高可读性。<code>SqlSession</code>需要<code>SQLid</code>，晦涩难懂，而<code>Mapper</code>更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用<code>Mapper</code>接口编程。</p>
<h2 id="h2-6-"><a name="6    生命周期" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    生命周期</h2><p>所谓生命周期就是每一个对象应该存活的时间。</p>
<h3 id="h3-6-1-code-sqlsessionfactorybuilder-code-"><a name="6.1    <code>SqlSessionFactoryBuilder</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    <code>SqlSessionFactoryBuilder</code></h3><p>其作用在于创建<code>SqlSessionFactory</code>，创建成功后就失去作用，所以它只能存在于创建<code>SqlSessionFactory</code>的方法中，而不能让其长期存在。</p>
<h3 id="h3-6-2-code-sqlsessionfactory-code-"><a name="6.2    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    <code>SqlSessionFactory</code></h3><p>可以被认为是数据库连接池，其作用是创建<code>SqlSession</code>接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个<code>SqlSessionFactory</code>可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</p>
<h3 id="h3-6-3-code-sqlsession-code-"><a name="6.3    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.3    <code>SqlSession</code></h3><p>相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至<code>SqlSessionFactory</code>，否则可能会导致数据库资源耗尽。</p>
<h3 id="h3-6-4-code-mapper-code-"><a name="6.4    <code>Mapper</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.4    <code>Mapper</code></h3><p>它由<code>SqlSession</code>创建，所以它的生命周期至多和<code>SqlSession</code>保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</p>
<h2 id="h2-7-"><a name="7    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    实例</h2><p>项目结构如图：</p>
<p><img src="http://cdn.alanliang.site/note/项目结构.png" alt="项目结构"></p>
<p><code>log4j.properties</code>文件，代码如下：</p>
<pre><code class="lang-properties">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
</code></pre>
<p><code>Role</code>类，代码如下：</p>
<pre><code class="lang-java">public class Role {
    private Long id;
    private String roleName;
    private String note;

    public Role() {}
    /*setter and getter*/
}
</code></pre>
<p><code>RoleMapper</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}
</code></pre>
<p><code>RoleMapper.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultType=&quot;role&quot;&gt;
        select id,role_name as roleName,note from t_role where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p><code>SqlSessionFactoryUtils</code>工具类，代码如下：</p>
<pre><code class="lang-java">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = &quot;mybatis-config.xml&quot;;
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
</code></pre>
<p>其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入<code>synchronized</code>关键字加锁，主要是防止在多线程中多次实例化<code>SqlSessionFactory</code>对象，保证唯一性。</p>
<p><code>mybatis-config.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!--type=&quot;POOLED&quot;表示采用MyBatis内部连接池--&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p><code>Chapter3Main</code>类，代码如下：</p>
<pre><code class="lang-java">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), 

##1	持久层的概念和MyBatis的特点

持久层可以将业务数据存储到磁盘，具有长期存储能力。

Mybatis成功的原因：

- 不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；
- 提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；
- 提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。

##2    MyBatis的核心组件

Mybatis的核心组件分为4个部分：

- `SqlSessionFactoryBuilder`（构造器）:它会根据配置或者代码来生成`SqlSessionFactory`，采用的是分步构建的建造者模式。
- `SqlSessionFactory`（工厂接口）：依靠它来生成`SqlSession`，使用的是工厂模式。
- `SqlSession`（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。
- `SQL Mapper`（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。

MyBatis核心组件如图1所示:

![Mybatis核心组件](http://cdn.alanliang.site/note/Mybatis核心组件.jpg)

<center>图1 MyBatis核心组件</center>

##3	`SqlSessionFactory`

为了生成`SqlSessionFactory`，MyBatis提供了构造器`SqlSessionFactoryBuilder`，它提供了一个类`Configuration`作为引导类，采用了`builder`模式，具体的分步则是在`Configuration`类中完成。

当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过`Configuration`类对象构建整个MyBatis的上下文。`SqlSessionFactory`是一个接口，有两个实现类，一般由`DefaultSqlSessionFactory`去实现，它们之间的关系如图2所示：

![SqlSessionFactory的生成](http://cdn.alanliang.site/note/SqlSessionFactory的生成.jpg)

<center>图1 SqlSessionFactory与其实现类</center>

####3.1	使用XML构建`SqlSessionFactory`

在MyBatis中的XML分为两类：

- 一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境
- 一类是映射文件，用来配置映射关系、SQL、参数等信息

创建一份简易的基础配置文件，我们把它命名为`mybatis-config.xml`，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn/"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

生成`SqlSessionFactory`，代码如下：

```java
public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = "mybatis-config.xml";

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

##4	`SqlSession`

在MyBatis中，`SqlSession`是其核心接口，作用类似于`JDBC`中的`Connnection`对象，代表一个连接资源的启用。

具体而言，它的作用有3个：

- 获取Mapper接口。
- 发送SQL给数据库。
- 控制数据库事务。

创建方法如下：

```java
SqlSession sqlSession = SqlSessionFactory.openSession();
```

`SqlSession`控制数据库事务的方法，代码如下：

```java
SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
```

##5	映射器

映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：

- 描述映射规则
- 提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息
- 配置缓存
- 提供动态SQL

映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。

###5.1	用XML实现映射器

定义接口，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
   <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id}
   </select>
</mapper>
```

- mapper中namespace的值对应于所映射接口的全限定名
- select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型
- \#{id}表示传递进去的参数

MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。

###5.2	用注解实现映射器

```java
public interface RoleMapper2 {
    @Select("select id, role_name as roleName, note from t_role where id = #{id}")
    public Role getRole(Long id);
}
```

###5.3	对比XML方式和注解方式实现映射器

注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式

这个接口也可以在XML中定义，例如只需将`mybatis-config.xml`中配置XML语句：

```xml
  <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
```

修改成下面的形式即可：

```xml
<mapper class="com.ssm.learn.chapter3.mapper.RoleMapper2"/>
```

也可以使用`configuration`对象注册这个接口，比如：

```java
configuration.addMapper(RoleMapper2.class)；
```

###5.4	`SqlSession`发送SQL

```java
Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);
```

`selectOne`方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为`getRole`的SQL，则可以简写为：

```java
Role role = (Role)sqlSession.selectOne("getRole", 1L);
```

###5.5	用`Mapper`接口发送SQL

`SqlSession`还可以获取`Mapper`接口，通过`Mapper`接口发送SQL，代码如下：

```java
RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
```

因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。

###5.6	对比两种发送SQL的方式

- 使用`SqlSession`直接发送

- `SqlSession`获取`Mapper`接口，再通过`Mapper`发送

使用`Mapper`接口编程可以消除`SqlSession`带来的功能性代码，提高可读性。`SqlSession`需要`SQLid`，晦涩难懂，而`Mapper`更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用`Mapper`接口编程。

##6	生命周期

所谓生命周期就是每一个对象应该存活的时间。

###6.1	`SqlSessionFactoryBuilder`

其作用在于创建`SqlSessionFactory`，创建成功后就失去作用，所以它只能存在于创建`SqlSessionFactory`的方法中，而不能让其长期存在。

###6.2	`SqlSessionFactory`

可以被认为是数据库连接池，其作用是创建`SqlSession`接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个`SqlSessionFactory`可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。

###6.3	`SqlSession`

相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至`SqlSessionFactory`，否则可能会导致数据库资源耗尽。

###6.4	`Mapper`

它由`SqlSession`创建，所以它的生命周期至多和`SqlSession`保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。

##7	实例

项目结构如图：

![项目结构](http://cdn.alanliang.site/note/项目结构.png)

`log4j.properties`文件，代码如下：

```properties
log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
```

`Role`类，代码如下：

```java
public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}
```

`RoleMapper`接口，代码如下：

```java
public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List<Role> findRoles(String roleName);
}
```

`RoleMapper.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
    <insert id="insertRole" parameterType="role">
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    </insert>
    <delete id="deleteRole" parameterType="long">
        delete from t_role where id = #{id};
    </delete>
    <update id="updateRole" parameterType="role">
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    </update>
    <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id};
   </select>
    <select id="findRoles" parameterType="string" resultType="role">
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    </select>
</mapper>
```

`SqlSessionFactoryUtils`工具类，代码如下：

```java
public class SqlSessionFactoryUtils {
    private final static Class<SqlSessionFactoryUtils> LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
```

其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入`synchronized`关键字加锁，主要是防止在多线程中多次实例化`SqlSessionFactory`对象，保证唯一性。

`mybatis-config.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <!--配置事务管理器-->
            <transactionManager type="JDBC"></transactionManager>
            <!--配置数据源-->
            <dataSource type="POOLED"><!--type="POOLED"表示采用MyBatis内部连接池-->
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

`Chapter3Main`类，代码如下：

```java
public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting3.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), false(Boolean), false(Boolean), 3(Long), 1(Long), 1(Integer), 2020-06-15 11:02:51.663(Timestamp), 2020-06-15 11:02:51.663(Timestamp), 3(Integer), 1(Integer)
2020-06-15 11:02:51.683 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 11:02:51.685 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 11:02:51.686 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 3(Long), 12(Long), 3(Long), 15(Long), 3(Long), 19(Long)
2020-06-15 11:02:51.688 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 11:02:51.984 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:02:51.985 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:02:51.984(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: Article(id=3, title=认识Mybatis核心组件, summary=JavaEE互联网轻量级框架整合开发第三章, content=<h2 id="h2-1-mybatis-"><a name="1    持久层的概念和MyBatis的特点" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    持久层的概念和MyBatis的特点</h2><p>持久层可以将业务数据存储到磁盘，具有长期存储能力。</p>
<p>Mybatis成功的原因：</p>
<ul>
<li>不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；</li><li>提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；</li><li>提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。</li></ul>
<h2 id="h2-2-mybatis-"><a name="2    MyBatis的核心组件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    MyBatis的核心组件</h2><p>Mybatis的核心组件分为4个部分：</p>
<ul>
<li><code>SqlSessionFactoryBuilder</code>（构造器）:它会根据配置或者代码来生成<code>SqlSessionFactory</code>，采用的是分步构建的建造者模式。</li><li><code>SqlSessionFactory</code>（工厂接口）：依靠它来生成<code>SqlSession</code>，使用的是工厂模式。</li><li><code>SqlSession</code>（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。</li><li><code>SQL Mapper</code>（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</li></ul>
<p>MyBatis核心组件如图1所示:</p>
<p><img src="http://cdn.alanliang.site/note/Mybatis核心组件.jpg" alt="Mybatis核心组件"></p>
<p>&lt;center&gt;图1 MyBatis核心组件&lt;/center&gt;

</p>
<h2 id="h2-3-code-sqlsessionfactory-code-"><a name="3    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    <code>SqlSessionFactory</code></h2><p>为了生成<code>SqlSessionFactory</code>，MyBatis提供了构造器<code>SqlSessionFactoryBuilder</code>，它提供了一个类<code>Configuration</code>作为引导类，采用了<code>builder</code>模式，具体的分步则是在<code>Configuration</code>类中完成。</p>
<p>当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过<code>Configuration</code>类对象构建整个MyBatis的上下文。<code>SqlSessionFactory</code>是一个接口，有两个实现类，一般由<code>DefaultSqlSessionFactory</code>去实现，它们之间的关系如图2所示：</p>
<p><img src="http://cdn.alanliang.site/note/SqlSessionFactory的生成.jpg" alt="SqlSessionFactory的生成"></p>
<p>&lt;center&gt;图1 SqlSessionFactory与其实现类&lt;/center&gt;

</p>
<h4 id="h4-3-1-xml-code-sqlsessionfactory-code-"><a name="3.1    使用XML构建<code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1    使用XML构建<code>SqlSessionFactory</code></h4><p>在MyBatis中的XML分为两类：</p>
<ul>
<li>一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境</li><li>一类是映射文件，用来配置映射关系、SQL、参数等信息</li></ul>
<p>创建一份简易的基础配置文件，我们把它命名为<code>mybatis-config.xml</code>，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn/&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>生成<code>SqlSessionFactory</code>，代码如下：</p>
<pre><code class="lang-java">public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = &quot;mybatis-config.xml&quot;;

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<h2 id="h2-4-code-sqlsession-code-"><a name="4    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    <code>SqlSession</code></h2><p>在MyBatis中，<code>SqlSession</code>是其核心接口，作用类似于<code>JDBC</code>中的<code>Connnection</code>对象，代表一个连接资源的启用。</p>
<p>具体而言，它的作用有3个：</p>
<ul>
<li>获取Mapper接口。</li><li>发送SQL给数据库。</li><li>控制数据库事务。</li></ul>
<p>创建方法如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = SqlSessionFactory.openSession();
</code></pre>
<p><code>SqlSession</code>控制数据库事务的方法，代码如下：</p>
<pre><code class="lang-java">SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
</code></pre>
<h2 id="h2-5-"><a name="5    映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    映射器</h2><p>映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：</p>
<ul>
<li>描述映射规则</li><li>提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息</li><li>配置缓存</li><li>提供动态SQL</li></ul>
<p>映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。</p>
<h3 id="h3-5-1-xml-"><a name="5.1    用XML实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    用XML实现映射器</h3><p>定义接口，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>mapper中namespace的值对应于所映射接口的全限定名</li><li>select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型</li><li>#{id}表示传递进去的参数</li></ul>
<p>MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。</p>
<h3 id="h3-5-2-"><a name="5.2    用注解实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2    用注解实现映射器</h3><pre><code class="lang-java">public interface RoleMapper2 {
    @Select(&quot;select id, role_name as roleName, note from t_role where id = #{id}&quot;)
    public Role getRole(Long id);
}
</code></pre>
<h3 id="h3-5-3-xml-"><a name="5.3    对比XML方式和注解方式实现映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3    对比XML方式和注解方式实现映射器</h3><p>注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式</p>
<p>这个接口也可以在XML中定义，例如只需将<code>mybatis-config.xml</code>中配置XML语句：</p>
<pre><code class="lang-xml">  &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
</code></pre>
<p>修改成下面的形式即可：</p>
<pre><code class="lang-xml">&lt;mapper class=&quot;com.ssm.learn.chapter3.mapper.RoleMapper2&quot;/&gt;
</code></pre>
<p>也可以使用<code>configuration</code>对象注册这个接口，比如：</p>
<pre><code class="lang-java">configuration.addMapper(RoleMapper2.class)；
</code></pre>
<h3 id="h3-5-4-code-sqlsession-code-sql"><a name="5.4    <code>SqlSession</code>发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4    <code>SqlSession</code>发送SQL</h3><pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;com.ssm.learn.chapter3.mapper.RoleMapper.getRole&quot;, 1L);
</code></pre>
<p><code>selectOne</code>方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为<code>getRole</code>的SQL，则可以简写为：</p>
<pre><code class="lang-java">Role role = (Role)sqlSession.selectOne(&quot;getRole&quot;, 1L);
</code></pre>
<h3 id="h3-5-5-code-mapper-code-sql"><a name="5.5    用<code>Mapper</code>接口发送SQL" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.5    用<code>Mapper</code>接口发送SQL</h3><p><code>SqlSession</code>还可以获取<code>Mapper</code>接口，通过<code>Mapper</code>接口发送SQL，代码如下：</p>
<pre><code class="lang-java">RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
</code></pre>
<p>因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。</p>
<h3 id="h3-5-6-sql-"><a name="5.6    对比两种发送SQL的方式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.6    对比两种发送SQL的方式</h3><ul>
<li><p>使用<code>SqlSession</code>直接发送</p>
</li><li><p><code>SqlSession</code>获取<code>Mapper</code>接口，再通过<code>Mapper</code>发送</p>
</li></ul>
<p>使用<code>Mapper</code>接口编程可以消除<code>SqlSession</code>带来的功能性代码，提高可读性。<code>SqlSession</code>需要<code>SQLid</code>，晦涩难懂，而<code>Mapper</code>更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用<code>Mapper</code>接口编程。</p>
<h2 id="h2-6-"><a name="6    生命周期" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    生命周期</h2><p>所谓生命周期就是每一个对象应该存活的时间。</p>
<h3 id="h3-6-1-code-sqlsessionfactorybuilder-code-"><a name="6.1    <code>SqlSessionFactoryBuilder</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    <code>SqlSessionFactoryBuilder</code></h3><p>其作用在于创建<code>SqlSessionFactory</code>，创建成功后就失去作用，所以它只能存在于创建<code>SqlSessionFactory</code>的方法中，而不能让其长期存在。</p>
<h3 id="h3-6-2-code-sqlsessionfactory-code-"><a name="6.2    <code>SqlSessionFactory</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    <code>SqlSessionFactory</code></h3><p>可以被认为是数据库连接池，其作用是创建<code>SqlSession</code>接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个<code>SqlSessionFactory</code>可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。</p>
<h3 id="h3-6-3-code-sqlsession-code-"><a name="6.3    <code>SqlSession</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.3    <code>SqlSession</code></h3><p>相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至<code>SqlSessionFactory</code>，否则可能会导致数据库资源耗尽。</p>
<h3 id="h3-6-4-code-mapper-code-"><a name="6.4    <code>Mapper</code>" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.4    <code>Mapper</code></h3><p>它由<code>SqlSession</code>创建，所以它的生命周期至多和<code>SqlSession</code>保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。</p>
<h2 id="h2-7-"><a name="7    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    实例</h2><p>项目结构如图：</p>
<p><img src="http://cdn.alanliang.site/note/项目结构.png" alt="项目结构"></p>
<p><code>log4j.properties</code>文件，代码如下：</p>
<pre><code class="lang-properties">log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
</code></pre>
<p><code>Role</code>类，代码如下：</p>
<pre><code class="lang-java">public class Role {
    private Long id;
    private String roleName;
    private String note;

    public Role() {}
    /*setter and getter*/
}
</code></pre>
<p><code>RoleMapper</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List&lt;Role&gt; findRoles(String roleName);
}
</code></pre>
<p><code>RoleMapper.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter3.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    &lt;/insert&gt;
    &lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;
        delete from t_role where id = #{id};
    &lt;/delete&gt;
    &lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    &lt;/update&gt;
    &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
       select id,role_name as roleName,note from t_role where id = #{id};
   &lt;/select&gt;
    &lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultType=&quot;role&quot;&gt;
        select id,role_name as roleName,note from t_role where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p><code>SqlSessionFactoryUtils</code>工具类，代码如下：</p>
<pre><code class="lang-java">public class SqlSessionFactoryUtils {
    private final static Class&lt;SqlSessionFactoryUtils&gt; LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = &quot;mybatis-config.xml&quot;;
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
</code></pre>
<p>其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入<code>synchronized</code>关键字加锁，主要是防止在多线程中多次实例化<code>SqlSessionFactory</code>对象，保证唯一性。</p>
<p><code>mybatis-config.xml</code>文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!--type=&quot;POOLED&quot;表示采用MyBatis内部连接池--&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p><code>Chapter3Main</code>类，代码如下：</p>
<pre><code class="lang-java">public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
, textContent=

##1	持久层的概念和MyBatis的特点

持久层可以将业务数据存储到磁盘，具有长期存储能力。

Mybatis成功的原因：

- 不屏蔽SQL，有对其进行优化的空间，有利于系统性能提高，符合互联网需要性能优化的特点；
- 提供灵活、强大的映射机制，方便Java开发者使用。提供动态SQL的功能，满足互联网应用需求经常变化的要求；
- 提供了使用Mapper的接口编程，简化了工作，开发者能够更集中于业务逻辑。

##2    MyBatis的核心组件

Mybatis的核心组件分为4个部分：

- `SqlSessionFactoryBuilder`（构造器）:它会根据配置或者代码来生成`SqlSessionFactory`，采用的是分步构建的建造者模式。
- `SqlSessionFactory`（工厂接口）：依靠它来生成`SqlSession`，使用的是工厂模式。
- `SqlSession`（会话）：既可以发送SQL执行返回结果，也可以获取Mapper的接口。
- `SQL Mapper`（映射器）：Mybatis新设计存在的组件，它由一个Java接口和XML（或注解）构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。

MyBatis核心组件如图1所示:

![Mybatis核心组件](http://cdn.alanliang.site/note/Mybatis核心组件.jpg)

<center>图1 MyBatis核心组件</center>

##3	`SqlSessionFactory`

为了生成`SqlSessionFactory`，MyBatis提供了构造器`SqlSessionFactoryBuilder`，它提供了一个类`Configuration`作为引导类，采用了`builder`模式，具体的分步则是在`Configuration`类中完成。

当配置了XML或者提供了代码后，MyBatis会读取配置文件，通过`Configuration`类对象构建整个MyBatis的上下文。`SqlSessionFactory`是一个接口，有两个实现类，一般由`DefaultSqlSessionFactory`去实现，它们之间的关系如图2所示：

![SqlSessionFactory的生成](http://cdn.alanliang.site/note/SqlSessionFactory的生成.jpg)

<center>图1 SqlSessionFactory与其实现类</center>

####3.1	使用XML构建`SqlSessionFactory`

在MyBatis中的XML分为两类：

- 一类是基础配置文件，通常只有一个，主要是配置一些上下文参数和运行环境
- 一类是映射文件，用来配置映射关系、SQL、参数等信息

创建一份简易的基础配置文件，我们把它命名为`mybatis-config.xml`，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn/"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

生成`SqlSessionFactory`，代码如下：

```java
public class TestMyBatis {
    SqlSessionFactory sqlSessionFactory = null;

    String resource = "mybatis-config.xml";

    InputStream inputStream;

    @Test
    public void testSqlSessionFactory() {
        try {
            //读取mybatis-config.xml
            inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

##4	`SqlSession`

在MyBatis中，`SqlSession`是其核心接口，作用类似于`JDBC`中的`Connnection`对象，代表一个连接资源的启用。

具体而言，它的作用有3个：

- 获取Mapper接口。
- 发送SQL给数据库。
- 控制数据库事务。

创建方法如下：

```java
SqlSession sqlSession = SqlSessionFactory.openSession();
```

`SqlSession`控制数据库事务的方法，代码如下：

```java
SqlSession sqlSession = null;
try {
    //打开SqlSession会话
    sqlSession = sqlSessionFactory.openSession();
    //some code...
    sqlSession.commit();//提交事务
} catch (Exception e) {
    sqlSession.rollback();//回滚事务
} finally {
    //在finally语句中确保资源被顺利关闭
    if (sqlSession != null) {
        sqlSession.close();
    }
}
```

##5	映射器

映射器是MyBatis中最重要、最复杂的组件，它由一个接口和对应的XML文件（或注解）组成。它可以配置以下内容：

- 描述映射规则
- 提供SQL语句。并可以配置SQL参数类型、返回类型、缓存刷新等信息
- 配置缓存
- 提供动态SQL

映射器的主要作用就是将SQL查询到的结果映射成一个POJO，或者将POJO的数据插入到数据库中，并定义一些关于缓存等的重要内容。需要注意的是，需要开发的是一个接口，MyBatis采用了动态代理技术，会为这个接口生成一个代理对象，由这个代理对象处理相关逻辑。

###5.1	用XML实现映射器

定义接口，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
   <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id}
   </select>
</mapper>
```

- mapper中namespace的值对应于所映射接口的全限定名
- select标签表明这是一条查询语句，其中id的值标识了这条SQL语句，parameterType表明了所需要传递的参数类型，resultType表明了返回的结果类型
- \#{id}表示传递进去的参数

MyBatis在默认情况下采用自动映射，只要SQL返回的列名能和POJO的属性对应起来即可。这里，表里的列role_name通过SQL别名的改写返回roleName，也能和POJO对应起来。

###5.2	用注解实现映射器

```java
public interface RoleMapper2 {
    @Select("select id, role_name as roleName, note from t_role where id = #{id}")
    public Role getRole(Long id);
}
```

###5.3	对比XML方式和注解方式实现映射器

注解方式在比较简单的表和应用中使用起来比较简单方便，但在Java代码中加入SQL语句会使可读性下降，不利于维护；XML代码冗长复杂，但在比较复杂的场景下比较灵活。因此简单场景下用注解方式，复杂场景下用XML方式

这个接口也可以在XML中定义，例如只需将`mybatis-config.xml`中配置XML语句：

```xml
  <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
```

修改成下面的形式即可：

```xml
<mapper class="com.ssm.learn.chapter3.mapper.RoleMapper2"/>
```

也可以使用`configuration`对象注册这个接口，比如：

```java
configuration.addMapper(RoleMapper2.class)；
```

###5.4	`SqlSession`发送SQL

```java
Role role = (Role)sqlSession.selectOne("com.ssm.learn.chapter3.mapper.RoleMapper.getRole", 1L);
```

`selectOne`方法表示使用查询并且只返回一个对象，它接收两个参数，第一个参数是SQL语句的位置，由名称空间和SQL语句的id组成，第二个参数是主键id值。如果MyBatis中只有一个id为`getRole`的SQL，则可以简写为：

```java
Role role = (Role)sqlSession.selectOne("getRole", 1L);
```

###5.5	用`Mapper`接口发送SQL

`SqlSession`还可以获取`Mapper`接口，通过`Mapper`接口发送SQL，代码如下：

```java
RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
Role role = roleMapper.getRole(1L);
```

因为XML文件或者接口注解定义的SQL都可以通过“类的全限定名+方法名”查找，所以MyBatis会找到相应的SQL执行，并返回结果。

###5.6	对比两种发送SQL的方式

- 使用`SqlSession`直接发送

- `SqlSession`获取`Mapper`接口，再通过`Mapper`发送

使用`Mapper`接口编程可以消除`SqlSession`带来的功能性代码，提高可读性。`SqlSession`需要`SQLid`，晦涩难懂，而`Mapper`更能体现业务逻辑，而且出错时IDE会提示和校验。因此，建议使用`Mapper`接口编程。

##6	生命周期

所谓生命周期就是每一个对象应该存活的时间。

###6.1	`SqlSessionFactoryBuilder`

其作用在于创建`SqlSessionFactory`，创建成功后就失去作用，所以它只能存在于创建`SqlSessionFactory`的方法中，而不能让其长期存在。

###6.2	`SqlSessionFactory`

可以被认为是数据库连接池，其作用是创建`SqlSession`接口对象。因为MyBatis的本质就是Java对数据库的操作，因此它的生命周期存在整个MyBatis的应用之中。所以一旦创建就要长期保存它，直到不再使用MyBatis应用。创建多个`SqlSessionFactory`可能会导致数据库连接资源耗尽而出现系统宕机的情况，因此一般作为单例存在。

###6.3	`SqlSession`

相当于一个数据库连接（Connection对象），可以在一个事务中执行多条SQL语句，然后通过它提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后应该关闭这条连接，归还至`SqlSessionFactory`，否则可能会导致数据库资源耗尽。

###6.4	`Mapper`

它由`SqlSession`创建，所以它的生命周期至多和`SqlSession`保持一致。Mapper代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完相关业务，就应该销毁它。

##7	实例

项目结构如图：

![项目结构](http://cdn.alanliang.site/note/项目结构.png)

`log4j.properties`文件，代码如下：

```properties
log4j.rootLogger=DEBUG, stdout
log4j.logger.org.mybatis=DEBUG
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
```

`Role`类，代码如下：

```java
public class Role {
    private Long id;
    private String roleName;
    private String note;
    
    public Role() {}
    /*setter and getter*/
}
```

`RoleMapper`接口，代码如下：

```java
public interface RoleMapper {
    int insertRole(Role role);
    int deleteRole(Long id);
    int updateROle(Role role);
    Role getRole(Long id);
    List<Role> findRoles(String roleName);
}
```

`RoleMapper.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter3.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
    <insert id="insertRole" parameterType="role">
        insert into t_role(role_name,note)  values (#{roleName},#{note});
    </insert>
    <delete id="deleteRole" parameterType="long">
        delete from t_role where id = #{id};
    </delete>
    <update id="updateRole" parameterType="role">
        update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
    </update>
    <select id="getRole" parameterType="long" resultType="role">
       select id,role_name as roleName,note from t_role where id = #{id};
   </select>
    <select id="findRoles" parameterType="string" resultType="role">
        select id,role_name as roleName,note from t_role where role_name like concat('%',#{roleName},'%')
    </select>
</mapper>
```

`SqlSessionFactoryUtils`工具类，代码如下：

```java
public class SqlSessionFactoryUtils {
    private final static Class<SqlSessionFactoryUtils> LOCK = SqlSessionFactoryUtils.class;

    private static SqlSessionFactory sqlSessionFactory = null;

    private SqlSessionFactoryUtils() {

    }

    public static SqlSessionFactory getSqlSessionFactory() {
        synchronized (LOCK) {
            if (sqlSessionFactory != null) {
                return sqlSessionFactory;
            } else {
                String resource = "mybatis-config.xml";
                InputStream inputStream;
                try {
                    inputStream = Resources.getResourceAsStream(resource);
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                } catch (IOException e) {
                    e.printStackTrace();
                    return null;
                }
                return sqlSessionFactory;
            }
        }
    }

    public static SqlSession openSqlSession() {
        if (sqlSessionFactory == null) {
            getSqlSessionFactory();
        }
        return sqlSessionFactory.openSession();
    }
}
```

其中，构造方法私有化使得其它方法不能通过new方式来创建它。而加入`synchronized`关键字加锁，主要是防止在多线程中多次实例化`SqlSessionFactory`对象，保证唯一性。

`mybatis-config.xml`文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <!--配置事务管理器-->
            <transactionManager type="JDBC"></transactionManager>
            <!--配置数据源-->
            <dataSource type="POOLED"><!--type="POOLED"表示采用MyBatis内部连接池-->
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
                <property name="username" value="root"/>
                <property name="password" value="1234"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

`Chapter3Main`类，代码如下：

```java
public class Chapter3Main {
    public static void main(String[] args) {
        Logger logger = Logger.getLogger(Chapter3Main.class);
        SqlSession sqlSession = null;
        try {
            sqlSession = SqlSessionFactoryUtils.openSqlSession();
            RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);
            Role role = mapper.getRole(1L);
            logger.info(role.getRoleName());
        } finally {
            if (sqlSession != null) {
                sqlSession.close();
            }
        }

    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》, cover=http://cdn.alanliang.site/note/oilpainting3.jpg, views=0, likes=0, comments=0, appreciable=false, commentable=true, published=true, top=false, recommend=false, authorId=3, categoryId=1, type=1, createTime=Mon Jun 15 11:02:51 CST 2020, updateTime=Mon Jun 15 11:02:51 CST 2020, sort=3, status=1, category=null, tagList=[Tag(id=12, name=JavaEE, color=null, createTime=null, updateTime=null, articleCount=null), Tag(id=15, name=Mybatis, color=null, createTime=null, updateTime=null, articleCount=null), Tag(id=19, name= MyBatis核心组件, color=#D5F5E3, createTime=Mon Jun 15 11:02:51 CST 2020, updateTime=Mon Jun 15 11:02:51 CST 2020, articleCount=null)], author=null) }(String), 0:0:0:0:0:0:0:1(String), 319(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:02:51.991 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:02:53.718 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 11:02:53.721 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 11:02:53.724 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 11:02:53.732 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:02:53.733 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:02:53.734 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:02:53.734 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:02:53.744 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-15 11:02:53.746 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:02:53.746 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:02:53.747 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:02:53.750 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:02:53.750 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:02:53.751 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:02:53.757 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:02:53.757 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:02:53.758 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:02:53.762 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:02:53.762 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:02:53.761(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 31(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:02:53.763 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:03:23.883 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:03:23.883 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:03:23.882(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:03:23.884 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:03:28.503 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:03:28.503 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 3(Long)
2020-06-15 11:03:28.504 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:03:28.517 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:03:28.518 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 3(Long)
2020-06-15 11:03:28.518 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:03:28.714 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:03:28.714 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:03:28.713(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=3, status=2) }(String), 0:0:0:0:0:0:0:1(String), 209(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:03:28.716 DEBUG 16004 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:03:28.729 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:03:28.729 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:03:28.730 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:03:28.730 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:03:28.735 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 3
2020-06-15 11:03:28.737 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:03:28.737 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:03:28.738 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:03:28.739 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:03:28.740 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:03:28.741 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:03:28.744 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:03:28.745 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:03:28.747 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:03:28.752 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:03:28.752 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:03:28.751(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:03:28.754 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:03:33.872 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:03:33.872 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:03:33.873 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 11:03:33.876 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:03:33.876 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:03:33.879 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 11:03:33.885 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:03:33.885 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:03:33.886 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:03:33.886 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:03:33.896 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 3
2020-06-15 11:03:33.899 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:03:33.899 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:03:33.900 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:03:33.901 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:03:33.901 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:03:33.902 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:03:33.903 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:03:33.903 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:03:33.904 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:03:33.908 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:03:33.908 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:03:33.907(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 35(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:03:33.911 DEBUG 16004 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:04:10.404 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 11:04:10.405 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:04:10.406 DEBUG 16004 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 8
2020-06-15 11:05:27.775 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 11:05:27.776 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: Mybatis配置(String), #D5F5E3(String), 2020-06-15 11:05:27.774(Timestamp), 2020-06-15 11:05:27.774(Timestamp)
2020-06-15 11:05:27.777 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 11:05:27.778 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:05:27.780 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: MyBatis配置(String), JavaEE互联网轻量级框架整合开发第四章(String), <h2 id="h2-4-1-"><a name="4.1    概述" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    概述</h2><p>Mybatis配置文件的主要元素如表所示：</p>
<pre><code class="lang-xml">&lt;configuration&gt;&lt;!--配置--&gt;
    &lt;properties/&gt;&lt;!--属性--&gt;
    &lt;settings/&gt;&lt;!--设置--&gt;
    &lt;typeAliases/&gt;&lt;!--类型命名--&gt;
    &lt;typeHandler&gt;&lt;!--类型处理器--&gt;
    &lt;objectFactory/&gt;&lt;!--对象工厂--&gt;
    &lt;plugins/&gt;&lt;!--插件--&gt;
    &lt;environments&gt;&lt;!--配置环境--&gt;
        &lt;environment&gt;&lt;!--环境变量--&gt;
            &lt;transactionManager /&gt;&lt;!--事务处理器--&gt;
            &lt;dataSource /&gt;&lt;!--数据源--&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;databaseIdProvider /&gt;&lt;!--数据库厂商标识--&gt;
    &lt;mappers/&gt;&lt;!--映射器--&gt;
&lt;/configuration&gt;
</code></pre>
<p>需要注意的是，MyBatis对配置项的顺序有一定要求，如果不符合就会出错。</p>
<p>接下来我们一起了解MyBatis配置项的作用，其中properties、settings、typeAliases、typeHandlers、environments、mappers的使用。</p>
<h2 id="h2-4-2-properties-"><a name="4.2    properties属性" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2    properties属性</h2><p>properties属性可以给系统配置一些运行参数，可以放在xml文件或者properties文件中，以方便修改参数，而不建议放在Java编码中。</p>
<p>一般而言，MyBatis提供了3种方式来使用properties：</p>
<ul>
<li>property子元素</li><li>properties文件</li><li>程序代码传递</li></ul>
<h3 id="h3-4-2-1-property-"><a name="4.2.1    property子元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2.1    property子元素</h3><p>以使用property子元素封装数据库连接的相关配置为例，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;properties&gt;
        &lt;property name=&quot;database.driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;database.url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
        &lt;property name=&quot;database.username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;database.password&quot; value=&quot;1234&quot;/&gt;
    &lt;/properties&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!--type=&quot;POOLED&quot;表示采用MyBatis内部连接池--&gt;
                &lt;property name=&quot;driver&quot; value=&quot;${database.driver}&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;${database.url}&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;${database.username}&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;${database.password}&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>在properties的子元素property定义好的属性参数可以通过${属性名称}的形式获取，这样定义一次就可以到处引用了。</p>
<h2 id="h2-4-2-2-properties-"><a name="4.2.2    使用properties文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2.2    使用properties文件</h2><p>使用properties文件是比较简单普遍的方法。首先，创建一个文件<code>jdbc.properties</code>放到classpath路径下，代码如下：</p>
<pre><code class="lang-properties">database.driver=com.mysql.jdbc.Driver
database.url=jdbc:mysql://localhost:3306/ssm_learn
database.username=root
database.password=1234
</code></pre>
<p>然后，在MyBatis中通过properties标签的属性resource来引入properties文件，代码如下：</p>
<pre><code class="lang-xml">&lt;properties resource=&quot;jdbc.properties&quot; /&gt;
</code></pre>
<p>引入后，同样可以通过${属性名称}的形式将properties文件的属性参数引入到MyBatis配置文件中。以后，我们只要维护properties文件就可以维护配置内容了。</p>
<h3 id="h3-4-2-3-"><a name="4.2.3    使用程序传递方式传递参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2.3    使用程序传递方式传递参数</h3><p>在真实的生产环境中，数据库的用户名和密码需要被加密成密文后再配置到properties文件中。连接时再通过工具类，这里使用 CodeUtils.decode()进行解密。那么我们在创建SqlSessionFactory时，就需要把用户名和密码解密后重置到properties属性中，如代码所示：</p>
<pre><code class="lang-java">public class MyTest {
    @Test
    public void test() throws IOException {
        String resource = &quot;mybatis-config.xml&quot;;
        InputStream inputStream;
        InputStream in = Resources.getResourceAsStream(&quot;jdbc.properties&quot;);
        Properties props = new Properties();
        props.load(in);
        String username = props.getProperty(&quot;database.username&quot;);
        String password = props.getProperty(&quot;database.password&quot;);
        //解密用户和密码，并在属性中重置
        props.put(&quot;database.username&quot;, CodeUtils.decode(username));
        props.put(&quot;database.password&quot;, CodeUtils.decode(password));
        inputStream = Resources.getResourceAsStream(resource);
        //使用程序传递的方式覆盖原有的properties属性参数
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream, props);
    }
}
</code></pre>
<h3 id="h3-4-2-4-"><a name="4.2.4    总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2.4    总结</h3><p>使用properties的3种方式是有优先级的，程序传递方式 &gt; 使用properties文件方式 &gt; 使用property子元素，MyBatis会根据优先级覆盖原先配置的属性值。建议使用properties文件方式，这种方式简单方便，如果存在需要加密的场景，可以参考以上代码。</p>
<h2 id="h2-4-3-settings-"><a name="4.3    settings设置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.3    settings设置</h2><p>settings设置是MyBatis中最复杂的配置，但是大部分情况下使用默认值即可，只需要修改一些常用规则即可，比如自动映射、驼峰命名映射、级联规则、是否启用缓存、执行器（Executor）类型等，如下表所示：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>作用</th>
<th>配置选项说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoMappingBehavior</td>
<td>指定MyBatis应如何自动映射列到字段或属性。&lt;br /&gt;1、NONE表示取消自动映射&lt;br /&gt;2、PARTIAL表示只会自动映射，没有定义嵌套结果集和映射结果集&lt;br /&gt;3、FULL表示会自动映射任何复杂结果集（无论是否嵌套）</td>
<td>NONE&lt;br /&gt;PARTIAL&lt;br /&gt;FULL</td>
<td>PARTIAL</td>
</tr>
<tr>
<td>mapUnderscoreToCamelCase</td>
<td>是否开启自动驼峰命名规则映射，即从经典数据库列名A_COLUMN到经典Java属性名aColumn的类似映射</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>aggressiveLazyLoading</td>
<td>当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>cacheEnabled</td>
<td>该配置影响所有映射器中配置缓存的全局开关</td>
<td>true\</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>defaultExecutorType</td>
<td>配置默认的执行器。SIMPLE是普通的执行器；REUSE会重用预处理语句（prepared statements）；BATCH执行器将重用语句并执行批量更新</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<h2 id="h2-4-4-typealiases-"><a name="4.4    typeAliases别名" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.4    typeAliases别名</h2><p>由于类的全限定名称很长，为了简化使用，在MyBatis中允许定义一个别名代表这个类。别名分为系统定义别名和自定义别名。注意，在MyBatis中别名不区分大小写。</p>
<h3 id="h3-4-4-1-"><a name="4.4.1    系统定义别名" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.4.1    系统定义别名</h3><table>
<thead>
<tr>
<th>别名</th>
<th>Java类型</th>
<th>是否支持数组</th>
</tr>
</thead>
<tbody>
<tr>
<td>_byte</td>
<td>byte</td>
<td>y</td>
</tr>
<tr>
<td>_short</td>
<td>short</td>
<td>y</td>
</tr>
<tr>
<td>_int</td>
<td>int</td>
<td>y</td>
</tr>
<tr>
<td>_integer</td>
<td>int</td>
<td>y</td>
</tr>
<tr>
<td>_double</td>
<td>double</td>
<td>y</td>
</tr>
<tr>
<td>_float</td>
<td>float</td>
<td>y</td>
</tr>
<tr>
<td>_boolean</td>
<td>boolean</td>
<td>y</td>
</tr>
<tr>
<td>string</td>
<td>String</td>
<td>y</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
<td>y</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
<td>y</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
<td>y</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>y</td>
</tr>
<tr>
<td>integer</td>
<td>Integer</td>
<td>y</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>y</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
<td>y</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
<td>y</td>
</tr>
<tr>
<td>date</td>
<td>Date</td>
<td>y</td>
</tr>
<tr>
<td>decimal</td>
<td>BigDecimal</td>
<td>y</td>
</tr>
<tr>
<td>bigdecimal</td>
<td>BigDecimal</td>
<td>y</td>
</tr>
<tr>
<td>object</td>
<td>Object</td>
<td>y</td>
</tr>
<tr>
<td>map</td>
<td>Map</td>
<td>n</td>
</tr>
<tr>
<td>hashmap</td>
<td>HashMap</td>
<td>n</td>
</tr>
<tr>
<td>list</td>
<td>List</td>
<td>n</td>
</tr>
<tr>
<td>arraylist</td>
<td>ArrayList</td>
<td>n</td>
</tr>
<tr>
<td>collection</td>
<td>Collection</td>
<td>n</td>
</tr>
<tr>
<td>iterator</td>
<td>Iterator</td>
<td>n</td>
</tr>
<tr>
<td>ResultSet</td>
<td>ResultSet</td>
<td>n</td>
</tr>
</tbody>
</table>
<p>如果需要使用对应类型的数据型，要看其是否能支持数据，如果支持只需要使用别名+[]即可，比如_int数据的别名就是_int[]。而类似list这样不支持数据的别名，则不能这样写。</p>
<p>事实上Configuration对象也对一些常用的配置项配置了别名，如下所示：</p>
<pre><code class="lang-java">//事务方式别名
typeAliasRegistry.registerAlias(&quot;JDBC&quot;,JdbcTransactionFactory.class);
typeAliasRegistry.registerAlias(&quot;MANAGED&quot;,
                                ManagedTransactionFactory.class);
//数据源类型别名
typeAliasRegistry.registerAlias(&quot;JNDI&quot;,JndiDataSourceFactory.class);
typeAliasRegistry.registerAlias(&quot;POOLED&quot;,
                                PooledDataSourceFactory.class);
typeAliasRegistry.registerAlias(&quot;UNPOOLED&quot;,
                                UnpooledDataSourceFactory.class);
//缓存策略别名
typeAliasRegistry.registerAlias(&quot;PERPETUAL&quot;,PerpetualCache.class);
typeAliasRegistry.registerAlias(&quot;FIFO&quot;,FifoCache.class);
typeAliasRegistry.registerAlias(&quot;LRU&quot;,LruCache.class);
typeAliasRegistry.registerAlias(&quot;SOFT&quot;,SoftCache.class);
typeAliasRegistry.registerAlias(&quot;WEAK&quot;,WeakCache.class);
//数据库标识别名
typeAliasRegistry.registerAlias(&quot;DB VENDOR&quot;,
                                VendorDatabaseIdProvider.class);
//语言驱动类别名
typeAliasRegistry.registerAlias(&quot;XML&quot;,XMLLanguageDriver.class);
typeAliasRegistry.registerAlias(&quot;RAW&quot;,RawLanguageDriver.class);
//日志类别名
typeAliasRegistry.registerAlias(&quot;SLF4J&quot;,Slf4jImpl.class);
typeAliasRegistry.registerAlias(&quot;COMMONS LOGGING&quot;,
                                JakartaCommonsLoggingImpl.class);
typeAliasRegistry.registerAlias(&quot;LOG4J&quot;,Log4jImpl.class);
typeAliasRegistry.registerAlias(&quot;LOG4J2&quot;,Log4j2Impl.class);
typeAliasRegistry.registerAlias(&quot;JDK LOGGING&quot;,Jdk14LoggingImpl.class
                                typeAliasRegistry.registerAlias(&quot;STDOUT LOGGING&quot;,StdOutImpl.class);
                                typeAliasRegistry.registerAlias(&quot;NO_LOGGING&quot;,NoLoggingImpl.class);
                                //动态代理別名
                                typeAliasRegistry.registerAlias(&quot;CGLIB&quot;,CglibProxyFactory.class);
                                typeAliasRegistry.registerAlias(&quot;JAVASSIST&quot;,
                                                                JavassistProxyFactory.class);
</code></pre>
<h3 id="h3-4-4-2-"><a name="4.4.2    自定义别名" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.4.2    自定义别名</h3><p>我们可以使用TypeAliasRegistry类的registerAlias方法注册，也可以采用配置文件或者扫描方式来自定义别名。</p>
<p>使用配置文件定义很简单，如下所示：</p>
<pre><code class="lang-xml">&lt;typeAliases&gt;
    &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter4.pojo.Role&quot;/&gt;
    &lt;typeAlias alias=&quot;user&quot; type=&quot;com.ssm.learn.chapter4.pojo.User&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre>
<p>但是如果很多类需要定义别名，使用以上方式很麻烦。MyBatis还支持扫描别名，比如上面的两个类都在包com.ssm.learn.chapter4.pojo下的话，就可以这样定义，如下所示：</p>
<pre><code class="lang-xml">&lt;typeAliases&gt;
    &lt;package name=&quot;com.ssm.learn.chapter4.pojo&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre>
<p>MyBatis将扫描这个包里的所有类，将其第一个字母变成小写作为其别名，比如类Role的别名会变成role。但如果MyBatis扫描了多个包，不同的包中存在相同的类名时将会出现异常。这个时候可以使用注解<a href="https://github.com/Alias" title="&#64;Alias" class="at-link">@Alias</a>进行区分，如下所示：</p>
<pre><code class="lang-java">package com.learn.ssm.chapter3.pojo;
@Alias(&quot;user3&quot;)
public class User{
    ......
}
</code></pre>
<h2 id="h2-4-5-typehandler-"><a name="4.5    typeHandler类型转换器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.5    typeHandler类型转换器</h2><p>在typeHandler中，分为jdbcType和javaType，其中jdbcType用于定义数据库类型，javaType用于定义Java类型，那么typeHandler的作用就是承担jdbcType和javaType之间的相互转换。如图所示：<img src="http://cdn.alanliang.site/note/typeHandler.jpg" alt="typeHandler"></p>
<p>因为MyBatis自动探测应该使用什么类型的typeHandler进行处理，所以并不需要我们配置typeHandler、javaType和jdbcType。但是有些场景无法探测，例如使用自定义枚举或者数据库使用特殊数据类型的场景，这时候需要使用自定义的typeHandler去处理类型之间的转换问题。</p>
<p>和别名一样，在MyBatis中存在系统定义typeHandler和自定义typeHandler。</p>
<h3 id="h3-4-5-1-typehandler"><a name="4.5.1    系统定义的typeHandler" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.5.1    系统定义的typeHandler</h3><p>MyBatis内部定义了许多有用的typeHandler，在大部分情况下无须显示声明。但有时候需要修改一些转换规则，比如枚举类型。</p>
<h3 id="h3-4-5-2-typehandler"><a name="4.5.2    自定义typeHandler" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.5.2    自定义typeHandler</h3><p>要实现typeHandler就需要去实现接口typeHandler，或者继承BaseTypeHandler。这里我们仿造一个StringTypeHandler来实现一个自定义的typeHandler——MyTypeHandler，它只是用于实现接口typeHandler，代码如下：</p>
<pre><code class="lang-java">//启用扫描注册的时候需要注解
@MappedTypes(String.class)
@MappedJdbcTypes(JdbcType.VARCHAR)
public class MyTypeHandler implements TypeHandler&lt;String&gt; {

    Logger logger = Logger.getLogger(MyTypeHandler.class);

    @Override    
    public void setParameter(PreparedStatement ps, int i, String parameter,
            JdbcType jdbcType) throws SQLException {
        logger.info(&quot;设置string参数【&quot; + parameter+&quot;】&quot;);
        ps.setString(i, parameter);
    }

    @Override    
    public String getResult(ResultSet rs, String columnName)
            throws SQLException {
        String result = rs.getString(columnName);
        logger.info(&quot;读取string参数1【&quot; + result+&quot;】&quot;);
        return result;
    }

    @Override
    public String getResult(ResultSet rs, int columnIndex) throws SQLException {
        String result = rs.getString(columnIndex);
        logger.info(&quot;读取string参数2【&quot; + result+&quot;】&quot;);
        return result;
    }

    @Override
    public String getResult(CallableStatement cs, int columnIndex)
            throws SQLException {
        String result = cs.getString(columnIndex);
        logger.info(&quot;读取string参数3【&quot; + result+&quot;】&quot;);
        return result;
    }
}
</code></pre>
<p>定义的typeHandler泛型为String，显然我们要把数据库的数据类型转化为String型，然后实现设置参数和获取结果集的方法。此时还需要启动typeHandler，如下所示：</p>
<pre><code class="lang-xml">&lt;typeHandlers&gt;
    &lt;typeHandler jdbcType=&quot;VARCHAR&quot; javaType=&quot;string&quot; handler=&quot;com.ssm.learn.chapter4.typeHandler.MyTypeHandler&quot;/&gt;
&lt;/typeHandlers&gt;
</code></pre>
<p>有时候还可以显示启用typeHandler，一般有两种方式，如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.learn.ssm.chapter4.mapper.RoleMapper&quot;&gt;

    &lt;resultMap id=&quot;roleMapper&quot; type=&quot;role&quot;&gt;
        &lt;result property=&quot;id&quot; column=&quot;id&quot; /&gt;
        &lt;!--注意到下面的jdbcType属性和javaType属性--&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot; jdbcType=&quot;VARCHAR&quot;
            javaType=&quot;string&quot; /&gt;

        &lt;!--注意到下面的typeHandler属性--&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;
            typeHandler=&quot;com.learn.ssm.chapter4.typehandler.MyTypeHandler&quot; /&gt;
    &lt;/resultMap&gt;

    &lt;!--注意到下面的#{roleName, jdbcType=VARCHAR,javaType=string}--&gt;
    &lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultMap=&quot;roleMapper&quot;&gt;
        select id, role_name, note from t_role
        where role_name like concat(&#39;%&#39;, #{roleName, jdbcType=VARCHAR,
        javaType=string}, &#39;%&#39;)
    &lt;/select&gt;

    &lt;select id=&quot;findRoles2&quot; parameterType=&quot;string&quot; resultMap=&quot;roleMapper&quot;&gt;
        select id, role_name, note from t_role
        where note like concat(&#39;%&#39;, #{note,
        typeHandler=com.learn.ssm.chapter4.typehandler.MyTypeHandler}, &#39;%&#39;)
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>注意，要么指定了与自定义typeHandler一致的javaType和jdbcType，要么直接使用typeHandler指定具体的实现类。</p>
(String), ## 4.1	概述

Mybatis配置文件的主要元素如表所示：

```xml
<configuration><!--配置-->
    <properties/><!--属性-->
    <settings/><!--设置-->
    <typeAliases/><!--类型命名-->
    <typeHandler><!--类型处理器-->
    <objectFactory/><!--对象工厂-->
    <plugins/><!--插件-->
    <environments><!--配置环境-->
        <environment><!--环境变量-->
            <transactionManager /><!--事务处理器-->
            <dataSource /><!--数据源-->
        </environment>
    </environments>
    <databaseIdProvider /><!--数据库厂商标识-->
    <mappers/><!--映射器-->
</configuration>
```

需要注意的是，MyBatis对配置项的顺序有一定要求，如果不符合就会出错。

接下来我们一起了解MyBatis配置项的作用，其中properties、settings、typeAliases、typeHandlers、environments、mappers的使用。

##4.2	properties属性

properties属性可以给系统配置一些运行参数，可以放在xml文件或者properties文件中，以方便修改参数，而不建议放在Java编码中。

一般而言，MyBatis提供了3种方式来使用properties：

- property子元素
- properties文件
- 程序代码传递

###4.2.1    property子元素

以使用property子元素封装数据库连接的相关配置为例，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <properties>
        <property name="database.driver" value="com.mysql.jdbc.Driver"/>
        <property name="database.url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
        <property name="database.username" value="root"/>
        <property name="database.password" value="1234"/>
    </properties>
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <!--配置事务管理器-->
            <transactionManager type="JDBC"></transactionManager>
            <!--配置数据源-->
            <dataSource type="POOLED"><!--type="POOLED"表示采用MyBatis内部连接池-->
                <property name="driver" value="${database.driver}"/>
                <property name="url" value="${database.url}"/>
                <property name="username" value="${database.username}"/>
                <property name="password" value="${database.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

在properties的子元素property定义好的属性参数可以通过${属性名称}的形式获取，这样定义一次就可以到处引用了。

##4.2.2	使用properties文件

使用properties文件是比较简单普遍的方法。首先，创建一个文件`jdbc.properties`放到classpath路径下，代码如下：

```properties
database.driver=com.mysql.jdbc.Driver
database.url=jdbc:mysql://localhost:3306/ssm_learn
database.username=root
database.password=1234
```

然后，在MyBatis中通过properties标签的属性resource来引入properties文件，代码如下：

```xml
<properties resource="jdbc.properties" />
```

引入后，同样可以通过${属性名称}的形式将properties文件的属性参数引入到MyBatis配置文件中。以后，我们只要维护properties文件就可以维护配置内容了。

### 4.2.3	使用程序传递方式传递参数

在真实的生产环境中，数据库的用户名和密码需要被加密成密文后再配置到properties文件中。连接时再通过工具类，这里使用 CodeUtils.decode()进行解密。那么我们在创建SqlSessionFactory时，就需要把用户名和密码解密后重置到properties属性中，如代码所示：

```java
public class MyTest {
    @Test
    public void test() throws IOException {
        String resource = "mybatis-config.xml";
        InputStream inputStream;
        InputStream in = Resources.getResourceAsStream("jdbc.properties");
        Properties props = new Properties();
        props.load(in);
        String username = props.getProperty("database.username");
        String password = props.getProperty("database.password");
        //解密用户和密码，并在属性中重置
        props.put("database.username", CodeUtils.decode(username));
        props.put("database.password", CodeUtils.decode(password));
        inputStream = Resources.getResourceAsStream(resource);
        //使用程序传递的方式覆盖原有的properties属性参数
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream, props);
    }
}
```

### 4.2.4	总结

使用properties的3种方式是有优先级的，程序传递方式 > 使用properties文件方式 > 使用property子元素，MyBatis会根据优先级覆盖原先配置的属性值。建议使用properties文件方式，这种方式简单方便，如果存在需要加密的场景，可以参考以上代码。

## 4.3	settings设置

settings设置是MyBatis中最复杂的配置，但是大部分情况下使用默认值即可，只需要修改一些常用规则即可，比如自动映射、驼峰命名映射、级联规则、是否启用缓存、执行器（Executor）类型等，如下表所示：

| 配置项                   | 作用                                                         | 配置选项说明                | 默认值  |
| ------------------------ | ------------------------------------------------------------ | --------------------------- | ------- |
| autoMappingBehavior      | 指定MyBatis应如何自动映射列到字段或属性。<br />1、NONE表示取消自动映射<br />2、PARTIAL表示只会自动映射，没有定义嵌套结果集和映射结果集<br />3、FULL表示会自动映射任何复杂结果集（无论是否嵌套） | NONE<br />PARTIAL<br />FULL | PARTIAL |
| mapUnderscoreToCamelCase | 是否开启自动驼峰命名规则映射，即从经典数据库列名A_COLUMN到经典Java属性名aColumn的类似映射 | true\|false                 | false   |
| lazyLoadingEnabled       | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态 | true\|false                 | false   |
| aggressiveLazyLoading    | 当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载 | true\|false                 | false   |
| cacheEnabled             | 该配置影响所有映射器中配置缓存的全局开关                     | true\|false                 | true    |
| defaultExecutorType      | 配置默认的执行器。SIMPLE是普通的执行器；REUSE会重用预处理语句（prepared statements）；BATCH执行器将重用语句并执行批量更新 | true\|false                 | false   |

## 4.4	typeAliases别名

由于类的全限定名称很长，为了简化使用，在MyBatis中允许定义一个别名代表这个类。别名分为系统定义别名和自定义别名。注意，在MyBatis中别名不区分大小写。

### 4.4.1	系统定义别名

| 别名       | Java类型   | 是否支持数组 |
| ---------- | ---------- | ------------ |
| _byte      | byte       | y            |
| _short     | short      | y            |
| _int       | int        | y            |
| _integer   | int        | y            |
| _double    | double     | y            |
| _float     | float      | y            |
| _boolean   | boolean    | y            |
| string     | String     | y            |
| byte       | Byte       | y            |
| long       | Long       | y            |
| short      | Short      | y            |
| int        | Integer    | y            |
| integer    | Integer    | y            |
| double     | Double     | y            |
| float      | Float      | y            |
| boolean    | Boolean    | y            |
| date       | Date       | y            |
| decimal    | BigDecimal | y            |
| bigdecimal | BigDecimal | y            |
| object     | Object     | y            |
| map        | Map        | n            |
| hashmap    | HashMap    | n            |
| list       | List       | n            |
| arraylist  | ArrayList  | n            |
| collection | Collection | n            |
| iterator   | Iterator   | n            |
| ResultSet  | ResultSet  | n            |

如果需要使用对应类型的数据型，要看其是否能支持数据，如果支持只需要使用别名+[]即可，比如\_int数据的别名就是\_int[]。而类似list这样不支持数据的别名，则不能这样写。

事实上Configuration对象也对一些常用的配置项配置了别名，如下所示：

```java
//事务方式别名
typeAliasRegistry.registerAlias("JDBC",JdbcTransactionFactory.class);
typeAliasRegistry.registerAlias("MANAGED",
                                ManagedTransactionFactory.class);
//数据源类型别名
typeAliasRegistry.registerAlias("JNDI",JndiDataSourceFactory.class);
typeAliasRegistry.registerAlias("POOLED",
                                PooledDataSourceFactory.class);
typeAliasRegistry.registerAlias("UNPOOLED",
                                UnpooledDataSourceFactory.class);
//缓存策略别名
typeAliasRegistry.registerAlias("PERPETUAL",PerpetualCache.class);
typeAliasRegistry.registerAlias("FIFO",FifoCache.class);
typeAliasRegistry.registerAlias("LRU",LruCache.class);
typeAliasRegistry.registerAlias("SOFT",SoftCache.class);
typeAliasRegistry.registerAlias("WEAK",WeakCache.class);
//数据库标识别名
typeAliasRegistry.registerAlias("DB VENDOR",
                                VendorDatabaseIdProvider.class);
//语言驱动类别名
typeAliasRegistry.registerAlias("XML",XMLLanguageDriver.class);
typeAliasRegistry.registerAlias("RAW",RawLanguageDriver.class);
//日志类别名
typeAliasRegistry.registerAlias("SLF4J",Slf4jImpl.class);
typeAliasRegistry.registerAlias("COMMONS LOGGING",
                                JakartaCommonsLoggingImpl.class);
typeAliasRegistry.registerAlias("LOG4J",Log4jImpl.class);
typeAliasRegistry.registerAlias("LOG4J2",Log4j2Impl.class);
typeAliasRegistry.registerAlias("JDK LOGGING",Jdk14LoggingImpl.class
                                typeAliasRegistry.registerAlias("STDOUT LOGGING",StdOutImpl.class);
                                typeAliasRegistry.registerAlias("NO_LOGGING",NoLoggingImpl.class);
                                //动态代理別名
                                typeAliasRegistry.registerAlias("CGLIB",CglibProxyFactory.class);
                                typeAliasRegistry.registerAlias("JAVASSIST",
                                                                JavassistProxyFactory.class);
```

### 4.4.2	自定义别名

我们可以使用TypeAliasRegistry类的registerAlias方法注册，也可以采用配置文件或者扫描方式来自定义别名。

使用配置文件定义很简单，如下所示：

```xml
<typeAliases>
    <typeAlias alias="role" type="com.ssm.learn.chapter4.pojo.Role"/>
    <typeAlias alias="user" type="com.ssm.learn.chapter4.pojo.User"/>
</typeAliases>
```

但是如果很多类需要定义别名，使用以上方式很麻烦。MyBatis还支持扫描别名，比如上面的两个类都在包com.ssm.learn.chapter4.pojo下的话，就可以这样定义，如下所示：

```xml
<typeAliases>
    <package name="com.ssm.learn.chapter4.pojo"/>
</typeAliases>
```

MyBatis将扫描这个包里的所有类，将其第一个字母变成小写作为其别名，比如类Role的别名会变成role。但如果MyBatis扫描了多个包，不同的包中存在相同的类名时将会出现异常。这个时候可以使用注解@Alias进行区分，如下所示：

```java
package com.learn.ssm.chapter3.pojo;
@Alias("user3")
public class User{
    ......
}
```

## 4.5	typeHandler类型转换器

在typeHandler中，分为jdbcType和javaType，其中jdbcType用于定义数据库类型，javaType用于定义Java类型，那么typeHandler的作用就是承担jdbcType和javaType之间的相互转换。如图所示：![typeHandler](http://cdn.alanliang.site/note/typeHandler.jpg)

因为MyBatis自动探测应该使用什么类型的typeHandler进行处理，所以并不需要我们配置typeHandler、javaType和jdbcType。但是有些场景无法探测，例如使用自定义枚举或者数据库使用特殊数据类型的场景，这时候需要使用自定义的typeHandler去处理类型之间的转换问题。

和别名一样，在MyBatis中存在系统定义typeHandler和自定义typeHandler。

### 4.5.1	系统定义的typeHandler

MyBatis内部定义了许多有用的typeHandler，在大部分情况下无须显示声明。但有时候需要修改一些转换规则，比如枚举类型。

### 4.5.2	自定义typeHandler

要实现typeHandler就需要去实现接口typeHandler，或者继承BaseTypeHandler。这里我们仿造一个StringTypeHandler来实现一个自定义的typeHandler——MyTypeHandler，它只是用于实现接口typeHandler，代码如下：

```java
//启用扫描注册的时候需要注解
@MappedTypes(String.class)
@MappedJdbcTypes(JdbcType.VARCHAR)
public class MyTypeHandler implements TypeHandler<String> {

	Logger logger = Logger.getLogger(MyTypeHandler.class);

	@Override	
    public void setParameter(PreparedStatement ps, int i, String parameter,
			JdbcType jdbcType) throws SQLException {
		logger.info("设置string参数【" + parameter+"】");
		ps.setString(i, parameter);
	}

	@Override	
    public String getResult(ResultSet rs, String columnName)
			throws SQLException {
		String result = rs.getString(columnName);
		logger.info("读取string参数1【" + result+"】");
		return result;
	}

	@Override
	public String getResult(ResultSet rs, int columnIndex) throws SQLException {
		String result = rs.getString(columnIndex);
		logger.info("读取string参数2【" + result+"】");
		return result;
	}

	@Override
	public String getResult(CallableStatement cs, int columnIndex)
			throws SQLException {
		String result = cs.getString(columnIndex);
		logger.info("读取string参数3【" + result+"】");
		return result;
	}
}

```

定义的typeHandler泛型为String，显然我们要把数据库的数据类型转化为String型，然后实现设置参数和获取结果集的方法。此时还需要启动typeHandler，如下所示：

```xml
<typeHandlers>
    <typeHandler jdbcType="VARCHAR" javaType="string" handler="com.ssm.learn.chapter4.typeHandler.MyTypeHandler"/>
</typeHandlers>
```

有时候还可以显示启用typeHandler，一般有两种方式，如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learn.ssm.chapter4.mapper.RoleMapper">

	<resultMap id="roleMapper" type="role">
		<result property="id" column="id" />
        <!--注意到下面的jdbcType属性和javaType属性-->
		<result property="roleName" column="role_name" jdbcType="VARCHAR"
			javaType="string" />
        
        <!--注意到下面的typeHandler属性-->
		<result property="note" column="note"
			typeHandler="com.learn.ssm.chapter4.typehandler.MyTypeHandler" />
	</resultMap>
    
	<!--注意到下面的#{roleName, jdbcType=VARCHAR,javaType=string}-->
	<select id="findRoles" parameterType="string" resultMap="roleMapper">
		select id, role_name, note from t_role
		where role_name like concat('%', #{roleName, jdbcType=VARCHAR,
		javaType=string}, '%')
	</select>

	<select id="findRoles2" parameterType="string" resultMap="roleMapper">
		select id, role_name, note from t_role
		where note like concat('%', #{note,
		typeHandler=com.learn.ssm.chapter4.typehandler.MyTypeHandler}, '%')
	</select>
</mapper>
```

注意，要么指定了与自定义typeHandler一致的javaType和jdbcType，要么直接使用typeHandler指定具体的实现类。

(String), http://cdn.alanliang.site/note/oilpainting4.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), false(Boolean), false(Boolean), 3(Long), 1(Long), 1(Integer), 2020-06-15 11:05:27.774(Timestamp), 2020-06-15 11:05:27.774(Timestamp), 3(Integer), 1(Integer)
2020-06-15 11:05:27.787 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 11:05:27.788 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 11:05:27.788 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 4(Long), 12(Long), 4(Long), 15(Long), 4(Long), 20(Long)
2020-06-15 11:05:27.789 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 11:05:28.036 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:05:28.036 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:05:28.035(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: Article(id=4, title=MyBatis配置, summary=JavaEE互联网轻量级框架整合开发第四章, content=<h2 id="h2-4-1-"><a name="4.1    概述" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    概述</h2><p>Mybatis配置文件的主要元素如表所示：</p>
<pre><code class="lang-xml">&lt;configuration&gt;&lt;!--配置--&gt;
    &lt;properties/&gt;&lt;!--属性--&gt;
    &lt;settings/&gt;&lt;!--设置--&gt;
    &lt;typeAliases/&gt;&lt;!--类型命名--&gt;
    &lt;typeHandler&gt;&lt;!--类型处理器--&gt;
    &lt;objectFactory/&gt;&lt;!--对象工厂--&gt;
    &lt;plugins/&gt;&lt;!--插件--&gt;
    &lt;environments&gt;&lt;!--配置环境--&gt;
        &lt;environment&gt;&lt;!--环境变量--&gt;
            &lt;transactionManager /&gt;&lt;!--事务处理器--&gt;
            &lt;dataSource /&gt;&lt;!--数据源--&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;databaseIdProvider /&gt;&lt;!--数据库厂商标识--&gt;
    &lt;mappers/&gt;&lt;!--映射器--&gt;
&lt;/configuration&gt;
</code></pre>
<p>需要注意的是，MyBatis对配置项的顺序有一定要求，如果不符合就会出错。</p>
<p>接下来我们一起了解MyBatis配置项的作用，其中properties、settings、typeAliases、typeHandlers、environments、mappers的使用。</p>
<h2 id="h2-4-2-properties-"><a name="4.2    properties属性" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2    properties属性</h2><p>properties属性可以给系统配置一些运行参数，可以放在xml文件或者properties文件中，以方便修改参数，而不建议放在Java编码中。</p>
<p>一般而言，MyBatis提供了3种方式来使用properties：</p>
<ul>
<li>property子元素</li><li>properties文件</li><li>程序代码传递</li></ul>
<h3 id="h3-4-2-1-property-"><a name="4.2.1    property子元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2.1    property子元素</h3><p>以使用property子元素封装数据库连接的相关配置为例，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--别名--&gt;
    &lt;properties&gt;
        &lt;property name=&quot;database.driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;database.url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
        &lt;property name=&quot;database.username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;database.password&quot; value=&quot;1234&quot;/&gt;
    &lt;/properties&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter3.pojo.Role&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--数据库环境--&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;!--配置事务管理器--&gt;
            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
            &lt;!--配置数据源--&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!--type=&quot;POOLED&quot;表示采用MyBatis内部连接池--&gt;
                &lt;property name=&quot;driver&quot; value=&quot;${database.driver}&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;${database.url}&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;${database.username}&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;${database.password}&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;!--映射文件--&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/ssm/learn/chapter3/mapper/RoleMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<p>在properties的子元素property定义好的属性参数可以通过${属性名称}的形式获取，这样定义一次就可以到处引用了。</p>
<h2 id="h2-4-2-2-properties-"><a name="4.2.2    使用properties文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2.2    使用properties文件</h2><p>使用properties文件是比较简单普遍的方法。首先，创建一个文件<code>jdbc.properties</code>放到classpath路径下，代码如下：</p>
<pre><code class="lang-properties">database.driver=com.mysql.jdbc.Driver
database.url=jdbc:mysql://localhost:3306/ssm_learn
database.username=root
database.password=1234
</code></pre>
<p>然后，在MyBatis中通过properties标签的属性resource来引入properties文件，代码如下：</p>
<pre><code class="lang-xml">&lt;properties resource=&quot;jdbc.properties&quot; /&gt;
</code></pre>
<p>引入后，同样可以通过${属性名称}的形式将properties文件的属性参数引入到MyBatis配置文件中。以后，我们只要维护properties文件就可以维护配置内容了。</p>
<h3 id="h3-4-2-3-"><a name="4.2.3    使用程序传递方式传递参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2.3    使用程序传递方式传递参数</h3><p>在真实的生产环境中，数据库的用户名和密码需要被加密成密文后再配置到properties文件中。连接时再通过工具类，这里使用 CodeUtils.decode()进行解密。那么我们在创建SqlSessionFactory时，就需要把用户名和密码解密后重置到properties属性中，如代码所示：</p>
<pre><code class="lang-java">public class MyTest {
    @Test
    public void test() throws IOException {
        String resource = &quot;mybatis-config.xml&quot;;
        InputStream inputStream;
        InputStream in = Resources.getResourceAsStream(&quot;jdbc.properties&quot;);
        Properties props = new Properties();
        props.load(in);
        String username = props.getProperty(&quot;database.username&quot;);
        String password = props.getProperty(&quot;database.password&quot;);
        //解密用户和密码，并在属性中重置
        props.put(&quot;database.username&quot;, CodeUtils.decode(username));
        props.put(&quot;database.password&quot;, CodeUtils.decode(password));
        inputStream = Resources.getResourceAsStream(resource);
        //使用程序传递的方式覆盖原有的properties属性参数
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream, props);
    }
}
</code></pre>
<h3 id="h3-4-2-4-"><a name="4.2.4    总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2.4    总结</h3><p>使用properties的3种方式是有优先级的，程序传递方式 &gt; 使用properties文件方式 &gt; 使用property子元素，MyBatis会根据优先级覆盖原先配置的属性值。建议使用properties文件方式，这种方式简单方便，如果存在需要加密的场景，可以参考以上代码。</p>
<h2 id="h2-4-3-settings-"><a name="4.3    settings设置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.3    settings设置</h2><p>settings设置是MyBatis中最复杂的配置，但是大部分情况下使用默认值即可，只需要修改一些常用规则即可，比如自动映射、驼峰命名映射、级联规则、是否启用缓存、执行器（Executor）类型等，如下表所示：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>作用</th>
<th>配置选项说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoMappingBehavior</td>
<td>指定MyBatis应如何自动映射列到字段或属性。&lt;br /&gt;1、NONE表示取消自动映射&lt;br /&gt;2、PARTIAL表示只会自动映射，没有定义嵌套结果集和映射结果集&lt;br /&gt;3、FULL表示会自动映射任何复杂结果集（无论是否嵌套）</td>
<td>NONE&lt;br /&gt;PARTIAL&lt;br /&gt;FULL</td>
<td>PARTIAL</td>
</tr>
<tr>
<td>mapUnderscoreToCamelCase</td>
<td>是否开启自动驼峰命名规则映射，即从经典数据库列名A_COLUMN到经典Java属性名aColumn的类似映射</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>aggressiveLazyLoading</td>
<td>当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>cacheEnabled</td>
<td>该配置影响所有映射器中配置缓存的全局开关</td>
<td>true\</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>defaultExecutorType</td>
<td>配置默认的执行器。SIMPLE是普通的执行器；REUSE会重用预处理语句（prepared statements）；BATCH执行器将重用语句并执行批量更新</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<h2 id="h2-4-4-typealiases-"><a name="4.4    typeAliases别名" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.4    typeAliases别名</h2><p>由于类的全限定名称很长，为了简化使用，在MyBatis中允许定义一个别名代表这个类。别名分为系统定义别名和自定义别名。注意，在MyBatis中别名不区分大小写。</p>
<h3 id="h3-4-4-1-"><a name="4.4.1    系统定义别名" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.4.1    系统定义别名</h3><table>
<thead>
<tr>
<th>别名</th>
<th>Java类型</th>
<th>是否支持数组</th>
</tr>
</thead>
<tbody>
<tr>
<td>_byte</td>
<td>byte</td>
<td>y</td>
</tr>
<tr>
<td>_short</td>
<td>short</td>
<td>y</td>
</tr>
<tr>
<td>_int</td>
<td>int</td>
<td>y</td>
</tr>
<tr>
<td>_integer</td>
<td>int</td>
<td>y</td>
</tr>
<tr>
<td>_double</td>
<td>double</td>
<td>y</td>
</tr>
<tr>
<td>_float</td>
<td>float</td>
<td>y</td>
</tr>
<tr>
<td>_boolean</td>
<td>boolean</td>
<td>y</td>
</tr>
<tr>
<td>string</td>
<td>String</td>
<td>y</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
<td>y</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
<td>y</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
<td>y</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>y</td>
</tr>
<tr>
<td>integer</td>
<td>Integer</td>
<td>y</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>y</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
<td>y</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
<td>y</td>
</tr>
<tr>
<td>date</td>
<td>Date</td>
<td>y</td>
</tr>
<tr>
<td>decimal</td>
<td>BigDecimal</td>
<td>y</td>
</tr>
<tr>
<td>bigdecimal</td>
<td>BigDecimal</td>
<td>y</td>
</tr>
<tr>
<td>object</td>
<td>Object</td>
<td>y</td>
</tr>
<tr>
<td>map</td>
<td>Map</td>
<td>n</td>
</tr>
<tr>
<td>hashmap</td>
<td>HashMap</td>
<td>n</td>
</tr>
<tr>
<td>list</td>
<td>List</td>
<td>n</td>
</tr>
<tr>
<td>arraylist</td>
<td>ArrayList</td>
<td>n</td>
</tr>
<tr>
<td>collection</td>
<td>Collection</td>
<td>n</td>
</tr>
<tr>
<td>iterator</td>
<td>Iterator</td>
<td>n</td>
</tr>
<tr>
<td>ResultSet</td>
<td>ResultSet</td>
<td>n</td>
</tr>
</tbody>
</table>
<p>如果需要使用对应类型的数据型，要看其是否能支持数据，如果支持只需要使用别名+[]即可，比如_int数据的别名就是_int[]。而类似list这样不支持数据的别名，则不能这样写。</p>
<p>事实上Configuration对象也对一些常用的配置项配置了别名，如下所示：</p>
<pre><code class="lang-java">//事务方式别名
typeAliasRegistry.registerAlias(&quot;JDBC&quot;,JdbcTransactionFactory.class);
typeAliasRegistry.registerAlias(&quot;MANAGED&quot;,
                                ManagedTransactionFactory.class);
//数据源类型别名
typeAliasRegistry.registerAlias(&quot;JNDI&quot;,JndiDataSourceFactory.class);
typeAliasRegistry.registerAlias(&quot;POOLED&quot;,
                                PooledDataSourceFactory.class);
typeAliasRegistry.registerAlias(&quot;UNPOOLED&quot;,
                                UnpooledDataSourceFactory.class);
//缓存策略别名
typeAliasRegistry.registerAlias(&quot;PERPETUAL&quot;,PerpetualCache.class);
typeAliasRegistry.registerAlias(&quot;FIFO&quot;,FifoCache.class);
typeAliasRegistry.registerAlias(&quot;LRU&quot;,LruCache.class);
typeAliasRegistry.registerAlias(&quot;SOFT&quot;,SoftCache.class);
typeAliasRegistry.registerAlias(&quot;WEAK&quot;,WeakCache.class);
//数据库标识别名
typeAliasRegistry.registerAlias(&quot;DB VENDOR&quot;,
                                VendorDatabaseIdProvider.class);
//语言驱动类别名
typeAliasRegistry.registerAlias(&quot;XML&quot;,XMLLanguageDriver.class);
typeAliasRegistry.registerAlias(&quot;RAW&quot;,RawLanguageDriver.class);
//日志类别名
typeAliasRegistry.registerAlias(&quot;SLF4J&quot;,Slf4jImpl.class);
typeAliasRegistry.registerAlias(&quot;COMMONS LOGGING&quot;,
                                JakartaCommonsLoggingImpl.class);
typeAliasRegistry.registerAlias(&quot;LOG4J&quot;,Log4jImpl.class);
typeAliasRegistry.registerAlias(&quot;LOG4J2&quot;,Log4j2Impl.class);
typeAliasRegistry.registerAlias(&quot;JDK LOGGING&quot;,Jdk14LoggingImpl.class
                                typeAliasRegistry.registerAlias(&quot;STDOUT LOGGING&quot;,StdOutImpl.class);
                                typeAliasRegistry.registerAlias(&quot;NO_LOGGING&quot;,NoLoggingImpl.class);
                                //动态代理別名
                                typeAliasRegistry.registerAlias(&quot;CGLIB&quot;,CglibProxyFactory.class);
                                typeAliasRegistry.registerAlias(&quot;JAVASSIST&quot;,
                                                                JavassistProxyFactory.class);
</code></pre>
<h3 id="h3-4-4-2-"><a name="4.4.2    自定义别名" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.4.2    自定义别名</h3><p>我们可以使用TypeAliasRegistry类的registerAlias方法注册，也可以采用配置文件或者扫描方式来自定义别名。</p>
<p>使用配置文件定义很简单，如下所示：</p>
<pre><code class="lang-xml">&lt;typeAliases&gt;
    &lt;typeAlias alias=&quot;role&quot; type=&quot;com.ssm.learn.chapter4.pojo.Role&quot;/&gt;
    &lt;typeAlias alias=&quot;user&quot; type=&quot;com.ssm.learn.chapter4.pojo.User&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre>
<p>但是如果很多类需要定义别名，使用以上方式很麻烦。MyBatis还支持扫描别名，比如上面的两个类都在包com.ssm.learn.chapter4.pojo下的话，就可以这样定义，如下所示：</p>
<pre><code class="lang-xml">&lt;typeAliases&gt;
    &lt;package name=&quot;com.ssm.learn.chapter4.pojo&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre>
<p>MyBatis将扫描这个包里的所有类，将其第一个字母变成小写作为其别名，比如类Role的别名会变成role。但如果MyBatis扫描了多个包，不同的包中存在相同的类名时将会出现异常。这个时候可以使用注解<a href="https://github.com/Alias" title="&#64;Alias" class="at-link">@Alias</a>进行区分，如下所示：</p>
<pre><code class="lang-java">package com.learn.ssm.chapter3.pojo;
@Alias(&quot;user3&quot;)
public class User{
    ......
}
</code></pre>
<h2 id="h2-4-5-typehandler-"><a name="4.5    typeHandler类型转换器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.5    typeHandler类型转换器</h2><p>在typeHandler中，分为jdbcType和javaType，其中jdbcType用于定义数据库类型，javaType用于定义Java类型，那么typeHandler的作用就是承担jdbcType和javaType之间的相互转换。如图所示：<img src="http://cdn.alanliang.site/note/typeHandler.jpg" alt="typeHandler"></p>
<p>因为MyBatis自动探测应该使用什么类型的typeHandler进行处理，所以并不需要我们配置typeHandler、javaType和jdbcType。但是有些场景无法探测，例如使用自定义枚举或者数据库使用特殊数据类型的场景，这时候需要使用自定义的typeHandler去处理类型之间的转换问题。</p>
<p>和别名一样，在MyBatis中存在系统定义typeHandler和自定义typeHandler。</p>
<h3 id="h3-4-5-1-typehandler"><a name="4.5.1    系统定义的typeHandler" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.5.1    系统定义的typeHandler</h3><p>MyBatis内部定义了许多有用的typeHandler，在大部分情况下无须显示声明。但有时候需要修改一些转换规则，比如枚举类型。</p>
<h3 id="h3-4-5-2-typehandler"><a name="4.5.2    自定义typeHandler" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.5.2    自定义typeHandler</h3><p>要实现typeHandler就需要去实现接口typeHandler，或者继承BaseTypeHandler。这里我们仿造一个StringTypeHandler来实现一个自定义的typeHandler——MyTypeHandler，它只是用于实现接口typeHandler，代码如下：</p>
<pre><code class="lang-java">//启用扫描注册的时候需要注解
@MappedTypes(String.class)
@MappedJdbcTypes(JdbcType.VARCHAR)
public class MyTypeHandler implements TypeHandler&lt;String&gt; {

    Logger logger = Logger.getLogger(MyTypeHandler.class);

    @Override    
    public void setParameter(PreparedStatement ps, int i, String parameter,
            JdbcType jdbcType) throws SQLException {
        logger.info(&quot;设置string参数【&quot; + parameter+&quot;】&quot;);
        ps.setString(i, parameter);
    }

    @Override    
    public String getResult(ResultSet rs, String columnName)
            throws SQLException {
        String result = rs.getString(columnName);
        logger.info(&quot;读取string参数1【&quot; + result+&quot;】&quot;);
        return result;
    }

    @Override
    public String getResult(ResultSet rs, int columnIndex) throws SQLException {
        String result = rs.getString(columnIndex);
        logger.info(&quot;读取string参数2【&quot; + result+&quot;】&quot;);
        return result;
    }

    @Override
    public String getResult(CallableStatement cs, int columnIndex)
            throws SQLException {
        String result = cs.getString(columnIndex);
        logger.info(&quot;读取string参数3【&quot; + result+&quot;】&quot;);
        return result;
    }
}
</code></pre>
<p>定义的typeHandler泛型为String，显然我们要把数据库的数据类型转化为String型，然后实现设置参数和获取结果集的方法。此时还需要启动typeHandler，如下所示：</p>
<pre><code class="lang-xml">&lt;typeHandlers&gt;
    &lt;typeHandler jdbcType=&quot;VARCHAR&quot; javaType=&quot;string&quot; handler=&quot;com.ssm.learn.chapter4.typeHandler.MyTypeHandler&quot;/&gt;
&lt;/typeHandlers&gt;
</code></pre>
<p>有时候还可以显示启用typeHandler，一般有两种方式，如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.learn.ssm.chapter4.mapper.RoleMapper&quot;&gt;

    &lt;resultMap id=&quot;roleMapper&quot; type=&quot;role&quot;&gt;
        &lt;result property=&quot;id&quot; column=&quot;id&quot; /&gt;
        &lt;!--注意到下面的jdbcType属性和javaType属性--&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot; jdbcType=&quot;VARCHAR&quot;
            javaType=&quot;string&quot; /&gt;

        &lt;!--注意到下面的typeHandler属性--&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;
            typeHandler=&quot;com.learn.ssm.chapter4.typehandler.MyTypeHandler&quot; /&gt;
    &lt;/resultMap&gt;

    &lt;!--注意到下面的#{roleName, jdbcType=VARCHAR,javaType=string}--&gt;
    &lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultMap=&quot;roleMapper&quot;&gt;
        select id, role_name, note from t_role
        where role_name like concat(&#39;%&#39;, #{roleName, jdbcType=VARCHAR,
        javaType=string}, &#39;%&#39;)
    &lt;/select&gt;

    &lt;select id=&quot;findRoles2&quot; parameterType=&quot;string&quot; resultMap=&quot;roleMapper&quot;&gt;
        select id, role_name, note from t_role
        where note like concat(&#39;%&#39;, #{note,
        typeHandler=com.learn.ssm.chapter4.typehandler.MyTypeHandler}, &#39;%&#39;)
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>注意，要么指定了与自定义typeHandler一致的javaType和jdbcType，要么直接使用typeHandler指定具体的实现类。</p>
, textContent=## 4.1	概述

Mybatis配置文件的主要元素如表所示：

```xml
<configuration><!--配置-->
    <properties/><!--属性-->
    <settings/><!--设置-->
    <typeAliases/><!--类型命名-->
    <typeHandler><!--类型处理器-->
    <objectFactory/><!--对象工厂-->
    <plugins/><!--插件-->
    <environments><!--配置环境-->
        <environment><!--环境变量-->
            <transactionManager /><!--事务处理器-->
            <dataSource /><!--数据源-->
        </environment>
    </environments>
    <databaseIdProvider /><!--数据库厂商标识-->
    <mappers/><!--映射器-->
</configuration>
```

需要注意的是，MyBatis对配置项的顺序有一定要求，如果不符合就会出错。

接下来我们一起了解MyBatis配置项的作用，其中properties、settings、typeAliases、typeHandlers、environments、mappers的使用。

##4.2	properties属性

properties属性可以给系统配置一些运行参数，可以放在xml文件或者properties文件中，以方便修改参数，而不建议放在Java编码中。

一般而言，MyBatis提供了3种方式来使用properties：

- property子元素
- properties文件
- 程序代码传递

###4.2.1    property子元素

以使用property子元素封装数据库连接的相关配置为例，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--别名-->
    <properties>
        <property name="database.driver" value="com.mysql.jdbc.Driver"/>
        <property name="database.url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
        <property name="database.username" value="root"/>
        <property name="database.password" value="1234"/>
    </properties>
    <typeAliases>
        <typeAlias alias="role" type="com.ssm.learn.chapter3.pojo.Role"/>
    </typeAliases>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <!--配置事务管理器-->
            <transactionManager type="JDBC"></transactionManager>
            <!--配置数据源-->
            <dataSource type="POOLED"><!--type="POOLED"表示采用MyBatis内部连接池-->
                <property name="driver" value="${database.driver}"/>
                <property name="url" value="${database.url}"/>
                <property name="username" value="${database.username}"/>
                <property name="password" value="${database.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--映射文件-->
    <mappers>
        <mapper resource="com/ssm/learn/chapter3/mapper/RoleMapper.xml"/>
    </mappers>
</configuration>
```

在properties的子元素property定义好的属性参数可以通过${属性名称}的形式获取，这样定义一次就可以到处引用了。

##4.2.2	使用properties文件

使用properties文件是比较简单普遍的方法。首先，创建一个文件`jdbc.properties`放到classpath路径下，代码如下：

```properties
database.driver=com.mysql.jdbc.Driver
database.url=jdbc:mysql://localhost:3306/ssm_learn
database.username=root
database.password=1234
```

然后，在MyBatis中通过properties标签的属性resource来引入properties文件，代码如下：

```xml
<properties resource="jdbc.properties" />
```

引入后，同样可以通过${属性名称}的形式将properties文件的属性参数引入到MyBatis配置文件中。以后，我们只要维护properties文件就可以维护配置内容了。

### 4.2.3	使用程序传递方式传递参数

在真实的生产环境中，数据库的用户名和密码需要被加密成密文后再配置到properties文件中。连接时再通过工具类，这里使用 CodeUtils.decode()进行解密。那么我们在创建SqlSessionFactory时，就需要把用户名和密码解密后重置到properties属性中，如代码所示：

```java
public class MyTest {
    @Test
    public void test() throws IOException {
        String resource = "mybatis-config.xml";
        InputStream inputStream;
        InputStream in = Resources.getResourceAsStream("jdbc.properties");
        Properties props = new Properties();
        props.load(in);
        String username = props.getProperty("database.username");
        String password = props.getProperty("database.password");
        //解密用户和密码，并在属性中重置
        props.put("database.username", CodeUtils.decode(username));
        props.put("database.password", CodeUtils.decode(password));
        inputStream = Resources.getResourceAsStream(resource);
        //使用程序传递的方式覆盖原有的properties属性参数
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream, props);
    }
}
```

### 4.2.4	总结

使用properties的3种方式是有优先级的，程序传递方式 > 使用properties文件方式 > 使用property子元素，MyBatis会根据优先级覆盖原先配置的属性值。建议使用properties文件方式，这种方式简单方便，如果存在需要加密的场景，可以参考以上代码。

## 4.3	settings设置

settings设置是MyBatis中最复杂的配置，但是大部分情况下使用默认值即可，只需要修改一些常用规则即可，比如自动映射、驼峰命名映射、级联规则、是否启用缓存、执行器（Executor）类型等，如下表所示：

| 配置项                   | 作用                                                         | 配置选项说明                | 默认值  |
| ------------------------ | ------------------------------------------------------------ | --------------------------- | ------- |
| autoMappingBehavior      | 指定MyBatis应如何自动映射列到字段或属性。<br />1、NONE表示取消自动映射<br />2、PARTIAL表示只会自动映射，没有定义嵌套结果集和映射结果集<br />3、FULL表示会自动映射任何复杂结果集（无论是否嵌套） | NONE<br />PARTIAL<br />FULL | PARTIAL |
| mapUnderscoreToCamelCase | 是否开启自动驼峰命名规则映射，即从经典数据库列名A_COLUMN到经典Java属性名aColumn的类似映射 | true\|false                 | false   |
| lazyLoadingEnabled       | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态 | true\|false                 | false   |
| aggressiveLazyLoading    | 当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载 | true\|false                 | false   |
| cacheEnabled             | 该配置影响所有映射器中配置缓存的全局开关                     | true\|false                 | true    |
| defaultExecutorType      | 配置默认的执行器。SIMPLE是普通的执行器；REUSE会重用预处理语句（prepared statements）；BATCH执行器将重用语句并执行批量更新 | true\|false                 | false   |

## 4.4	typeAliases别名

由于类的全限定名称很长，为了简化使用，在MyBatis中允许定义一个别名代表这个类。别名分为系统定义别名和自定义别名。注意，在MyBatis中别名不区分大小写。

### 4.4.1	系统定义别名

| 别名       | Java类型   | 是否支持数组 |
| ---------- | ---------- | ------------ |
| _byte      | byte       | y            |
| _short     | short      | y            |
| _int       | int        | y            |
| _integer   | int        | y            |
| _double    | double     | y            |
| _float     | float      | y            |
| _boolean   | boolean    | y            |
| string     | String     | y            |
| byte       | Byte       | y            |
| long       | Long       | y            |
| short      | Short      | y            |
| int        | Integer    | y            |
| integer    | Integer    | y            |
| double     | Double     | y            |
| float      | Float      | y            |
| boolean    | Boolean    | y            |
| date       | Date       | y            |
| decimal    | BigDecimal | y            |
| bigdecimal | BigDecimal | y            |
| object     | Object     | y            |
| map        | Map        | n            |
| hashmap    | HashMap    | n            |
| list       | List       | n            |
| arraylist  | ArrayList  | n            |
| collection | Collection | n            |
| iterator   | Iterator   | n            |
| ResultSet  | ResultSet  | n            |

如果需要使用对应类型的数据型，要看其是否能支持数据，如果支持只需要使用别名+[]即可，比如\_int数据的别名就是\_int[]。而类似list这样不支持数据的别名，则不能这样写。

事实上Configuration对象也对一些常用的配置项配置了别名，如下所示：

```java
//事务方式别名
typeAliasRegistry.registerAlias("JDBC",JdbcTransactionFactory.class);
typeAliasRegistry.registerAlias("MANAGED",
                                ManagedTransactionFactory.class);
//数据源类型别名
typeAliasRegistry.registerAlias("JNDI",JndiDataSourceFactory.class);
typeAliasRegistry.registerAlias("POOLED",
                                PooledDataSourceFactory.class);
typeAliasRegistry.registerAlias("UNPOOLED",
                                UnpooledDataSourceFactory.class);
//缓存策略别名
typeAliasRegistry.registerAlias("PERPETUAL",PerpetualCache.class);
typeAliasRegistry.registerAlias("FIFO",FifoCache.class);
typeAliasRegistry.registerAlias("LRU",LruCache.class);
typeAliasRegistry.registerAlias("SOFT",SoftCache.class);
typeAliasRegistry.registerAlias("WEAK",WeakCache.class);
//数据库标识别名
typeAliasRegistry.registerAlias("DB VENDOR",
                                VendorDatabaseIdProvider.class);
//语言驱动类别名
typeAliasRegistry.registerAlias("XML",XMLLanguageDriver.class);
typeAliasRegistry.registerAlias("RAW",RawLanguageDriver.class);
//日志类别名
typeAliasRegistry.registerAlias("SLF4J",Slf4jImpl.class);
typeAliasRegistry.registerAlias("COMMONS LOGGING",
                                JakartaCommonsLoggingImpl.class);
typeAliasRegistry.registerAlias("LOG4J",Log4jImpl.class);
typeAliasRegistry.registerAlias("LOG4J2",Log4j2Impl.class);
typeAliasRegistry.registerAlias("JDK LOGGING",Jdk14LoggingImpl.class
                                typeAliasRegistry.registerAlias("STDOUT LOGGING",StdOutImpl.class);
                                typeAliasRegistry.registerAlias("NO_LOGGING",NoLoggingImpl.class);
                                //动态代理別名
                                typeAliasRegistry.registerAlias("CGLIB",CglibProxyFactory.class);
                                typeAliasRegistry.registerAlias("JAVASSIST",
                                                                JavassistProxyFactory.class);
```

### 4.4.2	自定义别名

我们可以使用TypeAliasRegistry类的registerAlias方法注册，也可以采用配置文件或者扫描方式来自定义别名。

使用配置文件定义很简单，如下所示：

```xml
<typeAliases>
    <typeAlias alias="role" type="com.ssm.learn.chapter4.pojo.Role"/>
    <typeAlias alias="user" type="com.ssm.learn.chapter4.pojo.User"/>
</typeAliases>
```

但是如果很多类需要定义别名，使用以上方式很麻烦。MyBatis还支持扫描别名，比如上面的两个类都在包com.ssm.learn.chapter4.pojo下的话，就可以这样定义，如下所示：

```xml
<typeAliases>
    <package name="com.ssm.learn.chapter4.pojo"/>
</typeAliases>
```

MyBatis将扫描这个包里的所有类，将其第一个字母变成小写作为其别名，比如类Role的别名会变成role。但如果MyBatis扫描了多个包，不同的包中存在相同的类名时将会出现异常。这个时候可以使用注解@Alias进行区分，如下所示：

```java
package com.learn.ssm.chapter3.pojo;
@Alias("user3")
public class User{
    ......
}
```

## 4.5	typeHandler类型转换器

在typeHandler中，分为jdbcType和javaType，其中jdbcType用于定义数据库类型，javaType用于定义Java类型，那么typeHandler的作用就是承担jdbcType和javaType之间的相互转换。如图所示：![typeHandler](http://cdn.alanliang.site/note/typeHandler.jpg)

因为MyBatis自动探测应该使用什么类型的typeHandler进行处理，所以并不需要我们配置typeHandler、javaType和jdbcType。但是有些场景无法探测，例如使用自定义枚举或者数据库使用特殊数据类型的场景，这时候需要使用自定义的typeHandler去处理类型之间的转换问题。

和别名一样，在MyBatis中存在系统定义typeHandler和自定义typeHandler。

### 4.5.1	系统定义的typeHandler

MyBatis内部定义了许多有用的typeHandler，在大部分情况下无须显示声明。但有时候需要修改一些转换规则，比如枚举类型。

### 4.5.2	自定义typeHandler

要实现typeHandler就需要去实现接口typeHandler，或者继承BaseTypeHandler。这里我们仿造一个StringTypeHandler来实现一个自定义的typeHandler——MyTypeHandler，它只是用于实现接口typeHandler，代码如下：

```java
//启用扫描注册的时候需要注解
@MappedTypes(String.class)
@MappedJdbcTypes(JdbcType.VARCHAR)
public class MyTypeHandler implements TypeHandler<String> {

	Logger logger = Logger.getLogger(MyTypeHandler.class);

	@Override	
    public void setParameter(PreparedStatement ps, int i, String parameter,
			JdbcType jdbcType) throws SQLException {
		logger.info("设置string参数【" + parameter+"】");
		ps.setString(i, parameter);
	}

	@Override	
    public String getResult(ResultSet rs, String columnName)
			throws SQLException {
		String result = rs.getString(columnName);
		logger.info("读取string参数1【" + result+"】");
		return result;
	}

	@Override
	public String getResult(ResultSet rs, int columnIndex) throws SQLException {
		String result = rs.getString(columnIndex);
		logger.info("读取string参数2【" + result+"】");
		return result;
	}

	@Override
	public String getResult(CallableStatement cs, int columnIndex)
			throws SQLException {
		String result = cs.getString(columnIndex);
		logger.info("读取string参数3【" + result+"】");
		return result;
	}
}

```

定义的typeHandler泛型为String，显然我们要把数据库的数据类型转化为String型，然后实现设置参数和获取结果集的方法。此时还需要启动typeHandler，如下所示：

```xml
<typeHandlers>
    <typeHandler jdbcType="VARCHAR" javaType="string" handler="com.ssm.learn.chapter4.typeHandler.MyTypeHandler"/>
</typeHandlers>
```

有时候还可以显示启用typeHandler，一般有两种方式，如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learn.ssm.chapter4.mapper.RoleMapper">

	<resultMap id="roleMapper" type="role">
		<result property="id" column="id" />
        <!--注意到下面的jdbcType属性和javaType属性-->
		<result property="roleName" column="role_name" jdbcType="VARCHAR"
			javaType="string" />
        
        <!--注意到下面的typeHandler属性-->
		<result property="note" column="note"
			typeHandler="com.learn.ssm.chapter4.typehandler.MyTypeHandler" />
	</resultMap>
    
	<!--注意到下面的#{roleName, jdbcType=VARCHAR,javaType=string}-->
	<select id="findRoles" parameterType="string" resultMap="roleMapper">
		select id, role_name, note from t_role
		where role_name like concat('%', #{roleName, jdbcType=VARCHAR,
		javaType=string}, '%')
	</select>

	<select id="findRoles2" parameterType="string" resultMap="roleMapper">
		select id, role_name, note from t_role
		where note like concat('%', #{note,
		typeHandler=com.learn.ssm.chapter4.typehandler.MyTypeHandler}, '%')
	</select>
</mapper>
```

注意，要么指定了与自定义typeHandler一致的javaType和jdbcType，要么直接使用typeHandler指定具体的实现类。

, cover=http://cdn.alanliang.site/note/oilpainting4.jpg, views=0, likes=0, comments=0, appreciable=false, commentable=true, published=true, top=false, recommend=false, authorId=3, categoryId=1, type=1, createTime=Mon Jun 15 11:05:27 CST 2020, updateTime=Mon Jun 15 11:05:27 CST 2020, sort=3, status=1, category=null, tagList=[Tag(id=12, name=JavaEE, color=null, createTime=null, updateTime=null, articleCount=null), Tag(id=15, name=Mybatis, color=null, createTime=null, updateTime=null, articleCount=null), Tag(id=20, name=Mybatis配置, color=#D5F5E3, createTime=Mon Jun 15 11:05:27 CST 2020, updateTime=Mon Jun 15 11:05:27 CST 2020, articleCount=null)], author=null) }(String), 0:0:0:0:0:0:0:1(String), 257(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:05:28.042 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:05:29.775 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:05:29.775 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:05:29.777 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:05:29.777 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:05:29.785 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-15 11:05:29.786 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:29.786 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:05:29.788 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:05:29.789 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:29.789 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:05:29.790 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:29.791 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:29.791 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:05:29.792 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:29.792 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:29.793 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:05:29.794 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:29.801 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:05:29.801 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:05:29.799(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 22(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:05:29.803 DEBUG 16004 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:05:39.594 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:05:39.594 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:05:39.593(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:05:39.598 DEBUG 16004 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:05:43.463 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:05:43.463 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 4(Long)
2020-06-15 11:05:43.465 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:05:43.476 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:05:43.476 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 4(Long)
2020-06-15 11:05:43.478 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:05:43.669 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:05:43.669 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:05:43.668(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=4, status=2) }(String), 0:0:0:0:0:0:0:1(String), 204(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:05:43.670 DEBUG 16004 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:05:43.684 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:05:43.684 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:05:43.686 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:05:43.686 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:05:43.697 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 4
2020-06-15 11:05:43.700 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:43.701 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:05:43.703 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:05:43.704 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:43.704 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:05:43.705 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:43.706 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:43.706 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:05:43.707 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:43.708 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:43.708 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:05:43.709 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:43.716 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:05:43.716 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:05:43.715(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ArticleQuery(title=null, type=null, categoryId=null, published=null, status=null, top=null, recommend=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 30(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:05:43.720 DEBUG 16004 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:05:49.774 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:05:49.774 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:05:49.776 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 1
2020-06-15 11:05:49.780 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:05:49.780 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:05:49.783 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 11:05:49.789 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:05:49.789 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:05:49.790 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:05:49.791 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:05:49.801 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 4
2020-06-15 11:05:49.803 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:49.803 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:05:49.807 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:49.810 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:49.811 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:05:49.814 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:49.817 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:49.818 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:05:49.819 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:05:49.820 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:05:49.820 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:05:49.821 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:05:49.825 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:05:49.826 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:05:49.824(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 52(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:05:49.829 DEBUG 16004 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:08:33.160 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 11:08:33.161 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: Mybatis映射器(String), #D5F5E3(String), 2020-06-15 11:08:33.159(Timestamp), 2020-06-15 11:08:33.159(Timestamp)
2020-06-15 11:08:33.162 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 11:08:33.163 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:08:33.164 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 映射器(String), JavaEE互联网轻量级框架整合开发第五章(String), <h1 id="h1--5-"><a name="第5章    映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第5章    映射器</h1><p>映射器是MyBatis最复杂且最重要的组件。它由一个接口和XML文件（或者注解组成）。在映射器中，可以配置参数、各类的SQL语句、存储过程、缓存、级联等复杂的内容，并且通过简易的映射规则映射到指定的POJO或者其他对象上，映射器能有效屏蔽JDBC底层的代码。</p>
<p>映射器可以使用注解完成，但在企业应用不广，推荐使用XML方式，是因为：</p>
<ul>
<li>面对复杂性，SQL会显得无力，尤其是长句SQL；</li><li>注解的可读性较差；</li><li>注解丢失了XML上下文引用的功能</li></ul>
<h2 id="h2-5-1-"><a name="5.1    概述" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    概述</h2><p>映射器的常用配置元素如下表所示：</p>
<table>
<thead>
<tr>
<th>元素名称</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>select</td>
<td>查询语句，最常用、最复杂的元素之一</td>
<td>可以自定义参数，返回结果集等</td>
</tr>
<tr>
<td>insert</td>
<td>插入语句</td>
<td>执行后返回一个参数，代表插入的条数</td>
</tr>
<tr>
<td>update</td>
<td>更新语句</td>
<td>执行后返回一个参数，代表更新的条数</td>
</tr>
<tr>
<td>delete</td>
<td>删除语句</td>
<td>执行后返回一个参数，代表删除的条数</td>
</tr>
<tr>
<td><del>parameterMap</del></td>
<td>定义参数映射关系</td>
<td>即将被删除，不建议使用</td>
</tr>
<tr>
<td>sql</td>
<td>允许定义一部分SQL，然后在各个地方引用它</td>
<td>例如，定义一张表的列名，可以在多个SQL语句中使用</td>
</tr>
<tr>
<td>resultMap</td>
<td>用来描述从数据库结果集中来加载对象，它是最复杂、最强大的元素</td>
<td>提供映射规则</td>
</tr>
<tr>
<td>cache</td>
<td>给定名称空间的缓存配置</td>
<td>—-</td>
</tr>
<tr>
<td>cache-ref</td>
<td>其他命名空间缓存配置的引用</td>
<td>—-</td>
</tr>
</tbody>
</table>
<h2 id="h2-5-2-"><a name="5.2    引入映射器的方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2    引入映射器的方法</h2><h3 id="h3-5-2-1-"><a name="5.2.1    用文件路径引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.1    用文件路径引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;mapper resource=&quot;demo/mapper/demoMapper.xml&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，resource属性值为映射器的xml文件的资源路径</p>
<h3 id="h3-5-2-2-"><a name="5.2.2    用包名引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.2    用包名引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;package name=&quot;demo.mapper&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，name属性值为映射器的接口所在包的全限定名</p>
<h3 id="h3-5-2-3-"><a name="5.2.3    用类注册引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.3    用类注册引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;mapper class=&quot;demo.mapper.DemoMapper1&quot;/&gt;
     &lt;mapper class=&quot;demo.mapper.DemoMapper2&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，class属性值为映射器的接口的全限定名</p>
<h2 id="h2-5-3-select-"><a name="5.3    select元素——查询语句" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3    select元素——查询语句</h2><p>select元素的常用配置如下表所示：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>它和Mapper的命名空间组合起来是唯一的，供MyBatis调用</td>
<td>如果命名空间和id结合起来不唯一，MyBatis会抛出异常</td>
</tr>
<tr>
<td>parameterType</td>
<td>可以给出类的全限定名，也可以是别名，但是别名必须是MyBatis内部定义或者自定义的</td>
<td>可以选择JavaBean、Map等简单的参数类型传递给SQL</td>
</tr>
<tr>
<td><del>parameterMap</del></td>
<td>即将废弃的元素，不建议使用</td>
<td>—-</td>
</tr>
<tr>
<td>resultType</td>
<td>定义类的全路径，在允许自动匹配的情况下，结果集将通过JavaBean的规则映射；或定义为in、double、float、map等参数；也可以使用别名，但是要符合别名规范，且不能和resultMap同时使用</td>
<td>常用的参数之一，比如统计总条数时可以把它的值设置为int</td>
</tr>
<tr>
<td>resultMap</td>
<td>它是映射集的引用，将执行强大的映射功能。我们可以使用resultType和resultMap其中的一个，resultMap能提供自定义映射规则的机会</td>
<td>MyBatis最复杂的元素，可以配置映射规则、级联、typeHandler等</td>
</tr>
</tbody>
</table>
<p>另外，如果还要设置缓存，还会使用到FlushCache、useCache，这里不展开讲。</p>
<h3 id="h3-5-3-1-select-"><a name="5.3.1    简单的select元素的应用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.1    简单的select元素的应用</h3><p>先学习一个最简单的例子：统计用户表同一个姓氏的用户数量，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;countByFirstName&quot; parameterType=&quot;string&quot; resultType=&quot;int&quot;&gt;
    select count(*) total from t_user where user_name like concat(#{firstName},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>其中的元素含义：</p>
<ul>
<li>id：SQL语句的唯一标识</li><li>parameterType：SQL语句接收的参数类型，可以是类的别名也可以是类的全限定名</li><li>resultType：SQL语句返回的结果类型，可以是类的别名也可以是类的全限定名</li></ul>
<p>接着还需要定义一个接口方法，代码如下所示：</p>
<pre><code class="lang-java">public interface UserMapper {
    int countByFirstName(String firstName);
}
</code></pre>
<h3 id="h3-5-3-2-"><a name="5.3.2    自动映射和驼峰规则" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.2    自动映射和驼峰规则</h3><p>MyBatis提供自动映射功能，在默认情况下是开启的。</p>
<p>在settings元素中有两个可配置选项autoMappingBehavior和mapUnderscoreToCamelCase，它们是控制自动映射和驼峰映射的开关。一般而言，自动映射使用的多一些，而驼峰映射要求比较苛刻，应用不广。</p>
<p>autoMappingBehavior的取值有：</p>
<ul>
<li>NONE，不进行自动映射</li><li>PARTIAL，默认值，只对没有嵌套结果集进行自动映射</li><li>FULL，对所有的结果集进行自动映射，包括嵌套结果集</li></ul>
<p>在默认情况下使用默认值即可。规则如下所示：</p>
<pre><code class="lang-java">public class Role {
    private Long id;
    private String roleName;
    private String note;
    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<p>如果编写的SQL列名和POJO的属性名一致，那么就会形成自动映射。原来的列名role_name被别名roleName替代，所以也会对应起来。</p>
<h3 id="h3-5-3-3-"><a name="5.3.3    传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3    传递多个参数</h3><h4 id="h4-5-3-3-1-map-"><a name="5.3.3.1    使用map接口传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.1    使用map接口传递多个参数</h4><p>假设要通过角色名称（role_name）和备注（note）两个参数对角色进行模糊查询，则可以使用map接口。</p>
<p>把接口方法定义为：    </p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByMap(Map&lt;String,Object&gt; parameterMap);
</code></pre>
<p>使用它在SQL中设置对应的参数，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRolesByMap&quot; parameterType=&quot;map&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>测试如下：</p>
<pre><code class="lang-java">@Test
public void test2() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Map&lt;String, Object&gt; parameterMap = new HashMap&lt;&gt;();
    parameterMap.put(&quot;roleName&quot;, &quot;1&quot;);
    parameterMap.put(&quot;note&quot;, &quot;1&quot;);
    List&lt;Role&gt; roles = roleMapper.findRolesByMap(parameterMap);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>由于使用map不能限定其传递的数据类型，所以业务性质不强，可读性差，因此不推荐使用。</p>
<h4 id="h4-5-3-3-2-"><a name="5.3.3.2    使用注解传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.2    使用注解传递多个参数</h4><p>MyBatis提供了<a href="https://github.com/Param" title="&#64;Param" class="at-link">@Param</a>注解，它可以定义映射器的参数名称，使用它可读性更好。把接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByAnnotation(@Param(&quot;roleName&quot;) String roleName,
                                 @Param(&quot;note&quot;) String note);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-java">&lt;select id=&quot;findRolesByAnnotation&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>注意，此时不用给出parameterType属性，MyBatis会自动探索。<br>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test3() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    List&lt;Role&gt; roles = roleMapper.findRolesByAnnotation(&quot;1&quot;,&quot;1&quot;);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>改写后可读性大大提高，但是如果SQL很复杂，参数很多，那么接口方法的参数个数也会很多，这样使用很不方便。所以，MyBatis还提供了传递JavaBean的形式。</p>
<h4 id="h4-5-3-3-3-javabean-"><a name="5.3.3.3    通过JavaBean传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.3    通过JavaBean传递多个参数</h4><p>首先定义一个参数的POJO——RoleParams，代码如下所示：</p>
<pre><code class="lang-java">public class RoleParams {
    private String roleName;
    private String note;

    public RoleParams(){}
    /*getter and setter*/
}
</code></pre>
<p>此时把接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByBean(RoleParams roleParams);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRolesByBean&quot; parameterType=&quot;com.ssm.learn.chapter5.pojo.RoleParams&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>注意此时的parameterType属性值修改为RoleParams的全限定名或者别名。</p>
<p>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test5() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RoleParams roleParams = new RoleParams();
    roleParams.setRoleName(&quot;1&quot;);
    roleParams.setNote(&quot;1&quot;);
    List&lt;Role&gt; roles = roleMapper.findRolesByBean(roleParams);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<h4 id="h4-5-3-3-4-"><a name="5.3.3.4    混合使用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.4    混合使用</h4><p>在某种情况下可能需要混合使用几种方式来传递参数。比如通过角色名称和备注查询一个角色，与此同时还支持分页，分页的POJO——PageParams如下所示：</p>
<pre><code class="lang-java">public class PageParams {
    private int start;
    private int limit;

    public PageParams(){}
    /*getter and setter*/
}
</code></pre>
<p>此时接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findByMix(@Param(&quot;params&quot;)RoleParams roleParams, 
                     @Param(&quot;page&quot;)PageParams pageParams);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findByMix&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{params.roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{params.note},&#39;%&#39;)
    limit #{page.start},#{page.limit}
&lt;/select&gt;
</code></pre>
<p>可以看到MyBatis对RoleParams、PageParams这类的JavaBean提供EL（中间）支持</p>
<h4 id="h4-5-3-3-5-"><a name="5.3.3.5    总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.5    总结</h4><p>对4种传递参数的方法进行评价：</p>
<ul>
<li>使用map传递参数丧失了业务可读性，实际应用应该果断废弃；</li><li>使用<a href="https://github.com/Param" title="&#64;Param" class="at-link">@Param</a>注解适用于参数较少的情况，一般不超过5个；</li><li>当参数多于5个时，建议使用JavaBean方式；</li><li>对于使用混合参数的，要明确参数合理性</li></ul>
<h3 id="h3-5-3-4-resultmap-"><a name="5.3.4    使用resultMap映射结果集" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.4    使用resultMap映射结果集</h3><p>为了支持复杂的映射，select元素提供了resultMap属性。先定义resultMap属性，代码如下所示：</p>
<pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;getRoleUseResultMap&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMap&quot;&gt;
         select id,role_name as roleName,note from t_role where id = #{id};
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>resultMap的属性id是它的标识，type代表使用哪个类作为其映射的类，可以是别名或者全限定名；</li><li>它的子元素id代表resultMap的主键，而result代表其属性，id和result元素的属性property代表POJO的属性名称，而column代表SQL的列名。把POJO的属性和SQL的列名做对应。</li><li>在select中resultMap属性表明使用哪个resultMap作为映射规则</li></ul>
<h4 id="h4-5-3-5-rowbounds"><a name="5.3.5    分页参数RowBounds" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.5    分页参数RowBounds</h4><p>MyBatis不仅支持分页，而且还提供了专门处理分页的类——RowBounds。使用它很简单，只要给接口增加一个RowBounds参数即可。</p>
<pre><code class="lang-java"> List&lt;Role&gt; findByRowBounds(@Param(&quot;roleName&quot;) String roleName,
                            @Param(&quot;note&quot;) String note,
                            RowBounds rowBounds);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findByRowBounds&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>代码中没有关于RowBounds的参数信息，它是MyBatis的一个附加参数，MyBatis会自动识别并完成分页。</p>
<p>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test7() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RowBounds rowBounds = new RowBounds(0, 20);
    List&lt;Role&gt; roles = roleMapper.findByRowBounds(&quot;1&quot;, &quot;1&quot;, rowBounds);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>RowBounds接收两个参数，第一个是偏移量offset，第二个参数是限制条数limit，这里表示从1条开始限定返回至多20条记录的结果。RowBounds只适合查询少量数据的场景，查询大量数据可以使用分页插件。</p>
<h2 id="h2-5-4-insert-"><a name="5.4    insert元素——插入语句" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4    insert元素——插入语句</h2><p>insert元素的常用配置如下表所示：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>SQL编号，用于表示这条SQL语句</td>
<td>命名空间+id+databaseId唯一，否则MyBatis会抛出异常</td>
</tr>
<tr>
<td>parameterType</td>
<td>参数类型，同select元素</td>
<td>和select元素一样，可以是单个参数或者多个参数</td>
</tr>
<tr>
<td>useGeneratedKeys</td>
<td>是否启用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键。（比如MySQL和SQL Server这样的数据库表的自增主键）</td>
<td>默认值为false</td>
</tr>
<tr>
<td>keyProperty</td>
<td>（仅对insert和update有用）唯一标记一个属性，MyBatis会通过getGeneratedKeys的返回值，或者通过insert语句的selectKey子元素设置它的键值。如果是复合主键，要把每一个名称用逗号隔开</td>
<td>默认值为unset。不能和KeyColumn连用</td>
</tr>
<tr>
<td>keyColumn</td>
<td>（仅对insert和update有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像PostgreSQL）中是必须的，当主键列不是表中的第一列时需要设置。如果是复合主键，要把每一个名称用逗号隔开</td>
<td>不能和KeyProperty连用</td>
</tr>
</tbody>
</table>
<p>执行一条insert语句后，会返回一个整数表示其影响记录数。</p>
<h3 id="h3-5-4-2-insert-"><a name="5.4.2    简单的insert语句的应用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.2    简单的insert语句的应用</h3><p>写一条SQL插入角色，这是一条最简单的插入语句，代码如下所示：</p>
<pre><code class="lang-xml">&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;
    insert into t_role(role_name,note)  values (#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<ul>
<li>id表示这条SQL；</li><li>parameterType代表传入参数类型；</li><li>没有配置的属性采用默认值</li></ul>
<h3 id="h3-5-4-3-"><a name="5.4.3    主键回填" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.3    主键回填</h3><p>上面的代码并没有插入id列，因为MySQL中的表采用了自增主键，但有时候还需要这个主键来关联其它业务。</p>
<p>insert标签中有这样一个属性useGeneratedKeys来获取主键，打开这个开关后，还要配置其属性keyProperty或keyColumn，告诉系统把生成的主键放入哪个属性，如果存在多个主键，就用逗号隔开。</p>
<p>修改映射文件，让程序返回主键，代码如下所示：</p>
<pre><code class="lang-xml">&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
    insert into t_role(role_name,note)  values (#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<p>这样就会把数据库生成的主键回填至keyProperty指定的POJO属性，这里是id。</p>
<p>测试主键回填的结果，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void test8() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Role role = new Role();
    role.setRoleName(&quot;二郎神&quot;);
    role.setNote(&quot;杨戬&quot;);
    logger.info(role);
    roleMapper.insertRole(role);
    logger.info(role);
    sqlSession.close();
}
</code></pre>
<p>运行可看到，在执行insertRole方法前roleid值为null，而执行后值不为null。</p>
<h3 id="h3-5-4-4-"><a name="5.4.4    自定义主键" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.4    自定义主键</h3><p>有时候主键可能依赖于某些规则，比如取消角色表的id递增规则，修改为：</p>
<ul>
<li>当角色表记录为空时，id设置为1</li><li>当角色表记录不为空时，id设置为当前id加3</li></ul>
<p>MyBatis可用selectKey元素实现自定义键值的生成规则。代码如下所示：</p>
<pre><code class="lang-xml">&lt;&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;long&quot; order=&quot;BEFORE&quot;&gt;
        select if (max(id) = null,1,max(id)+3) from t_role
    &lt;/selectKey&gt;
    insert into t_role(id,role_name,note)  values (#{id},#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<p>以上代码定义了selectKey元素，它的keyProperty指定了id属性作为POJO的主键，resultType指定了返回long型的结果集，而order属性为BEFORE表示它将于当前定义的SQL前执行。</p>
<h2 id="h2-5-5-update-delete-"><a name="5.5    update元素和delete元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.5    update元素和delete元素</h2><p>update元素和delete元素比较简单，和insert元素差不多，执行后也会返回一个整数，用来标识该SQL语句影响了数据库的记录行数。更新和删除角色表记录，代码如下所示：</p>
<pre><code class="lang-xml">&lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
    update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
&lt;/update&gt;
</code></pre>
<pre><code class="lang-xml">&lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;
    delete from t_role where id = #{id};
&lt;/delete&gt;
</code></pre>
<h2 id="h2-5-6-sql-"><a name="5.6    sql元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.6    sql元素</h2><p>sql元素的作用在于可以定义一条SQL的一部分，方便后面的SQL引用它，比如最典型的列名，通常情况下要在select、insert语句中反复编写，特别字段多的表。这时候可以使用sql元素，代码如下所示：</p>
<pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;sql id=&quot;roleCols&quot;&gt;
        id,role_name,note
    &lt;/sql&gt;

    &lt;select id=&quot;getRole&quot; resultType=&quot;role&quot;&gt;
        select &lt;include refid=&quot;roleCols&quot;/&gt; from t_role where id = #{id};
    &lt;/select&gt;

    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
        &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;long&quot; order=&quot;BEFORE&quot;&gt;
            select if (max(id) = null,1,max(id)+3) from t_role
        &lt;/selectKey&gt;
        insert into t_role(&lt;include refid=&quot;roleCols&quot;/&gt;)  values (#{id},#{roleName},#{note});
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<p>可以看到，通过sql元素定义，就可以include元素引入到各条SQL语句中，减少了列名的重复编写。</p>
<p>sql元素还支持变量传递，如下所示：</p>
<pre><code class="lang-xml">&lt;sql id=&quot;roleCols&quot;&gt;
    ${alias}.id,${alias}.role_name ,${alias}.note
&lt;/sql&gt;
&lt;select id=&quot;getRole&quot; resultType=&quot;role&quot;&gt;
    select 
    &lt;include refid=&quot;roleCols&quot;&gt;
        &lt;property name=&quot;alias&quot; value=&quot;r&quot;/&gt;
    &lt;/include&gt;
    from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<p>在include元素中定义了一个命名为alias的变量，其值是SQL表t_role的别名r，然后sql元素就可以使用这个变量名了。</p>
<h2 id="h2-5-7-resultmap-"><a name="5.7    resultMap元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.7    resultMap元素</h2><p>resultMap的作用主要是定义映射规则，也就是SQL到JavaBean的映射关系。</p>
<h3 id="h3-5-7-1-pojo-"><a name="5.7.1    使用POJO存储结果集" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.7.1    使用POJO存储结果集</h3><pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>resultMap元素的属性id代表这个resultMap的标识，type代表需要映射的POJO，这里可以使用别名或者全限定名。在映射关系中，id表示对象的主键，property表示POJO的属性名称，column表示数据库列名。于是POJO就和数据库SQL的结果一一对应起来了。配置完成即可使用resultMap，如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;getRoleUseResultMap&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMap&quot;&gt;
     select id,role_name as roleName,note from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<h2 id="h2-5-8-"><a name="5.8    级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8    级联</h2><p>级联是一个数据库实体的概念。比如角色就需要存在用户与之对应，这样就有角色用户表，一个角色可能有多个用户，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。在MyBatis中还有一种被称为鉴别器的级联，它是一种可以选择具体实现类的级联，比如要查找雇员及其体检表的信息，但是雇员有性别之分，而根据性别的不同，其体检表的项目也会不一样，比如男性体检表可能有前列腺的项目，而女子体检表可能有子宫的项目，那么体检表应该分为男性和女性，从而根据雇员性别区关联。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统的复杂度，同时降低系统性能，一般最好不超过3层。</p>
<h3 id="h3-5-8-1-mybatis-"><a name="5.8.1    MyBatis中的级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.1    MyBatis中的级联</h3><p>MyBatis中的级联分为3种。</p>
<ul>
<li>鉴别器（discriminator）：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>值得注意的是，MyBatis没有多对多级联，因为多对多级联比较复杂，使用困难，而且可以通过两个一对多进行替换，所有MyBatis不支持。</p>
<p>为了更好地阐述级联，先给出一个雇员级联模型。</p>
<ul>
<li>该模型以雇员表为中心</li><li>雇员表和工牌表是一对一级联关系</li><li>雇员表和员工任务表是一对多级联关系</li><li>员工任务表和任务表是一对一级联关系</li><li>每个雇员都会有一个体检表，随着雇员字段性别取值不同，会有不同的关联表</li></ul>
<p>mysql脚本略</p>
<h3 id="h3-5-8-2-pojo"><a name="5.8.2    建立POJO" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.2    建立POJO</h3><p>男性体检表和女性体检表继承于体检表，因此可以得出3个体检表，代码如下所示：</p>
<pre><code class="lang-java">public class HealthForm {

   private Long id;
   private Long empId;
   private String heart;
   private String liver;
   private String spleen;
   private String lung;
   private String kidney;
   private String note;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class MaleHealthForm extends HealthForm {

   private String prostate;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class FemaleHealthForm extends HealthForm {

   private String uterus;

    /*getter and setter*/
}
</code></pre>
<p>显然这个关联关系是通过MyBatis的鉴别器去完成。</p>
<p>接下来设计员工表、工牌表和任务表的POJO，它们是以员工表为核心的，先完成工牌表和任务表的POJO，代码如下所示：</p>
<pre><code class="lang-java">public class WorkCard {
   private Long id;
   private Long empId;
   private String realName;
   private String department;
   private String mobile;
   private String position;
   private String note;

   /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class Task {
   private Long id;
   private String title;
   private String context;
   private String note;

   /*getter and setter*/
}
</code></pre>
<p>雇员任务表是通过任务编号(task_id)和任务进行一对一管理，这里只考虑其自身和任务编号的关联，而雇员对它的关联则由雇员去维护，这样就可得到雇员任务POJO，代码如下所示：</p>
<pre><code class="lang-java">public class EmployeeTask {
   private Long id;
   private Long empId;
    //任务按一对一级联
   private Task task = null;
   private String taskName;
   private String note;

   /*getter and setter*/
}
</code></pre>
<p>属性task是一个Task类对象，由它进行关联任务信息。</p>
<p>男雇员和女雇员继承于雇员，这就是一个鉴别器，通过雇员类的属性性别来决定使用哪个具体的子类初始化对象。它与工牌表是一对一关联关系，对于雇员任务表是一对多关联关系，由此可以得出3个类，代码如下所示：</p>
<pre><code class="lang-java">public class Employee {

   private Long id;
   private String realName;
   private SexEnum sex = null;
   private Date birthday;
   private String mobile;
   private String email;
   private String position;
   private String note;
    //工牌按一对一级联
   private WorkCard workCard;
   //雇员任务按一对多级联
   private List&lt;EmployeeTask&gt; employeeTaskList = null;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class MaleEmployee extends Employee {

   private MaleHealthForm maleHealthForm = null;

   /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class FemaleEmployee extends Employee {

   private FemaleHealthForm femaleHealthForm = null;

   /*getter and setter*/
}
</code></pre>
<h3 id="h3-5-8-3-"><a name="5.8.3    配置映射文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.3    配置映射文件</h3><p>配置TaskMapper.xml和WorkCardMapper.xml，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.TaskMapper&quot;&gt;
    &lt;select id=&quot;getTask&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.Task&quot;&gt;
        select id,title,context,note from t_task where id =#{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.WorkCardMapper&quot;&gt;
    &lt;select id=&quot;getWorkCardByEmpId&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.WorkCard&quot;&gt;
        select id, emp_id as empId, real_name as realName, department, mobile, position, note FROM t_work_card
        where emp_id = #{empId}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>雇员任务表通过任务编号（task_id）和任务表示关联，这是一个一对一的级联关系，使用association元素，雇员任务表一对一级联如代码所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper&quot;&gt;
    &lt;resultMap id=&quot;EmployeeTaskMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.EmployeeTask&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;empId&quot; column=&quot;emp_id&quot;/&gt;
        &lt;result property=&quot;taskName&quot; column=&quot;task_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;

        &lt;association property=&quot;task&quot; column=&quot;task_id&quot; select=&quot;com.ssm.learn.chapter5.mapper.TaskMapper.getTask&quot;/&gt;

    &lt;/resultMap&gt;

    &lt;select id=&quot;getEmployeeTaskByEmpId&quot; resultMap=&quot;EmployeeTaskMap&quot;&gt;
        select id, emp_id, task_id, note from t_employee_task where emp_id = #{empId}
    &lt;/select&gt;

&lt;/mapper&gt;
</code></pre>
<p>注意，association元素代表一对一级联的开始。property属性代表映射到POJO属性上。select配置是命名空间+SQL id的形式，这样便可以指向对应Mapper的SQL，MyBatis就会通过对应的SQL将数据查询回来。column代表SQL的列，用作参数传递给select属性制定的SQL，如果是多个参数则用逗号隔开。</p>
<p>体检表能拆分为男性雇员和女性雇员，所以就有两个简单的映射器，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.MaleHealthFormMapper&quot;&gt;
   &lt;select id=&quot;getMaleHealthForm&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.MaleHealthForm&quot;&gt;
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_male_health_form
       where emp_id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper&quot;&gt;
   &lt;select id=&quot;getFemaleHealthForm&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.FemaleHealthForm&quot;&gt;
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_female_health_form
       where emp_id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>创建雇员的映射关系，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.EmployeeMapper&quot;&gt;
    &lt;resultMap id=&quot;employee&quot; type=&quot;com.ssm.learn.chapter5.pojo.Employee&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result column=&quot;real_name&quot; property=&quot;realName&quot;/&gt;
        &lt;result column=&quot;sex&quot; property=&quot;sex&quot; typeHandler=&quot;com.ssm.learn.chapter5.typeHandler.SexTypeHandler&quot;/&gt;
        &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;/&gt;
        &lt;result column=&quot;mobile&quot; property=&quot;mobile&quot;/&gt;
        &lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;
        &lt;result column=&quot;position&quot; property=&quot;position&quot;/&gt;
        &lt;result column=&quot;note&quot; property=&quot;note&quot;/&gt;
        &lt;association property=&quot;workCard&quot; column=&quot;id&quot;
                     select=&quot;com.ssm.learn.chapter5.mapper.WorkCardMapper.getWorkCardByEmpId&quot;/&gt;
        &lt;collection property=&quot;employeeTaskList&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId&quot;/&gt;
        &lt;discriminator javaType=&quot;long&quot; column=&quot;sex&quot;&gt;
            &lt;case value=&quot;1&quot; resultMap=&quot;MaleHealthFormMapper&quot;/&gt;
            &lt;case value=&quot;2&quot; resultMap=&quot;FemaleHealthFormMapper&quot;/&gt;
        &lt;/discriminator&gt;
    &lt;/resultMap&gt;

    &lt;resultMap id=&quot;FemaleEmployeeMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.FemaleEmployee&quot; extends=&quot;employee&quot;&gt;
        &lt;association property=&quot;femaleHealthForm&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper.getFemaleHealthForm&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;resultMap id=&quot;MaleEmployeeMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.MaleEmployee&quot; extends=&quot;employee&quot;&gt;
        &lt;association property=&quot;maleHealthForm&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.MaleHealthFormMapper.getMaleHealthForm&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;select id=&quot;getEmployee&quot; parameterType=&quot;long&quot; resultMap=&quot;employee&quot;&gt;
        select id, real_name as realName, sex, birthday, mobile, email, position, note, from t_employee
        where id = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>association元素，对工牌进行一对一级联。</li><li>collection元素，一对多级联，其select元素指向SQL，将通过column制定的SQL字段作为参数进行传递，然后将结果返回给雇员POJO的属性employeeTaskList。</li><li>discriminator元素，鉴别器，它的属性column代表使用哪个字段进行鉴别，这里是sex，而它的子元素case，则用于进行区分。而resultMap属性表示采用哪个ResultMap去映射，比如sex为1，则使用maleHealthFormMapper进行映射。</li></ul>
<p>而对于雇员体检表而言，id为employee的resultMap，被maleHealthMapper和femaleHealthMapper通过extends元素继承。</p>
<p>测试级联，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void test9() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);
        Employee employee = employeeMapper.getEmployee(1L);
        logger.info(employee.getBirthday());
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }

}
</code></pre>
<p>运行可以看到所有级联都成功了，但是这会引发性能问题，这叫N+1问题。</p>
<h3 id="h3-5-8-4-n-1-"><a name="5.8.4    N+1问题" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.4    N+1问题</h3><p>比如作为一个雇员的管理者，它只想看到员工信息和员工任务信息，那么体检表和工牌的信息就是多余的。</p>
<p>假设现在有N个关联关系完成了级联，那么只要再加入一个级联关系，就变成了N+1个级联，所有的级联SQL都会被执行，显然会有很多并不是我们关心的数据被取出，这样会造成很大的资源浪费，这就是N+1问题。</p>
<p>为了应对N+1问题，MyBatis提供了延迟加载功能，即在一开始取出雇员信息是，并不需要将工牌表、体检表、任务表的记录取出，而是只将雇员信息和雇员任务表的信息取出。当我们通过雇员POJO访问工牌表时，体检表和任务表的记录才通过对应的SQL取出。</p>
<h3 id="h3-5-8-5-"><a name="5.8.5    延迟加载" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.5    延迟加载</h3><p>MyBatis提供延迟加载，我们希望一次性把常用的级联数据通过SQL直接查询出来，而对于那些不常用的级联数据不要取出，而是等待要用时才取出，这些不常用的级联数据可以采用延迟加载的功能。</p>
<p>在MyBatis的settings配置中存在两个元素可以配置级联，如下所示：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>作用</th>
<th>配置选项说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>aggressiveLazyLoading</td>
<td>当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>修改MyBatis配置文件，增加如下代码：</p>
<pre><code class="lang-xml">&lt;settings&gt;
    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;
    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;
&lt;/settings&gt;
</code></pre>
<p>选项lazyLoadingEnabled决定是否开启延迟加载，而选项aggressiveLazyLoading决定是否采用层级加载，但是它们都是全局性配置，不能解决我们的需求。在MyBatis中使用fetchType属性，它可以处理全局定义无法处理的问题，进行自定义。fetchType出现在级联元素（association、collection，注意，discrimination没有这个属性）中，它由两个值可选：</p>
<ul>
<li>eager，获得当前POJO后立即加载对应的数据。</li><li>lazy，获得当前POJO后延迟加载对应的数据。</li></ul>
<p>在保证lazyLoadingEnabled=true和aggressiveLazyLoading=false的前提下，对雇员的映射文件关于雇员属性、雇员任务进行如下修改：</p>
<pre><code class="lang-xml">&lt;collection property=&quot;employeeTaskList&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId&quot; fetchType=&quot;eager&quot;/&gt;
</code></pre>
<p>然后进行调试，这个时候已经按照我们的要求加载了数据，先加载雇员信息，然后加载雇员任务信息。fetchType属性会忽略全局配置项lazyLoadingEnabled和aggressiveLazyLoading。</p>
<h3 id="h3-5-8-6-"><a name="5.8.6    多对多级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.6    多对多级联</h3><p>现实中有许多用户，用户由归属于一些角色，这样一个用户可以对应多个角色，而一个角色又可以由多个用户担当。这就是多对多关联关系。但更多的都是拆分为两个一对多的关系，也就是一个角色对应多个用户和一个用户对应多个角色，这样就可以设计用户和角色的POJO了，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.learn.chapter5.pojo2;

import java.util.List;

public class Role2 {
   private Long id;
   private String roleName;
   private String note;
   // 关联用户信息，一对多关联
   private List&lt;User2&gt; userList;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">package com.ssm.learn.chapter5.pojo2;

import java.util.List;

import com.ssm.learn.chapter5.enumeration.SexEnum;

public class User2 {
   private Long id;
   private String userName;
   private String realName;
   private SexEnum sex;
   private String moble;
   private String email;
   private String note;
   // 对角色一对多关联
   private List&lt;Role2&gt; roleList;

    /*getter and setter*/
}
</code></pre>
<p>配置映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper2.RoleMapper2&quot;&gt;
   &lt;resultMap type=&quot;com.ssm.learn.chapter5.pojo2.Role2&quot; id=&quot;roleMapper&quot;&gt;
      &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;
      &lt;result column=&quot;role_name&quot; property=&quot;roleName&quot; /&gt;
      &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;
      &lt;collection property=&quot;userList&quot; column=&quot;id&quot; fetchType=&quot;lazy&quot;
         select=&quot;com.ssm.learn.chapter5.mapper2.UserMapper2.findUserByRoleId&quot; /&gt;
   &lt;/resultMap&gt;

   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMapper&quot;&gt;
      select id, role_name, note from t_role where id = #{id}
   &lt;/select&gt;

   &lt;select id=&quot;findRoleByUserId&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMapper&quot;&gt;
      select r.id, r.role_name, r.note from t_role r, t_user_role ur
      where r.id = ur.role_id and ur.user_id = #{userId}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper2.UserMapper2&quot;&gt;
   &lt;resultMap type=&quot;com.ssm.learn.chapter5.pojo2.User2&quot; id=&quot;userMapper&quot;&gt;
      &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;
      &lt;result column=&quot;user_name&quot; property=&quot;userName&quot; /&gt;
      &lt;result column=&quot;real_name&quot; property=&quot;realName&quot; /&gt;
      &lt;result column=&quot;sex&quot; property=&quot;sex&quot;
         typeHandler=&quot;com.ssm.learn.chapter5.typeHandler.SexTypeHandler&quot; /&gt;
      &lt;result column=&quot;mobile&quot; property=&quot;moble&quot; /&gt;
      &lt;result column=&quot;email&quot; property=&quot;email&quot; /&gt;
      &lt;result column=&quot;position&quot; property=&quot;position&quot; /&gt;
      &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;
      &lt;collection property=&quot;roleList&quot; column=&quot;id&quot; fetchType=&quot;lazy&quot;
         select=&quot;com.ssm.learn.chapter5.mapper2.RoleMapper2.findRoleByUserId&quot; /&gt;
   &lt;/resultMap&gt;
   &lt;select id=&quot;getUser&quot; parameterType=&quot;long&quot; resultMap=&quot;userMapper&quot;&gt;
      select id, user_name, real_name, sex, moble, email, note from t_user where
      id =#{id}
   &lt;/select&gt;
   &lt;select id=&quot;findUserByRoleId&quot; parameterType=&quot;long&quot; resultMap=&quot;userMapper&quot;&gt;
      select u.id, u.user_name, u.real_name, u.sex, u.moble, u.email, u.note
      from
      t_user u , t_user_role ur where u.id = ur.user_id and ur.role_id =#{roleId}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>这里都使用了collection去关联，但是把fetchType都设置为lazy，启用延时加载。</p>
<p>测试代码如下：</p>
<pre><code class="lang-java">@Test
public void test10(){
    SqlSession sqlSession=null;
    try{
        sqlSession=SqlSessionFactoryUtils.openSqlSession();
        RoleMapper2 roleMapper2 = sqlSession.getMapper(RoleMapper2.class);
        Role2 role = roleMapper2.getRole(1L);
        role.getUserList();
        UserMapper2 userMapper2 = sqlSession.getMapper(UserMapper2.class);
        User2 user = userMapper2.getUser(1L);
    }catch (Exception e){
        e.printStackTrace();
    }finally {
        if(sqlSession!=null){
            sqlSession.close();
        }
    }
}
</code></pre>
<p>运行程序可以看到执行了3条SQL，因为调用getUserList所以才有了第二条SQL。</p>
<h2 id="h2-5-9-"><a name="5.9    缓存" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.9    缓存</h2><p>在MyBatis中允许使用缓存，把那些常用且命中率高的数据缓存起来，能够有效提高系统性能。</p>
<p>MyBatis分为一级缓存和二级缓存，同时可以配置关于缓存的设置。</p>
<h3 id="h3-5-9-1-"><a name="5.9.1    一级缓存和二级缓存" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.9.1    一级缓存和二级缓存</h3><p>一级缓存是在SqlSession上的缓存，默认自动开启。二级缓存是在SqlSessionFactory上的缓存。</p>
<p>没有任何配置的环境测试一级缓存，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        logger.info(&quot;再获取一次POJO......&quot;);
        Role role2 = roleMapper.getRole(1L);
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }
}
</code></pre>
<p>运行代码，得到如下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 16:42:22,848 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:42:22,883 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 16:42:22,899 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 16:42:22,899 com.ssm.learn.chapter5.test.MyTest: 再获取一次POJO......
DEBUG 2020-02-25 16:42:22,900 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@63440df3]
</code></pre>
<p>可以看到虽然对同一个对象进行了两次获取，但是实际上只有一条SQL被执行，其原因是代码使用了同一个SqlSession对象获取数据。当一个SqlSession第一次通过SQL和参数获取对象后就会将它缓存起来，如果下次的SQL和参数没有发生变化，并且缓存没有超时或者声明需要刷新时，它就会从缓存中获取数据，而不是通过SQL获取了。修改代码，如下所示：</p>
<pre><code class="lang-java">@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    SqlSession sqlSession2 = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        sqlSession2 = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
        sqlSession.commit();
        logger.info(&quot;不同sqlSession再获取一次POJO......&quot;);
        RoleMapper roleMapper2 = sqlSession2.getMapper(RoleMapper.class);
        Role role2 = roleMapper2.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
        if (sqlSession2 != null) {
            sqlSession2.close();
        }
    }
}
</code></pre>
<p>运行代码，得到以下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 16:55:56,004 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:55:56,039 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 16:55:56,056 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 16:55:56,057 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 16:55:56,057 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Opening JDBC Connection
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.datasource.pooled.PooledDataSource: Created connection 1956710488.
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@74a10858]
DEBUG 2020-02-25 16:55:56,063 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?;
</code></pre>
<p>可以看到SQL被执行了两次，这说明一级缓存是在SqlSession层面的，对于不同的SqlSession对象是不能共享的。为了是SqlSession对象之间共享相同的缓存，有时候需要开启二级缓存，只需要在映射文件上加入代码：</p>
<pre><code class="lang-xml">&lt;cache/&gt;
</code></pre>
<p>这个时候MyBatis会序列化和反序列化对应的POJO，也就要求POJO是一个可序列化的对象，那么它就必须实现Serializable接口。代码如下所示：</p>
<pre><code class="lang-java">public class Role implements Serializable {
    ...
}
</code></pre>
<p>再次运行代码，得到以下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 17:02:39,248 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 17:02:39,281 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 17:02:39,297 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 17:02:39,309 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.cache.decorators.LoggingCache: Cache Hit Ratio [com.ssm.learn.chapter5.mapper.RoleMapper]: 0.5
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@462d5aee]
</code></pre>
<p>可以看到不同的SqlSession在获取同一条记录，只发送了一条SQL。因为这个时候MyBatis将其保存在SqlSessionFactory层面。</p>
(String), # 第5章	映射器

映射器是MyBatis最复杂且最重要的组件。它由一个接口和XML文件（或者注解组成）。在映射器中，可以配置参数、各类的SQL语句、存储过程、缓存、级联等复杂的内容，并且通过简易的映射规则映射到指定的POJO或者其他对象上，映射器能有效屏蔽JDBC底层的代码。

映射器可以使用注解完成，但在企业应用不广，推荐使用XML方式，是因为：

- 面对复杂性，SQL会显得无力，尤其是长句SQL；
- 注解的可读性较差；
- 注解丢失了XML上下文引用的功能

## 5.1    概述

映射器的常用配置元素如下表所示：

| 元素名称         | 描述                                                         | 备注                                            |
| ---------------- | ------------------------------------------------------------ | ----------------------------------------------- |
| select           | 查询语句，最常用、最复杂的元素之一                           | 可以自定义参数，返回结果集等                    |
| insert           | 插入语句                                                     | 执行后返回一个参数，代表插入的条数              |
| update           | 更新语句                                                     | 执行后返回一个参数，代表更新的条数              |
| delete           | 删除语句                                                     | 执行后返回一个参数，代表删除的条数              |
| ~~parameterMap~~ | 定义参数映射关系                                             | 即将被删除，不建议使用                          |
| sql              | 允许定义一部分SQL，然后在各个地方引用它                      | 例如，定义一张表的列名，可以在多个SQL语句中使用 |
| resultMap        | 用来描述从数据库结果集中来加载对象，它是最复杂、最强大的元素 | 提供映射规则                                    |
| cache            | 给定名称空间的缓存配置                                       | ---                                             |
| cache-ref        | 其他命名空间缓存配置的引用                                   | ---                                             |

## 5.2	引入映射器的方法

### 5.2.1	用文件路径引入映射器

```xml
<mappers>
    <mapper resource="demo/mapper/demoMapper.xml"/>
</mappers>
```

其中，resource属性值为映射器的xml文件的资源路径

### 5.2.2	用包名引入映射器

```xml
<mappers>
    <package name="demo.mapper"/>
</mappers>
```

其中，name属性值为映射器的接口所在包的全限定名

### 5.2.3	用类注册引入映射器

```xml
<mappers>
    <mapper class="demo.mapper.DemoMapper1"/>
     <mapper class="demo.mapper.DemoMapper2"/>
</mappers>
```

其中，class属性值为映射器的接口的全限定名

## 5.3	select元素——查询语句

select元素的常用配置如下表所示：

| 元素             | 说明                                                         | 备注                                                       |
| ---------------- | ------------------------------------------------------------ | ---------------------------------------------------------- |
| id               | 它和Mapper的命名空间组合起来是唯一的，供MyBatis调用          | 如果命名空间和id结合起来不唯一，MyBatis会抛出异常          |
| parameterType    | 可以给出类的全限定名，也可以是别名，但是别名必须是MyBatis内部定义或者自定义的 | 可以选择JavaBean、Map等简单的参数类型传递给SQL             |
| ~~parameterMap~~ | 即将废弃的元素，不建议使用                                   | ---                                                        |
| resultType       | 定义类的全路径，在允许自动匹配的情况下，结果集将通过JavaBean的规则映射；或定义为in、double、float、map等参数；也可以使用别名，但是要符合别名规范，且不能和resultMap同时使用 | 常用的参数之一，比如统计总条数时可以把它的值设置为int      |
| resultMap        | 它是映射集的引用，将执行强大的映射功能。我们可以使用resultType和resultMap其中的一个，resultMap能提供自定义映射规则的机会 | MyBatis最复杂的元素，可以配置映射规则、级联、typeHandler等 |

另外，如果还要设置缓存，还会使用到FlushCache、useCache，这里不展开讲。

### 5.3.1	简单的select元素的应用

先学习一个最简单的例子：统计用户表同一个姓氏的用户数量，代码如下所示：

```xml
<select id="countByFirstName" parameterType="string" resultType="int">
    select count(*) total from t_user where user_name like concat(#{firstName},'%')
</select>
```

其中的元素含义：

- id：SQL语句的唯一标识
- parameterType：SQL语句接收的参数类型，可以是类的别名也可以是类的全限定名
- resultType：SQL语句返回的结果类型，可以是类的别名也可以是类的全限定名

接着还需要定义一个接口方法，代码如下所示：

```java
public interface UserMapper {
    int countByFirstName(String firstName);
}
```

### 5.3.2	自动映射和驼峰规则

MyBatis提供自动映射功能，在默认情况下是开启的。

在settings元素中有两个可配置选项autoMappingBehavior和mapUnderscoreToCamelCase，它们是控制自动映射和驼峰映射的开关。一般而言，自动映射使用的多一些，而驼峰映射要求比较苛刻，应用不广。

autoMappingBehavior的取值有：

- NONE，不进行自动映射
- PARTIAL，默认值，只对没有嵌套结果集进行自动映射
- FULL，对所有的结果集进行自动映射，包括嵌套结果集

在默认情况下使用默认值即可。规则如下所示：

```java
public class Role {
    private Long id;
    private String roleName;
    private String note;
    /*getter and setter*/
}
```

```xml
<select id="getRole" parameterType="long" resultType="role">
    select id,role_name as roleName,note from t_role where id = #{id};
</select>
```

如果编写的SQL列名和POJO的属性名一致，那么就会形成自动映射。原来的列名role_name被别名roleName替代，所以也会对应起来。

### 5.3.3	传递多个参数

####5.3.3.1	使用map接口传递多个参数

假设要通过角色名称（role_name）和备注（note）两个参数对角色进行模糊查询，则可以使用map接口。

把接口方法定义为：	

```java
List<Role> findRolesByMap(Map<String,Object> parameterMap);
```

使用它在SQL中设置对应的参数，代码如下所示：

```xml
<select id="findRolesByMap" parameterType="map" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

测试如下：

```java
@Test
public void test2() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Map<String, Object> parameterMap = new HashMap<>();
    parameterMap.put("roleName", "1");
    parameterMap.put("note", "1");
    List<Role> roles = roleMapper.findRolesByMap(parameterMap);
    logger.info(roles);
    sqlSession.close();
}
```

由于使用map不能限定其传递的数据类型，所以业务性质不强，可读性差，因此不推荐使用。

#### 5.3.3.2	使用注解传递多个参数

MyBatis提供了@Param注解，它可以定义映射器的参数名称，使用它可读性更好。把接口方法定义为：

```java
List<Role> findRolesByAnnotation(@Param("roleName") String roleName,
                                 @Param("note") String note);
```

修改映射文件，代码如下所示：

```java
<select id="findRolesByAnnotation" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

注意，此时不用给出parameterType属性，MyBatis会自动探索。
测试如下所示：

```java
@Test
public void test3() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    List<Role> roles = roleMapper.findRolesByAnnotation("1","1");
    logger.info(roles);
    sqlSession.close();
}
```

改写后可读性大大提高，但是如果SQL很复杂，参数很多，那么接口方法的参数个数也会很多，这样使用很不方便。所以，MyBatis还提供了传递JavaBean的形式。

#### 5.3.3.3	通过JavaBean传递多个参数

首先定义一个参数的POJO——RoleParams，代码如下所示：

```java
public class RoleParams {
    private String roleName;
    private String note;
    
    public RoleParams(){}
    /*getter and setter*/
}
```

此时把接口方法定义为：

```java
List<Role> findRolesByBean(RoleParams roleParams);
```

修改映射文件，代码如下所示：

```xml
<select id="findRolesByBean" parameterType="com.ssm.learn.chapter5.pojo.RoleParams" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

注意此时的parameterType属性值修改为RoleParams的全限定名或者别名。

测试如下所示：

```java
@Test
public void test5() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RoleParams roleParams = new RoleParams();
    roleParams.setRoleName("1");
    roleParams.setNote("1");
    List<Role> roles = roleMapper.findRolesByBean(roleParams);
    logger.info(roles);
    sqlSession.close();
}
```

#### 5.3.3.4	混合使用

在某种情况下可能需要混合使用几种方式来传递参数。比如通过角色名称和备注查询一个角色，与此同时还支持分页，分页的POJO——PageParams如下所示：

```java
public class PageParams {
    private int start;
    private int limit;
    
    public PageParams(){}
    /*getter and setter*/
}
```

此时接口方法定义为：

```java
List<Role> findByMix(@Param("params")RoleParams roleParams, 
                     @Param("page")PageParams pageParams);
```

修改映射文件，代码如下所示：

```xml
<select id="findByMix" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{params.roleName},'%')
    and note like concat('%',#{params.note},'%')
    limit #{page.start},#{page.limit}
</select>
```

可以看到MyBatis对RoleParams、PageParams这类的JavaBean提供EL（中间）支持

#### 5.3.3.5	总结

对4种传递参数的方法进行评价：

- 使用map传递参数丧失了业务可读性，实际应用应该果断废弃；
- 使用@Param注解适用于参数较少的情况，一般不超过5个；
- 当参数多于5个时，建议使用JavaBean方式；
- 对于使用混合参数的，要明确参数合理性

### 5.3.4    使用resultMap映射结果集

为了支持复杂的映射，select元素提供了resultMap属性。先定义resultMap属性，代码如下所示：

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper">
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>
    <select id="getRoleUseResultMap" parameterType="long" resultMap="roleMap">
         select id,role_name as roleName,note from t_role where id = #{id};
    </select>
</mapper>
```

- resultMap的属性id是它的标识，type代表使用哪个类作为其映射的类，可以是别名或者全限定名；
- 它的子元素id代表resultMap的主键，而result代表其属性，id和result元素的属性property代表POJO的属性名称，而column代表SQL的列名。把POJO的属性和SQL的列名做对应。
- 在select中resultMap属性表明使用哪个resultMap作为映射规则

####5.3.5    分页参数RowBounds

MyBatis不仅支持分页，而且还提供了专门处理分页的类——RowBounds。使用它很简单，只要给接口增加一个RowBounds参数即可。

```java
 List<Role> findByRowBounds(@Param("roleName") String roleName,
                            @Param("note") String note,
                            RowBounds rowBounds);
```

修改映射文件，代码如下所示：

```xml
<select id="findByRowBounds" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

代码中没有关于RowBounds的参数信息，它是MyBatis的一个附加参数，MyBatis会自动识别并完成分页。

测试如下所示：

```java
@Test
public void test7() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RowBounds rowBounds = new RowBounds(0, 20);
    List<Role> roles = roleMapper.findByRowBounds("1", "1", rowBounds);
    logger.info(roles);
    sqlSession.close();
}
```

RowBounds接收两个参数，第一个是偏移量offset，第二个参数是限制条数limit，这里表示从1条开始限定返回至多20条记录的结果。RowBounds只适合查询少量数据的场景，查询大量数据可以使用分页插件。

## 5.4	insert元素——插入语句

insert元素的常用配置如下表所示：

| 属性             | 描述                                                         | 备注                                              |
| ---------------- | ------------------------------------------------------------ | ------------------------------------------------- |
| id               | SQL编号，用于表示这条SQL语句                                 | 命名空间+id+databaseId唯一，否则MyBatis会抛出异常 |
| parameterType    | 参数类型，同select元素                                       | 和select元素一样，可以是单个参数或者多个参数      |
| useGeneratedKeys | 是否启用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键。（比如MySQL和SQL Server这样的数据库表的自增主键） | 默认值为false                                     |
| keyProperty      | （仅对insert和update有用）唯一标记一个属性，MyBatis会通过getGeneratedKeys的返回值，或者通过insert语句的selectKey子元素设置它的键值。如果是复合主键，要把每一个名称用逗号隔开 | 默认值为unset。不能和KeyColumn连用                |
| keyColumn        | （仅对insert和update有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像PostgreSQL）中是必须的，当主键列不是表中的第一列时需要设置。如果是复合主键，要把每一个名称用逗号隔开 | 不能和KeyProperty连用                             |

执行一条insert语句后，会返回一个整数表示其影响记录数。

### 5.4.2	简单的insert语句的应用

写一条SQL插入角色，这是一条最简单的插入语句，代码如下所示：

```xml
<insert id="insertRole" parameterType="role">
    insert into t_role(role_name,note)  values (#{roleName},#{note});
</insert>
```

- id表示这条SQL；
- parameterType代表传入参数类型；
- 没有配置的属性采用默认值

### 5.4.3    主键回填

上面的代码并没有插入id列，因为MySQL中的表采用了自增主键，但有时候还需要这个主键来关联其它业务。

insert标签中有这样一个属性useGeneratedKeys来获取主键，打开这个开关后，还要配置其属性keyProperty或keyColumn，告诉系统把生成的主键放入哪个属性，如果存在多个主键，就用逗号隔开。

修改映射文件，让程序返回主键，代码如下所示：

```xml
<insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
    insert into t_role(role_name,note)  values (#{roleName},#{note});
</insert>
```

这样就会把数据库生成的主键回填至keyProperty指定的POJO属性，这里是id。

测试主键回填的结果，代码如下所示：

```java
@Test
public void test8() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Role role = new Role();
    role.setRoleName("二郎神");
    role.setNote("杨戬");
    logger.info(role);
    roleMapper.insertRole(role);
    logger.info(role);
    sqlSession.close();
}
```

运行可看到，在执行insertRole方法前roleid值为null，而执行后值不为null。

### 5.4.4	自定义主键

有时候主键可能依赖于某些规则，比如取消角色表的id递增规则，修改为：

- 当角色表记录为空时，id设置为1
- 当角色表记录不为空时，id设置为当前id加3

MyBatis可用selectKey元素实现自定义键值的生成规则。代码如下所示：

```xml
<<insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
	<selectKey keyProperty="id" resultType="long" order="BEFORE">
    	select if (max(id) = null,1,max(id)+3) from t_role
	</selectKey>
	insert into t_role(id,role_name,note)  values (#{id},#{roleName},#{note});
</insert>
```

以上代码定义了selectKey元素，它的keyProperty指定了id属性作为POJO的主键，resultType指定了返回long型的结果集，而order属性为BEFORE表示它将于当前定义的SQL前执行。

## 5.5	update元素和delete元素

update元素和delete元素比较简单，和insert元素差不多，执行后也会返回一个整数，用来标识该SQL语句影响了数据库的记录行数。更新和删除角色表记录，代码如下所示：

```xml
<update id="updateRole" parameterType="role">
    update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
</update>
```

```xml
<delete id="deleteRole" parameterType="long">
    delete from t_role where id = #{id};
</delete>
```

## 5.6	sql元素

sql元素的作用在于可以定义一条SQL的一部分，方便后面的SQL引用它，比如最典型的列名，通常情况下要在select、insert语句中反复编写，特别字段多的表。这时候可以使用sql元素，代码如下所示：

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>

    <sql id="roleCols">
        id,role_name,note
    </sql>

    <select id="getRole" resultType="role">
        select <include refid="roleCols"/> from t_role where id = #{id};
    </select>

    <insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            select if (max(id) = null,1,max(id)+3) from t_role
        </selectKey>
        insert into t_role(<include refid="roleCols"/>)  values (#{id},#{roleName},#{note});
    </insert>
</mapper>
```

可以看到，通过sql元素定义，就可以include元素引入到各条SQL语句中，减少了列名的重复编写。

sql元素还支持变量传递，如下所示：

```xml
<sql id="roleCols">
    ${alias}.id,${alias}.role_name ,${alias}.note
</sql>
<select id="getRole" resultType="role">
    select 
    <include refid="roleCols">
        <property name="alias" value="r"/>
    </include>
    from t_role where id = #{id};
</select>
```

在include元素中定义了一个命名为alias的变量，其值是SQL表t_role的别名r，然后sql元素就可以使用这个变量名了。

## 5.7	resultMap元素

resultMap的作用主要是定义映射规则，也就是SQL到JavaBean的映射关系。

### 5.7.1	使用POJO存储结果集

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper">
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>
</mapper>  
```

resultMap元素的属性id代表这个resultMap的标识，type代表需要映射的POJO，这里可以使用别名或者全限定名。在映射关系中，id表示对象的主键，property表示POJO的属性名称，column表示数据库列名。于是POJO就和数据库SQL的结果一一对应起来了。配置完成即可使用resultMap，如下所示：

```xml
<select id="getRoleUseResultMap" parameterType="long" resultMap="roleMap">
     select id,role_name as roleName,note from t_role where id = #{id};
</select>
```

## 5.8	级联

级联是一个数据库实体的概念。比如角色就需要存在用户与之对应，这样就有角色用户表，一个角色可能有多个用户，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。在MyBatis中还有一种被称为鉴别器的级联，它是一种可以选择具体实现类的级联，比如要查找雇员及其体检表的信息，但是雇员有性别之分，而根据性别的不同，其体检表的项目也会不一样，比如男性体检表可能有前列腺的项目，而女子体检表可能有子宫的项目，那么体检表应该分为男性和女性，从而根据雇员性别区关联。

级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统的复杂度，同时降低系统性能，一般最好不超过3层。

### 5.8.1	MyBatis中的级联

MyBatis中的级联分为3种。

- 鉴别器（discriminator）：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。
- 一对一（association）：比如学生证和学生就是一种一对一的级联。
- 一对多（collection）：比如班级和学生就是一种一对多的级联。

值得注意的是，MyBatis没有多对多级联，因为多对多级联比较复杂，使用困难，而且可以通过两个一对多进行替换，所有MyBatis不支持。

为了更好地阐述级联，先给出一个雇员级联模型。

- 该模型以雇员表为中心
- 雇员表和工牌表是一对一级联关系
- 雇员表和员工任务表是一对多级联关系
- 员工任务表和任务表是一对一级联关系
- 每个雇员都会有一个体检表，随着雇员字段性别取值不同，会有不同的关联表

mysql脚本略

 ### 5.8.2    建立POJO

男性体检表和女性体检表继承于体检表，因此可以得出3个体检表，代码如下所示：

```java
public class HealthForm {
   
   private Long id;
   private Long empId;
   private String heart;
   private String liver;
   private String spleen;
   private String lung;
   private String kidney;
   private String note;
    
    /*getter and setter*/
}
```

```java
public class MaleHealthForm extends HealthForm {
   
   private String prostate;
	
    /*getter and setter*/
}
```

```java
public class FemaleHealthForm extends HealthForm {

   private String uterus;
	
    /*getter and setter*/
}
```

显然这个关联关系是通过MyBatis的鉴别器去完成。

接下来设计员工表、工牌表和任务表的POJO，它们是以员工表为核心的，先完成工牌表和任务表的POJO，代码如下所示：

```java
public class WorkCard {
   private Long id;
   private Long empId;
   private String realName;
   private String department;
   private String mobile;
   private String position;
   private String note;
    
   /*getter and setter*/
}
```

```java
public class Task {
   private Long id;
   private String title;
   private String context;
   private String note;
   
   /*getter and setter*/
}
```

雇员任务表是通过任务编号(task_id)和任务进行一对一管理，这里只考虑其自身和任务编号的关联，而雇员对它的关联则由雇员去维护，这样就可得到雇员任务POJO，代码如下所示：

```java
public class EmployeeTask {
   private Long id;
   private Long empId;
    //任务按一对一级联
   private Task task = null;
   private String taskName;
   private String note;
   
   /*getter and setter*/
}
```

属性task是一个Task类对象，由它进行关联任务信息。

男雇员和女雇员继承于雇员，这就是一个鉴别器，通过雇员类的属性性别来决定使用哪个具体的子类初始化对象。它与工牌表是一对一关联关系，对于雇员任务表是一对多关联关系，由此可以得出3个类，代码如下所示：

```java
public class Employee {

   private Long id;
   private String realName;
   private SexEnum sex = null;
   private Date birthday;
   private String mobile;
   private String email;
   private String position;
   private String note;
    //工牌按一对一级联
   private WorkCard workCard;
   //雇员任务按一对多级联
   private List<EmployeeTask> employeeTaskList = null;
   
    /*getter and setter*/
}
```

```java
public class MaleEmployee extends Employee {

   private MaleHealthForm maleHealthForm = null;
    
   /*getter and setter*/
}
```

```java
public class FemaleEmployee extends Employee {

   private FemaleHealthForm femaleHealthForm = null;

   /*getter and setter*/
}
```

### 5.8.3	配置映射文件

配置TaskMapper.xml和WorkCardMapper.xml，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.TaskMapper">
    <select id="getTask" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.Task">
        select id,title,context,note from t_task where id =#{id}
    </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.WorkCardMapper">
    <select id="getWorkCardByEmpId" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.WorkCard">
        select id, emp_id as empId, real_name as realName, department, mobile, position, note FROM t_work_card
        where emp_id = #{empId}
    </select>
</mapper>
```

雇员任务表通过任务编号（task_id）和任务表示关联，这是一个一对一的级联关系，使用association元素，雇员任务表一对一级联如代码所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper">
    <resultMap id="EmployeeTaskMap" type="com.ssm.learn.chapter5.pojo.EmployeeTask">
        <id property="id" column="id"/>
        <result property="empId" column="emp_id"/>
        <result property="taskName" column="task_name"/>
        <result property="note" column="note"/>
        
        <association property="task" column="task_id" select="com.ssm.learn.chapter5.mapper.TaskMapper.getTask"/>
        
    </resultMap>

    <select id="getEmployeeTaskByEmpId" resultMap="EmployeeTaskMap">
        select id, emp_id, task_id, note from t_employee_task where emp_id = #{empId}
    </select>

</mapper>
```

注意，association元素代表一对一级联的开始。property属性代表映射到POJO属性上。select配置是命名空间+SQL id的形式，这样便可以指向对应Mapper的SQL，MyBatis就会通过对应的SQL将数据查询回来。column代表SQL的列，用作参数传递给select属性制定的SQL，如果是多个参数则用逗号隔开。

体检表能拆分为男性雇员和女性雇员，所以就有两个简单的映射器，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.MaleHealthFormMapper">
   <select id="getMaleHealthForm" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.MaleHealthForm">
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_male_health_form
       where emp_id = #{id}
   </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper">
   <select id="getFemaleHealthForm" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.FemaleHealthForm">
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_female_health_form
       where emp_id = #{id}
   </select>
</mapper>
```

创建雇员的映射关系，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.EmployeeMapper">
    <resultMap id="employee" type="com.ssm.learn.chapter5.pojo.Employee">
        <id property="id" column="id"/>
        <result column="real_name" property="realName"/>
        <result column="sex" property="sex" typeHandler="com.ssm.learn.chapter5.typeHandler.SexTypeHandler"/>
        <result column="birthday" property="birthday"/>
        <result column="mobile" property="mobile"/>
        <result column="email" property="email"/>
        <result column="position" property="position"/>
        <result column="note" property="note"/>
        <association property="workCard" column="id"
                     select="com.ssm.learn.chapter5.mapper.WorkCardMapper.getWorkCardByEmpId"/>
        <collection property="employeeTaskList" column="id" select="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId"/>
        <discriminator javaType="long" column="sex">
            <case value="1" resultMap="MaleHealthFormMapper"/>
            <case value="2" resultMap="FemaleHealthFormMapper"/>
        </discriminator>
    </resultMap>

    <resultMap id="FemaleEmployeeMap" type="com.ssm.learn.chapter5.pojo.FemaleEmployee" extends="employee">
        <association property="femaleHealthForm" column="id" select="com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper.getFemaleHealthForm"/>
    </resultMap>

    <resultMap id="MaleEmployeeMap" type="com.ssm.learn.chapter5.pojo.MaleEmployee" extends="employee">
        <association property="maleHealthForm" column="id" select="com.ssm.learn.chapter5.mapper.MaleHealthFormMapper.getMaleHealthForm"/>
    </resultMap>

    <select id="getEmployee" parameterType="long" resultMap="employee">
        select id, real_name as realName, sex, birthday, mobile, email, position, note, from t_employee
        where id = #{id}
    </select>
</mapper>
```

- association元素，对工牌进行一对一级联。
- collection元素，一对多级联，其select元素指向SQL，将通过column制定的SQL字段作为参数进行传递，然后将结果返回给雇员POJO的属性employeeTaskList。
- discriminator元素，鉴别器，它的属性column代表使用哪个字段进行鉴别，这里是sex，而它的子元素case，则用于进行区分。而resultMap属性表示采用哪个ResultMap去映射，比如sex为1，则使用maleHealthFormMapper进行映射。

而对于雇员体检表而言，id为employee的resultMap，被maleHealthMapper和femaleHealthMapper通过extends元素继承。

测试级联，代码如下所示：

```java
@Test
public void test9() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);
        Employee employee = employeeMapper.getEmployee(1L);
        logger.info(employee.getBirthday());
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }

}
```

运行可以看到所有级联都成功了，但是这会引发性能问题，这叫N+1问题。

### 5.8.4	N+1问题

比如作为一个雇员的管理者，它只想看到员工信息和员工任务信息，那么体检表和工牌的信息就是多余的。

假设现在有N个关联关系完成了级联，那么只要再加入一个级联关系，就变成了N+1个级联，所有的级联SQL都会被执行，显然会有很多并不是我们关心的数据被取出，这样会造成很大的资源浪费，这就是N+1问题。

为了应对N+1问题，MyBatis提供了延迟加载功能，即在一开始取出雇员信息是，并不需要将工牌表、体检表、任务表的记录取出，而是只将雇员信息和雇员任务表的信息取出。当我们通过雇员POJO访问工牌表时，体检表和任务表的记录才通过对应的SQL取出。

### 5.8.5	延迟加载

MyBatis提供延迟加载，我们希望一次性把常用的级联数据通过SQL直接查询出来，而对于那些不常用的级联数据不要取出，而是等待要用时才取出，这些不常用的级联数据可以采用延迟加载的功能。

在MyBatis的settings配置中存在两个元素可以配置级联，如下所示：

| 配置项                | 作用                                                         | 配置选项说明 | 默认值 |
| --------------------- | ------------------------------------------------------------ | ------------ | ------ |
| lazyLoadingEnabled    | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态 | true\|false  | false  |
| aggressiveLazyLoading | 当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载 | true\|false  | false  |

修改MyBatis配置文件，增加如下代码：

```xml
<settings>
    <setting name="lazyLoadingEnabled" value="true"/>
    <setting name="aggressiveLazyLoading" value="true"/>
</settings>
```

选项lazyLoadingEnabled决定是否开启延迟加载，而选项aggressiveLazyLoading决定是否采用层级加载，但是它们都是全局性配置，不能解决我们的需求。在MyBatis中使用fetchType属性，它可以处理全局定义无法处理的问题，进行自定义。fetchType出现在级联元素（association、collection，注意，discrimination没有这个属性）中，它由两个值可选：

- eager，获得当前POJO后立即加载对应的数据。
- lazy，获得当前POJO后延迟加载对应的数据。

在保证lazyLoadingEnabled=true和aggressiveLazyLoading=false的前提下，对雇员的映射文件关于雇员属性、雇员任务进行如下修改：

```xml
<collection property="employeeTaskList" column="id" select="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId" fetchType="eager"/>
```

然后进行调试，这个时候已经按照我们的要求加载了数据，先加载雇员信息，然后加载雇员任务信息。fetchType属性会忽略全局配置项lazyLoadingEnabled和aggressiveLazyLoading。

### 5.8.6	多对多级联

现实中有许多用户，用户由归属于一些角色，这样一个用户可以对应多个角色，而一个角色又可以由多个用户担当。这就是多对多关联关系。但更多的都是拆分为两个一对多的关系，也就是一个角色对应多个用户和一个用户对应多个角色，这样就可以设计用户和角色的POJO了，代码如下所示：

```java
package com.ssm.learn.chapter5.pojo2;

import java.util.List;

public class Role2 {
   private Long id;
   private String roleName;
   private String note;
   // 关联用户信息，一对多关联
   private List<User2> userList;

	/*getter and setter*/
}
```

```java
package com.ssm.learn.chapter5.pojo2;

import java.util.List;

import com.ssm.learn.chapter5.enumeration.SexEnum;

public class User2 {
   private Long id;
   private String userName;
   private String realName;
   private SexEnum sex;
   private String moble;
   private String email;
   private String note;
   // 对角色一对多关联
   private List<Role2> roleList;

	/*getter and setter*/
}
```

配置映射文件，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper2.RoleMapper2">
   <resultMap type="com.ssm.learn.chapter5.pojo2.Role2" id="roleMapper">
      <id column="id" property="id" />
      <result column="role_name" property="roleName" />
      <result column="note" property="note" />
      <collection property="userList" column="id" fetchType="lazy"
         select="com.ssm.learn.chapter5.mapper2.UserMapper2.findUserByRoleId" />
   </resultMap>

   <select id="getRole" parameterType="long" resultMap="roleMapper">
      select id, role_name, note from t_role where id = #{id}
   </select>

   <select id="findRoleByUserId" parameterType="long" resultMap="roleMapper">
      select r.id, r.role_name, r.note from t_role r, t_user_role ur
      where r.id = ur.role_id and ur.user_id = #{userId}
   </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper2.UserMapper2">
   <resultMap type="com.ssm.learn.chapter5.pojo2.User2" id="userMapper">
      <id column="id" property="id" />
      <result column="user_name" property="userName" />
      <result column="real_name" property="realName" />
      <result column="sex" property="sex"
         typeHandler="com.ssm.learn.chapter5.typeHandler.SexTypeHandler" />
      <result column="mobile" property="moble" />
      <result column="email" property="email" />
      <result column="position" property="position" />
      <result column="note" property="note" />
      <collection property="roleList" column="id" fetchType="lazy"
         select="com.ssm.learn.chapter5.mapper2.RoleMapper2.findRoleByUserId" />
   </resultMap>
   <select id="getUser" parameterType="long" resultMap="userMapper">
      select id, user_name, real_name, sex, moble, email, note from t_user where
      id =#{id}
   </select>
   <select id="findUserByRoleId" parameterType="long" resultMap="userMapper">
      select u.id, u.user_name, u.real_name, u.sex, u.moble, u.email, u.note
      from
      t_user u , t_user_role ur where u.id = ur.user_id and ur.role_id =#{roleId}
   </select>
</mapper>
```

这里都使用了collection去关联，但是把fetchType都设置为lazy，启用延时加载。

测试代码如下：

```java
@Test
public void test10(){
    SqlSession sqlSession=null;
    try{
        sqlSession=SqlSessionFactoryUtils.openSqlSession();
        RoleMapper2 roleMapper2 = sqlSession.getMapper(RoleMapper2.class);
        Role2 role = roleMapper2.getRole(1L);
        role.getUserList();
        UserMapper2 userMapper2 = sqlSession.getMapper(UserMapper2.class);
        User2 user = userMapper2.getUser(1L);
    }catch (Exception e){
        e.printStackTrace();
    }finally {
        if(sqlSession!=null){
            sqlSession.close();
        }
    }
}
```

运行程序可以看到执行了3条SQL，因为调用getUserList所以才有了第二条SQL。

## 5.9	缓存

在MyBatis中允许使用缓存，把那些常用且命中率高的数据缓存起来，能够有效提高系统性能。

MyBatis分为一级缓存和二级缓存，同时可以配置关于缓存的设置。

### 5.9.1	一级缓存和二级缓存

一级缓存是在SqlSession上的缓存，默认自动开启。二级缓存是在SqlSessionFactory上的缓存。

没有任何配置的环境测试一级缓存，代码如下所示：

```java
@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        logger.info("再获取一次POJO......");
        Role role2 = roleMapper.getRole(1L);
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }
}
```

运行代码，得到如下日志：

```markdown
DEBUG 2020-02-25 16:42:22,848 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:42:22,883 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 16:42:22,899 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 16:42:22,899 com.ssm.learn.chapter5.test.MyTest: 再获取一次POJO......
DEBUG 2020-02-25 16:42:22,900 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@63440df3]
```

可以看到虽然对同一个对象进行了两次获取，但是实际上只有一条SQL被执行，其原因是代码使用了同一个SqlSession对象获取数据。当一个SqlSession第一次通过SQL和参数获取对象后就会将它缓存起来，如果下次的SQL和参数没有发生变化，并且缓存没有超时或者声明需要刷新时，它就会从缓存中获取数据，而不是通过SQL获取了。修改代码，如下所示：

```java
@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    SqlSession sqlSession2 = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        sqlSession2 = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
        sqlSession.commit();
        logger.info("不同sqlSession再获取一次POJO......");
        RoleMapper roleMapper2 = sqlSession2.getMapper(RoleMapper.class);
        Role role2 = roleMapper2.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
        if (sqlSession2 != null) {
            sqlSession2.close();
        }
    }
}
```

运行代码，得到以下日志：

```markdown
DEBUG 2020-02-25 16:55:56,004 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:55:56,039 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 16:55:56,056 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 16:55:56,057 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 16:55:56,057 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Opening JDBC Connection
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.datasource.pooled.PooledDataSource: Created connection 1956710488.
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@74a10858]
DEBUG 2020-02-25 16:55:56,063 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
```

可以看到SQL被执行了两次，这说明一级缓存是在SqlSession层面的，对于不同的SqlSession对象是不能共享的。为了是SqlSession对象之间共享相同的缓存，有时候需要开启二级缓存，只需要在映射文件上加入代码：

```xml
<cache/>
```

这个时候MyBatis会序列化和反序列化对应的POJO，也就要求POJO是一个可序列化的对象，那么它就必须实现Serializable接口。代码如下所示：

```java
public class Role implements Serializable {
	...
}
```

再次运行代码，得到以下日志：

```markdown
DEBUG 2020-02-25 17:02:39,248 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 17:02:39,281 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 17:02:39,297 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 17:02:39,309 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.cache.decorators.LoggingCache: Cache Hit Ratio [com.ssm.learn.chapter5.mapper.RoleMapper]: 0.5
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@462d5aee]
```

可以看到不同的SqlSession在获取同一条记录，只发送了一条SQL。因为这个时候MyBatis将其保存在SqlSessionFactory层面。

(String), http://cdn.alanliang.site/note/oilpainting5.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 3(Long), 1(Long), 1(Integer), 2020-06-15 11:08:33.159(Timestamp), 2020-06-15 11:08:33.159(Timestamp), 5(Integer), 1(Integer)
2020-06-15 11:08:33.177 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 11:08:33.177 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 11:08:33.178 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 5(Long), 12(Long), 5(Long), 15(Long), 5(Long), 21(Long)
2020-06-15 11:08:33.179 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 11:08:33.445 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:08:33.446 DEBUG 16004 --- [http-nio-8889-exec-11] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:08:33.444(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: Article(id=5, title=映射器, summary=JavaEE互联网轻量级框架整合开发第五章, content=<h1 id="h1--5-"><a name="第5章    映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第5章    映射器</h1><p>映射器是MyBatis最复杂且最重要的组件。它由一个接口和XML文件（或者注解组成）。在映射器中，可以配置参数、各类的SQL语句、存储过程、缓存、级联等复杂的内容，并且通过简易的映射规则映射到指定的POJO或者其他对象上，映射器能有效屏蔽JDBC底层的代码。</p>
<p>映射器可以使用注解完成，但在企业应用不广，推荐使用XML方式，是因为：</p>
<ul>
<li>面对复杂性，SQL会显得无力，尤其是长句SQL；</li><li>注解的可读性较差；</li><li>注解丢失了XML上下文引用的功能</li></ul>
<h2 id="h2-5-1-"><a name="5.1    概述" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    概述</h2><p>映射器的常用配置元素如下表所示：</p>
<table>
<thead>
<tr>
<th>元素名称</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>select</td>
<td>查询语句，最常用、最复杂的元素之一</td>
<td>可以自定义参数，返回结果集等</td>
</tr>
<tr>
<td>insert</td>
<td>插入语句</td>
<td>执行后返回一个参数，代表插入的条数</td>
</tr>
<tr>
<td>update</td>
<td>更新语句</td>
<td>执行后返回一个参数，代表更新的条数</td>
</tr>
<tr>
<td>delete</td>
<td>删除语句</td>
<td>执行后返回一个参数，代表删除的条数</td>
</tr>
<tr>
<td><del>parameterMap</del></td>
<td>定义参数映射关系</td>
<td>即将被删除，不建议使用</td>
</tr>
<tr>
<td>sql</td>
<td>允许定义一部分SQL，然后在各个地方引用它</td>
<td>例如，定义一张表的列名，可以在多个SQL语句中使用</td>
</tr>
<tr>
<td>resultMap</td>
<td>用来描述从数据库结果集中来加载对象，它是最复杂、最强大的元素</td>
<td>提供映射规则</td>
</tr>
<tr>
<td>cache</td>
<td>给定名称空间的缓存配置</td>
<td>—-</td>
</tr>
<tr>
<td>cache-ref</td>
<td>其他命名空间缓存配置的引用</td>
<td>—-</td>
</tr>
</tbody>
</table>
<h2 id="h2-5-2-"><a name="5.2    引入映射器的方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2    引入映射器的方法</h2><h3 id="h3-5-2-1-"><a name="5.2.1    用文件路径引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.1    用文件路径引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;mapper resource=&quot;demo/mapper/demoMapper.xml&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，resource属性值为映射器的xml文件的资源路径</p>
<h3 id="h3-5-2-2-"><a name="5.2.2    用包名引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.2    用包名引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;package name=&quot;demo.mapper&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，name属性值为映射器的接口所在包的全限定名</p>
<h3 id="h3-5-2-3-"><a name="5.2.3    用类注册引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.3    用类注册引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;mapper class=&quot;demo.mapper.DemoMapper1&quot;/&gt;
     &lt;mapper class=&quot;demo.mapper.DemoMapper2&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，class属性值为映射器的接口的全限定名</p>
<h2 id="h2-5-3-select-"><a name="5.3    select元素——查询语句" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3    select元素——查询语句</h2><p>select元素的常用配置如下表所示：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>它和Mapper的命名空间组合起来是唯一的，供MyBatis调用</td>
<td>如果命名空间和id结合起来不唯一，MyBatis会抛出异常</td>
</tr>
<tr>
<td>parameterType</td>
<td>可以给出类的全限定名，也可以是别名，但是别名必须是MyBatis内部定义或者自定义的</td>
<td>可以选择JavaBean、Map等简单的参数类型传递给SQL</td>
</tr>
<tr>
<td><del>parameterMap</del></td>
<td>即将废弃的元素，不建议使用</td>
<td>—-</td>
</tr>
<tr>
<td>resultType</td>
<td>定义类的全路径，在允许自动匹配的情况下，结果集将通过JavaBean的规则映射；或定义为in、double、float、map等参数；也可以使用别名，但是要符合别名规范，且不能和resultMap同时使用</td>
<td>常用的参数之一，比如统计总条数时可以把它的值设置为int</td>
</tr>
<tr>
<td>resultMap</td>
<td>它是映射集的引用，将执行强大的映射功能。我们可以使用resultType和resultMap其中的一个，resultMap能提供自定义映射规则的机会</td>
<td>MyBatis最复杂的元素，可以配置映射规则、级联、typeHandler等</td>
</tr>
</tbody>
</table>
<p>另外，如果还要设置缓存，还会使用到FlushCache、useCache，这里不展开讲。</p>
<h3 id="h3-5-3-1-select-"><a name="5.3.1    简单的select元素的应用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.1    简单的select元素的应用</h3><p>先学习一个最简单的例子：统计用户表同一个姓氏的用户数量，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;countByFirstName&quot; parameterType=&quot;string&quot; resultType=&quot;int&quot;&gt;
    select count(*) total from t_user where user_name like concat(#{firstName},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>其中的元素含义：</p>
<ul>
<li>id：SQL语句的唯一标识</li><li>parameterType：SQL语句接收的参数类型，可以是类的别名也可以是类的全限定名</li><li>resultType：SQL语句返回的结果类型，可以是类的别名也可以是类的全限定名</li></ul>
<p>接着还需要定义一个接口方法，代码如下所示：</p>
<pre><code class="lang-java">public interface UserMapper {
    int countByFirstName(String firstName);
}
</code></pre>
<h3 id="h3-5-3-2-"><a name="5.3.2    自动映射和驼峰规则" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.2    自动映射和驼峰规则</h3><p>MyBatis提供自动映射功能，在默认情况下是开启的。</p>
<p>在settings元素中有两个可配置选项autoMappingBehavior和mapUnderscoreToCamelCase，它们是控制自动映射和驼峰映射的开关。一般而言，自动映射使用的多一些，而驼峰映射要求比较苛刻，应用不广。</p>
<p>autoMappingBehavior的取值有：</p>
<ul>
<li>NONE，不进行自动映射</li><li>PARTIAL，默认值，只对没有嵌套结果集进行自动映射</li><li>FULL，对所有的结果集进行自动映射，包括嵌套结果集</li></ul>
<p>在默认情况下使用默认值即可。规则如下所示：</p>
<pre><code class="lang-java">public class Role {
    private Long id;
    private String roleName;
    private String note;
    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<p>如果编写的SQL列名和POJO的属性名一致，那么就会形成自动映射。原来的列名role_name被别名roleName替代，所以也会对应起来。</p>
<h3 id="h3-5-3-3-"><a name="5.3.3    传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3    传递多个参数</h3><h4 id="h4-5-3-3-1-map-"><a name="5.3.3.1    使用map接口传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.1    使用map接口传递多个参数</h4><p>假设要通过角色名称（role_name）和备注（note）两个参数对角色进行模糊查询，则可以使用map接口。</p>
<p>把接口方法定义为：    </p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByMap(Map&lt;String,Object&gt; parameterMap);
</code></pre>
<p>使用它在SQL中设置对应的参数，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRolesByMap&quot; parameterType=&quot;map&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>测试如下：</p>
<pre><code class="lang-java">@Test
public void test2() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Map&lt;String, Object&gt; parameterMap = new HashMap&lt;&gt;();
    parameterMap.put(&quot;roleName&quot;, &quot;1&quot;);
    parameterMap.put(&quot;note&quot;, &quot;1&quot;);
    List&lt;Role&gt; roles = roleMapper.findRolesByMap(parameterMap);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>由于使用map不能限定其传递的数据类型，所以业务性质不强，可读性差，因此不推荐使用。</p>
<h4 id="h4-5-3-3-2-"><a name="5.3.3.2    使用注解传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.2    使用注解传递多个参数</h4><p>MyBatis提供了<a href="https://github.com/Param" title="&#64;Param" class="at-link">@Param</a>注解，它可以定义映射器的参数名称，使用它可读性更好。把接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByAnnotation(@Param(&quot;roleName&quot;) String roleName,
                                 @Param(&quot;note&quot;) String note);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-java">&lt;select id=&quot;findRolesByAnnotation&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>注意，此时不用给出parameterType属性，MyBatis会自动探索。<br>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test3() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    List&lt;Role&gt; roles = roleMapper.findRolesByAnnotation(&quot;1&quot;,&quot;1&quot;);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>改写后可读性大大提高，但是如果SQL很复杂，参数很多，那么接口方法的参数个数也会很多，这样使用很不方便。所以，MyBatis还提供了传递JavaBean的形式。</p>
<h4 id="h4-5-3-3-3-javabean-"><a name="5.3.3.3    通过JavaBean传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.3    通过JavaBean传递多个参数</h4><p>首先定义一个参数的POJO——RoleParams，代码如下所示：</p>
<pre><code class="lang-java">public class RoleParams {
    private String roleName;
    private String note;

    public RoleParams(){}
    /*getter and setter*/
}
</code></pre>
<p>此时把接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByBean(RoleParams roleParams);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRolesByBean&quot; parameterType=&quot;com.ssm.learn.chapter5.pojo.RoleParams&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>注意此时的parameterType属性值修改为RoleParams的全限定名或者别名。</p>
<p>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test5() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RoleParams roleParams = new RoleParams();
    roleParams.setRoleName(&quot;1&quot;);
    roleParams.setNote(&quot;1&quot;);
    List&lt;Role&gt; roles = roleMapper.findRolesByBean(roleParams);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<h4 id="h4-5-3-3-4-"><a name="5.3.3.4    混合使用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.4    混合使用</h4><p>在某种情况下可能需要混合使用几种方式来传递参数。比如通过角色名称和备注查询一个角色，与此同时还支持分页，分页的POJO——PageParams如下所示：</p>
<pre><code class="lang-java">public class PageParams {
    private int start;
    private int limit;

    public PageParams(){}
    /*getter and setter*/
}
</code></pre>
<p>此时接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findByMix(@Param(&quot;params&quot;)RoleParams roleParams, 
                     @Param(&quot;page&quot;)PageParams pageParams);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findByMix&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{params.roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{params.note},&#39;%&#39;)
    limit #{page.start},#{page.limit}
&lt;/select&gt;
</code></pre>
<p>可以看到MyBatis对RoleParams、PageParams这类的JavaBean提供EL（中间）支持</p>
<h4 id="h4-5-3-3-5-"><a name="5.3.3.5    总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.5    总结</h4><p>对4种传递参数的方法进行评价：</p>
<ul>
<li>使用map传递参数丧失了业务可读性，实际应用应该果断废弃；</li><li>使用<a href="https://github.com/Param" title="&#64;Param" class="at-link">@Param</a>注解适用于参数较少的情况，一般不超过5个；</li><li>当参数多于5个时，建议使用JavaBean方式；</li><li>对于使用混合参数的，要明确参数合理性</li></ul>
<h3 id="h3-5-3-4-resultmap-"><a name="5.3.4    使用resultMap映射结果集" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.4    使用resultMap映射结果集</h3><p>为了支持复杂的映射，select元素提供了resultMap属性。先定义resultMap属性，代码如下所示：</p>
<pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;getRoleUseResultMap&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMap&quot;&gt;
         select id,role_name as roleName,note from t_role where id = #{id};
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>resultMap的属性id是它的标识，type代表使用哪个类作为其映射的类，可以是别名或者全限定名；</li><li>它的子元素id代表resultMap的主键，而result代表其属性，id和result元素的属性property代表POJO的属性名称，而column代表SQL的列名。把POJO的属性和SQL的列名做对应。</li><li>在select中resultMap属性表明使用哪个resultMap作为映射规则</li></ul>
<h4 id="h4-5-3-5-rowbounds"><a name="5.3.5    分页参数RowBounds" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.5    分页参数RowBounds</h4><p>MyBatis不仅支持分页，而且还提供了专门处理分页的类——RowBounds。使用它很简单，只要给接口增加一个RowBounds参数即可。</p>
<pre><code class="lang-java"> List&lt;Role&gt; findByRowBounds(@Param(&quot;roleName&quot;) String roleName,
                            @Param(&quot;note&quot;) String note,
                            RowBounds rowBounds);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findByRowBounds&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>代码中没有关于RowBounds的参数信息，它是MyBatis的一个附加参数，MyBatis会自动识别并完成分页。</p>
<p>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test7() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RowBounds rowBounds = new RowBounds(0, 20);
    List&lt;Role&gt; roles = roleMapper.findByRowBounds(&quot;1&quot;, &quot;1&quot;, rowBounds);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>RowBounds接收两个参数，第一个是偏移量offset，第二个参数是限制条数limit，这里表示从1条开始限定返回至多20条记录的结果。RowBounds只适合查询少量数据的场景，查询大量数据可以使用分页插件。</p>
<h2 id="h2-5-4-insert-"><a name="5.4    insert元素——插入语句" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4    insert元素——插入语句</h2><p>insert元素的常用配置如下表所示：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>SQL编号，用于表示这条SQL语句</td>
<td>命名空间+id+databaseId唯一，否则MyBatis会抛出异常</td>
</tr>
<tr>
<td>parameterType</td>
<td>参数类型，同select元素</td>
<td>和select元素一样，可以是单个参数或者多个参数</td>
</tr>
<tr>
<td>useGeneratedKeys</td>
<td>是否启用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键。（比如MySQL和SQL Server这样的数据库表的自增主键）</td>
<td>默认值为false</td>
</tr>
<tr>
<td>keyProperty</td>
<td>（仅对insert和update有用）唯一标记一个属性，MyBatis会通过getGeneratedKeys的返回值，或者通过insert语句的selectKey子元素设置它的键值。如果是复合主键，要把每一个名称用逗号隔开</td>
<td>默认值为unset。不能和KeyColumn连用</td>
</tr>
<tr>
<td>keyColumn</td>
<td>（仅对insert和update有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像PostgreSQL）中是必须的，当主键列不是表中的第一列时需要设置。如果是复合主键，要把每一个名称用逗号隔开</td>
<td>不能和KeyProperty连用</td>
</tr>
</tbody>
</table>
<p>执行一条insert语句后，会返回一个整数表示其影响记录数。</p>
<h3 id="h3-5-4-2-insert-"><a name="5.4.2    简单的insert语句的应用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.2    简单的insert语句的应用</h3><p>写一条SQL插入角色，这是一条最简单的插入语句，代码如下所示：</p>
<pre><code class="lang-xml">&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;
    insert into t_role(role_name,note)  values (#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<ul>
<li>id表示这条SQL；</li><li>parameterType代表传入参数类型；</li><li>没有配置的属性采用默认值</li></ul>
<h3 id="h3-5-4-3-"><a name="5.4.3    主键回填" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.3    主键回填</h3><p>上面的代码并没有插入id列，因为MySQL中的表采用了自增主键，但有时候还需要这个主键来关联其它业务。</p>
<p>insert标签中有这样一个属性useGeneratedKeys来获取主键，打开这个开关后，还要配置其属性keyProperty或keyColumn，告诉系统把生成的主键放入哪个属性，如果存在多个主键，就用逗号隔开。</p>
<p>修改映射文件，让程序返回主键，代码如下所示：</p>
<pre><code class="lang-xml">&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
    insert into t_role(role_name,note)  values (#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<p>这样就会把数据库生成的主键回填至keyProperty指定的POJO属性，这里是id。</p>
<p>测试主键回填的结果，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void test8() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Role role = new Role();
    role.setRoleName(&quot;二郎神&quot;);
    role.setNote(&quot;杨戬&quot;);
    logger.info(role);
    roleMapper.insertRole(role);
    logger.info(role);
    sqlSession.close();
}
</code></pre>
<p>运行可看到，在执行insertRole方法前roleid值为null，而执行后值不为null。</p>
<h3 id="h3-5-4-4-"><a name="5.4.4    自定义主键" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.4    自定义主键</h3><p>有时候主键可能依赖于某些规则，比如取消角色表的id递增规则，修改为：</p>
<ul>
<li>当角色表记录为空时，id设置为1</li><li>当角色表记录不为空时，id设置为当前id加3</li></ul>
<p>MyBatis可用selectKey元素实现自定义键值的生成规则。代码如下所示：</p>
<pre><code class="lang-xml">&lt;&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;long&quot; order=&quot;BEFORE&quot;&gt;
        select if (max(id) = null,1,max(id)+3) from t_role
    &lt;/selectKey&gt;
    insert into t_role(id,role_name,note)  values (#{id},#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<p>以上代码定义了selectKey元素，它的keyProperty指定了id属性作为POJO的主键，resultType指定了返回long型的结果集，而order属性为BEFORE表示它将于当前定义的SQL前执行。</p>
<h2 id="h2-5-5-update-delete-"><a name="5.5    update元素和delete元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.5    update元素和delete元素</h2><p>update元素和delete元素比较简单，和insert元素差不多，执行后也会返回一个整数，用来标识该SQL语句影响了数据库的记录行数。更新和删除角色表记录，代码如下所示：</p>
<pre><code class="lang-xml">&lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
    update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
&lt;/update&gt;
</code></pre>
<pre><code class="lang-xml">&lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;
    delete from t_role where id = #{id};
&lt;/delete&gt;
</code></pre>
<h2 id="h2-5-6-sql-"><a name="5.6    sql元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.6    sql元素</h2><p>sql元素的作用在于可以定义一条SQL的一部分，方便后面的SQL引用它，比如最典型的列名，通常情况下要在select、insert语句中反复编写，特别字段多的表。这时候可以使用sql元素，代码如下所示：</p>
<pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;sql id=&quot;roleCols&quot;&gt;
        id,role_name,note
    &lt;/sql&gt;

    &lt;select id=&quot;getRole&quot; resultType=&quot;role&quot;&gt;
        select &lt;include refid=&quot;roleCols&quot;/&gt; from t_role where id = #{id};
    &lt;/select&gt;

    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
        &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;long&quot; order=&quot;BEFORE&quot;&gt;
            select if (max(id) = null,1,max(id)+3) from t_role
        &lt;/selectKey&gt;
        insert into t_role(&lt;include refid=&quot;roleCols&quot;/&gt;)  values (#{id},#{roleName},#{note});
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<p>可以看到，通过sql元素定义，就可以include元素引入到各条SQL语句中，减少了列名的重复编写。</p>
<p>sql元素还支持变量传递，如下所示：</p>
<pre><code class="lang-xml">&lt;sql id=&quot;roleCols&quot;&gt;
    ${alias}.id,${alias}.role_name ,${alias}.note
&lt;/sql&gt;
&lt;select id=&quot;getRole&quot; resultType=&quot;role&quot;&gt;
    select 
    &lt;include refid=&quot;roleCols&quot;&gt;
        &lt;property name=&quot;alias&quot; value=&quot;r&quot;/&gt;
    &lt;/include&gt;
    from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<p>在include元素中定义了一个命名为alias的变量，其值是SQL表t_role的别名r，然后sql元素就可以使用这个变量名了。</p>
<h2 id="h2-5-7-resultmap-"><a name="5.7    resultMap元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.7    resultMap元素</h2><p>resultMap的作用主要是定义映射规则，也就是SQL到JavaBean的映射关系。</p>
<h3 id="h3-5-7-1-pojo-"><a name="5.7.1    使用POJO存储结果集" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.7.1    使用POJO存储结果集</h3><pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>resultMap元素的属性id代表这个resultMap的标识，type代表需要映射的POJO，这里可以使用别名或者全限定名。在映射关系中，id表示对象的主键，property表示POJO的属性名称，column表示数据库列名。于是POJO就和数据库SQL的结果一一对应起来了。配置完成即可使用resultMap，如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;getRoleUseResultMap&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMap&quot;&gt;
     select id,role_name as roleName,note from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<h2 id="h2-5-8-"><a name="5.8    级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8    级联</h2><p>级联是一个数据库实体的概念。比如角色就需要存在用户与之对应，这样就有角色用户表，一个角色可能有多个用户，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。在MyBatis中还有一种被称为鉴别器的级联，它是一种可以选择具体实现类的级联，比如要查找雇员及其体检表的信息，但是雇员有性别之分，而根据性别的不同，其体检表的项目也会不一样，比如男性体检表可能有前列腺的项目，而女子体检表可能有子宫的项目，那么体检表应该分为男性和女性，从而根据雇员性别区关联。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统的复杂度，同时降低系统性能，一般最好不超过3层。</p>
<h3 id="h3-5-8-1-mybatis-"><a name="5.8.1    MyBatis中的级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.1    MyBatis中的级联</h3><p>MyBatis中的级联分为3种。</p>
<ul>
<li>鉴别器（discriminator）：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>值得注意的是，MyBatis没有多对多级联，因为多对多级联比较复杂，使用困难，而且可以通过两个一对多进行替换，所有MyBatis不支持。</p>
<p>为了更好地阐述级联，先给出一个雇员级联模型。</p>
<ul>
<li>该模型以雇员表为中心</li><li>雇员表和工牌表是一对一级联关系</li><li>雇员表和员工任务表是一对多级联关系</li><li>员工任务表和任务表是一对一级联关系</li><li>每个雇员都会有一个体检表，随着雇员字段性别取值不同，会有不同的关联表</li></ul>
<p>mysql脚本略</p>
<h3 id="h3-5-8-2-pojo"><a name="5.8.2    建立POJO" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.2    建立POJO</h3><p>男性体检表和女性体检表继承于体检表，因此可以得出3个体检表，代码如下所示：</p>
<pre><code class="lang-java">public class HealthForm {

   private Long id;
   private Long empId;
   private String heart;
   private String liver;
   private String spleen;
   private String lung;
   private String kidney;
   private String note;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class MaleHealthForm extends HealthForm {

   private String prostate;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class FemaleHealthForm extends HealthForm {

   private String uterus;

    /*getter and setter*/
}
</code></pre>
<p>显然这个关联关系是通过MyBatis的鉴别器去完成。</p>
<p>接下来设计员工表、工牌表和任务表的POJO，它们是以员工表为核心的，先完成工牌表和任务表的POJO，代码如下所示：</p>
<pre><code class="lang-java">public class WorkCard {
   private Long id;
   private Long empId;
   private String realName;
   private String department;
   private String mobile;
   private String position;
   private String note;

   /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class Task {
   private Long id;
   private String title;
   private String context;
   private String note;

   /*getter and setter*/
}
</code></pre>
<p>雇员任务表是通过任务编号(task_id)和任务进行一对一管理，这里只考虑其自身和任务编号的关联，而雇员对它的关联则由雇员去维护，这样就可得到雇员任务POJO，代码如下所示：</p>
<pre><code class="lang-java">public class EmployeeTask {
   private Long id;
   private Long empId;
    //任务按一对一级联
   private Task task = null;
   private String taskName;
   private String note;

   /*getter and setter*/
}
</code></pre>
<p>属性task是一个Task类对象，由它进行关联任务信息。</p>
<p>男雇员和女雇员继承于雇员，这就是一个鉴别器，通过雇员类的属性性别来决定使用哪个具体的子类初始化对象。它与工牌表是一对一关联关系，对于雇员任务表是一对多关联关系，由此可以得出3个类，代码如下所示：</p>
<pre><code class="lang-java">public class Employee {

   private Long id;
   private String realName;
   private SexEnum sex = null;
   private Date birthday;
   private String mobile;
   private String email;
   private String position;
   private String note;
    //工牌按一对一级联
   private WorkCard workCard;
   //雇员任务按一对多级联
   private List&lt;EmployeeTask&gt; employeeTaskList = null;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class MaleEmployee extends Employee {

   private MaleHealthForm maleHealthForm = null;

   /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class FemaleEmployee extends Employee {

   private FemaleHealthForm femaleHealthForm = null;

   /*getter and setter*/
}
</code></pre>
<h3 id="h3-5-8-3-"><a name="5.8.3    配置映射文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.3    配置映射文件</h3><p>配置TaskMapper.xml和WorkCardMapper.xml，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.TaskMapper&quot;&gt;
    &lt;select id=&quot;getTask&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.Task&quot;&gt;
        select id,title,context,note from t_task where id =#{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.WorkCardMapper&quot;&gt;
    &lt;select id=&quot;getWorkCardByEmpId&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.WorkCard&quot;&gt;
        select id, emp_id as empId, real_name as realName, department, mobile, position, note FROM t_work_card
        where emp_id = #{empId}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>雇员任务表通过任务编号（task_id）和任务表示关联，这是一个一对一的级联关系，使用association元素，雇员任务表一对一级联如代码所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper&quot;&gt;
    &lt;resultMap id=&quot;EmployeeTaskMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.EmployeeTask&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;empId&quot; column=&quot;emp_id&quot;/&gt;
        &lt;result property=&quot;taskName&quot; column=&quot;task_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;

        &lt;association property=&quot;task&quot; column=&quot;task_id&quot; select=&quot;com.ssm.learn.chapter5.mapper.TaskMapper.getTask&quot;/&gt;

    &lt;/resultMap&gt;

    &lt;select id=&quot;getEmployeeTaskByEmpId&quot; resultMap=&quot;EmployeeTaskMap&quot;&gt;
        select id, emp_id, task_id, note from t_employee_task where emp_id = #{empId}
    &lt;/select&gt;

&lt;/mapper&gt;
</code></pre>
<p>注意，association元素代表一对一级联的开始。property属性代表映射到POJO属性上。select配置是命名空间+SQL id的形式，这样便可以指向对应Mapper的SQL，MyBatis就会通过对应的SQL将数据查询回来。column代表SQL的列，用作参数传递给select属性制定的SQL，如果是多个参数则用逗号隔开。</p>
<p>体检表能拆分为男性雇员和女性雇员，所以就有两个简单的映射器，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.MaleHealthFormMapper&quot;&gt;
   &lt;select id=&quot;getMaleHealthForm&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.MaleHealthForm&quot;&gt;
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_male_health_form
       where emp_id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper&quot;&gt;
   &lt;select id=&quot;getFemaleHealthForm&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.FemaleHealthForm&quot;&gt;
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_female_health_form
       where emp_id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>创建雇员的映射关系，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.EmployeeMapper&quot;&gt;
    &lt;resultMap id=&quot;employee&quot; type=&quot;com.ssm.learn.chapter5.pojo.Employee&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result column=&quot;real_name&quot; property=&quot;realName&quot;/&gt;
        &lt;result column=&quot;sex&quot; property=&quot;sex&quot; typeHandler=&quot;com.ssm.learn.chapter5.typeHandler.SexTypeHandler&quot;/&gt;
        &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;/&gt;
        &lt;result column=&quot;mobile&quot; property=&quot;mobile&quot;/&gt;
        &lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;
        &lt;result column=&quot;position&quot; property=&quot;position&quot;/&gt;
        &lt;result column=&quot;note&quot; property=&quot;note&quot;/&gt;
        &lt;association property=&quot;workCard&quot; column=&quot;id&quot;
                     select=&quot;com.ssm.learn.chapter5.mapper.WorkCardMapper.getWorkCardByEmpId&quot;/&gt;
        &lt;collection property=&quot;employeeTaskList&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId&quot;/&gt;
        &lt;discriminator javaType=&quot;long&quot; column=&quot;sex&quot;&gt;
            &lt;case value=&quot;1&quot; resultMap=&quot;MaleHealthFormMapper&quot;/&gt;
            &lt;case value=&quot;2&quot; resultMap=&quot;FemaleHealthFormMapper&quot;/&gt;
        &lt;/discriminator&gt;
    &lt;/resultMap&gt;

    &lt;resultMap id=&quot;FemaleEmployeeMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.FemaleEmployee&quot; extends=&quot;employee&quot;&gt;
        &lt;association property=&quot;femaleHealthForm&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper.getFemaleHealthForm&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;resultMap id=&quot;MaleEmployeeMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.MaleEmployee&quot; extends=&quot;employee&quot;&gt;
        &lt;association property=&quot;maleHealthForm&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.MaleHealthFormMapper.getMaleHealthForm&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;select id=&quot;getEmployee&quot; parameterType=&quot;long&quot; resultMap=&quot;employee&quot;&gt;
        select id, real_name as realName, sex, birthday, mobile, email, position, note, from t_employee
        where id = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>association元素，对工牌进行一对一级联。</li><li>collection元素，一对多级联，其select元素指向SQL，将通过column制定的SQL字段作为参数进行传递，然后将结果返回给雇员POJO的属性employeeTaskList。</li><li>discriminator元素，鉴别器，它的属性column代表使用哪个字段进行鉴别，这里是sex，而它的子元素case，则用于进行区分。而resultMap属性表示采用哪个ResultMap去映射，比如sex为1，则使用maleHealthFormMapper进行映射。</li></ul>
<p>而对于雇员体检表而言，id为employee的resultMap，被maleHealthMapper和femaleHealthMapper通过extends元素继承。</p>
<p>测试级联，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void test9() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);
        Employee employee = employeeMapper.getEmployee(1L);
        logger.info(employee.getBirthday());
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }

}
</code></pre>
<p>运行可以看到所有级联都成功了，但是这会引发性能问题，这叫N+1问题。</p>
<h3 id="h3-5-8-4-n-1-"><a name="5.8.4    N+1问题" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.4    N+1问题</h3><p>比如作为一个雇员的管理者，它只想看到员工信息和员工任务信息，那么体检表和工牌的信息就是多余的。</p>
<p>假设现在有N个关联关系完成了级联，那么只要再加入一个级联关系，就变成了N+1个级联，所有的级联SQL都会被执行，显然会有很多并不是我们关心的数据被取出，这样会造成很大的资源浪费，这就是N+1问题。</p>
<p>为了应对N+1问题，MyBatis提供了延迟加载功能，即在一开始取出雇员信息是，并不需要将工牌表、体检表、任务表的记录取出，而是只将雇员信息和雇员任务表的信息取出。当我们通过雇员POJO访问工牌表时，体检表和任务表的记录才通过对应的SQL取出。</p>
<h3 id="h3-5-8-5-"><a name="5.8.5    延迟加载" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.5    延迟加载</h3><p>MyBatis提供延迟加载，我们希望一次性把常用的级联数据通过SQL直接查询出来，而对于那些不常用的级联数据不要取出，而是等待要用时才取出，这些不常用的级联数据可以采用延迟加载的功能。</p>
<p>在MyBatis的settings配置中存在两个元素可以配置级联，如下所示：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>作用</th>
<th>配置选项说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>aggressiveLazyLoading</td>
<td>当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>修改MyBatis配置文件，增加如下代码：</p>
<pre><code class="lang-xml">&lt;settings&gt;
    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;
    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;
&lt;/settings&gt;
</code></pre>
<p>选项lazyLoadingEnabled决定是否开启延迟加载，而选项aggressiveLazyLoading决定是否采用层级加载，但是它们都是全局性配置，不能解决我们的需求。在MyBatis中使用fetchType属性，它可以处理全局定义无法处理的问题，进行自定义。fetchType出现在级联元素（association、collection，注意，discrimination没有这个属性）中，它由两个值可选：</p>
<ul>
<li>eager，获得当前POJO后立即加载对应的数据。</li><li>lazy，获得当前POJO后延迟加载对应的数据。</li></ul>
<p>在保证lazyLoadingEnabled=true和aggressiveLazyLoading=false的前提下，对雇员的映射文件关于雇员属性、雇员任务进行如下修改：</p>
<pre><code class="lang-xml">&lt;collection property=&quot;employeeTaskList&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId&quot; fetchType=&quot;eager&quot;/&gt;
</code></pre>
<p>然后进行调试，这个时候已经按照我们的要求加载了数据，先加载雇员信息，然后加载雇员任务信息。fetchType属性会忽略全局配置项lazyLoadingEnabled和aggressiveLazyLoading。</p>
<h3 id="h3-5-8-6-"><a name="5.8.6    多对多级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.6    多对多级联</h3><p>现实中有许多用户，用户由归属于一些角色，这样一个用户可以对应多个角色，而一个角色又可以由多个用户担当。这就是多对多关联关系。但更多的都是拆分为两个一对多的关系，也就是一个角色对应多个用户和一个用户对应多个角色，这样就可以设计用户和角色的POJO了，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.learn.chapter5.pojo2;

import java.util.List;

public class Role2 {
   private Long id;
   private String roleName;
   private String note;
   // 关联用户信息，一对多关联
   private List&lt;User2&gt; userList;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">package com.ssm.learn.chapter5.pojo2;

import java.util.List;

import com.ssm.learn.chapter5.enumeration.SexEnum;

public class User2 {
   private Long id;
   private String userName;
   private String realName;
   private SexEnum sex;
   private String moble;
   private String email;
   private String note;
   // 对角色一对多关联
   private List&lt;Role2&gt; roleList;

    /*getter and setter*/
}
</code></pre>
<p>配置映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper2.RoleMapper2&quot;&gt;
   &lt;resultMap type=&quot;com.ssm.learn.chapter5.pojo2.Role2&quot; id=&quot;roleMapper&quot;&gt;
      &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;
      &lt;result column=&quot;role_name&quot; property=&quot;roleName&quot; /&gt;
      &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;
      &lt;collection property=&quot;userList&quot; column=&quot;id&quot; fetchType=&quot;lazy&quot;
         select=&quot;com.ssm.learn.chapter5.mapper2.UserMapper2.findUserByRoleId&quot; /&gt;
   &lt;/resultMap&gt;

   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMapper&quot;&gt;
      select id, role_name, note from t_role where id = #{id}
   &lt;/select&gt;

   &lt;select id=&quot;findRoleByUserId&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMapper&quot;&gt;
      select r.id, r.role_name, r.note from t_role r, t_user_role ur
      where r.id = ur.role_id and ur.user_id = #{userId}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper2.UserMapper2&quot;&gt;
   &lt;resultMap type=&quot;com.ssm.learn.chapter5.pojo2.User2&quot; id=&quot;userMapper&quot;&gt;
      &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;
      &lt;result column=&quot;user_name&quot; property=&quot;userName&quot; /&gt;
      &lt;result column=&quot;real_name&quot; property=&quot;realName&quot; /&gt;
      &lt;result column=&quot;sex&quot; property=&quot;sex&quot;
         typeHandler=&quot;com.ssm.learn.chapter5.typeHandler.SexTypeHandler&quot; /&gt;
      &lt;result column=&quot;mobile&quot; property=&quot;moble&quot; /&gt;
      &lt;result column=&quot;email&quot; property=&quot;email&quot; /&gt;
      &lt;result column=&quot;position&quot; property=&quot;position&quot; /&gt;
      &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;
      &lt;collection property=&quot;roleList&quot; column=&quot;id&quot; fetchType=&quot;lazy&quot;
         select=&quot;com.ssm.learn.chapter5.mapper2.RoleMapper2.findRoleByUserId&quot; /&gt;
   &lt;/resultMap&gt;
   &lt;select id=&quot;getUser&quot; parameterType=&quot;long&quot; resultMap=&quot;userMapper&quot;&gt;
      select id, user_name, real_name, sex, moble, email, note from t_user where
      id =#{id}
   &lt;/select&gt;
   &lt;select id=&quot;findUserByRoleId&quot; parameterType=&quot;long&quot; resultMap=&quot;userMapper&quot;&gt;
      select u.id, u.user_name, u.real_name, u.sex, u.moble, u.email, u.note
      from
      t_user u , t_user_role ur where u.id = ur.user_id and ur.role_id =#{roleId}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>这里都使用了collection去关联，但是把fetchType都设置为lazy，启用延时加载。</p>
<p>测试代码如下：</p>
<pre><code class="lang-java">@Test
public void test10(){
    SqlSession sqlSession=null;
    try{
        sqlSession=SqlSessionFactoryUtils.openSqlSession();
        RoleMapper2 roleMapper2 = sqlSession.getMapper(RoleMapper2.class);
        Role2 role = roleMapper2.getRole(1L);
        role.getUserList();
        UserMapper2 userMapper2 = sqlSession.getMapper(UserMapper2.class);
        User2 user = userMapper2.getUser(1L);
    }catch (Exception e){
        e.printStackTrace();
    }finally {
        if(sqlSession!=null){
            sqlSession.close();
        }
    }
}
</code></pre>
<p>运行程序可以看到执行了3条SQL，因为调用getUserList所以才有了第二条SQL。</p>
<h2 id="h2-5-9-"><a name="5.9    缓存" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.9    缓存</h2><p>在MyBatis中允许使用缓存，把那些常用且命中率高的数据缓存起来，能够有效提高系统性能。</p>
<p>MyBatis分为一级缓存和二级缓存，同时可以配置关于缓存的设置。</p>
<h3 id="h3-5-9-1-"><a name="5.9.1    一级缓存和二级缓存" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.9.1    一级缓存和二级缓存</h3><p>一级缓存是在SqlSession上的缓存，默认自动开启。二级缓存是在SqlSessionFactory上的缓存。</p>
<p>没有任何配置的环境测试一级缓存，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        logger.info(&quot;再获取一次POJO......&quot;);
        Role role2 = roleMapper.getRole(1L);
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }
}
</code></pre>
<p>运行代码，得到如下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 16:42:22,848 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:42:22,883 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 16:42:22,899 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 16:42:22,899 com.ssm.learn.chapter5.test.MyTest: 再获取一次POJO......
DEBUG 2020-02-25 16:42:22,900 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@63440df3]
</code></pre>
<p>可以看到虽然对同一个对象进行了两次获取，但是实际上只有一条SQL被执行，其原因是代码使用了同一个SqlSession对象获取数据。当一个SqlSession第一次通过SQL和参数获取对象后就会将它缓存起来，如果下次的SQL和参数没有发生变化，并且缓存没有超时或者声明需要刷新时，它就会从缓存中获取数据，而不是通过SQL获取了。修改代码，如下所示：</p>
<pre><code class="lang-java">@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    SqlSession sqlSession2 = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        sqlSession2 = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
        sqlSession.commit();
        logger.info(&quot;不同sqlSession再获取一次POJO......&quot;);
        RoleMapper roleMapper2 = sqlSession2.getMapper(RoleMapper.class);
        Role role2 = roleMapper2.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
        if (sqlSession2 != null) {
            sqlSession2.close();
        }
    }
}
</code></pre>
<p>运行代码，得到以下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 16:55:56,004 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:55:56,039 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 16:55:56,056 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 16:55:56,057 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 16:55:56,057 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Opening JDBC Connection
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.datasource.pooled.PooledDataSource: Created connection 1956710488.
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@74a10858]
DEBUG 2020-02-25 16:55:56,063 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?;
</code></pre>
<p>可以看到SQL被执行了两次，这说明一级缓存是在SqlSession层面的，对于不同的SqlSession对象是不能共享的。为了是SqlSession对象之间共享相同的缓存，有时候需要开启二级缓存，只需要在映射文件上加入代码：</p>
<pre><code class="lang-xml">&lt;cache/&gt;
</code></pre>
<p>这个时候MyBatis会序列化和反序列化对应的POJO，也就要求POJO是一个可序列化的对象，那么它就必须实现Serializable接口。代码如下所示：</p>
<pre><code class="lang-java">public class Role implements Serializable {
    ...
}
</code></pre>
<p>再次运行代码，得到以下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 17:02:39,248 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 17:02:39,281 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 17:02:39,297 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 17:02:39,309 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.cache.decorators.LoggingCache: Cache Hit Ratio [com.ssm.learn.chapter5.mapper.RoleMapper]: 0.5
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@462d5aee]
</code></pre>
<p>可以看到不同的SqlSession在获取同一条记录，只发送了一条SQL。因为这个时候MyBatis将其保存在SqlSessionFactory层面。</p>
, textContent=# 第5章	映射器

映射器是MyBatis最复杂且最重要的组件。它由一个接口和XML文件（或者注解组成）。在映射器中，可以配置参数、各类的SQL语句、存储过程、缓存、级联等复杂的内容，并且通过简易的映射规则映射到指定的POJO或者其他对象上，映射器能有效屏蔽JDBC底层的代码。

映射器可以使用注解完成，但在企业应用不广，推荐使用XML方式，是因为：

- 面对复杂性，SQL会显得无力，尤其是长句SQL；
- 注解的可读性较差；
- 注解丢失了XML上下文引用的功能

## 5.1    概述

映射器的常用配置元素如下表所示：

| 元素名称         | 描述                                                         | 备注                                            |
| ---------------- | ------------------------------------------------------------ | ----------------------------------------------- |
| select           | 查询语句，最常用、最复杂的元素之一                           | 可以自定义参数，返回结果集等                    |
| insert           | 插入语句                                                     | 执行后返回一个参数，代表插入的条数              |
| update           | 更新语句                                                     | 执行后返回一个参数，代表更新的条数              |
| delete           | 删除语句                                                     | 执行后返回一个参数，代表删除的条数              |
| ~~parameterMap~~ | 定义参数映射关系                                             | 即将被删除，不建议使用                          |
| sql              | 允许定义一部分SQL，然后在各个地方引用它                      | 例如，定义一张表的列名，可以在多个SQL语句中使用 |
| resultMap        | 用来描述从数据库结果集中来加载对象，它是最复杂、最强大的元素 | 提供映射规则                                    |
| cache            | 给定名称空间的缓存配置                                       | ---                                             |
| cache-ref        | 其他命名空间缓存配置的引用                                   | ---                                             |

## 5.2	引入映射器的方法

### 5.2.1	用文件路径引入映射器

```xml
<mappers>
    <mapper resource="demo/mapper/demoMapper.xml"/>
</mappers>
```

其中，resource属性值为映射器的xml文件的资源路径

### 5.2.2	用包名引入映射器

```xml
<mappers>
    <package name="demo.mapper"/>
</mappers>
```

其中，name属性值为映射器的接口所在包的全限定名

### 5.2.3	用类注册引入映射器

```xml
<mappers>
    <mapper class="demo.mapper.DemoMapper1"/>
     <mapper class="demo.mapper.DemoMapper2"/>
</mappers>
```

其中，class属性值为映射器的接口的全限定名

## 5.3	select元素——查询语句

select元素的常用配置如下表所示：

| 元素             | 说明                                                         | 备注                                                       |
| ---------------- | ------------------------------------------------------------ | ---------------------------------------------------------- |
| id               | 它和Mapper的命名空间组合起来是唯一的，供MyBatis调用          | 如果命名空间和id结合起来不唯一，MyBatis会抛出异常          |
| parameterType    | 可以给出类的全限定名，也可以是别名，但是别名必须是MyBatis内部定义或者自定义的 | 可以选择JavaBean、Map等简单的参数类型传递给SQL             |
| ~~parameterMap~~ | 即将废弃的元素，不建议使用                                   | ---                                                        |
| resultType       | 定义类的全路径，在允许自动匹配的情况下，结果集将通过JavaBean的规则映射；或定义为in、double、float、map等参数；也可以使用别名，但是要符合别名规范，且不能和resultMap同时使用 | 常用的参数之一，比如统计总条数时可以把它的值设置为int      |
| resultMap        | 它是映射集的引用，将执行强大的映射功能。我们可以使用resultType和resultMap其中的一个，resultMap能提供自定义映射规则的机会 | MyBatis最复杂的元素，可以配置映射规则、级联、typeHandler等 |

另外，如果还要设置缓存，还会使用到FlushCache、useCache，这里不展开讲。

### 5.3.1	简单的select元素的应用

先学习一个最简单的例子：统计用户表同一个姓氏的用户数量，代码如下所示：

```xml
<select id="countByFirstName" parameterType="string" resultType="int">
    select count(*) total from t_user where user_name like concat(#{firstName},'%')
</select>
```

其中的元素含义：

- id：SQL语句的唯一标识
- parameterType：SQL语句接收的参数类型，可以是类的别名也可以是类的全限定名
- resultType：SQL语句返回的结果类型，可以是类的别名也可以是类的全限定名

接着还需要定义一个接口方法，代码如下所示：

```java
public interface UserMapper {
    int countByFirstName(String firstName);
}
```

### 5.3.2	自动映射和驼峰规则

MyBatis提供自动映射功能，在默认情况下是开启的。

在settings元素中有两个可配置选项autoMappingBehavior和mapUnderscoreToCamelCase，它们是控制自动映射和驼峰映射的开关。一般而言，自动映射使用的多一些，而驼峰映射要求比较苛刻，应用不广。

autoMappingBehavior的取值有：

- NONE，不进行自动映射
- PARTIAL，默认值，只对没有嵌套结果集进行自动映射
- FULL，对所有的结果集进行自动映射，包括嵌套结果集

在默认情况下使用默认值即可。规则如下所示：

```java
public class Role {
    private Long id;
    private String roleName;
    private String note;
    /*getter and setter*/
}
```

```xml
<select id="getRole" parameterType="long" resultType="role">
    select id,role_name as roleName,note from t_role where id = #{id};
</select>
```

如果编写的SQL列名和POJO的属性名一致，那么就会形成自动映射。原来的列名role_name被别名roleName替代，所以也会对应起来。

### 5.3.3	传递多个参数

####5.3.3.1	使用map接口传递多个参数

假设要通过角色名称（role_name）和备注（note）两个参数对角色进行模糊查询，则可以使用map接口。

把接口方法定义为：	

```java
List<Role> findRolesByMap(Map<String,Object> parameterMap);
```

使用它在SQL中设置对应的参数，代码如下所示：

```xml
<select id="findRolesByMap" parameterType="map" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

测试如下：

```java
@Test
public void test2() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Map<String, Object> parameterMap = new HashMap<>();
    parameterMap.put("roleName", "1");
    parameterMap.put("note", "1");
    List<Role> roles = roleMapper.findRolesByMap(parameterMap);
    logger.info(roles);
    sqlSession.close();
}
```

由于使用map不能限定其传递的数据类型，所以业务性质不强，可读性差，因此不推荐使用。

#### 5.3.3.2	使用注解传递多个参数

MyBatis提供了@Param注解，它可以定义映射器的参数名称，使用它可读性更好。把接口方法定义为：

```java
List<Role> findRolesByAnnotation(@Param("roleName") String roleName,
                                 @Param("note") String note);
```

修改映射文件，代码如下所示：

```java
<select id="findRolesByAnnotation" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

注意，此时不用给出parameterType属性，MyBatis会自动探索。
测试如下所示：

```java
@Test
public void test3() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    List<Role> roles = roleMapper.findRolesByAnnotation("1","1");
    logger.info(roles);
    sqlSession.close();
}
```

改写后可读性大大提高，但是如果SQL很复杂，参数很多，那么接口方法的参数个数也会很多，这样使用很不方便。所以，MyBatis还提供了传递JavaBean的形式。

#### 5.3.3.3	通过JavaBean传递多个参数

首先定义一个参数的POJO——RoleParams，代码如下所示：

```java
public class RoleParams {
    private String roleName;
    private String note;
    
    public RoleParams(){}
    /*getter and setter*/
}
```

此时把接口方法定义为：

```java
List<Role> findRolesByBean(RoleParams roleParams);
```

修改映射文件，代码如下所示：

```xml
<select id="findRolesByBean" parameterType="com.ssm.learn.chapter5.pojo.RoleParams" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

注意此时的parameterType属性值修改为RoleParams的全限定名或者别名。

测试如下所示：

```java
@Test
public void test5() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RoleParams roleParams = new RoleParams();
    roleParams.setRoleName("1");
    roleParams.setNote("1");
    List<Role> roles = roleMapper.findRolesByBean(roleParams);
    logger.info(roles);
    sqlSession.close();
}
```

#### 5.3.3.4	混合使用

在某种情况下可能需要混合使用几种方式来传递参数。比如通过角色名称和备注查询一个角色，与此同时还支持分页，分页的POJO——PageParams如下所示：

```java
public class PageParams {
    private int start;
    private int limit;
    
    public PageParams(){}
    /*getter and setter*/
}
```

此时接口方法定义为：

```java
List<Role> findByMix(@Param("params")RoleParams roleParams, 
                     @Param("page")PageParams pageParams);
```

修改映射文件，代码如下所示：

```xml
<select id="findByMix" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{params.roleName},'%')
    and note like concat('%',#{params.note},'%')
    limit #{page.start},#{page.limit}
</select>
```

可以看到MyBatis对RoleParams、PageParams这类的JavaBean提供EL（中间）支持

#### 5.3.3.5	总结

对4种传递参数的方法进行评价：

- 使用map传递参数丧失了业务可读性，实际应用应该果断废弃；
- 使用@Param注解适用于参数较少的情况，一般不超过5个；
- 当参数多于5个时，建议使用JavaBean方式；
- 对于使用混合参数的，要明确参数合理性

### 5.3.4    使用resultMap映射结果集

为了支持复杂的映射，select元素提供了resultMap属性。先定义resultMap属性，代码如下所示：

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper">
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>
    <select id="getRoleUseResultMap" parameterType="long" resultMap="roleMap">
         select id,role_name as roleName,note from t_role where id = #{id};
    </select>
</mapper>
```

- resultMap的属性id是它的标识，type代表使用哪个类作为其映射的类，可以是别名或者全限定名；
- 它的子元素id代表resultMap的主键，而result代表其属性，id和result元素的属性property代表POJO的属性名称，而column代表SQL的列名。把POJO的属性和SQL的列名做对应。
- 在select中resultMap属性表明使用哪个resultMap作为映射规则

####5.3.5    分页参数RowBounds

MyBatis不仅支持分页，而且还提供了专门处理分页的类——RowBounds。使用它很简单，只要给接口增加一个RowBounds参数即可。

```java
 List<Role> findByRowBounds(@Param("roleName") String roleName,
                            @Param("note") String note,
                            RowBounds rowBounds);
```

修改映射文件，代码如下所示：

```xml
<select id="findByRowBounds" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

代码中没有关于RowBounds的参数信息，它是MyBatis的一个附加参数，MyBatis会自动识别并完成分页。

测试如下所示：

```java
@Test
public void test7() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RowBounds rowBounds = new RowBounds(0, 20);
    List<Role> roles = roleMapper.findByRowBounds("1", "1", rowBounds);
    logger.info(roles);
    sqlSession.close();
}
```

RowBounds接收两个参数，第一个是偏移量offset，第二个参数是限制条数limit，这里表示从1条开始限定返回至多20条记录的结果。RowBounds只适合查询少量数据的场景，查询大量数据可以使用分页插件。

## 5.4	insert元素——插入语句

insert元素的常用配置如下表所示：

| 属性             | 描述                                                         | 备注                                              |
| ---------------- | ------------------------------------------------------------ | ------------------------------------------------- |
| id               | SQL编号，用于表示这条SQL语句                                 | 命名空间+id+databaseId唯一，否则MyBatis会抛出异常 |
| parameterType    | 参数类型，同select元素                                       | 和select元素一样，可以是单个参数或者多个参数      |
| useGeneratedKeys | 是否启用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键。（比如MySQL和SQL Server这样的数据库表的自增主键） | 默认值为false                                     |
| keyProperty      | （仅对insert和update有用）唯一标记一个属性，MyBatis会通过getGeneratedKeys的返回值，或者通过insert语句的selectKey子元素设置它的键值。如果是复合主键，要把每一个名称用逗号隔开 | 默认值为unset。不能和KeyColumn连用                |
| keyColumn        | （仅对insert和update有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像PostgreSQL）中是必须的，当主键列不是表中的第一列时需要设置。如果是复合主键，要把每一个名称用逗号隔开 | 不能和KeyProperty连用                             |

执行一条insert语句后，会返回一个整数表示其影响记录数。

### 5.4.2	简单的insert语句的应用

写一条SQL插入角色，这是一条最简单的插入语句，代码如下所示：

```xml
<insert id="insertRole" parameterType="role">
    insert into t_role(role_name,note)  values (#{roleName},#{note});
</insert>
```

- id表示这条SQL；
- parameterType代表传入参数类型；
- 没有配置的属性采用默认值

### 5.4.3    主键回填

上面的代码并没有插入id列，因为MySQL中的表采用了自增主键，但有时候还需要这个主键来关联其它业务。

insert标签中有这样一个属性useGeneratedKeys来获取主键，打开这个开关后，还要配置其属性keyProperty或keyColumn，告诉系统把生成的主键放入哪个属性，如果存在多个主键，就用逗号隔开。

修改映射文件，让程序返回主键，代码如下所示：

```xml
<insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
    insert into t_role(role_name,note)  values (#{roleName},#{note});
</insert>
```

这样就会把数据库生成的主键回填至keyProperty指定的POJO属性，这里是id。

测试主键回填的结果，代码如下所示：

```java
@Test
public void test8() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Role role = new Role();
    role.setRoleName("二郎神");
    role.setNote("杨戬");
    logger.info(role);
    roleMapper.insertRole(role);
    logger.info(role);
    sqlSession.close();
}
```

运行可看到，在执行insertRole方法前roleid值为null，而执行后值不为null。

### 5.4.4	自定义主键

有时候主键可能依赖于某些规则，比如取消角色表的id递增规则，修改为：

- 当角色表记录为空时，id设置为1
- 当角色表记录不为空时，id设置为当前id加3

MyBatis可用selectKey元素实现自定义键值的生成规则。代码如下所示：

```xml
<<insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
	<selectKey keyProperty="id" resultType="long" order="BEFORE">
    	select if (max(id) = null,1,max(id)+3) from t_role
	</selectKey>
	insert into t_role(id,role_name,note)  values (#{id},#{roleName},#{note});
</insert>
```

以上代码定义了selectKey元素，它的keyProperty指定了id属性作为POJO的主键，resultType指定了返回long型的结果集，而order属性为BEFORE表示它将于当前定义的SQL前执行。

## 5.5	update元素和delete元素

update元素和delete元素比较简单，和insert元素差不多，执行后也会返回一个整数，用来标识该SQL语句影响了数据库的记录行数。更新和删除角色表记录，代码如下所示：

```xml
<update id="updateRole" parameterType="role">
    update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
</update>
```

```xml
<delete id="deleteRole" parameterType="long">
    delete from t_role where id = #{id};
</delete>
```

## 5.6	sql元素

sql元素的作用在于可以定义一条SQL的一部分，方便后面的SQL引用它，比如最典型的列名，通常情况下要在select、insert语句中反复编写，特别字段多的表。这时候可以使用sql元素，代码如下所示：

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>

    <sql id="roleCols">
        id,role_name,note
    </sql>

    <select id="getRole" resultType="role">
        select <include refid="roleCols"/> from t_role where id = #{id};
    </select>

    <insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            select if (max(id) = null,1,max(id)+3) from t_role
        </selectKey>
        insert into t_role(<include refid="roleCols"/>)  values (#{id},#{roleName},#{note});
    </insert>
</mapper>
```

可以看到，通过sql元素定义，就可以include元素引入到各条SQL语句中，减少了列名的重复编写。

sql元素还支持变量传递，如下所示：

```xml
<sql id="roleCols">
    ${alias}.id,${alias}.role_name ,${alias}.note
</sql>
<select id="getRole" resultType="role">
    select 
    <include refid="roleCols">
        <property name="alias" value="r"/>
    </include>
    from t_role where id = #{id};
</select>
```

在include元素中定义了一个命名为alias的变量，其值是SQL表t_role的别名r，然后sql元素就可以使用这个变量名了。

## 5.7	resultMap元素

resultMap的作用主要是定义映射规则，也就是SQL到JavaBean的映射关系。

### 5.7.1	使用POJO存储结果集

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper">
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>
</mapper>  
```

resultMap元素的属性id代表这个resultMap的标识，type代表需要映射的POJO，这里可以使用别名或者全限定名。在映射关系中，id表示对象的主键，property表示POJO的属性名称，column表示数据库列名。于是POJO就和数据库SQL的结果一一对应起来了。配置完成即可使用resultMap，如下所示：

```xml
<select id="getRoleUseResultMap" parameterType="long" resultMap="roleMap">
     select id,role_name as roleName,note from t_role where id = #{id};
</select>
```

## 5.8	级联

级联是一个数据库实体的概念。比如角色就需要存在用户与之对应，这样就有角色用户表，一个角色可能有多个用户，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。在MyBatis中还有一种被称为鉴别器的级联，它是一种可以选择具体实现类的级联，比如要查找雇员及其体检表的信息，但是雇员有性别之分，而根据性别的不同，其体检表的项目也会不一样，比如男性体检表可能有前列腺的项目，而女子体检表可能有子宫的项目，那么体检表应该分为男性和女性，从而根据雇员性别区关联。

级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统的复杂度，同时降低系统性能，一般最好不超过3层。

### 5.8.1	MyBatis中的级联

MyBatis中的级联分为3种。

- 鉴别器（discriminator）：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。
- 一对一（association）：比如学生证和学生就是一种一对一的级联。
- 一对多（collection）：比如班级和学生就是一种一对多的级联。

值得注意的是，MyBatis没有多对多级联，因为多对多级联比较复杂，使用困难，而且可以通过两个一对多进行替换，所有MyBatis不支持。

为了更好地阐述级联，先给出一个雇员级联模型。

- 该模型以雇员表为中心
- 雇员表和工牌表是一对一级联关系
- 雇员表和员工任务表是一对多级联关系
- 员工任务表和任务表是一对一级联关系
- 每个雇员都会有一个体检表，随着雇员字段性别取值不同，会有不同的关联表

mysql脚本略

 ### 5.8.2    建立POJO

男性体检表和女性体检表继承于体检表，因此可以得出3个体检表，代码如下所示：

```java
public class HealthForm {
   
   private Long id;
   private Long empId;
   private String heart;
   private String liver;
   private String spleen;
   private String lung;
   private String kidney;
   private String note;
    
    /*getter and setter*/
}
```

```java
public class MaleHealthForm extends HealthForm {
   
   private String prostate;
	
    /*getter and setter*/
}
```

```java
public class FemaleHealthForm extends HealthForm {

   private String uterus;
	
    /*getter and setter*/
}
```

显然这个关联关系是通过MyBatis的鉴别器去完成。

接下来设计员工表、工牌表和任务表的POJO，它们是以员工表为核心的，先完成工牌表和任务表的POJO，代码如下所示：

```java
public class WorkCard {
   private Long id;
   private Long empId;
   private String realName;
   private String department;
   private String mobile;
   private String position;
   private String note;
    
   /*getter and setter*/
}
```

```java
public class Task {
   private Long id;
   private String title;
   private String context;
   private String note;
   
   /*getter and setter*/
}
```

雇员任务表是通过任务编号(task_id)和任务进行一对一管理，这里只考虑其自身和任务编号的关联，而雇员对它的关联则由雇员去维护，这样就可得到雇员任务POJO，代码如下所示：

```java
public class EmployeeTask {
   private Long id;
   private Long empId;
    //任务按一对一级联
   private Task task = null;
   private String taskName;
   private String note;
   
   /*getter and setter*/
}
```

属性task是一个Task类对象，由它进行关联任务信息。

男雇员和女雇员继承于雇员，这就是一个鉴别器，通过雇员类的属性性别来决定使用哪个具体的子类初始化对象。它与工牌表是一对一关联关系，对于雇员任务表是一对多关联关系，由此可以得出3个类，代码如下所示：

```java
public class Employee {

   private Long id;
   private String realName;
   private SexEnum sex = null;
   private Date birthday;
   private String mobile;
   private String email;
   private String position;
   private String note;
    //工牌按一对一级联
   private WorkCard workCard;
   //雇员任务按一对多级联
   private List<EmployeeTask> employeeTaskList = null;
   
    /*getter and setter*/
}
```

```java
public class MaleEmployee extends Employee {

   private MaleHealthForm maleHealthForm = null;
    
   /*getter and setter*/
}
```

```java
public class FemaleEmployee extends Employee {

   private FemaleHealthForm femaleHealthForm = null;

   /*getter and setter*/
}
```

### 5.8.3	配置映射文件

配置TaskMapper.xml和WorkCardMapper.xml，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.TaskMapper">
    <select id="getTask" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.Task">
        select id,title,context,note from t_task where id =#{id}
    </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.WorkCardMapper">
    <select id="getWorkCardByEmpId" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.WorkCard">
        select id, emp_id as empId, real_name as realName, department, mobile, position, note FROM t_work_card
        where emp_id = #{empId}
    </select>
</mapper>
```

雇员任务表通过任务编号（task_id）和任务表示关联，这是一个一对一的级联关系，使用association元素，雇员任务表一对一级联如代码所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper">
    <resultMap id="EmployeeTaskMap" type="com.ssm.learn.chapter5.pojo.EmployeeTask">
        <id property="id" column="id"/>
        <result property="empId" column="emp_id"/>
        <result property="taskName" column="task_name"/>
        <result property="note" column="note"/>
        
        <association property="task" column="task_id" select="com.ssm.learn.chapter5.mapper.TaskMapper.getTask"/>
        
    </resultMap>

    <select id="getEmployeeTaskByEmpId" resultMap="EmployeeTaskMap">
        select id, emp_id, task_id, note from t_employee_task where emp_id = #{empId}
    </select>

</mapper>
```

注意，association元素代表一对一级联的开始。property属性代表映射到POJO属性上。select配置是命名空间+SQL id的形式，这样便可以指向对应Mapper的SQL，MyBatis就会通过对应的SQL将数据查询回来。column代表SQL的列，用作参数传递给select属性制定的SQL，如果是多个参数则用逗号隔开。

体检表能拆分为男性雇员和女性雇员，所以就有两个简单的映射器，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.MaleHealthFormMapper">
   <select id="getMaleHealthForm" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.MaleHealthForm">
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_male_health_form
       where emp_id = #{id}
   </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper">
   <select id="getFemaleHealthForm" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.FemaleHealthForm">
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_female_health_form
       where emp_id = #{id}
   </select>
</mapper>
```

创建雇员的映射关系，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.EmployeeMapper">
    <resultMap id="employee" type="com.ssm.learn.chapter5.pojo.Employee">
        <id property="id" column="id"/>
        <result column="real_name" property="realName"/>
        <result column="sex" property="sex" typeHandler="com.ssm.learn.chapter5.typeHandler.SexTypeHandler"/>
        <result column="birthday" property="birthday"/>
        <result column="mobile" property="mobile"/>
        <result column="email" property="email"/>
        <result column="position" property="position"/>
        <result column="note" property="note"/>
        <association property="workCard" column="id"
                     select="com.ssm.learn.chapter5.mapper.WorkCardMapper.getWorkCardByEmpId"/>
        <collection property="employeeTaskList" column="id" select="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId"/>
        <discriminator javaType="long" column="sex">
            <case value="1" resultMap="MaleHealthFormMapper"/>
            <case value="2" resultMap="FemaleHealthFormMapper"/>
        </discriminator>
    </resultMap>

    <resultMap id="FemaleEmployeeMap" type="com.ssm.learn.chapter5.pojo.FemaleEmployee" extends="employee">
        <association property="femaleHealthForm" column="id" select="com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper.getFemaleHealthForm"/>
    </resultMap>

    <resultMap id="MaleEmployeeMap" type="com.ssm.learn.chapter5.pojo.MaleEmployee" extends="employee">
        <association property="maleHealthForm" column="id" select="com.ssm.learn.chapter5.mapper.MaleHealthFormMapper.getMaleHealthForm"/>
    </resultMap>

    <select id="getEmployee" parameterType="long" resultMap="employee">
        select id, real_name as realName, sex, birthday, mobile, email, position, note, from t_employee
        where id = #{id}
    </select>
</mapper>
```

- association元素，对工牌进行一对一级联。
- collection元素，一对多级联，其select元素指向SQL，将通过column制定的SQL字段作为参数进行传递，然后将结果返回给雇员POJO的属性employeeTaskList。
- discriminator元素，鉴别器，它的属性column代表使用哪个字段进行鉴别，这里是sex，而它的子元素case，则用于进行区分。而resultMap属性表示采用哪个ResultMap去映射，比如sex为1，则使用maleHealthFormMapper进行映射。

而对于雇员体检表而言，id为employee的resultMap，被maleHealthMapper和femaleHealthMapper通过extends元素继承。

测试级联，代码如下所示：

```java
@Test
public void test9() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);
        Employee employee = employeeMapper.getEmployee(1L);
        logger.info(employee.getBirthday());
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }

}
```

运行可以看到所有级联都成功了，但是这会引发性能问题，这叫N+1问题。

### 5.8.4	N+1问题

比如作为一个雇员的管理者，它只想看到员工信息和员工任务信息，那么体检表和工牌的信息就是多余的。

假设现在有N个关联关系完成了级联，那么只要再加入一个级联关系，就变成了N+1个级联，所有的级联SQL都会被执行，显然会有很多并不是我们关心的数据被取出，这样会造成很大的资源浪费，这就是N+1问题。

为了应对N+1问题，MyBatis提供了延迟加载功能，即在一开始取出雇员信息是，并不需要将工牌表、体检表、任务表的记录取出，而是只将雇员信息和雇员任务表的信息取出。当我们通过雇员POJO访问工牌表时，体检表和任务表的记录才通过对应的SQL取出。

### 5.8.5	延迟加载

MyBatis提供延迟加载，我们希望一次性把常用的级联数据通过SQL直接查询出来，而对于那些不常用的级联数据不要取出，而是等待要用时才取出，这些不常用的级联数据可以采用延迟加载的功能。

在MyBatis的settings配置中存在两个元素可以配置级联，如下所示：

| 配置项                | 作用                                                         | 配置选项说明 | 默认值 |
| --------------------- | ------------------------------------------------------------ | ------------ | ------ |
| lazyLoadingEnabled    | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态 | true\|false  | false  |
| aggressiveLazyLoading | 当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载 | true\|false  | false  |

修改MyBatis配置文件，增加如下代码：

```xml
<settings>
    <setting name="lazyLoadingEnabled" value="true"/>
    <setting name="aggressiveLazyLoading" value="true"/>
</settings>
```

选项lazyLoadingEnabled决定是否开启延迟加载，而选项aggressiveLazyLoading决定是否采用层级加载，但是它们都是全局性配置，不能解决我们的需求。在MyBatis中使用fetchType属性，它可以处理全局定义无法处理的问题，进行自定义。fetchType出现在级联元素（association、collection，注意，discrimination没有这个属性）中，它由两个值可选：

- eager，获得当前POJO后立即加载对应的数据。
- lazy，获得当前POJO后延迟加载对应的数据。

在保证lazyLoadingEnabled=true和aggressiveLazyLoading=false的前提下，对雇员的映射文件关于雇员属性、雇员任务进行如下修改：

```xml
<collection property="employeeTaskList" column="id" select="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId" fetchType="eager"/>
```

然后进行调试，这个时候已经按照我们的要求加载了数据，先加载雇员信息，然后加载雇员任务信息。fetchType属性会忽略全局配置项lazyLoadingEnabled和aggressiveLazyLoading。

### 5.8.6	多对多级联

现实中有许多用户，用户由归属于一些角色，这样一个用户可以对应多个角色，而一个角色又可以由多个用户担当。这就是多对多关联关系。但更多的都是拆分为两个一对多的关系，也就是一个角色对应多个用户和一个用户对应多个角色，这样就可以设计用户和角色的POJO了，代码如下所示：

```java
package com.ssm.learn.chapter5.pojo2;

import java.util.List;

public class Role2 {
   private Long id;
   private String roleName;
   private String note;
   // 关联用户信息，一对多关联
   private List<User2> userList;

	/*getter and setter*/
}
```

```java
package com.ssm.learn.chapter5.pojo2;

import java.util.List;

import com.ssm.learn.chapter5.enumeration.SexEnum;

public class User2 {
   private Long id;
   private String userName;
   private String realName;
   private SexEnum sex;
   private String moble;
   private String email;
   private String note;
   // 对角色一对多关联
   private List<Role2> roleList;

	/*getter and setter*/
}
```

配置映射文件，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper2.RoleMapper2">
   <resultMap type="com.ssm.learn.chapter5.pojo2.Role2" id="roleMapper">
      <id column="id" property="id" />
      <result column="role_name" property="roleName" />
      <result column="note" property="note" />
      <collection property="userList" column="id" fetchType="lazy"
         select="com.ssm.learn.chapter5.mapper2.UserMapper2.findUserByRoleId" />
   </resultMap>

   <select id="getRole" parameterType="long" resultMap="roleMapper">
      select id, role_name, note from t_role where id = #{id}
   </select>

   <select id="findRoleByUserId" parameterType="long" resultMap="roleMapper">
      select r.id, r.role_name, r.note from t_role r, t_user_role ur
      where r.id = ur.role_id and ur.user_id = #{userId}
   </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper2.UserMapper2">
   <resultMap type="com.ssm.learn.chapter5.pojo2.User2" id="userMapper">
      <id column="id" property="id" />
      <result column="user_name" property="userName" />
      <result column="real_name" property="realName" />
      <result column="sex" property="sex"
         typeHandler="com.ssm.learn.chapter5.typeHandler.SexTypeHandler" />
      <result column="mobile" property="moble" />
      <result column="email" property="email" />
      <result column="position" property="position" />
      <result column="note" property="note" />
      <collection property="roleList" column="id" fetchType="lazy"
         select="com.ssm.learn.chapter5.mapper2.RoleMapper2.findRoleByUserId" />
   </resultMap>
   <select id="getUser" parameterType="long" resultMap="userMapper">
      select id, user_name, real_name, sex, moble, email, note from t_user where
      id =#{id}
   </select>
   <select id="findUserByRoleId" parameterType="long" resultMap="userMapper">
      select u.id, u.user_name, u.real_name, u.sex, u.moble, u.email, u.note
      from
      t_user u , t_user_role ur where u.id = ur.user_id and ur.role_id =#{roleId}
   </select>
</mapper>
```

这里都使用了collection去关联，但是把fetchType都设置为lazy，启用延时加载。

测试代码如下：

```java
@Test
public void test10(){
    SqlSession sqlSession=null;
    try{
        sqlSession=SqlSessionFactoryUtils.openSqlSession();
        RoleMapper2 roleMapper2 = sqlSession.getMapper(RoleMapper2.class);
        Role2 role = roleMapper2.getRole(1L);
        role.getUserList();
        UserMapper2 userMapper2 = sqlSession.getMapper(UserMapper2.class);
        User2 user = userMapper2.getUser(1L);
    }catch (Exception e){
        e.printStackTrace();
    }finally {
        if(sqlSession!=null){
            sqlSession.close();
        }
    }
}
```

运行程序可以看到执行了3条SQL，因为调用getUserList所以才有了第二条SQL。

## 5.9	缓存

在MyBatis中允许使用缓存，把那些常用且命中率高的数据缓存起来，能够有效提高系统性能。

MyBatis分为一级缓存和二级缓存，同时可以配置关于缓存的设置。

### 5.9.1	一级缓存和二级缓存

一级缓存是在SqlSession上的缓存，默认自动开启。二级缓存是在SqlSessionFactory上的缓存。

没有任何配置的环境测试一级缓存，代码如下所示：

```java
@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        logger.info("再获取一次POJO......");
        Role role2 = roleMapper.getRole(1L);
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }
}
```

运行代码，得到如下日志：

```markdown
DEBUG 2020-02-25 16:42:22,848 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:42:22,883 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 16:42:22,899 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 16:42:22,899 com.ssm.learn.chapter5.test.MyTest: 再获取一次POJO......
DEBUG 2020-02-25 16:42:22,900 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@63440df3]
```

可以看到虽然对同一个对象进行了两次获取，但是实际上只有一条SQL被执行，其原因是代码使用了同一个SqlSession对象获取数据。当一个SqlSession第一次通过SQL和参数获取对象后就会将它缓存起来，如果下次的SQL和参数没有发生变化，并且缓存没有超时或者声明需要刷新时，它就会从缓存中获取数据，而不是通过SQL获取了。修改代码，如下所示：

```java
@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    SqlSession sqlSession2 = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        sqlSession2 = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
        sqlSession.commit();
        logger.info("不同sqlSession再获取一次POJO......");
        RoleMapper roleMapper2 = sqlSession2.getMapper(RoleMapper.class);
        Role role2 = roleMapper2.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
        if (sqlSession2 != null) {
            sqlSession2.close();
        }
    }
}
```

运行代码，得到以下日志：

```markdown
DEBUG 2020-02-25 16:55:56,004 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:55:56,039 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 16:55:56,056 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 16:55:56,057 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 16:55:56,057 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Opening JDBC Connection
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.datasource.pooled.PooledDataSource: Created connection 1956710488.
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@74a10858]
DEBUG 2020-02-25 16:55:56,063 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
```

可以看到SQL被执行了两次，这说明一级缓存是在SqlSession层面的，对于不同的SqlSession对象是不能共享的。为了是SqlSession对象之间共享相同的缓存，有时候需要开启二级缓存，只需要在映射文件上加入代码：

```xml
<cache/>
```

这个时候MyBatis会序列化和反序列化对应的POJO，也就要求POJO是一个可序列化的对象，那么它就必须实现Serializable接口。代码如下所示：

```java
public class Role implements Serializable {
	...
}
```

再次运行代码，得到以下日志：

```markdown
DEBUG 2020-02-25 17:02:39,248 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 17:02:39,281 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 17:02:39,297 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 17:02:39,309 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.cache.decorators.LoggingCache: Cache Hit Ratio [com.ssm.learn.chapter5.mapper.RoleMapper]: 0.5
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@462d5aee]
```

可以看到不同的SqlSession在获取同一条记录，只发送了一条SQL。因为这个时候MyBatis将其保存在SqlSessionFactory层面。

, cover=http://cdn.alanliang.site/note/oilpainting5.jpg, views=0, likes=0, comments=0, appreciable=false, commentable=true, published=true, top=true, recommend=false, authorId=3, categoryId=1, type=1, createTime=Mon Jun 15 11:08:33 CST 2020, updateTime=Mon Jun 15 11:08:33 CST 2020, sort=5, status=1, category=null, tagList=[Tag(id=12, name=JavaEE, color=null, createTime=null, updateTime=null, articleCount=null), Tag(id=15, name=Mybatis, color=null, createTime=null, updateTime=null, articleCount=null), Tag(id=21, name=Mybatis映射器, color=#D5F5E3, createTime=Mon Jun 15 11:08:33 CST 2020, updateTime=Mon Jun 15 11:08:33 CST 2020, articleCount=null)], author=null) }(String), 0:0:0:0:0:0:0:1(String), 283(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:08:33.464 ERROR 16004 --- [http-nio-8889-exec-11] druid.sql.Statement                      : {conn-10001, pstmt-20002} execute error. INSERT INTO sys_operation_log  ( create_time,
description,

log_type,
method,
params,
request_ip,
time,
username,
browser,
address,
status )  VALUES  ( ?,
?,

?,
?,
?,
?,
?,
?,
?,
?,
? )

com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'params' at row 1
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3971)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.GeneratedMethodAccessor196.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy248.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at sun.reflect.GeneratedMethodAccessor304.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy246.update(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doUpdate(MybatisSimpleExecutor.java:54)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.update(MybatisCachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.GeneratedMethodAccessor312.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy125.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:60)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy128.insert(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor311.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy129.insert(Unknown Source)
	at site.alanliang.geekblog.service.impl.OperationLogServiceImpl.save(OperationLogServiceImpl.java:83)
	at site.alanliang.geekblog.service.impl.OperationLogServiceImpl$$FastClassBySpringCGLIB$$db1dde9b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.service.impl.OperationLogServiceImpl$$EnhancerBySpringCGLIB$$77e3d705.save(<generated>)
	at site.alanliang.geekblog.aspect.OperationLogAspect.logAround(OperationLogAspect.java:62)
	at sun.reflect.GeneratedMethodAccessor334.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.ArticleController$$EnhancerBySpringCGLIB$$4be8ec65.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 11:08:33.526 ERROR 16004 --- [http-nio-8889-exec-11] s.a.g.e.handler.GlobalExceptionHandler   : java.lang.NullPointerException
	at site.alanliang.geekblog.aspect.OperationLogAspect.logAfterThrowing(OperationLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:66)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.ArticleController$$EnhancerBySpringCGLIB$$4be8ec65.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 11:08:33.544  WARN 16004 --- [http-nio-8889-exec-11] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-06-15 11:12:09.111  INFO 9648 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 9648 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 11:12:09.121 DEBUG 9648 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 11:12:09.122  INFO 9648 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 11:12:09.278  INFO 9648 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 11:12:09.278  INFO 9648 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 11:12:10.264  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 11:12:10.266  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 11:12:10.338  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 68ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 11:12:10.343  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 11:12:10.343  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 11:12:10.356  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 11:12:10.390  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 11:12:10.392  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 11:12:10.415  INFO 9648 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 11:12:10.416  INFO 9648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-06-15 11:12:10.858  INFO 9648 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:12:11.107  INFO 9648 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:12:11.112  INFO 9648 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5347b9aa' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:12:11.118  INFO 9648 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:12:11.128  INFO 9648 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:12:11.142  INFO 9648 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$ad0ce753] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:12:11.791  INFO 9648 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 11:12:11.802  INFO 9648 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 11:12:11.802  INFO 9648 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 11:12:11.942  INFO 9648 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 11:12:11.942  INFO 9648 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2663 ms
2020-06-15 11:12:12.116  INFO 9648 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 11:12:12.118  INFO 9648 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 11:12:12.131 DEBUG 9648 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 11:12:12.245  INFO 9648 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 11:12:12.660  INFO 9648 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 11:12:14.506  WARN 9648 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:12:14.507  WARN 9648 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:12:14.507  WARN 9648 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:12:14.507  WARN 9648 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:12:14.530  WARN 9648 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:12:14.531  WARN 9648 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:12:14.531  WARN 9648 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:12:14.531  WARN 9648 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:12:14.666  INFO 9648 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 11:12:14.871  WARN 9648 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 11:12:15.931  INFO 9648 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 11:12:15.946  INFO 9648 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 11:12:16.103  INFO 9648 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@23465af9, org.springframework.security.web.context.SecurityContextPersistenceFilter@7b7bdb8f, org.springframework.security.web.header.HeaderWriterFilter@499f98ea, org.springframework.security.web.authentication.logout.LogoutFilter@6d64b79a, site.alanliang.geekblog.security.ValidateCodeFilter@12fa967e, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@43b4d44a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3d091ec4, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@329d51fd, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@595ddc1a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2c52aae6, org.springframework.security.web.session.SessionManagementFilter@653db98a, org.springframework.security.web.access.ExceptionTranslationFilter@4003352e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@67a854a0]
2020-06-15 11:12:16.178  INFO 9648 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 11:12:16.620  INFO 9648 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 11:12:16.638  INFO 9648 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 11:12:16.698  INFO 9648 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 11:12:16.900  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 11:12:16.902  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 11:12:16.906  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 11:12:16.907  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 11:12:16.908  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 11:12:16.910  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 11:12:16.911  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 11:12:16.915  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 11:12:16.916  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 11:12:16.944  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 11:12:16.945  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 11:12:16.949  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 11:12:16.956  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 11:12:16.957  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 11:12:16.960  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 11:12:16.961  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 11:12:16.964  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 11:12:16.966  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 11:12:16.967  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 11:12:16.968  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 11:12:16.970  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 11:12:16.971  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 11:12:16.974  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 11:12:16.976  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 11:12:16.977  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 11:12:16.982  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 11:12:16.982  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 11:12:16.984  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 11:12:16.984  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 11:12:16.987  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 11:12:16.987  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 11:12:16.991  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 11:12:16.993  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 11:12:16.997  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 11:12:16.998  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 11:12:17.000  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 11:12:17.001  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 11:12:17.004  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 11:12:17.005  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 11:12:17.007  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 11:12:17.008  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 11:12:17.009  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 11:12:17.010  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 11:12:17.013  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 11:12:17.014  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 11:12:17.016  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 11:12:17.016  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 11:12:17.024  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 11:12:17.026  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 11:12:17.027  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 11:12:17.029  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 11:12:17.031  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 11:12:17.032  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 11:12:17.033  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 11:12:17.034  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 11:12:17.035  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 11:12:17.039  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 11:12:17.042  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 11:12:17.043  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 11:12:17.043  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 11:12:17.044  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 11:12:17.047  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 11:12:17.048  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 11:12:17.049  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 11:12:17.054  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 11:12:17.057  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 11:12:17.058  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 11:12:17.059  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 11:12:17.059  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 11:12:17.060  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 11:12:17.063  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 11:12:17.064  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 11:12:17.066  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 11:12:17.067  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 11:12:17.070  INFO 9648 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 11:12:17.101  INFO 9648 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 11:12:17.103  INFO 9648 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 8.914 seconds (JVM running for 10.122)
2020-06-15 11:12:26.285  INFO 9648 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 11:12:26.285  INFO 9648 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 11:12:26.293  INFO 9648 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-06-15 11:12:26.357 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 11:12:26.456 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 11:12:26.469 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 11:12:26.476 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 11:12:26.482 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 11:12:26.486 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 11:12:38.315 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 11:12:38.316 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 11:12:38.318 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 11:12:38.318 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 11:12:38.319 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 11:12:38.322 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 11:12:38.421  INFO 9648 --- [http-nio-8889-exec-8] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 11:12:40.577 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:12:40.583 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:12:40.571(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:12:40.585 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:12:40.901  INFO 9648 --- [http-nio-8889-exec-7] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 11:12:40.902  INFO 9648 --- [http-nio-8889-exec-7] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 11:12:41.347 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 11:12:41.350 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 3(Long)
2020-06-15 11:12:41.353 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 11
2020-06-15 11:12:41.595 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 11:12:41.596 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 11:12:41.597 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 11:12:41.604 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 11:12:41.605 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 11:12:41.607 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 11:12:41.620 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 11:12:41.621 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 11:12:41.622 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 11:12:41.631 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 11:12:41.632 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 11:12:41.633 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 11:12:41.641 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 11:12:41.643 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 11:12:41.644 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 11:12:41.653 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 11:12:41.654 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 11:12:41.656 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 11:12:41.661 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 11:12:41.662 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 11:12:41.663 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 11:12:41.667 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 11:12:41.668 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 11:12:41.668 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 11:12:41.672 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 11:12:41.673 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 11:12:41.678 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 11:12:41.680 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 11:12:41.681 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 11:12:41.683 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 11:12:41.686 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 11:12:41.686 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 11:12:41.688 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 11:12:41.696 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 11:12:41.697 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 11:12:41.698 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 11:12:41.702 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 11:12:41.702 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 11:12:41.703 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 5
2020-06-15 11:12:41.714 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 11:12:41.717 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 11:12:41.751 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 11:12:41.752 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 11:12:41.753 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 11:12:41.797 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 11:12:41.799 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 11:12:41.799 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 11:12:41.800 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 11:12:41.802 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 11:12:41.803 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 10:50:19.0(Timestamp), 2020-06-15 11:12:41.801(Timestamp)
2020-06-15 11:12:41.804 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 11:12:41.806 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 11:12:41.806 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 11:12:41.808 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 11:12:41.812 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 11:12:41.813 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 10:50:19.0(Timestamp), 2020-06-15 11:12:41.81(Timestamp)
2020-06-15 11:12:41.814 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 11:12:41.815 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 11:12:41.815 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 11:12:41.816 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 11:12:41.818 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 11:12:41.819 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 10:50:19.0(Timestamp), 2020-06-15 11:12:41.816(Timestamp)
2020-06-15 11:12:41.820 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 11:12:41.821 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 11:12:41.822 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 11:12:41.827 DEBUG 9648 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 11:12:41.828 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 11:12:41.829 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 10:50:19.0(Timestamp), 2020-06-15 11:12:41.827(Timestamp)
2020-06-15 11:12:41.831 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 11:12:41.837 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 11:12:41.837 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 11:12:41.837 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 11:12:45.788 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:12:45.788 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:12:45.800 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:12:45.801 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:12:45.852 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 5
2020-06-15 11:12:45.866 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:12:45.867 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:12:45.868 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:12:45.871 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:12:45.871 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:12:45.873 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:12:45.876 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:12:45.876 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:12:45.880 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:12:45.881 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:12:45.881 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:12:45.882 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:12:45.883 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:12:45.883 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:12:45.885 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:12:45.889 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:12:45.896 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:12:45.888(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 135(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:12:45.899 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:12:57.510 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 11:12:57.511 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 11:12:57.515 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 11:12:57.517 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 11:12:57.518 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 11:12:57.524 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 11:13:04.662 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 11:13:04.662 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 11:13:04.663 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 11:13:04.664 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 11:13:04.664 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 11:13:04.668 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 11:13:04.761  INFO 9648 --- [http-nio-8889-exec-6] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 11:13:06.829 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:13:06.830 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:13:06.827(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:13:06.831 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:13:07.057 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 11:13:07.058 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 11:13:07.062 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 11:13:07.296 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 11:13:07.296 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 11:13:07.297 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 11:13:07.300 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 11:13:07.300 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 11:13:07.307 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 11:13:07.309 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 11:13:07.309 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 11:13:07.315 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 11:13:07.331 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 11:13:07.331 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 11:13:07.367 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 11:13:07.368 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 11:13:07.369 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 11:13:07.408 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 11:13:07.409 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 11:13:07.409 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 11:13:07.410 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 11:13:07.412 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 11:13:07.412 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 10:51:07.0(Timestamp), 2020-06-15 11:13:07.41(Timestamp)
2020-06-15 11:13:07.413 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 11:13:07.414 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 11:13:07.414 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 11:13:07.415 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 11:13:07.416 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 11:13:07.417 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 10:51:07.0(Timestamp), 2020-06-15 11:13:07.415(Timestamp)
2020-06-15 11:13:07.418 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 11:13:07.421 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 11:13:07.421 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 11:13:07.422 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 11:13:07.423 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 11:13:07.424 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 10:51:07.0(Timestamp), 2020-06-15 11:13:07.422(Timestamp)
2020-06-15 11:13:07.425 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 11:13:07.426 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 11:13:07.426 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 11:13:07.427 DEBUG 9648 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 11:13:07.428 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 11:13:07.429 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 10:51:07.0(Timestamp), 2020-06-15 11:13:07.427(Timestamp)
2020-06-15 11:13:07.429 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 11:13:10.927 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 11:13:10.928 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 11:13:10.930 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 11:13:10.957 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:13:10.958 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:13:10.956(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 9(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:13:10.960 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:13:14.960 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:13:14.963 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 5(Long)
2020-06-15 11:13:14.964 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:13:14.997 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:13:14.999 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 5(Long)
2020-06-15 11:13:15.005 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:13:15.219 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:13:15.220 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:13:15.218(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=5, status=2) }(String), 0:0:0:0:0:0:0:1(String), 265(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:13:15.221 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:13:15.237 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:13:15.238 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:13:15.239 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:13:15.239 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:13:15.251 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 5
2020-06-15 11:13:15.256 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:15.256 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:13:15.259 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:13:15.260 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:15.260 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:13:15.261 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:15.262 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:15.262 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:13:15.263 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:15.264 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:15.264 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:13:15.265 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:15.268 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:15.269 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:13:15.272 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:15.277 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:13:15.278 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:13:15.277(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 41(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:13:15.279 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:13:25.457 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:13:25.459 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:13:25.461 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-15 11:13:25.468 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:13:25.473 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:13:25.475 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 11:13:25.484 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:13:25.485 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:13:25.486 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:13:25.487 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:13:25.495 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 5
2020-06-15 11:13:25.497 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:25.498 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:13:25.501 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:25.502 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:25.502 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:13:25.504 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:25.504 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:25.505 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:13:25.506 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:25.507 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:25.507 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:13:25.509 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:25.542 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:25.542 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:13:25.545 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:13:25.552 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:13:25.553 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:13:25.551(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 99(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:13:25.555 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:13:33.264 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 11:13:33.265 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 5(Long)
2020-06-15 11:13:33.267 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:13:33.269 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 11:13:33.270 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 1(Integer), 5(Long)
2020-06-15 11:13:33.271 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:13:33.272 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 11:13:33.274 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 5(Long)
2020-06-15 11:13:33.281 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 11:13:33.283 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) and ta.published = 1 and ta.status = 2 
2020-06-15 11:13:33.286 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 5(Long)
2020-06-15 11:13:33.290 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-06-15 11:13:33.291 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:33.291 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:13:33.292 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:33.295 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) and ta.published = 1 and ta.status = 2 
2020-06-15 11:13:33.296 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 5(Long)
2020-06-15 11:13:33.302 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : <==      Total: 0
2020-06-15 11:13:33.317 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:13:33.317 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:13:33.319 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:13:35.320 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: SELECT COUNT(1) FROM t_comment tc WHERE article_id = ? AND pid = 0 AND tc.status <> 0 
2020-06-15 11:13:35.320 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 5(Long)
2020-06-15 11:13:35.323 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listByArticleId  : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and tc.status <> 0 order by create_time DESC 
2020-06-15 11:13:35.324 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listByArticleId  : ==> Parameters: 5(Long)
2020-06-15 11:13:35.324 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listByArticleId  : <==      Total: 0
2020-06-15 11:20:34.680 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 11:20:34.680 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:20:34.682 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-15 11:21:11.490 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 11:21:11.491 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-15 11:21:11.494 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 11:21:11.505 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:21:11.506 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:21:11.508 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:21:31.239 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 11:21:31.240 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 11:21:31.241 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 11:21:31.241 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:21:31.242 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 11:21:31.253 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:21:31.253 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:21:31.252(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 24(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:21:31.255 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:21:35.614 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 11:21:35.614 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 11:21:35.615 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 11:21:35.616 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 30(Long), 15(Long)
2020-06-15 11:21:35.619 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 11:21:35.626 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:21:35.627 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:21:35.625(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 3 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:21:35.629 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:21:37.424 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 11:21:37.424 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 11:21:37.426 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 11:21:37.426 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 11:21:37.427 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 11:21:37.431 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:21:37.432 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:21:37.431(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:21:37.435 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:22:19.590 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 11:22:19.591 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: Mybatis动态SQL(String), #D5F5E3(String), 2020-06-15 11:22:19.589(Timestamp), 2020-06-15 11:22:19.589(Timestamp)
2020-06-15 11:22:19.592 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 11:22:19.594 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:22:19.595 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 动态SQL(String), JavaEE互联网轻量级框架整合开发第六章(String), <p>MyBatis提供对SQL语句动态的组装能力，使用XML的几个简单元素，便能完成动态SQL的功能。体现了MyBatis灵活、高度可配置性和可维护性。</p>
<h2 id="h2-6-1-"><a name="6.1    概述" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    概述</h2><p>MyBatis的动态SQL包括以下几种元素：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>if</td>
<td>判断语句</td>
<td>单条件分支判断</td>
</tr>
<tr>
<td>choose(when, otherwise)</td>
<td>相当于Java中的switch语句</td>
<td>多条件分支判断</td>
</tr>
<tr>
<td>trim(when, set)</td>
<td>辅助元素，用于处理特定的SQL拼装问题，比如去掉多用的and, or等</td>
<td>用于处理SQL拼装的问题</td>
</tr>
<tr>
<td>foreach</td>
<td>循环语句</td>
<td>在in语句等列举条件常用</td>
</tr>
</tbody>
</table>
<h2 id="h2-6-2-if-"><a name="6.2    if元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    if元素</h2><p>if元素是最常用的判断语句，相当于Java中的if语句，它常常与test属性联合使用。</p>
<p>例如，根据角色名称（roleName）去查找角色，但是角色名称是一个选填条件，不填写时，就不要用它作为条件查询。代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRoles&quot; parameterType=&quot;string&quot; resultMap=&quot;roleResultMap&quot;&gt;
    select role_no, role_name, note from t_role where 1=1
    &lt;if test=&quot;roleName != null and roleName != &#39;&#39;&quot;&gt;
        and role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    &lt;/if&gt;
&lt;/select&gt;
</code></pre>
<p>当映射器接收roleName后，如果参数不为空，则构造对roleName的模糊查询，否则就不要去构造这个条件。</p>
<h2 id="h2-6-3-choose-when-otherwise-"><a name="6.3    choose、when、otherwise元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.3    choose、when、otherwise元素</h2><p>choose…when…otherwise语句相当于Java中的switch…case…default语句。</p>
<p>例如，有这样一个场景：</p>
<ul>
<li>如果角色编号（roleNo）不为空，则只用角色编号作为条件查询；</li><li>当角色编号为空，而角色名称不为空，则用角色名称作为条件进行模糊查询；</li><li>当角色编号和角色名称都为空，则要求角色备注不为空。</li></ul>
<p>代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRoles2&quot; parameterType=&quot;role&quot; resultMap=&quot;roleResultMap&quot;&gt;
    select role_no, role_name, note from t_role where 1=1
    &lt;choose&gt;
        &lt;when test=&quot;roleNo != null and roleNo !=&#39;&#39;&quot;&gt;
            and role_no = #{roleNo}
        &lt;/when&gt;
        &lt;when test=&quot;roleName != null and roleName != &#39;&#39;&quot;&gt;
            and role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
        &lt;/when&gt;
        &lt;otherwise&gt;
            and note is not null
        &lt;/otherwise&gt;
    &lt;/choose&gt;
&lt;/select&gt;
</code></pre>
<h2 id="h2-6-4-trim-where-set-"><a name="6.4    trim、where、set元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.4    trim、where、set元素</h2><p>以前的动态SQL语句加入条件“1=1”是为了防止出现SQL语句异常，如果不加入这个条件，就会变成这样一个错误语句：</p>
<pre><code class="lang-sql">select role_no, role_name, note from t_role where and role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
</code></pre>
<p>加入这个这个条件显得相当奇怪，我们可以用where元素去处理SQL以达到预期效果，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRoles3&quot; parameterType=&quot;role&quot; resultMap=&quot;roleResultMap&quot;&gt;
    select role_no, role_name, note from t_role where 1=1
    &lt;where&gt;
        &lt;if test=&quot;roleName != null and roleName != &#39;&#39;&quot;&gt;
            and role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
        &lt;/if&gt;
        &lt;if test=&quot;note != null and note !=&#39;&#39;&quot;&gt;
            and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
        &lt;/if&gt;
    &lt;/where&gt;
&lt;/select&gt;
</code></pre>
<p>有时候要去掉的是一些特殊的SQL语法，比如常见的and、or。而使用trim元素也可以达到预期效果。代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRoles4&quot; parameterType=&quot;role&quot; resultMap=&quot;roleResultMap&quot;&gt;
    select role_no, role_name, note from t_role
    &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and&quot;&gt;
        &lt;if test=&quot;roleName != null and roleName != &#39;&#39;&quot;&gt;
            and role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
        &lt;/if&gt;
    &lt;/trim&gt;
&lt;/select&gt;
</code></pre>
<p>其中，perfix代表的是语句的前缀，而prefixOverrides代表的是需要去掉那种字符串。基本与where是等效的。</p>
<p>在Hibernate中要发送所有字段更新持久对象，但现实中场景是只想更新某一个字段，这样会浪费网络带宽，更好的办法就是把主键和更新字段的值传递给SQL去更新。但一个个字段更新需要多条SQL语句，Hibernate中发送所有字段避免了这样的问题。而在MyBatis中，常常可以使用set元素来避免这样的问题，例如更新一个角色的数据，如下所示：</p>
<pre><code class="lang-xml">&lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
    update t_role 
    &lt;set&gt;
        &lt;if test=&quot;roleName != null and roleName != &#39;&#39;&quot;&gt;
            role_name = #{roleName},
        &lt;/if&gt;
        &lt;if test=&quot;note != null and note != &#39;&#39;&quot;&gt;
            note = #{note}
        &lt;/if&gt;
    &lt;/set&gt;
    where role_no = #{roleNo}
&lt;/update&gt;
</code></pre>
<p>set元素遇到了逗号，会把对应的逗号去掉。当我们只需要更新备注时，我们只需要传递备注信息和角色编号即可，而不需要传递角色名称。MyBatis就会根据参数的规则进行动态SQL组装，这样便能避免全部字段更新的问题。</p>
<h2 id="h2-6-5-foreach-"><a name="6.5    foreach元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.5    foreach元素</h2><p>foreach元素是一个循环语句，它的作用是遍历集合，它能很好地支持数组和List、Set接口的集合，往往用于SQL中的in关键字。</p>
<p>在数据库中，经常需要根据编号找到对应的数据，比如角色。有一个List\&lt;String\&gt;的角色编号的集合roleNoList，可以使用foreach元素找到这个集合中的角色的详细信息，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRolesByRoleNoList&quot; resultType=&quot;role&quot;&gt;
    select * from t_role where role_no in
    &lt;foreach item=&quot;roleNo&quot; index=&quot;index&quot; collection=&quot;roleNoList&quot;
             open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;
        #{roleNo}
    &lt;/foreach&gt;
&lt;/select&gt;
</code></pre>
<ul>
<li>collection属性的值是接收的参数名称，它可以是一个数组、List、Set等集合；</li><li>item属性的值是遍历中当前的元素；</li><li>index属性的值是当前元素的位置下标；</li><li>open和close属性的值是以什么符号将这些集合包装起来；</li><li>separator属性的值是各个元素的间隔符号。</li></ul>
<p>需要注意的是，大量数据的in语句会消耗大量性能，此外一些数据库对SQL语句长度有限制，所以使用前要预估collection对象的长度。</p>
<h2 id="h2-6-6-test-"><a name="6.6    用test属性判断字符串" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.6    用test属性判断字符串</h2><p>test的作用相当于判断真假，可以判断空和非空，也可以判断字符串、数字和枚举等。对以下代码进行测试：</p>
<pre><code class="lang-xml">&lt;select id=&quot;getRoleTest&quot; parameterType=&quot;string&quot; resultMap=&quot;roleResultMap&quot;&gt;
    select role_no, role_name, note from t_role
    &lt;if test=&quot; type == &#39;Y&#39;.toString()&quot;&gt;
        where 1=1
    &lt;/if&gt;
&lt;/select&gt;
</code></pre>
<p>如果把type =‘Y’传递给SQL，就可以发现MyBatis加入了条件“where 1=1”。所以对于字符串的判断，可以通过加入toString()的方法进行比较。它可以判断数值型的参数。对于枚举而言，取决于使用何种typeHandler。</p>
<h2 id="h2-6-7-bind-"><a name="6.7    bind元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.7    bind元素</h2><p>bind元素的作用是通过OGNL表达式去自定义一个上下文变量。在进行模糊查询时，如果是MySQL数据库，常常这样使用：<code>concat（‘%’,参数,’%‘）</code>。而如果是Oracle数据库，常常这样使用：<code>%||参数||%</code>。但是有了bind元素就不必使用特定数据库的语法了，而是使用MyBatis的动态SQL即可完成。</p>
<p>例如，要按角色名称进行模糊查询，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRole&quot; parameterType=&quot;string&quot; resultMap=&quot;roleResultMap&quot;&gt;
    &lt;bind name=&quot;pattern&quot; value=&quot;&#39;%&#39; + _parameter + &#39;%&#39;&quot;/&gt;
    select role_no, role_name, note from t_role
    where role_name like #{pattern}
&lt;/select&gt;
</code></pre>
<p>这里的“_parameter”是传递进来的参数。这样无论是MySQL还是Oracle都可以使用这样的语句，提高了代码的可移植性。</p>
<p>同时，传递多个参数也是没问题的。代码如下所示：</p>
<pre><code class="lang-java">public List&lt;Role&gt; findRole(@Param(&quot;roleName&quot;)String roleName, 
                           @Param(&quot;note&quot;)String note);
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;findRole&quot; resultMap=&quot;roleResultMap&quot;&gt;
    &lt;bind name=&quot;pattern_roleName&quot; value=&quot;&#39;%&#39; + roleName + &#39;%&#39;&quot;/&gt;
    &lt;bind name=&quot;pattern_note&quot; value=&quot;&#39;%&#39; + note + &#39;%&#39;&quot;/&gt;
    select role_no, role_name, note from t_role
    where role_name like #{pattern_roleName}
    and note like #{pattern_note}
&lt;/select&gt;
</code></pre>
<p>这里绑定了两个新变量pattern_roleName和pattern_note，这样就可以在SQL的其他地方使用了。</p>
(String), MyBatis提供对SQL语句动态的组装能力，使用XML的几个简单元素，便能完成动态SQL的功能。体现了MyBatis灵活、高度可配置性和可维护性。

## 6.1	概述

MyBatis的动态SQL包括以下几种元素：

| 元素                    | 作用                                                         | 备注                   |
| ----------------------- | ------------------------------------------------------------ | ---------------------- |
| if                      | 判断语句                                                     | 单条件分支判断         |
| choose(when, otherwise) | 相当于Java中的switch语句                                     | 多条件分支判断         |
| trim(when, set)         | 辅助元素，用于处理特定的SQL拼装问题，比如去掉多用的and, or等 | 用于处理SQL拼装的问题  |
| foreach                 | 循环语句                                                     | 在in语句等列举条件常用 |

## 6.2	if元素

if元素是最常用的判断语句，相当于Java中的if语句，它常常与test属性联合使用。

例如，根据角色名称（roleName）去查找角色，但是角色名称是一个选填条件，不填写时，就不要用它作为条件查询。代码如下所示：

```xml
<select id="findRoles" parameterType="string" resultMap="roleResultMap">
    select role_no, role_name, note from t_role where 1=1
    <if test="roleName != null and roleName != ''">
        and role_name like concat('%',#{roleName},'%')
    </if>
</select>
```

当映射器接收roleName后，如果参数不为空，则构造对roleName的模糊查询，否则就不要去构造这个条件。

## 6.3	choose、when、otherwise元素

choose...when...otherwise语句相当于Java中的switch...case...default语句。

例如，有这样一个场景：

- 如果角色编号（roleNo）不为空，则只用角色编号作为条件查询；
- 当角色编号为空，而角色名称不为空，则用角色名称作为条件进行模糊查询；
- 当角色编号和角色名称都为空，则要求角色备注不为空。

代码如下所示：

```xml
<select id="findRoles2" parameterType="role" resultMap="roleResultMap">
    select role_no, role_name, note from t_role where 1=1
    <choose>
        <when test="roleNo != null and roleNo !=''">
            and role_no = #{roleNo}
        </when>
        <when test="roleName != null and roleName != ''">
            and role_name like concat('%',#{roleName},'%')
        </when>
        <otherwise>
            and note is not null
        </otherwise>
    </choose>
</select>
```

## 6.4	trim、where、set元素

以前的动态SQL语句加入条件“1=1”是为了防止出现SQL语句异常，如果不加入这个条件，就会变成这样一个错误语句：

```sql
select role_no, role_name, note from t_role where and role_name like concat('%',#{roleName},'%')
```

加入这个这个条件显得相当奇怪，我们可以用where元素去处理SQL以达到预期效果，代码如下所示：

```xml
<select id="findRoles3" parameterType="role" resultMap="roleResultMap">
    select role_no, role_name, note from t_role where 1=1
    <where>
        <if test="roleName != null and roleName != ''">
            and role_name like concat('%',#{roleName},'%')
        </if>
        <if test="note != null and note !=''">
            and note like concat('%',#{note},'%')
        </if>
    </where>
</select>
```



有时候要去掉的是一些特殊的SQL语法，比如常见的and、or。而使用trim元素也可以达到预期效果。代码如下所示：

```xml
<select id="findRoles4" parameterType="role" resultMap="roleResultMap">
    select role_no, role_name, note from t_role
    <trim prefix="where" prefixOverrides="and">
        <if test="roleName != null and roleName != ''">
            and role_name like concat('%',#{roleName},'%')
        </if>
    </trim>
</select>
```

其中，perfix代表的是语句的前缀，而prefixOverrides代表的是需要去掉那种字符串。基本与where是等效的。

在Hibernate中要发送所有字段更新持久对象，但现实中场景是只想更新某一个字段，这样会浪费网络带宽，更好的办法就是把主键和更新字段的值传递给SQL去更新。但一个个字段更新需要多条SQL语句，Hibernate中发送所有字段避免了这样的问题。而在MyBatis中，常常可以使用set元素来避免这样的问题，例如更新一个角色的数据，如下所示：

```xml
<update id="updateRole" parameterType="role">
    update t_role 
    <set>
        <if test="roleName != null and roleName != ''">
            role_name = #{roleName},
        </if>
        <if test="note != null and note != ''">
            note = #{note}
        </if>
    </set>
    where role_no = #{roleNo}
</update>
```

set元素遇到了逗号，会把对应的逗号去掉。当我们只需要更新备注时，我们只需要传递备注信息和角色编号即可，而不需要传递角色名称。MyBatis就会根据参数的规则进行动态SQL组装，这样便能避免全部字段更新的问题。

## 6.5	foreach元素

foreach元素是一个循环语句，它的作用是遍历集合，它能很好地支持数组和List、Set接口的集合，往往用于SQL中的in关键字。

在数据库中，经常需要根据编号找到对应的数据，比如角色。有一个List\<String\>的角色编号的集合roleNoList，可以使用foreach元素找到这个集合中的角色的详细信息，代码如下所示：

```xml
<select id="findRolesByRoleNoList" resultType="role">
    select * from t_role where role_no in
    <foreach item="roleNo" index="index" collection="roleNoList"
             open="(" separator="," close=")">
        #{roleNo}
    </foreach>
</select>
```

- collection属性的值是接收的参数名称，它可以是一个数组、List、Set等集合；
- item属性的值是遍历中当前的元素；
- index属性的值是当前元素的位置下标；
- open和close属性的值是以什么符号将这些集合包装起来；
- separator属性的值是各个元素的间隔符号。

需要注意的是，大量数据的in语句会消耗大量性能，此外一些数据库对SQL语句长度有限制，所以使用前要预估collection对象的长度。

## 6.6	用test属性判断字符串

test的作用相当于判断真假，可以判断空和非空，也可以判断字符串、数字和枚举等。对以下代码进行测试：

```xml
<select id="getRoleTest" parameterType="string" resultMap="roleResultMap">
    select role_no, role_name, note from t_role
    <if test=" type == 'Y'.toString()">
        where 1=1
    </if>
</select>
```

如果把type =‘Y’传递给SQL，就可以发现MyBatis加入了条件“where 1=1”。所以对于字符串的判断，可以通过加入toString()的方法进行比较。它可以判断数值型的参数。对于枚举而言，取决于使用何种typeHandler。

## 6.7	bind元素

bind元素的作用是通过OGNL表达式去自定义一个上下文变量。在进行模糊查询时，如果是MySQL数据库，常常这样使用：`concat（‘%’,参数,’%‘）`。而如果是Oracle数据库，常常这样使用：`%||参数||%`。但是有了bind元素就不必使用特定数据库的语法了，而是使用MyBatis的动态SQL即可完成。

例如，要按角色名称进行模糊查询，代码如下所示：

```xml
<select id="findRole" parameterType="string" resultMap="roleResultMap">
    <bind name="pattern" value="'%' + _parameter + '%'"/>
    select role_no, role_name, note from t_role
    where role_name like #{pattern}
</select>
```

这里的“_parameter”是传递进来的参数。这样无论是MySQL还是Oracle都可以使用这样的语句，提高了代码的可移植性。

同时，传递多个参数也是没问题的。代码如下所示：

```java
public List<Role> findRole(@Param("roleName")String roleName, 
                           @Param("note")String note);
```

```xml
<select id="findRole" resultMap="roleResultMap">
    <bind name="pattern_roleName" value="'%' + roleName + '%'"/>
    <bind name="pattern_note" value="'%' + note + '%'"/>
    select role_no, role_name, note from t_role
    where role_name like #{pattern_roleName}
    and note like #{pattern_note}
</select>
```

这里绑定了两个新变量pattern_roleName和pattern_note，这样就可以在SQL的其他地方使用了。

(String), http://cdn.alanliang.site/note/oilpainting6.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), false(Boolean), false(Boolean), 3(Long), 1(Long), 1(Integer), 2020-06-15 11:22:19.587(Timestamp), 2020-06-15 11:22:19.587(Timestamp), 2(Integer), 1(Integer)
2020-06-15 11:22:19.600 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 11:22:19.605 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 11:22:19.606 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 6(Long), 12(Long), 6(Long), 15(Long), 6(Long), 22(Long)
2020-06-15 11:22:19.607 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 11:22:19.842 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:22:19.842 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:22:19.841(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: ... }(String), 0:0:0:0:0:0:0:1(String), 250(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:22:19.843 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:22:21.591 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:22:21.592 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:22:21.593 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:22:21.593 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:22:21.609 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 6
2020-06-15 11:22:21.610 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:22:21.611 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:22:21.612 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:22:21.613 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:22:21.613 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:22:21.616 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:22:21.620 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:22:21.620 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:22:21.622 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:22:21.623 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:22:21.623 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:22:21.624 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:22:21.624 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:22:21.624 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:22:21.625 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:22:21.626 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:22:21.626 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:22:21.626 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:22:21.630 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:22:21.630 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:22:21.629(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 39(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:22:21.634 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:22:26.550 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-06-15 11:22:26.551 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-06-15 11:22:26.553 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-06-15 11:22:26.554 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:22:26.555 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-06-15 11:22:26.559 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:22:26.559 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:22:26.557(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:22:26.561 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:22:28.556 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:22:28.557 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:22:28.555(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:22:28.558 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:22:35.458 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 11:22:35.459 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 11:22:35.464 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 11:22:35.467 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:22:35.469 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 11
2020-06-15 11:22:35.473 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:22:35.473 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:22:35.472(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:22:35.474 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:27:36.930 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 11:27:36.931 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 19(Long)
2020-06-15 11:27:36.933 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 11:27:37.022 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 11:27:37.023 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:27:37.023 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 7
2020-06-15 11:27:40.678 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 11:27:40.678 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters:  MyBatis核心组件(String)
2020-06-15 11:27:40.679 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 11:27:40.680 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 11:27:40.681 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters:  MyBatis核心组件(String), #F9EBEA(String), 2020-06-15 11:27:40.677(Timestamp), 19(Long)
2020-06-15 11:27:40.681 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 11:27:40.687 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:27:40.687 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:27:40.686(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: ... }(String), 0:0:0:0:0:0:0:1(String), 8(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:27:40.688 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:27:42.347 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 11:27:42.347 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 11:27:42.349 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 11:27:42.349 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:27:42.351 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 11
2020-06-15 11:27:42.356 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:27:42.357 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:27:42.355(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:27:42.358 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:27:48.477 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 11:27:48.478 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 20(Long)
2020-06-15 11:27:48.479 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 11:27:48.557 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 11:27:48.557 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:27:48.558 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 8
2020-06-15 11:27:52.218 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 11:27:52.218 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: Mybatis配置(String)
2020-06-15 11:27:52.219 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 11:27:52.219 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 11:27:52.219 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: Mybatis配置(String), #85C1E9(String), 2020-06-15 11:27:52.216(Timestamp), 20(Long)
2020-06-15 11:27:52.220 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 11:27:52.224 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:27:52.225 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:27:52.224(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: ... }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:27:52.226 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:27:53.865 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 11:27:53.866 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 11:27:53.867 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 11:27:53.868 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:27:53.869 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 11
2020-06-15 11:27:53.874 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:27:53.875 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:27:53.872(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:27:53.879 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:27:58.941 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 11:27:58.942 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 21(Long)
2020-06-15 11:27:58.943 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 11:27:59.017 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 11:27:59.017 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:27:59.018 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 9
2020-06-15 11:28:02.341 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 11:28:02.342 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: Mybatis映射器(String)
2020-06-15 11:28:02.342 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 11:28:02.343 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 11:28:02.343 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: Mybatis映射器(String), #19CAAD(String), 2020-06-15 11:28:02.34(Timestamp), 21(Long)
2020-06-15 11:28:02.343 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 11:28:02.349 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:02.349 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:28:02.349(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: ... }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:02.350 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:28:04.009 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 11:28:04.009 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 11:28:04.011 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 11:28:04.012 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:28:04.014 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 11
2020-06-15 11:28:04.021 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:04.022 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:28:04.019(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:04.023 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:28:07.983 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 11:28:07.984 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 22(Long)
2020-06-15 11:28:07.985 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 11:28:08.064 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 11:28:08.064 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:28:08.065 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 10
2020-06-15 11:28:11.012 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 11:28:11.012 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: Mybatis动态SQL(String)
2020-06-15 11:28:11.013 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 11:28:11.015 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 11:28:11.015 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: Mybatis动态SQL(String), #8CC7B5(String), 2020-06-15 11:28:11.009(Timestamp), 22(Long)
2020-06-15 11:28:11.016 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 11:28:11.023 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:11.023 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:28:11.022(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: ... }(String), 0:0:0:0:0:0:0:1(String), 11(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:11.025 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:28:12.678 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 11:28:12.678 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 11:28:12.680 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 11:28:12.680 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:28:12.681 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 11
2020-06-15 11:28:12.685 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:12.685 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:28:12.684(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:12.688 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:28:19.704 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 11:28:19.704 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 11:28:19.706 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 11:28:19.716 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:19.716 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:28:19.715(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 3(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:19.718 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:28:34.341 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:28:34.342 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:28:34.343 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-15 11:28:34.346 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:28:34.347 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:28:34.348 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 11:28:34.353 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:28:34.354 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:28:34.357 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:28:34.357 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:28:34.363 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 5
2020-06-15 11:28:34.363 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:34.364 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:28:34.366 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:34.368 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:34.368 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:28:34.372 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:34.373 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:34.373 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:28:34.374 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:34.375 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:34.376 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:28:34.377 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:34.378 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:34.378 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:28:34.379 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:28:34.383 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:34.383 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:28:34.382(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 44(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:34.385 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:28:52.569 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:52.569 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:28:52.567(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:52.573 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:28:59.520 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:28:59.520 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 6(Long)
2020-06-15 11:28:59.522 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:28:59.533 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:28:59.534 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 6(Long)
2020-06-15 11:28:59.535 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:28:59.716 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:59.716 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:28:59.715(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=6, status=2) }(String), 0:0:0:0:0:0:0:1(String), 196(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:59.718 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:28:59.737 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:28:59.737 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:28:59.739 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:28:59.739 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:28:59.748 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 6
2020-06-15 11:28:59.751 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:59.752 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:28:59.753 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:28:59.756 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:59.757 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:28:59.758 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:59.759 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:59.759 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:28:59.760 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:59.761 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:59.761 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:28:59.761 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:59.762 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:59.762 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:28:59.763 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:59.763 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:28:59.763 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:28:59.764 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:28:59.772 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:28:59.774 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:28:59.77(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 33(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:28:59.776 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:29:12.103 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:29:12.103 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:29:12.104 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-15 11:29:12.106 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:29:12.106 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:29:12.108 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 11:29:12.116 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:29:12.116 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:29:12.117 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:29:12.117 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:29:12.123 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 11:29:12.123 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:29:12.124 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:29:12.125 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:29:12.126 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:29:12.126 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:29:12.127 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:29:12.128 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:29:12.128 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:29:12.130 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:29:12.132 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:29:12.133 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:29:12.134 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:29:12.135 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:29:12.135 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:29:12.138 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:29:12.139 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:29:12.140 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:29:12.142 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:29:12.150 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:29:12.151 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:29:12.149(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 45(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:29:12.152 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:30:00.986 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 11:30:00.987 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:30:00.989 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-15 11:30:56.298 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:30:56.298 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:30:56.297(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 4(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:30:56.300 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:32:09.279 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 11:32:09.279 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: 装配Bean(String), #D5F5E3(String), 2020-06-15 11:32:09.278(Timestamp), 2020-06-15 11:32:09.278(Timestamp)
2020-06-15 11:32:09.281 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 11:32:09.282 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:32:09.284 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 装配Bean(String), JavaEE互联网轻量级框架整合开发第十章(String), <h2 id="h2-10-1-3-"><a name="10.1    依赖注入的3种方式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.1    依赖注入的3种方式</h2><p>在实际环境中实现IoC容器的方式主要分为两大类，一类是依赖查找，依赖查找是通过资源定位查找对应资源；另一类是依赖注入，而Spring主要使用的是依赖注入。一般而言，依赖注入可以分为3种方式：</p>
<ul>
<li>构造器注入；</li><li>setter注入；</li><li>接口注入</li></ul>
<p>构造器注入和setter注入是主要方式，而接口注入是从别的地方注入的方式，比如在Web工程中，往往是通过服务器（比如Tomcat）来配置数据源，这时可以用JNDI的形式通过接口将它注入Spring IoC容器中。</p>
<h3 id="h3-10-1-1-"><a name="10.1.1    构造器注入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.1.1    构造器注入</h3><p>在大部分情况下，我们都是通过类的构造方法来创建类的对象，Spring也可以采用反射的方式，通过使用构造方法来完成注入，这就是构造器注入的原理。我们以角色类为例，代码如下：</p>
<pre><code class="lang-java">package com.ssm.chapter9.pojo;

public class Role {
    private Long id;
    private String roleName;
    private String note;

       /*getter and setter*/

    public Role(Long id, String roleName, String note) {
        this.id = id;
        this.roleName = roleName;
        this.note = note;
    }
}
</code></pre>
<p>这时不能利用无参构造创建对象，为了使Spring能够正确创建对象，需要像这样做。代码如下所示：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;role1&quot; class=&quot;com.ssm.chapter10.Role&quot;&gt;
    &lt;constructor-arg index=&quot;0&quot; value=&quot;1&quot;/&gt;
    &lt;constructor-arg index=&quot;1&quot; value=&quot;总经理&quot;/&gt;
    &lt;constructor-arg index=&quot;2&quot; value=&quot;公司管理者&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<p>constructor-arg元素用于定义类构造方法的参数，其中index用于定义参数位置（从0开始），而value则是设置值。通过这样定义Spring便知道使用Role(Long, String, String)这样的构造方法去创建对象了。</p>
<p>这样注入虽然简单，但是如果参数很多，这样的构造方法就很复杂了，这时可以考虑使用setter注入。</p>
<h3 id="h3-10-1-2-setter-"><a name="10.1.2    setter注入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.1.2    setter注入</h3><p>setter注入是Spring中最常见的注入方法，利用JavaBean定义的setter方法完成注入，灵活且可读性高。首先可以把构造方法声明为无参数的，然后使用setter注入为其设置对应的值。先在Role类中添加无参构造，然后完成配置。代码如下所示：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;role2&quot; class=&quot;com.ssm.chapter10.Role&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;2&quot;/&gt;
    &lt;property name=&quot;roleName&quot; value=&quot;高级工程师&quot;/&gt;
    &lt;property name=&quot;note&quot; value=&quot;重要人员&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<h3 id="h3-10-1-3-"><a name="10.1.3    接口注入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.1.3    接口注入</h3><p>有时候资源来自于外界，比如数据库连接资源完全可以在Tomcat下配置，然后通过JNDI的方式获取，这时我们需要采用接口注入的形式获取它。代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;Context&gt;
    &lt;Resource name=&quot;jdbc/ssm&quot; auth=&quot;Container&quot; type=&quot;javax.sql.DataSource&quot; driverClassName=&quot;com.mysql.jdbc.Driver&quot; url=&quot;jdbc:mysql://localhost:3306/ssm&quot; username=&quot;root&quot; password=&quot;1234&quot; /&gt;
&lt;/Context&gt;
</code></pre>
<p>如果Tomcat的Web工程使用了Spring，那么可以通过Spring的机制，用JNDI获取Tomcat启动的数据库连接池，代码如下所示：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jndi.JndiObjectFactoryBean&quot;&gt;
    &lt;property name=&quot;jndiName&quot;&gt;
        &lt;value&gt;java:comp/env/jdbc/ssm&lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<h2 id="h2-10-2-bean-"><a name="10.2    装配Bean概述" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.2    装配Bean概述</h2><p>在Spring中提供3种方法进行配置：</p>
<ul>
<li>在XML中显式配置；</li><li>在Java的接口和类中实现配置；</li><li>隐式Bean的发现机制和自动装配原则。</li></ul>
<p>这3种方法在实际开发中被会被用到，使用优先级的建议如下：</p>
<ol>
<li>基于约定优于配置的原则，应该最优先使用通过隐式Bean的发现机制和自动装配的原则，这样简单灵活。</li><li>没有办法使用自动装配原则的情况下优先考虑Java接口和类中实现配置，这样可以避免XML配置的泛滥。这种场景典型的例子是一个父类有多个子类。比如学生类有两个子类：男学生类和女学生类，通过IoC容器初始化一个学生类，容器将不知道初始化哪个子类，这个时候可以使用Java的注解配置指定。</li><li>在上述方法都无法使用的情况下，那么只能选择XML配置。由于实际开发中常常使用第三方类库，我们无法修改源码，这是就可以通过XML配置。</li></ol>
<p>总而言之，可以修改源码则优先使用自动装配，这样可以减少大量的XML配置。不能修改源码则使用XML配置。</p>
<h2 id="h2-10-3-xml-bean"><a name="10.3    通过XML配置装配Bean" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.3    通过XML配置装配Bean</h2><p>使用XML装配Bean需要定义对应的XML，这里需要引入对应的XML模式（XSD）文件，这些文件会定义配置Spring Bean的一些元素，一个简单的配置如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39; ?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;
   &lt;!--Spring Bean配置代码--&gt;
&lt;/beans&gt;
</code></pre>
<h3 id="h3-10-3-1-"><a name="10.3.1    装配简易值" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.3.1    装配简易值</h3><p>一个简单的装配，代码如下所示：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;role2&quot; class=&quot;com.ssm.chapter10.Role&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;2&quot;/&gt;
    &lt;property name=&quot;roleName&quot; value=&quot;高级工程师&quot;/&gt;
    &lt;property name=&quot;note&quot; value=&quot;重要人员&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<ul>
<li><p>id属性是Spring寻找Bean的标识，但不是必需的属性，缺省时Spring将采用“全限定名#{number}”的格式生成标识。在这里，标识是“com.ssm.chapter9.pojo.Role#0”。第二次声明就是“com.ssm.chapter9.pojo.Role#1”。建议自定义id，比较简单。</p>
</li><li><p>class属性是类的全限定名。</p>
</li><li><p>property元素是注入类的属性，其中name属性是注入属性名称，value属性注入属性的值。如果需要注入一些自定义的类，比如之前的果汁制作器例子，需要先定义原料的Bean，然后在制作器中引用原料。代码如下所示：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;source&quot; class=&quot;com.ssm.chapter9.pojo.Source&quot;&gt;
        &lt;property name=&quot;fruit&quot; value=&quot;橙汁&quot; /&gt;
        &lt;property name=&quot;sugar&quot; value=&quot;少糖&quot; /&gt;
        &lt;property name=&quot;size&quot; value=&quot;大杯&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;juiceMaker2&quot; class=&quot;com.ssm.chapter9.pojo.JuiceMaker2&quot;&gt;
        &lt;property name=&quot;beverageShop&quot; value=&quot;贡茶&quot; /&gt;
        &lt;property name=&quot;source&quot; ref=&quot;source&quot; /&gt;
    &lt;/bean&gt;
</code></pre>
<p>这里定义了一个id为source的Bean，然后在制作器中通过ref属性去引用对应的Bean。</p>
</li></ul>
<h3 id="h3-10-3-2-"><a name="10.3.2    装配集合" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.3.2    装配集合</h3><p>有些时候要做一些复杂的装配工作，比如Set、Map、List、Array和Properties等。我们首先定义一个JavaBean，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.chapter10.pojo;

import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

public class ComplexAssembly {

   private Long id;
   private List&lt;String&gt; list;
   private Map&lt;String, String&gt; map;
   private Properties props;
   private Set&lt;String&gt; set;
   private String[] array;

   /*getter and setter*/
}
</code></pre>
<p>装配这些常用的集合类，代码如下所示：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;complexAssembly&quot; class=&quot;com.ssm.chapter10.pojo.ComplexAssembly&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;1&quot;/&gt;

    &lt;property name=&quot;list&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;value-list-1&lt;/value&gt;
            &lt;value&gt;value-list-1&lt;/value&gt;
            &lt;value&gt;value-list-1&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;

    &lt;property name=&quot;map&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;key1&quot; value=&quot;value-key-1&quot;/&gt;
            &lt;entry key=&quot;key2&quot; value=&quot;value-key-2&quot;/&gt;
            &lt;entry key=&quot;key3&quot; value=&quot;value-key-3&quot;/&gt;
        &lt;/map&gt;
    &lt;/property&gt;

    &lt;property name=&quot;props&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;prop1&quot;&gt;value-prop-1&lt;/prop&gt;
            &lt;prop key=&quot;prop2&quot;&gt;value-prop-2&lt;/prop&gt;
            &lt;prop key=&quot;prop3&quot;&gt;value-prop-3&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;

    &lt;property name=&quot;set&quot;&gt;
        &lt;set&gt;
            &lt;value&gt;value-set-1&lt;/value&gt;
            &lt;value&gt;value-set-2&lt;/value&gt;
            &lt;value&gt;value-set-3&lt;/value&gt;
        &lt;/set&gt;
    &lt;/property&gt;

    &lt;property name=&quot;array&quot;&gt;
        &lt;array&gt;
            &lt;value&gt;value-array-1&lt;/value&gt;
            &lt;value&gt;value-array-2&lt;/value&gt;
            &lt;value&gt;value-array-3&lt;/value&gt;
        &lt;/array&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<ul>
<li><p>List集合属性使用\&lt;list\&gt;元素注入，\&lt;value\&gt;元素指定了该集合装配的值。</p>
</li><li><p>Map集合属性使用\&lt;map\&gt;元素注入，\&lt;entry\&gt;元素指定了该集合装配的键值对，其中key属性为键值，value属性为对应的值。</p>
</li><li>Properties集合属性使用\&lt;props\&gt;元素注入，\&lt;prop\&gt;元素指定了该集合装配的Property，其中key属性为键值，该元素包裹的值为设置的值。</li><li>Set集合属性使用\&lt;set\&gt;元素注入，\&lt;value\&gt;元素指定了该集合装配的值。</li><li>Array数组属性使用\&lt;Array\&gt;元素注入，\&lt;value\&gt;元素指定了该数组装配的值。</li></ul>
<p>从上面可以看到各个集合对字符串的装载，但是有时需要更复杂的装载，比如这些集合中装载的是类对象。为此先创建2个POJO，代码如下所示：</p>
<pre><code class="lang-java">public class Role {
   private Long id;
   private String roleName;
   private String note;

   /*getter and setter*/

   public Role() {
   }

   public Role(Long id, String roleName, String note) {
      this.id = id;
      this.roleName = roleName;
      this.note = note;
   }
}
</code></pre>
<pre><code class="lang-java">public class User {
   private Long id;
   private String userName;
   private String note;

   /*getter and setter*/
}
</code></pre>
<p>再创建一个稍微复杂的POJO，装配用户和角色类，代码如下所示：</p>
<pre><code class="lang-java">public class UserRoleAssembly {

   private Long id;
   private List&lt;Role&gt; list;
   private Map&lt;Role, User&gt; map;
   private Set&lt;Role&gt; set;

   /*getter and setter*/
}
</code></pre>
<p>修改配置文件，代码如下：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;role1&quot; class=&quot;com.ssm.chapter10.pojo.Role&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;1&quot;/&gt;
    &lt;property name=&quot;roleName&quot; value=&quot;role_name_1&quot;/&gt;
    &lt;property name=&quot;note&quot; value=&quot;role_note_1&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;role2&quot; class=&quot;com.ssm.chapter10.pojo.Role&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;2&quot;/&gt;
    &lt;property name=&quot;roleName&quot; value=&quot;role_name_2&quot;/&gt;
    &lt;property name=&quot;note&quot; value=&quot;role_note_2&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;user1&quot; class=&quot;com.ssm.chapter10.pojo.User&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;1&quot;/&gt;
    &lt;property name=&quot;userName&quot; value=&quot;user_name_1&quot;/&gt;
    &lt;property name=&quot;note&quot; value=&quot;user_note_1&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;user2&quot; class=&quot;com.ssm.chapter10.pojo.User&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;2&quot;/&gt;
    &lt;property name=&quot;userName&quot; value=&quot;user_name_2&quot;/&gt;
    &lt;property name=&quot;note&quot; value=&quot;user_note_2&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;userRoleAssembly&quot; class=&quot;com.ssm.chapter10.pojo.UserRoleAssembly&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;1&quot;/&gt;
    &lt;property name=&quot;list&quot;&gt;
        &lt;list&gt;
            &lt;ref bean=&quot;role1&quot;/&gt;
            &lt;ref bean=&quot;role2&quot;/&gt;
        &lt;/list&gt;
    &lt;/property&gt;

    &lt;property name=&quot;map&quot;&gt;
        &lt;map&gt;
            &lt;entry key-ref=&quot;role1&quot; value-ref=&quot;user1&quot;/&gt;
            &lt;entry key-ref=&quot;role2&quot; value-ref=&quot;user2&quot;/&gt;
        &lt;/map&gt;
    &lt;/property&gt;

    &lt;property name=&quot;set&quot;&gt;
        &lt;set&gt;
            &lt;ref bean=&quot;role1&quot;/&gt;
            &lt;ref bean=&quot;role2&quot;/&gt;
        &lt;/set&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<ul>
<li><p>List集合属性使用\&lt;list\&gt;元素注入，\&lt;ref\&gt;元素指定该集合装配的对象，bean属性引用已定义的Bean。</p>
</li><li><p>Map集合属性使用\&lt;map\&gt;元素注入，\&lt;entry\&gt;元素指定该集合装配的键值对，key-ref属性引用已定义的Bean作为键值，value-ref属性引用已定义的Bean作为对应的值。</p>
</li><li>Set集合属性使用\&lt;set\&gt;元素注入，\&lt;ref\&gt;元素指定该集合装配的对象，bean属性引用已定义的Bean。</li></ul>
<h2 id="h2-10-4-bean"><a name="10.4    通过注解装配Bean" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.4    通过注解装配Bean</h2><p>使用注解可以减少XML的配置，注解功能更强大，既能实现XML的功能，也提供自动装配的功能。</p>
<p>在Spring中，它提供了两种方式来让Spring IoC容器发现Bean。</p>
<ul>
<li>组件扫描：通过定义资源的方式，让Spring IoC容器扫描对应的包，从而把Bean装配进来。</li><li>自动装配：通过注解定义，使得一些依赖关系可以通过注解完成。</li></ul>
<p>通过组件扫描和自动装配，大部分工程都可以使用Java配置完成。但是不使用XML也存在一定弊端，比如系统存在多个公共配置（比如多个properties和XML文件），如果写在注解里，那么公共资源的配置就显得比较分散，不利于统一管理，这是使用XML更加明确一些。</p>
<h3 id="h3-10-4-1-component-bean"><a name="10.4.1    使用@Component装配Bean" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.4.1    使用<a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a>装配Bean</h3><p>首先定义一个POJO。代码如下所示：</p>
<pre><code class="lang-java">@Component(value = &quot;role&quot;)
public class Role {
   @Value(&quot;1&quot;)
   private Long id;
   @Value(&quot;role_name_1&quot;)
   private String roleName;
   @Value(&quot;role_note_1&quot;)
   private String note;

   /*getter and setter*/
}
</code></pre>
<ul>
<li>注解<a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a>表明Spring IoC容器会扫描这个类并生成Bean实例，而其中的value属性表明这个类在容器中的id，相当于XML方式定义的Bean的id属性。也可以简写成<code><a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a>(&quot;role&quot;)</code>。甚至直接写成<a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a>，这样的话容器将为其生成默认id，其值为首字母小写的类名，这里是“role”。</li><li>注解<a href="https://github.com/Value" title="&#64;Value" class="at-link">@Value</a>表明为属性注入值。注入的时候Spring会为其转化类型。</li></ul>
<p>此时容器还并不知道去哪里扫描对象，所有还需要使用一个Java Config来告诉它，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.chapter10.annotation.pojo;

import org.springframework.context.annotation.ComponentScan;
@ComponentScan
public class PojoConfig {
}
</code></pre>
<ul>
<li>包名和POJO保持一致。</li><li><a href="https://github.com/ComponentScan" title="&#64;ComponentScan" class="at-link">@ComponentScan</a>表明扫描组件，默认扫描当前包的路径，POJO的包名和它保持一致才能扫描。</li></ul>
<p>接下来就可以通过Spring定义好的Spring IoC容器的实现类——AnnotationConfigApplicationContext生成IoC容器了，代码如下所示：</p>
<pre><code class="lang-java">public class AnnotationMain {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(PojoConfig.class);
        Role role = ctx.getBean(Role.class);
        System.out.println(role);
    }
}
</code></pre>
<p>很多时候我们只需要扫描特定的类而不是整一个包，下面我们解决这个问题。另外，<a href="https://github.com/Value" title="&#64;Value" class="at-link">@Value</a>只能注入简单值，注入对象可使用<a href="https://github.com/Autowired" title="&#64;Autowired" class="at-link">@Autowired</a>。</p>
<p><a href="https://github.com/ComponentScan" title="&#64;ComponentScan" class="at-link">@ComponentScan</a>有两个配置项，第一个是basePackages，可以配置一个Java包的数组，Spring会根据配置扫描对应的包和子包，装配配置好的Bean；第二个是basePackageClasses，可以配置多个类，Spring会根据配置的类所在的包，为包和子包进行扫描，装配对应配置的Bean。</p>
<p>为了验证<a href="https://github.com/ComponentScan" title="&#64;ComponentScan" class="at-link">@ComponentScan</a>的两个配置项，我们首先声明一个接口RoleService，代码如下所示：</p>
<pre><code class="lang-java">import com.ssm.chapter10.annotation.pojo.Role;

public interface RoleService {
    public void printRoleInfo(Role role);
}
</code></pre>
<p>然后，创建一个实现类，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.chapter10.annotation.service.impl;
import com.ssm.chapter10.annotation.pojo.Role;
import com.ssm.chapter10.annotation.service.RoleService;
import org.springframework.stereotype.Component;

@Component
public class RoleServiceImpl implements RoleService {
    @Override
    public void printRoleInfo(Role role) {
        System.out.println(&quot;id = &quot;+role.getId());
        System.out.println(&quot;roleName = &quot;+role.getRoleName());
        System.out.println(&quot;note = &quot;+role.getNote());
    }
}
</code></pre>
<p>这里<a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a>表明它是一个Spring所需要的Bean，为了装配RoleServiceImpl和之前定义的Role，需要给<a href="https://github.com/ComponentScan" title="&#64;ComponentScan" class="at-link">@ComponentScan</a>注解加上对应的配置，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.chapter10.annotation.config;
import com.ssm.chapter10.annotation.service.impl.RoleServiceImpl;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Role;

@ComponentScan(basePackageClasses = {Role.class, RoleServiceImpl.class})
/*
    @ComponentScan(basePackages = {&quot;com.ssm.chapter10.annotation.pojo&quot;,
    &quot;com.ssm.chapter10.annotation.service&quot;})
 */
/*
    @ComponentScan(basePackages = {&quot;com.ssm.chapter10.annotation.pojo&quot;,
    &quot;com.ssm.chapter10.annotation.service&quot;},
    basePackageClasses = {Role.class, RoleServiceImpl.class})
 */
public class ApplicationConfig {
}
</code></pre>
<ul>
<li>3种方法可以采用任意1种。</li><li>每一次使用<a href="https://github.com/ComponentScan" title="&#64;ComponentScan" class="at-link">@ComponentScan</a>定义对应的包，Spring就会生成一个对应的新的对象，也就是说配置的Bean会生成多个实例，这往往不是我们需要的。</li><li>在同一个<a href="https://github.com/ComponentScan" title="&#64;ComponentScan" class="at-link">@ComponentScan</a>中即使重复定义相同的包或者存在其子包定义，也不会造成同一个Bean的多次扫描，而导致一次配置生成多个对象。</li></ul>
<p>因此，建议不要采用多个<a href="https://github.com/ComponentScan" title="&#64;ComponentScan" class="at-link">@ComponentScan</a>注解进行配置，优先使用basePackages，但在需要大量重构的工程中尽量不要使用，因为重构修改包名需要反复配置。</p>
<p>测试上述两个配置，代码如下所示：</p>
<pre><code class="lang-java">public class AnnotationMain {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);
        Role role = context.getBean(Role.class);
        RoleService roleService = context.getBean(RoleService.class);
        roleService.printRoleInfo(role);
        context.close();
    }
}
</code></pre>
<h3 id="h3-10-4-2-autowired"><a name="10.4.2    自动装配——@Autowired" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.4.2    自动装配——<a href="https://github.com/Autowired" title="&#64;Autowired" class="at-link">@Autowired</a></h3><p>所谓自动装配技术是一种由Spring自己发现对应的Bean，自动完成装配工作的方式。只要在需要注入的地方加上注解<a href="https://github.com/Autowired" title="&#64;Autowired" class="at-link">@Autowired</a>，Spring就会根据类型寻找定义的Bean并且将其注入。</p>
<p>下面开始测试自动装配，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.chapter10.annotation.service;

public interface RoleService2 {
    public void printRoleInfo();
}
</code></pre>
<pre><code class="lang-java">package com.ssm.chapter10.annotation.service.impl;

import com.ssm.chapter10.annotation.pojo.Role;
import com.ssm.chapter10.annotation.service.RoleService2;
import org.springframework.beans.factory.annotation.Autowired;

public class RoleServiceImpl2 implements RoleService2 {

    @Autowired
    private Role role;

    @Override
    public void printRoleInfo() {
        System.out.println(&quot;id = &quot;+role.getId());
        System.out.println(&quot;roleName = &quot;+role.getRoleName());
        System.out.println(&quot;note = &quot;+role.getNote());
    }
}
</code></pre>
<p>这里的 <a href="https://github.com/Autowired" title="&#64;Autowired" class="at-link">@Autowired</a>注解，表示在Spring IoC容器定位所有的Bean后，这个字段需要按类型注入，这样容器就会寻找资源，然后将其注入。</p>
<p>在默认情况下，容器认为必须找到对应的Bean来注入这个字段，如果寻找失败将会抛出异常。有时候这并不是一个真实的需求，比如日志有时可有可无，这时我们可以将<a href="https://github.com/Autowired" title="&#64;Autowired" class="at-link">@Autowired</a>注解的配置项required设置为false。这时如果容器找不到对应的类型，允许不注入，也不会抛出异常，但字段可能为空而导致空指针异常。在大部分情况下都不需要这样修改。</p>
<p> <a href="https://github.com/Autowired" title="&#64;Autowired" class="at-link">@Autowired</a>注解除了可以配置在属性上，也可以配置在方法上，比较常见的是配置在Bean的setter方法上完成注入，代码如下所示：</p>
<pre><code class="lang-java">public class RoleServiceImpl2 implements RoleService2 {

    private Role role;

    @Autowired
    public void setRole(Role role) {
        this.role = role;
    }
}
</code></pre>
<h3 id="h3-10-4-3-primary-qulifier-"><a name="10.4.3    自动装配的歧义性（@Primary和@Qulifier）" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.4.3    自动装配的歧义性（<a href="https://github.com/Primary" title="&#64;Primary" class="at-link">@Primary</a>和<a href="https://github.com/Qulifier" title="&#64;Qulifier" class="at-link">@Qulifier</a>）</h3><p><a href="https://github.com/AutoWire" title="&#64;AutoWire" class="at-link">@AutoWire</a>的使用方式十分简单，但是有时候并不能使用，因为该方式按类型注入。比如当一个接口存在多个实现类时。重新定义一个新的接口RoleServiceImpl3，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.chapter10.annotation.service.impl;

import com.ssm.chapter10.annotation.pojo.Role;
import com.ssm.chapter10.annotation.service.RoleService;
import org.springframework.stereotype.Component;

@Component(&quot;roleService3&quot;)
public class RoleServiceImpl3 implements RoleService {
    @Override
    public void printRoleInfo(Role role) {
        System.out.println(&quot;id = &quot;+role.getId());
        System.out.println(&quot;roleName = &quot;+role.getRoleName());
        System.out.println(&quot;note = &quot;+role.getNote());
    }
}
</code></pre>
<p>再创建一个RoleController类，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.chapter10.annotation.controller;

import com.ssm.chapter10.annotation.pojo.Role;
import com.ssm.chapter10.annotation.service.RoleService;
import org.springframework.beans.factory.annotation.Autowired;

public class RoleController {

    @Autowired
    private RoleService roleService;

    public void printRole(Role role){
        roleService.printRoleInfo(role);
    }
}
</code></pre>
<p>这里的属性roleService是一个RoleService接口类型。RoleService有两个实现类，分别是RoleServiceImpl1和RoleServiceImpl3，这时容器无法判断注入哪个对象，于是就会抛出异常。</p>
<p>因此按类型注入对象可能会因为存在多个该类型的Bean而导致注入失败。回想Spring IoC最底层容器接口——BeanFactory的定义，它存在一个通过类型获取Bean的方法：</p>
<pre><code class="lang-java">&lt;T&gt; T getBean(Class&lt;T&gt; requireType) throws BeanException;
</code></pre>
<p>通过RoleService.class作为参数就无法判断使用哪个类实例进行返回，这就是自动装配的歧义性。</p>
<p>为了消除歧义性，Spring提供了两个<a href="https://github.com/Primary" title="&#64;Primary" class="at-link">@Primary</a>和<a href="https://github.com/Qualifier" title="&#64;Qualifier" class="at-link">@Qualifier</a>。</p>
<h4 id="h4-1-primary"><a name="1、注解@Primary" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1、注解<a href="https://github.com/Primary" title="&#64;Primary" class="at-link">@Primary</a></h4><p>注解<a href="https://github.com/Primary" title="&#64;Primary" class="at-link">@Primary</a>代表首要的，当Spring IoC通过一个接口或者抽象类注入对象的时候，由于存在多个实现类或者具体类，容器不清楚注入哪个类。注解<a href="https://github.com/Primary" title="&#64;Primary" class="at-link">@Primary</a>则是告诉容器，优先使用该类注入。代码如下所示：</p>
<pre><code class="lang-java">@Component(&quot;roleService3&quot;)
@primary
public class RoleServiceImpl3 implements RoleService {
    @Override
    public void printRoleInfo(Role role) {
        System.out.println(&quot;id = &quot;+role.getId());
        System.out.println(&quot;roleName = &quot;+role.getRoleName());
        System.out.println(&quot;note = &quot;+role.getNote());
    }
}
</code></pre>
<p>这里的<a href="https://github.com/primary" title="&#64;primary" class="at-link">@primary</a>注解告诉容器，如果存在多个RoleService类型，无法判断注入哪个的时候，优先将RoleServiceImpl3的实例注入，这样就可以消除歧义性了。</p>
<h4 id="h4-2-qualifier"><a name="2、注解@Qualifier" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2、注解<a href="https://github.com/Qualifier" title="&#64;Qualifier" class="at-link">@Qualifier</a></h4><p>除了按类型查找Bean，Spring IoC容器最底层的接口BeanFactory也定义了按名称查找的方法，这样便能消除歧义性，而<a href="https://github.com/Qualifier" title="&#64;Qualifier" class="at-link">@Qualifier</a>就是这样的一个注解。</p>
<pre><code class="lang-java">public class RoleController {

    @Autowired
    @Qualifier(&quot;roleService3&quot;)
    private RoleService roleService;

    public void printRole(Role role){
        roleService.printRoleInfo(role);
    }
}
</code></pre>
<p>这时容器就不会按照类型的方式注入，而是按照名称的方式注入，这样既能注入成功，也不存在歧义性。BeanFactory定义的方法如下：</p>
<pre><code class="lang-java">Object getBean(String name) throws BeanException;
</code></pre>
<h3 id="h3-10-4-4-"><a name="10.4.4    装载有参构造方法类" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.4.4    装载有参构造方法类</h3><p>Role类的构造方法都是没带参数的，而事实上在某些时候构造方法是带参数的，对于一些带有参数的构造方法，也允许我们通过注解注入，比如有时RoleController的构造方法如下所示：</p>
<pre><code class="lang-java">@Component
public class RoleController2 {
    private RoleService roleService;

    public RoleController2(RoleService roleService) {
        this.roleService = roleService;
    }
    ...
}
</code></pre>
<p>我们仍然可以使用<a href="https://github.com/Autowired" title="&#64;Autowired" class="at-link">@Autowired</a>或者<a href="https://github.com/Qualifier" title="&#64;Qualifier" class="at-link">@Qualifier</a>进行注入，换句话说，这两个注解还能支持到参数。代码如下所示：</p>
<pre><code class="lang-java">public RoleController2(@Autowired RoleService roleService) {
    this.roleService = roleService;
}
</code></pre>
<h3 id="h3-10-4-5-bean-bean"><a name="10.4.5    使用@Bean装配Bean" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.4.5    使用<a href="https://github.com/Bean" title="&#64;Bean" class="at-link">@Bean</a>装配Bean</h3><p>之前都是通过<a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a>装配Bean，但是<a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a>只能注解在类上，不能注解到方法上，但是很多时候我们并不能修改源码。这时可以使用<a href="https://github.com/Bean" title="&#64;Bean" class="at-link">@Bean</a>，它可以注解到方法上，并将方法返回的对象作为Spring的Bean，存放在容器中。比如我们需要使用DBCP数据源，这时要引入关于它的包，然后来装配数据源的Bean。代码如下所示：</p>
<pre><code class="lang-java">@Bean(name = &quot;dataSource&quot;)
public DataSource getDataSource() {
    Properties properties = new Properties();
    properties.setProperty(&quot;driver&quot;, &quot;com.mysql.jdbc.Driver&quot;);
    properties.setProperty(&quot;url&quot;, &quot;jdbc:mysql://localhost:3306/ssm_learn&quot;);
    properties.setProperty(&quot;username&quot;, &quot;root&quot;);
    properties.setProperty(&quot;password&quot;, &quot;1234&quot;);
    DataSource dataSource = null;
    try {
        dataSource = BasicDataSourceFactory.createDataSource(properties);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return dataSource;
}
</code></pre>
<p>和其他Bean一样，它也可以通过<a href="https://github.com/Autowired" title="&#64;Autowired" class="at-link">@Autowired</a>或者Qualifier等注解注入到其它Bean中。</p>
<h2 id="h2-10-5-"><a name="10.5    装配的混合使用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.5    装配的混合使用</h2><p>在实际中，使用XML或者注解各有道理，建议在自己的工程中尽量使用注解方式，因为使用简单，而对于引入第三方包或者服务的类，尽量使用XML方式，这样的好处是可以尽量对第三方包或者服务的细节减少理解。</p>
<p>如上述代码的注入方式就存在弊端，我们通过XML方式实现，代码如下所示：</p>
<pre><code class="lang-xml">&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
    &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<p>显然我们不需要去了解第三方包的更多细节，也不需要过多的Java代码，相对于<a href="https://github.com/Bean" title="&#64;Bean" class="at-link">@Bean</a>的注入会更好一些。</p>
<p>新建一个XML文件，命名为spring-dataSource.xml，添加上述代码。我们需要通过引用它到注解的体系中，而注解的体系则需要完成对角色编号（id）为1的查询功能。</p>
<p>首先，使用注解<a href="https://github.com/importResource" title="&#64;importResource" class="at-link">@importResource</a>，引入spring-dataSource.xml所定义的内容，代码如下所示：</p>
<pre><code class="lang-java">@ComponentScan(basePackages = {&quot;com.ssm.chapter10.annotation&quot;})
@ImportResource({&quot;classpath:spring-dataSource.xml&quot;})
public class ApplicationConfig {
}
</code></pre>
<p>这时我们就可以通过<a href="https://github.com/AutoWired" title="&#64;AutoWired" class="at-link">@AutoWired</a>注入实现对数据库连接池的注入了，比如定义一个查询角色的接口——RoleDataSourceService，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.chapter10.annotation.service;
import com.ssm.chapter10.annotation.pojo.Role;
public interface RoleDataSourceService {
    public Role getRole(Long id);
}
</code></pre>
<p>然后实现该接口，代码如下所示：</p>
<pre><code class="lang-java">@Component
public class RoleDataSourceServiceImpl implements RoleDataSourceService {

    @Autowired
    private DataSource dataSource;

    @Override
    public Role getRole(Long id) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Role role = null;
        try {
            conn = dataSource.getConnection();
            ps = conn.prepareStatement(&quot;select id, role_name, note from t_role where id=?&quot;);
            ps.setLong(1, id);
            rs = ps.executeQuery();
            while (rs.next()) {
                role = new Role();
                role.setId(rs.getLong(&quot;id&quot;));
                role.setRoleName(rs.getString(&quot;role_name&quot;));
                role.setNote(rs.getString(&quot;note&quot;));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            /*close database resources*/
        }
        return role;
    }
}
</code></pre>
<p>这样便能把XML所配置的DataSource注入RoleDataSourceServiceImplement中了，同样也可以注入其他资源。</p>
<p>有时所有配置都放在一个ApplicationConfig类里面会造成配置复杂，因此就希望分为多个类似于ApplicationConfig的配置类，比如ApplicationConfig2、ApplicationConfig3等，Spring也提供了注解<a href="https://github.com/Import" title="&#64;Import" class="at-link">@Import</a>的方式注入这些配置类，代码如下所示：</p>
<pre><code class="lang-java">@ComponentScan(basePackages = {&quot;com.ssm.chapter10.annotation&quot;})
@Import({ApplicationConfig2.class, ApplicationConfig3.class})
public class ApplicationConfig {
}
</code></pre>
<p>通过这样的形式加载了多个配置文件。</p>
<p>有多个XML文件，而你希望通过其中的一个XML文件去引入其他的XML文件，假设目前有spring-bean.xml，需要引入spring-dataSource.xml，那么可以在spring-bean.xml使用import元素来加载它，如下所示：</p>
<pre><code class="lang-xml">&lt;import resource=&quot;spring-datasource.xml&quot; /&gt;
</code></pre>
<p>Spring还支持通过XML的配置扫描注解的包，只需要通过\&lt;context:component-scan\&gt;定义扫描的包就可以了，比如下面的代码功能是等同的：</p>
<pre><code class="lang-java">@ComponentScan(basePackages={&quot;com.ssm.chapter10.annotation&quot;})
</code></pre>
<pre><code class="lang-xml">&lt;context:component-scan base-package=&quot;com.ssm.chapter10.annotation&quot;/&gt;
</code></pre>
<h2 id="h2-10-6-profile"><a name="10.6    使用Profile" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.6    使用Profile</h2><p>有时有需要在不同环境中切换的需求，比如测试环境和开发环境的切换。Spring提供了Bean的Profile属性来实现这种需求。</p>
<h3 id="h3-10-6-1-profile-"><a name="10.6.1    使用注解@Profile配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.6.1    使用注解<a href="https://github.com/Profile" title="&#64;Profile" class="at-link">@Profile</a>配置</h3><p>配置两个数据库连接池，一个用于开发（dev），一个用于测试(test)，代码如下所示：</p>
<pre><code class="lang-java">@Bean(name = &quot;dataSource&quot;)
@Profile(&quot;dev&quot;)
public DataSource getDataSource() {
    ...
}
</code></pre>
<pre><code class="lang-java">@Bean(name = &quot;dataSource&quot;)
@Profile(&quot;test&quot;)
public DataSource getDataSource() {
    ...
}
</code></pre>
<p>这里定义了两个Bean，都加入了<a href="https://github.com/Profile" title="&#64;Profile" class="at-link">@Profile</a>注解，但一个值是dev，一个值是test。</p>
<h3 id="h3-10-6-2-xml-profile"><a name="10.6.2    使用XML定义Profile" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.6.2    使用XML定义Profile</h3><p>在一个XML中允许配置多个Profile，代码如下所示：</p>
<pre><code class="lang-xml">&lt;beans profile=&quot;dev&quot;&gt;
    &lt;bean id=&quot;devDataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/chapter10&quot; /&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;
        &lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;

&lt;beans profile=&quot;test&quot;&gt;
    &lt;bean id=&quot;testDataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/chapter10&quot; /&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;
        &lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<h2 id="h2-10-7-properties-"><a name="10.7    加载属性（properties）文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.7    加载属性（properties）文件</h2><p>在开发中，配置文件往往使用properties文件，比如使用配置数据库文件，新建一个database-config.properties文件，代码如下所示：</p>
<pre><code class="lang-properties">jdbc.database.driver=com.mysql.jdbc.Driver
jdbc.database.url=jdbc:mysql://localhost:3306/chapter10
jdbc.database.username=root
jdbc.database.password=123456
</code></pre>
<p>在Spring中可以使用注解或者XML的方式加载属性文件。</p>
<h3 id="h3-10-7-1-"><a name="10.7.1    使用注解方式加载属性文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.7.1    使用注解方式加载属性文件</h3><p>Spring提供了注解<a href="https://github.com/PropertySource" title="&#64;PropertySource" class="at-link">@PropertySource</a>来加载属性文件，它的配置项有：</p>
<ul>
<li>name：字符串，配置该属性配置的名称。</li><li>value：字符串数组，可以配置多个属性文件。</li><li>ignoreResourceNotFound：布尔值，默认为false，其含义为如果找不到对应的属性文件是否抛出异常。</li><li>encoding：文件编码，默认为空字符串“”。</li></ul>
<p>定义Java配置类，代码如下所示：</p>
<pre><code class="lang-java">@Configuration
@PropertySource(value={&quot;classpath:database-config.properties&quot;},ignoreResourceNotFound=true)
public class ApplicationConfig{   
}
</code></pre>
<h3 id="h3-10-7-2-xml-"><a name="10.7.2    使用XML方式加载属性文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.7.2    使用XML方式加载属性文件</h3><p>同样可以使用XML方式加载属性文件，只需要使用\&lt;context:propterty-placeholder\&gt;元素加载配置项即可。代码如下：</p>
<pre><code class="lang-xml">&lt;context:property-placeholder ignore-resource-not-found=&quot;true&quot; location=&quot;classpath:database-confg.properties&quot;/&gt;
</code></pre>
<p>ignore-resource-not-found属性表示是否忽略文件不存在，默认值为false，当为默认值时找不到中文将会抛出异常。配置多个文件时，文件名用逗号分隔。也可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;
    &lt;property name=&quot;locations&quot;&gt;
        &lt;array&gt;
             &lt;value&gt;classpath:database-config.properties&lt;/value&gt;
             &lt;value&gt;classpath:log4j.properties&lt;/value&gt;
        &lt;/array&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
<p>当需要大量配置文件的时候，使用上述方法更好。</p>
<h2 id="h2-10-8-bean"><a name="10.8    条件化装配Bean" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.8    条件化装配Bean</h2><p>在某些条件下不需要装配Bean。比如属性文件中没有database-confg.properties属性配置时，就不需要创建数据源，这时我们需要通过条件化去判断。Spring提供了注解<a href="https://github.com/Conditional" title="&#64;Conditional" class="at-link">@Conditional</a>，它可以配置一个或者多个类。只是这些了都需要实现接口Condition，我们修改关于DBCP的数据源，代码如下所示：</p>
<pre><code class="lang-JAVA">@Bean(name = &quot;dataSource&quot;)
@Conditional({DataSourceCondition.class})
public DataSource getDataSource(@Value(&quot;${jdbc.database.driver}&quot;) String driver, @Value(&quot;${jdbc.database.url}&quot;) String url, @Value(&quot;${jdbc.database.username}&quot;) String username, @Value(&quot;${jdbc.database.password}&quot; String password){
    Properties properties = new Properties();
    properties.setProperty(&quot;driver&quot;, &quot;com.mysql.jdbc.Driver&quot;);
    properties.setProperty(&quot;url&quot;, &quot;jdbc:mysql://localhost:3306/ssm_learn&quot;);
    properties.setProperty(&quot;username&quot;, &quot;root&quot;);
    properties.setProperty(&quot;password&quot;, &quot;1234&quot;);
    DataSource dataSource = null;
    try {
        dataSource = BasicDataSourceFactory.createDataSource(properties);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return dataSource;
}
</code></pre>
<p>这里通过<a href="https://github.com/Value" title="&#64;Value" class="at-link">@Value</a>往参数里注入了对应属性文件的配置，但是我们没有办法确定这些数据源连接池的属性是否在属性文件中已经配置完整，如果是不充足的属性配置，则会引起创建失败，为此要判断属性文件的配置是否充足才能继续创建Bean。通过<a href="https://github.com/Conditional" title="&#64;Conditional" class="at-link">@Conditional</a>去引入了一个类——DataSourceCondition，由它来判断。这个类的代码如下所示：</p>
<pre><code class="lang-java">public class DataSourceCondition implements Condition {
    @Override
    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
        //获取上下文环境
        Environment env = context.getEnvironment();
        //判断是否存在关于数据源的基础配置
        return env.containsProperty(&quot;jdbc.database.driver&quot;) 
                &amp;&amp; env.containsProperty(&quot;jdbc.database.url&quot;)
                &amp;&amp; env.containsProperty(&quot;jdbc.database.username&quot;)
                &amp;&amp; env.containsProperty(&quot;jdbc.database.password&quot;);
    }
}
</code></pre>
<p>这里要求DataSourceCondition实现接口Condition的matches方法，该方法有两个参数，一个是ConditionContext，通过它可以获得Spring的上下文，另一个是AnnotatedTypeMetadata，通过它可以获得关于该Bean的注解信息。这里获取了上下文环境，然后判断该环境中的属性文件是否配置了数据库的相关参数，有则返回true，那么Spring会去创建对应的Bean，否则不创建。</p>
<h2 id="h2-10-9-bean-"><a name="10.9    Bean的作用域" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.9    Bean的作用域</h2><p>在默认情况下，Spring IoC容器只会为一个Bean创建一个实例，比如下面的测试：</p>
<pre><code class="lang-java">AplicationContext ctx = new ClassPathApplicationContext(&quot;spring-props.xml&quot;);
RoleDataSourceService roleService1 = ctx.getBean(RoleDataSourceService.class);
RoleDataSourceService roleService2 = ctx.getBean(RoleDataSourceService.class);
System.out.println(roleService1 ==  roleService2);
</code></pre>
<p>由于roleService1与roleService2是同一个对象，结果将显示true。</p>
<p>有时候我们希望通过容器获取某个Bean的多个实例，比如Strut2中的Action往往绑定从页面请求过来的订单，如果它也是一个实例，那么订单从头至尾只有一个，不符合互联网的并发要求。</p>
<p>Spring提供了4种作用域，它会根据情况来决定是否生成新的对象。</p>
<ul>
<li>单例（Singleton）：默认选项，在整个应用中，Spring只为其生成一个Bean的实例。</li><li>原型（prototype）：当每次注入或者通过容器获取Bean时，Spring都为其创建一个新的实例。</li><li>会话（Session）：在Web应用中使用，在一次会话过程中，Spring只为其创建一个实例。</li><li>请求（Request）：在Web应用中使用，在一次请求过程中，Spring只为其创建一个实例。</li></ul>
<p>会话和请求只能在Web应用中使用，比较少用。</p>
<p>修改RoleDataSourceServiceImpl类，代码如下所示：</p>
<pre><code class="lang-java">@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class RoleDataSourceServiceImpl implements RoleDataSourceService {
    ...
}
</code></pre>
<p>将RoleDataSourceServiceImpl的作用域改为prototype，再次进行测试，会发现结果显示false，这表示它们是两个不相同的实例。</p>
<h2 id="h2-10-10-spring-spring-el-"><a name="10.10    使用Spring表达式（Spring EL）" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.10    使用Spring表达式（Spring EL）</h2><p>Spring提供了更为灵活的注入方式——Spring EL。它拥有很多功能：</p>
<ul>
<li>通过Bean的id来引用Bean。</li><li>调用指定对象的方法和访问对象的属性，</li><li>进行运算。</li><li>提供正则表达式匹配。</li><li>集合配置。</li></ul>
<h3 id="h3-10-10-1-spring-el-"><a name="10.10.1    Spring EL相关的类" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.10.1    Spring EL相关的类</h3><h3 id="h3-10-10-2-bean-"><a name="10.10.2    Bean的属性和方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.10.2    Bean的属性和方法</h3><p>使用注解<a href="https://github.com/Value" title="&#64;Value" class="at-link">@Value</a>，读取属性文件使用的是“$”,而在SpringEL中则使用“#”。以Role类为例，初始化它的属性，代码如下所示：</p>
<pre><code class="lang-java">@Component(&quot;role&quot;)
public class Role {
    // 赋值long型
    @Value(&quot;#{1}&quot;)
    private Long id;
    // 字符串赋值
    @Value(&quot;#{&#39;role_name_1&#39;}&quot;)
    private String roleName;
    // 字符串赋值
    @Value(&quot;#{&#39;note_1&#39;}&quot;)
    private String note;
    /*getter and setter*/
}
</code></pre>
<p>这样就定义了一个名为role的Bean了，并且为它的属性赋值。这时可以通过另外一个Bean去引用它的属性或者调用它的方法，比如新建一个ElBean作为测试，代码如下所示：</p>
<pre><code class="lang-java">@Component(&quot;elBean&quot;)
public class ElBean {

    //通过beanName获取bean，然后注入
    @Value(&quot;#{role}&quot;)
    private Role role;

    //获取bean的属性id
    @Value(&quot;#{role.id}&quot;)
    private Long id;

    //调用bean的getNote方法，获取角色名称
    @Value(&quot;#{role.getNote().toString()}&quot;)
    private String note;

     /*getter and setter*/
}
</code></pre>
<p>我们可以通过BeanName进行注入，也可以通过OGNL获取其属性或者调用其方法来注入其他的Bean。</p>
<h3 id="h3-10-10-3-"><a name="10.10.3    使用类的静态常量和方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.10.3    使用类的静态常量和方法</h3><p>有时候我们可能希望使用一些静态方法和常量，比如圆周率π。而在Java中就是Math类的PI常量了，注入它非常简单，代码如下所示：</p>
<pre><code class="lang-java">@Value(&quot;#{T(Math).PI}&quot;)
private double pi;
</code></pre>
<p>这里的Math代表的是java.lang.*包下的Math类。当在Java代码中使用该包是不需要导入的，对于SpringEL也是如此。如果在Spring中使用一个非该包的内容，那么要给出该类的全限定名，类似这样：</p>
<pre><code class="lang-java">@Value(&quot;#{T(java.lang.Math).PI}&quot;)
private double pi;
</code></pre>
<h3 id="h3-10-10-4-spring-el-"><a name="10.10.4    Spring EL运算" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.10.4    Spring EL运算</h3><p>SpringEL还可以进行运算，比如在ElBean上增加一个数字num，其值默认是角色编号+1，那么我们可以写成：</p>
<pre><code class="lang-java">@Value(&quot;#{role.id + 1}&quot;)
private long num;
</code></pre>
<p>有时候“+”运算符也可以运用在字符串的连接上，比如：</p>
<pre><code class="lang-java">@Value(&quot;#{role.roleName + role.note}&quot;)
private String str;
</code></pre>
<p>数字和字符串都可以使用“eq”或者“==”进行相等比较。除此之外，还有大于、小于等数字运行，比如：</p>
<pre><code class="lang-java">@Value(&quot;#{role.id == 1}&quot;)
private boolean equalNum;

@Value(&quot;#{role.note eq &#39;note_1&#39;}&quot;)
private boolean equalString;

@Value(&quot;#{role.id &gt; 2}&quot;)
private boolean greater;

@Value(&quot;#{role.id &lt; 2}&quot;)
private booleanless;
</code></pre>
<p>还可以使用三目运算符，比如：</p>
<pre><code class="lang-java">int max = (role.getId()&gt;1 ? 5 : 1);
</code></pre>
<pre><code class="lang-java">String defualtString = (role.getNote() == null ? &quot;hello&quot; : role.getNote());
</code></pre>
<p>通过Spring EL实现上述功能：</p>
<pre><code class="lang-java">@Value(&quot;#{role.getId()&gt;1 ? 5 : 1}&quot;)
private int max;
@Value(&quot;#{role.note?:&#39;hello&#39;}&quot;)
private String defaultString;
</code></pre>
<p>Spring EL的功能远不止这些，这里直接说最基础最常用的功能。</p>
(String), ##10.1	依赖注入的3种方式

在实际环境中实现IoC容器的方式主要分为两大类，一类是依赖查找，依赖查找是通过资源定位查找对应资源；另一类是依赖注入，而Spring主要使用的是依赖注入。一般而言，依赖注入可以分为3种方式：

- 构造器注入；
- setter注入；
- 接口注入

构造器注入和setter注入是主要方式，而接口注入是从别的地方注入的方式，比如在Web工程中，往往是通过服务器（比如Tomcat）来配置数据源，这时可以用JNDI的形式通过接口将它注入Spring IoC容器中。

### 10.1.1	构造器注入

在大部分情况下，我们都是通过类的构造方法来创建类的对象，Spring也可以采用反射的方式，通过使用构造方法来完成注入，这就是构造器注入的原理。我们以角色类为例，代码如下：

```java
package com.ssm.chapter9.pojo;

public class Role {
	private Long id;
	private String roleName;
	private String note;
	
   	/*getter and setter*/
    
    public Role(Long id, String roleName, String note) {
		this.id = id;
		this.roleName = roleName;
		this.note = note;
	}
}

```

这时不能利用无参构造创建对象，为了使Spring能够正确创建对象，需要像这样做。代码如下所示：

```xml
<bean id="role1" class="com.ssm.chapter10.Role">
    <constructor-arg index="0" value="1"/>
    <constructor-arg index="1" value="总经理"/>
    <constructor-arg index="2" value="公司管理者"/>
</bean>
```

constructor-arg元素用于定义类构造方法的参数，其中index用于定义参数位置（从0开始），而value则是设置值。通过这样定义Spring便知道使用Role(Long, String, String)这样的构造方法去创建对象了。

这样注入虽然简单，但是如果参数很多，这样的构造方法就很复杂了，这时可以考虑使用setter注入。

### 10.1.2	setter注入

setter注入是Spring中最常见的注入方法，利用JavaBean定义的setter方法完成注入，灵活且可读性高。首先可以把构造方法声明为无参数的，然后使用setter注入为其设置对应的值。先在Role类中添加无参构造，然后完成配置。代码如下所示：

```xml
<bean id="role2" class="com.ssm.chapter10.Role">
    <property name="id" value="2"/>
    <property name="roleName" value="高级工程师"/>
    <property name="note" value="重要人员"/>
</bean>
```



### 10.1.3	接口注入

有时候资源来自于外界，比如数据库连接资源完全可以在Tomcat下配置，然后通过JNDI的方式获取，这时我们需要采用接口注入的形式获取它。代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<Context>
	<Resource name="jdbc/ssm" auth="Container" type="javax.sql.DataSource" driverClassName="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:3306/ssm" username="root" password="1234" />
</Context>
```

如果Tomcat的Web工程使用了Spring，那么可以通过Spring的机制，用JNDI获取Tomcat启动的数据库连接池，代码如下所示：

```xml
<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName">
        <value>java:comp/env/jdbc/ssm</value>
    </property>
</bean>
```

##10.2	装配Bean概述

在Spring中提供3种方法进行配置：

- 在XML中显式配置；
- 在Java的接口和类中实现配置；
- 隐式Bean的发现机制和自动装配原则。

这3种方法在实际开发中被会被用到，使用优先级的建议如下：

1. 基于约定优于配置的原则，应该最优先使用通过隐式Bean的发现机制和自动装配的原则，这样简单灵活。
2. 没有办法使用自动装配原则的情况下优先考虑Java接口和类中实现配置，这样可以避免XML配置的泛滥。这种场景典型的例子是一个父类有多个子类。比如学生类有两个子类：男学生类和女学生类，通过IoC容器初始化一个学生类，容器将不知道初始化哪个子类，这个时候可以使用Java的注解配置指定。
3. 在上述方法都无法使用的情况下，那么只能选择XML配置。由于实际开发中常常使用第三方类库，我们无法修改源码，这是就可以通过XML配置。

总而言之，可以修改源码则优先使用自动装配，这样可以减少大量的XML配置。不能修改源码则使用XML配置。

##10.3	通过XML配置装配Bean

使用XML装配Bean需要定义对应的XML，这里需要引入对应的XML模式（XSD）文件，这些文件会定义配置Spring Bean的一些元素，一个简单的配置如下：

```xml
<?xml version='1.0' encoding='UTF-8' ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
   <!--Spring Bean配置代码-->
</beans>
```

### 10.3.1	装配简易值

一个简单的装配，代码如下所示：

```xml
<bean id="role2" class="com.ssm.chapter10.Role">
    <property name="id" value="2"/>
    <property name="roleName" value="高级工程师"/>
    <property name="note" value="重要人员"/>
</bean>
```

- id属性是Spring寻找Bean的标识，但不是必需的属性，缺省时Spring将采用“全限定名#{number}”的格式生成标识。在这里，标识是“com.ssm.chapter9.pojo.Role#0”。第二次声明就是“com.ssm.chapter9.pojo.Role#1”。建议自定义id，比较简单。

- class属性是类的全限定名。

- property元素是注入类的属性，其中name属性是注入属性名称，value属性注入属性的值。如果需要注入一些自定义的类，比如之前的果汁制作器例子，需要先定义原料的Bean，然后在制作器中引用原料。代码如下所示：

  ```xml
  <bean id="source" class="com.ssm.chapter9.pojo.Source">
  		<property name="fruit" value="橙汁" />
  		<property name="sugar" value="少糖" />
  		<property name="size" value="大杯" />
  	</bean>
  
  	<bean id="juiceMaker2" class="com.ssm.chapter9.pojo.JuiceMaker2">
  		<property name="beverageShop" value="贡茶" />
  		<property name="source" ref="source" />
  	</bean>
  ```

  这里定义了一个id为source的Bean，然后在制作器中通过ref属性去引用对应的Bean。

### 10.3.2    装配集合

有些时候要做一些复杂的装配工作，比如Set、Map、List、Array和Properties等。我们首先定义一个JavaBean，代码如下所示：

```java
package com.ssm.chapter10.pojo;

import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

public class ComplexAssembly {

   private Long id;
   private List<String> list;
   private Map<String, String> map;
   private Properties props;
   private Set<String> set;
   private String[] array;
    
   /*getter and setter*/
}
```

装配这些常用的集合类，代码如下所示：

```xml
<bean id="complexAssembly" class="com.ssm.chapter10.pojo.ComplexAssembly">
    <property name="id" value="1"/>

    <property name="list">
        <list>
            <value>value-list-1</value>
            <value>value-list-1</value>
            <value>value-list-1</value>
        </list>
    </property>

    <property name="map">
        <map>
            <entry key="key1" value="value-key-1"/>
            <entry key="key2" value="value-key-2"/>
            <entry key="key3" value="value-key-3"/>
        </map>
    </property>

    <property name="props">
        <props>
            <prop key="prop1">value-prop-1</prop>
            <prop key="prop2">value-prop-2</prop>
            <prop key="prop3">value-prop-3</prop>
        </props>
    </property>

    <property name="set">
        <set>
            <value>value-set-1</value>
            <value>value-set-2</value>
            <value>value-set-3</value>
        </set>
    </property>

    <property name="array">
        <array>
            <value>value-array-1</value>
            <value>value-array-2</value>
            <value>value-array-3</value>
        </array>
    </property>
</bean>
```

- List集合属性使用\<list\>元素注入，\<value\>元素指定了该集合装配的值。

- Map集合属性使用\<map\>元素注入，\<entry\>元素指定了该集合装配的键值对，其中key属性为键值，value属性为对应的值。
- Properties集合属性使用\<props\>元素注入，\<prop\>元素指定了该集合装配的Property，其中key属性为键值，该元素包裹的值为设置的值。
- Set集合属性使用\<set\>元素注入，\<value\>元素指定了该集合装配的值。
- Array数组属性使用\<Array\>元素注入，\<value\>元素指定了该数组装配的值。

从上面可以看到各个集合对字符串的装载，但是有时需要更复杂的装载，比如这些集合中装载的是类对象。为此先创建2个POJO，代码如下所示：

```java
public class Role {
   private Long id;
   private String roleName;
   private String note;
	
   /*getter and setter*/
    
   public Role() {
   }

   public Role(Long id, String roleName, String note) {
      this.id = id;
      this.roleName = roleName;
      this.note = note;
   }
}
```

```java
public class User {
   private Long id;
   private String userName;
   private String note;
    
   /*getter and setter*/
}
```

再创建一个稍微复杂的POJO，装配用户和角色类，代码如下所示：

```java
public class UserRoleAssembly {
   
   private Long id;
   private List<Role> list;
   private Map<Role, User> map;
   private Set<Role> set;
   
   /*getter and setter*/
}
```

修改配置文件，代码如下：

```xml
<bean id="role1" class="com.ssm.chapter10.pojo.Role">
    <property name="id" value="1"/>
    <property name="roleName" value="role_name_1"/>
    <property name="note" value="role_note_1"/>
</bean>

<bean id="role2" class="com.ssm.chapter10.pojo.Role">
    <property name="id" value="2"/>
    <property name="roleName" value="role_name_2"/>
    <property name="note" value="role_note_2"/>
</bean>

<bean id="user1" class="com.ssm.chapter10.pojo.User">
    <property name="id" value="1"/>
    <property name="userName" value="user_name_1"/>
    <property name="note" value="user_note_1"/>
</bean>

<bean id="user2" class="com.ssm.chapter10.pojo.User">
    <property name="id" value="2"/>
    <property name="userName" value="user_name_2"/>
    <property name="note" value="user_note_2"/>
</bean>

<bean id="userRoleAssembly" class="com.ssm.chapter10.pojo.UserRoleAssembly">
    <property name="id" value="1"/>
    <property name="list">
        <list>
            <ref bean="role1"/>
            <ref bean="role2"/>
        </list>
    </property>

    <property name="map">
        <map>
            <entry key-ref="role1" value-ref="user1"/>
            <entry key-ref="role2" value-ref="user2"/>
        </map>
    </property>

    <property name="set">
        <set>
            <ref bean="role1"/>
            <ref bean="role2"/>
        </set>
    </property>
</bean>
```

- List集合属性使用\<list\>元素注入，\<ref\>元素指定该集合装配的对象，bean属性引用已定义的Bean。

- Map集合属性使用\<map\>元素注入，\<entry\>元素指定该集合装配的键值对，key-ref属性引用已定义的Bean作为键值，value-ref属性引用已定义的Bean作为对应的值。
- Set集合属性使用\<set\>元素注入，\<ref\>元素指定该集合装配的对象，bean属性引用已定义的Bean。

##10.4    通过注解装配Bean

使用注解可以减少XML的配置，注解功能更强大，既能实现XML的功能，也提供自动装配的功能。

在Spring中，它提供了两种方式来让Spring IoC容器发现Bean。

- 组件扫描：通过定义资源的方式，让Spring IoC容器扫描对应的包，从而把Bean装配进来。
- 自动装配：通过注解定义，使得一些依赖关系可以通过注解完成。

通过组件扫描和自动装配，大部分工程都可以使用Java配置完成。但是不使用XML也存在一定弊端，比如系统存在多个公共配置（比如多个properties和XML文件），如果写在注解里，那么公共资源的配置就显得比较分散，不利于统一管理，这是使用XML更加明确一些。

### 10.4.1	使用@Component装配Bean

首先定义一个POJO。代码如下所示：

```java
@Component(value = "role")
public class Role {
   @Value("1")
   private Long id;
   @Value("role_name_1")
   private String roleName;
   @Value("role_note_1")
   private String note;
    
   /*getter and setter*/
}
```

- 注解@Component表明Spring IoC容器会扫描这个类并生成Bean实例，而其中的value属性表明这个类在容器中的id，相当于XML方式定义的Bean的id属性。也可以简写成`@Component("role")`。甚至直接写成@Component，这样的话容器将为其生成默认id，其值为首字母小写的类名，这里是“role”。
- 注解@Value表明为属性注入值。注入的时候Spring会为其转化类型。

此时容器还并不知道去哪里扫描对象，所有还需要使用一个Java Config来告诉它，代码如下所示：

```java
package com.ssm.chapter10.annotation.pojo;

import org.springframework.context.annotation.ComponentScan;
@ComponentScan
public class PojoConfig {
}
```

- 包名和POJO保持一致。
- @ComponentScan表明扫描组件，默认扫描当前包的路径，POJO的包名和它保持一致才能扫描。

接下来就可以通过Spring定义好的Spring IoC容器的实现类——AnnotationConfigApplicationContext生成IoC容器了，代码如下所示：

```java
public class AnnotationMain {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(PojoConfig.class);
        Role role = ctx.getBean(Role.class);
        System.out.println(role);
    }
}
```

很多时候我们只需要扫描特定的类而不是整一个包，下面我们解决这个问题。另外，@Value只能注入简单值，注入对象可使用@Autowired。

@ComponentScan有两个配置项，第一个是basePackages，可以配置一个Java包的数组，Spring会根据配置扫描对应的包和子包，装配配置好的Bean；第二个是basePackageClasses，可以配置多个类，Spring会根据配置的类所在的包，为包和子包进行扫描，装配对应配置的Bean。

为了验证@ComponentScan的两个配置项，我们首先声明一个接口RoleService，代码如下所示：

```java
import com.ssm.chapter10.annotation.pojo.Role;

public interface RoleService {
    public void printRoleInfo(Role role);
}
```

然后，创建一个实现类，代码如下所示：

```java
package com.ssm.chapter10.annotation.service.impl;
import com.ssm.chapter10.annotation.pojo.Role;
import com.ssm.chapter10.annotation.service.RoleService;
import org.springframework.stereotype.Component;

@Component
public class RoleServiceImpl implements RoleService {
    @Override
    public void printRoleInfo(Role role) {
        System.out.println("id = "+role.getId());
        System.out.println("roleName = "+role.getRoleName());
        System.out.println("note = "+role.getNote());
    }
}
```

这里@Component表明它是一个Spring所需要的Bean，为了装配RoleServiceImpl和之前定义的Role，需要给@ComponentScan注解加上对应的配置，代码如下所示：

```java
package com.ssm.chapter10.annotation.config;
import com.ssm.chapter10.annotation.service.impl.RoleServiceImpl;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Role;

@ComponentScan(basePackageClasses = {Role.class, RoleServiceImpl.class})
/*
    @ComponentScan(basePackages = {"com.ssm.chapter10.annotation.pojo",
    "com.ssm.chapter10.annotation.service"})
 */
/*
    @ComponentScan(basePackages = {"com.ssm.chapter10.annotation.pojo",
    "com.ssm.chapter10.annotation.service"},
    basePackageClasses = {Role.class, RoleServiceImpl.class})
 */
public class ApplicationConfig {
}
```

- 3种方法可以采用任意1种。
- 每一次使用@ComponentScan定义对应的包，Spring就会生成一个对应的新的对象，也就是说配置的Bean会生成多个实例，这往往不是我们需要的。
- 在同一个@ComponentScan中即使重复定义相同的包或者存在其子包定义，也不会造成同一个Bean的多次扫描，而导致一次配置生成多个对象。

因此，建议不要采用多个@ComponentScan注解进行配置，优先使用basePackages，但在需要大量重构的工程中尽量不要使用，因为重构修改包名需要反复配置。

测试上述两个配置，代码如下所示：

```java
public class AnnotationMain {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);
        Role role = context.getBean(Role.class);
        RoleService roleService = context.getBean(RoleService.class);
        roleService.printRoleInfo(role);
        context.close();
    }
}
```

### 10.4.2	自动装配——@Autowired

所谓自动装配技术是一种由Spring自己发现对应的Bean，自动完成装配工作的方式。只要在需要注入的地方加上注解@Autowired，Spring就会根据类型寻找定义的Bean并且将其注入。

下面开始测试自动装配，代码如下所示：

```java
package com.ssm.chapter10.annotation.service;

public interface RoleService2 {
    public void printRoleInfo();
}
```

```java
package com.ssm.chapter10.annotation.service.impl;

import com.ssm.chapter10.annotation.pojo.Role;
import com.ssm.chapter10.annotation.service.RoleService2;
import org.springframework.beans.factory.annotation.Autowired;

public class RoleServiceImpl2 implements RoleService2 {

    @Autowired
    private Role role;

    @Override
    public void printRoleInfo() {
        System.out.println("id = "+role.getId());
        System.out.println("roleName = "+role.getRoleName());
        System.out.println("note = "+role.getNote());
    }
}
```

这里的 @Autowired注解，表示在Spring IoC容器定位所有的Bean后，这个字段需要按类型注入，这样容器就会寻找资源，然后将其注入。

在默认情况下，容器认为必须找到对应的Bean来注入这个字段，如果寻找失败将会抛出异常。有时候这并不是一个真实的需求，比如日志有时可有可无，这时我们可以将@Autowired注解的配置项required设置为false。这时如果容器找不到对应的类型，允许不注入，也不会抛出异常，但字段可能为空而导致空指针异常。在大部分情况下都不需要这样修改。

 @Autowired注解除了可以配置在属性上，也可以配置在方法上，比较常见的是配置在Bean的setter方法上完成注入，代码如下所示：

```java
public class RoleServiceImpl2 implements RoleService2 {

    private Role role;
    
    @Autowired
    public void setRole(Role role) {
        this.role = role;
    }
}

```

### 10.4.3	自动装配的歧义性（@Primary和@Qulifier）

@AutoWire的使用方式十分简单，但是有时候并不能使用，因为该方式按类型注入。比如当一个接口存在多个实现类时。重新定义一个新的接口RoleServiceImpl3，代码如下所示：

```java
package com.ssm.chapter10.annotation.service.impl;

import com.ssm.chapter10.annotation.pojo.Role;
import com.ssm.chapter10.annotation.service.RoleService;
import org.springframework.stereotype.Component;

@Component("roleService3")
public class RoleServiceImpl3 implements RoleService {
    @Override
    public void printRoleInfo(Role role) {
        System.out.println("id = "+role.getId());
        System.out.println("roleName = "+role.getRoleName());
        System.out.println("note = "+role.getNote());
    }
}
```

再创建一个RoleController类，代码如下所示：

```java
package com.ssm.chapter10.annotation.controller;

import com.ssm.chapter10.annotation.pojo.Role;
import com.ssm.chapter10.annotation.service.RoleService;
import org.springframework.beans.factory.annotation.Autowired;

public class RoleController {

    @Autowired
    private RoleService roleService;

    public void printRole(Role role){
        roleService.printRoleInfo(role);
    }
}
```

这里的属性roleService是一个RoleService接口类型。RoleService有两个实现类，分别是RoleServiceImpl1和RoleServiceImpl3，这时容器无法判断注入哪个对象，于是就会抛出异常。

因此按类型注入对象可能会因为存在多个该类型的Bean而导致注入失败。回想Spring IoC最底层容器接口——BeanFactory的定义，它存在一个通过类型获取Bean的方法：

```java
<T> T getBean(Class<T> requireType) throws BeanException;
```

通过RoleService.class作为参数就无法判断使用哪个类实例进行返回，这就是自动装配的歧义性。

为了消除歧义性，Spring提供了两个@Primary和@Qualifier。

#### 1、注解@Primary

注解@Primary代表首要的，当Spring IoC通过一个接口或者抽象类注入对象的时候，由于存在多个实现类或者具体类，容器不清楚注入哪个类。注解@Primary则是告诉容器，优先使用该类注入。代码如下所示：

```java
@Component("roleService3")
@primary
public class RoleServiceImpl3 implements RoleService {
    @Override
    public void printRoleInfo(Role role) {
        System.out.println("id = "+role.getId());
        System.out.println("roleName = "+role.getRoleName());
        System.out.println("note = "+role.getNote());
    }
}
```

这里的@primary注解告诉容器，如果存在多个RoleService类型，无法判断注入哪个的时候，优先将RoleServiceImpl3的实例注入，这样就可以消除歧义性了。

#### 2、注解@Qualifier

除了按类型查找Bean，Spring IoC容器最底层的接口BeanFactory也定义了按名称查找的方法，这样便能消除歧义性，而@Qualifier就是这样的一个注解。

```java
public class RoleController {

    @Autowired
    @Qualifier("roleService3")
    private RoleService roleService;

    public void printRole(Role role){
        roleService.printRoleInfo(role);
    }
}
```

这时容器就不会按照类型的方式注入，而是按照名称的方式注入，这样既能注入成功，也不存在歧义性。BeanFactory定义的方法如下：

```java
Object getBean(String name) throws BeanException;
```

### 10.4.4	装载有参构造方法类

Role类的构造方法都是没带参数的，而事实上在某些时候构造方法是带参数的，对于一些带有参数的构造方法，也允许我们通过注解注入，比如有时RoleController的构造方法如下所示：

```java
@Component
public class RoleController2 {
    private RoleService roleService;

    public RoleController2(RoleService roleService) {
        this.roleService = roleService;
    }
	...
}

```

我们仍然可以使用@Autowired或者@Qualifier进行注入，换句话说，这两个注解还能支持到参数。代码如下所示：

```java
public RoleController2(@Autowired RoleService roleService) {
    this.roleService = roleService;
}
```

### 10.4.5	使用@Bean装配Bean

之前都是通过@Component装配Bean，但是@Component只能注解在类上，不能注解到方法上，但是很多时候我们并不能修改源码。这时可以使用@Bean，它可以注解到方法上，并将方法返回的对象作为Spring的Bean，存放在容器中。比如我们需要使用DBCP数据源，这时要引入关于它的包，然后来装配数据源的Bean。代码如下所示：

```java
@Bean(name = "dataSource")
public DataSource getDataSource() {
    Properties properties = new Properties();
    properties.setProperty("driver", "com.mysql.jdbc.Driver");
    properties.setProperty("url", "jdbc:mysql://localhost:3306/ssm_learn");
    properties.setProperty("username", "root");
    properties.setProperty("password", "1234");
    DataSource dataSource = null;
    try {
        dataSource = BasicDataSourceFactory.createDataSource(properties);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return dataSource;
}
```

和其他Bean一样，它也可以通过@Autowired或者Qualifier等注解注入到其它Bean中。

## 10.5	装配的混合使用

在实际中，使用XML或者注解各有道理，建议在自己的工程中尽量使用注解方式，因为使用简单，而对于引入第三方包或者服务的类，尽量使用XML方式，这样的好处是可以尽量对第三方包或者服务的细节减少理解。

如上述代码的注入方式就存在弊端，我们通过XML方式实现，代码如下所示：

```xml
<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
    <property name="username" value="root"/>
    <property name="password" value="1234"/>
</bean>
```

显然我们不需要去了解第三方包的更多细节，也不需要过多的Java代码，相对于@Bean的注入会更好一些。

新建一个XML文件，命名为spring-dataSource.xml，添加上述代码。我们需要通过引用它到注解的体系中，而注解的体系则需要完成对角色编号（id）为1的查询功能。

首先，使用注解@importResource，引入spring-dataSource.xml所定义的内容，代码如下所示：

```java
@ComponentScan(basePackages = {"com.ssm.chapter10.annotation"})
@ImportResource({"classpath:spring-dataSource.xml"})
public class ApplicationConfig {
}
```



这时我们就可以通过@AutoWired注入实现对数据库连接池的注入了，比如定义一个查询角色的接口——RoleDataSourceService，代码如下所示：

```java
package com.ssm.chapter10.annotation.service;
import com.ssm.chapter10.annotation.pojo.Role;
public interface RoleDataSourceService {
    public Role getRole(Long id);
}
```

然后实现该接口，代码如下所示：

```java
@Component
public class RoleDataSourceServiceImpl implements RoleDataSourceService {

    @Autowired
    private DataSource dataSource;

    @Override
    public Role getRole(Long id) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Role role = null;
        try {
            conn = dataSource.getConnection();
            ps = conn.prepareStatement("select id, role_name, note from t_role where id=?");
            ps.setLong(1, id);
            rs = ps.executeQuery();
            while (rs.next()) {
                role = new Role();
                role.setId(rs.getLong("id"));
                role.setRoleName(rs.getString("role_name"));
                role.setNote(rs.getString("note"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            /*close database resources*/
        }
        return role;
    }
}
```

这样便能把XML所配置的DataSource注入RoleDataSourceServiceImplement中了，同样也可以注入其他资源。

有时所有配置都放在一个ApplicationConfig类里面会造成配置复杂，因此就希望分为多个类似于ApplicationConfig的配置类，比如ApplicationConfig2、ApplicationConfig3等，Spring也提供了注解@Import的方式注入这些配置类，代码如下所示：

```java
@ComponentScan(basePackages = {"com.ssm.chapter10.annotation"})
@Import({ApplicationConfig2.class, ApplicationConfig3.class})
public class ApplicationConfig {
}
```

通过这样的形式加载了多个配置文件。

有多个XML文件，而你希望通过其中的一个XML文件去引入其他的XML文件，假设目前有spring-bean.xml，需要引入spring-dataSource.xml，那么可以在spring-bean.xml使用import元素来加载它，如下所示：

```xml
<import resource="spring-datasource.xml" />
```

Spring还支持通过XML的配置扫描注解的包，只需要通过\<context:component-scan\>定义扫描的包就可以了，比如下面的代码功能是等同的：

```java
@ComponentScan(basePackages={"com.ssm.chapter10.annotation"})
```

```xml
<context:component-scan base-package="com.ssm.chapter10.annotation"/>
```

## 10.6	使用Profile

有时有需要在不同环境中切换的需求，比如测试环境和开发环境的切换。Spring提供了Bean的Profile属性来实现这种需求。

### 10.6.1	使用注解@Profile配置

配置两个数据库连接池，一个用于开发（dev），一个用于测试(test)，代码如下所示：

```java
@Bean(name = "dataSource")
@Profile("dev")
public DataSource getDataSource() {
    ...
}
```

```java
@Bean(name = "dataSource")
@Profile("test")
public DataSource getDataSource() {
	...
}
```

这里定义了两个Bean，都加入了@Profile注解，但一个值是dev，一个值是test。

### 10.6.2	使用XML定义Profile

在一个XML中允许配置多个Profile，代码如下所示：

```xml
<beans profile="dev">
    <bean id="devDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/chapter10" />
        <property name="username" value="root" />
        <property name="password" value="123456" />
    </bean>
</beans>

<beans profile="test">
    <bean id="testDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/chapter10" />
        <property name="username" value="root" />
        <property name="password" value="123456" />
    </bean>
</beans>
```

## 10.7	加载属性（properties）文件

在开发中，配置文件往往使用properties文件，比如使用配置数据库文件，新建一个database-config.properties文件，代码如下所示：

```properties
jdbc.database.driver=com.mysql.jdbc.Driver
jdbc.database.url=jdbc:mysql://localhost:3306/chapter10
jdbc.database.username=root
jdbc.database.password=123456
```

在Spring中可以使用注解或者XML的方式加载属性文件。

### 10.7.1	使用注解方式加载属性文件

Spring提供了注解@PropertySource来加载属性文件，它的配置项有：

- name：字符串，配置该属性配置的名称。
- value：字符串数组，可以配置多个属性文件。
- ignoreResourceNotFound：布尔值，默认为false，其含义为如果找不到对应的属性文件是否抛出异常。
- encoding：文件编码，默认为空字符串“”。

定义Java配置类，代码如下所示：

```java
@Configuration
@PropertySource(value={"classpath:database-config.properties"},ignoreResourceNotFound=true)
public class ApplicationConfig{   
}
```

### 10.7.2	使用XML方式加载属性文件

同样可以使用XML方式加载属性文件，只需要使用\<context:propterty-placeholder\>元素加载配置项即可。代码如下：

```xml
<context:property-placeholder ignore-resource-not-found="true" location="classpath:database-confg.properties"/>
```

ignore-resource-not-found属性表示是否忽略文件不存在，默认值为false，当为默认值时找不到中文将会抛出异常。配置多个文件时，文件名用逗号分隔。也可以这样配置，代码如下：

```xml
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <array>
             <value>classpath:database-config.properties</value>
        	 <value>classpath:log4j.properties</value>
        </array>
    </property>
</bean>
```

当需要大量配置文件的时候，使用上述方法更好。

## 10.8	条件化装配Bean

在某些条件下不需要装配Bean。比如属性文件中没有database-confg.properties属性配置时，就不需要创建数据源，这时我们需要通过条件化去判断。Spring提供了注解@Conditional，它可以配置一个或者多个类。只是这些了都需要实现接口Condition，我们修改关于DBCP的数据源，代码如下所示：

```JAVA
@Bean(name = "dataSource")
@Conditional({DataSourceCondition.class})
public DataSource getDataSource(@Value("${jdbc.database.driver}") String driver, @Value("${jdbc.database.url}") String url, @Value("${jdbc.database.username}") String username, @Value("${jdbc.database.password}" String password){
    Properties properties = new Properties();
    properties.setProperty("driver", "com.mysql.jdbc.Driver");
    properties.setProperty("url", "jdbc:mysql://localhost:3306/ssm_learn");
    properties.setProperty("username", "root");
    properties.setProperty("password", "1234");
    DataSource dataSource = null;
    try {
        dataSource = BasicDataSourceFactory.createDataSource(properties);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return dataSource;
}
```

这里通过@Value往参数里注入了对应属性文件的配置，但是我们没有办法确定这些数据源连接池的属性是否在属性文件中已经配置完整，如果是不充足的属性配置，则会引起创建失败，为此要判断属性文件的配置是否充足才能继续创建Bean。通过@Conditional去引入了一个类——DataSourceCondition，由它来判断。这个类的代码如下所示：

```java
public class DataSourceCondition implements Condition {
	@Override
	public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
		//获取上下文环境
		Environment env = context.getEnvironment();
		//判断是否存在关于数据源的基础配置
		return env.containsProperty("jdbc.database.driver") 
				&& env.containsProperty("jdbc.database.url")
				&& env.containsProperty("jdbc.database.username")
				&& env.containsProperty("jdbc.database.password");
	}
}
```

这里要求DataSourceCondition实现接口Condition的matches方法，该方法有两个参数，一个是ConditionContext，通过它可以获得Spring的上下文，另一个是AnnotatedTypeMetadata，通过它可以获得关于该Bean的注解信息。这里获取了上下文环境，然后判断该环境中的属性文件是否配置了数据库的相关参数，有则返回true，那么Spring会去创建对应的Bean，否则不创建。

## 10.9	Bean的作用域

在默认情况下，Spring IoC容器只会为一个Bean创建一个实例，比如下面的测试：

```java
AplicationContext ctx = new ClassPathApplicationContext("spring-props.xml");
RoleDataSourceService roleService1 = ctx.getBean(RoleDataSourceService.class);
RoleDataSourceService roleService2 = ctx.getBean(RoleDataSourceService.class);
System.out.println(roleService1 ==  roleService2);
```

由于roleService1与roleService2是同一个对象，结果将显示true。

有时候我们希望通过容器获取某个Bean的多个实例，比如Strut2中的Action往往绑定从页面请求过来的订单，如果它也是一个实例，那么订单从头至尾只有一个，不符合互联网的并发要求。

Spring提供了4种作用域，它会根据情况来决定是否生成新的对象。

- 单例（Singleton）：默认选项，在整个应用中，Spring只为其生成一个Bean的实例。
- 原型（prototype）：当每次注入或者通过容器获取Bean时，Spring都为其创建一个新的实例。
- 会话（Session）：在Web应用中使用，在一次会话过程中，Spring只为其创建一个实例。
- 请求（Request）：在Web应用中使用，在一次请求过程中，Spring只为其创建一个实例。

会话和请求只能在Web应用中使用，比较少用。

修改RoleDataSourceServiceImpl类，代码如下所示：

```java
@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class RoleDataSourceServiceImpl implements RoleDataSourceService {
	...
}

```

将RoleDataSourceServiceImpl的作用域改为prototype，再次进行测试，会发现结果显示false，这表示它们是两个不相同的实例。

## 10.10	使用Spring表达式（Spring EL）

Spring提供了更为灵活的注入方式——Spring EL。它拥有很多功能：

- 通过Bean的id来引用Bean。
- 调用指定对象的方法和访问对象的属性，
- 进行运算。
- 提供正则表达式匹配。
- 集合配置。

### 10.10.1    Spring EL相关的类

### 10.10.2	Bean的属性和方法

使用注解@Value，读取属性文件使用的是“$”,而在SpringEL中则使用“#”。以Role类为例，初始化它的属性，代码如下所示：

```java
@Component("role")
public class Role {
	// 赋值long型
	@Value("#{1}")
	private Long id;
	// 字符串赋值
	@Value("#{'role_name_1'}")
	private String roleName;
	// 字符串赋值
	@Value("#{'note_1'}")
	private String note;
    /*getter and setter*/
}

```

这样就定义了一个名为role的Bean了，并且为它的属性赋值。这时可以通过另外一个Bean去引用它的属性或者调用它的方法，比如新建一个ElBean作为测试，代码如下所示：

```java
@Component("elBean")
public class ElBean {
	
    //通过beanName获取bean，然后注入
	@Value("#{role}")
	private Role role;
	
    //获取bean的属性id
	@Value("#{role.id}")
	private Long id;
	
    //调用bean的getNote方法，获取角色名称
	@Value("#{role.getNote().toString()}")
	private String note;

	 /*getter and setter*/
}
```

我们可以通过BeanName进行注入，也可以通过OGNL获取其属性或者调用其方法来注入其他的Bean。

### 10.10.3	使用类的静态常量和方法

有时候我们可能希望使用一些静态方法和常量，比如圆周率π。而在Java中就是Math类的PI常量了，注入它非常简单，代码如下所示：

```java
@Value("#{T(Math).PI}")
private double pi;
```

这里的Math代表的是java.lang.*包下的Math类。当在Java代码中使用该包是不需要导入的，对于SpringEL也是如此。如果在Spring中使用一个非该包的内容，那么要给出该类的全限定名，类似这样：

```java
@Value("#{T(java.lang.Math).PI}")
private double pi;
```

### 10.10.4	Spring EL运算

SpringEL还可以进行运算，比如在ElBean上增加一个数字num，其值默认是角色编号+1，那么我们可以写成：

```java
@Value("#{role.id + 1}")
private long num;
```

有时候“+”运算符也可以运用在字符串的连接上，比如：

````java
@Value("#{role.roleName + role.note}")
private String str;
````

数字和字符串都可以使用“eq”或者“==”进行相等比较。除此之外，还有大于、小于等数字运行，比如：

```java
@Value("#{role.id == 1}")
private boolean equalNum;

@Value("#{role.note eq 'note_1'}")
private boolean equalString;

@Value("#{role.id > 2}")
private boolean greater;

@Value("#{role.id < 2}")
private booleanless;
```

还可以使用三目运算符，比如：

```java
int max = (role.getId()>1 ? 5 : 1);
```

```java
String defualtString = (role.getNote() == null ? "hello" : role.getNote());
```

通过Spring EL实现上述功能：

```java
@Value("#{role.getId()>1 ? 5 : 1}")
private int max;
@Value("#{role.note?:'hello'}")
private String defaultString;
```

Spring EL的功能远不止这些，这里直接说最基础最常用的功能。(String), http://cdn.alanliang.site/note/landscape1.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 3(Long), 1(Long), 1(Integer), 2020-06-15 11:32:09.278(Timestamp), 2020-06-15 11:32:09.278(Timestamp), 5(Integer), 1(Integer)
2020-06-15 11:32:09.301 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 11:32:09.302 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 11:32:09.303 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 7(Long), 12(Long), 7(Long), 13(Long), 7(Long), 23(Long)
2020-06-15 11:32:09.305 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 11:32:09.600 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:32:09.601 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:32:09.6(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: ... }(String), 0:0:0:0:0:0:0:1(String), 320(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:32:09.605 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:32:11.341 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:32:11.341 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:32:11.343 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:32:11.343 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:32:11.352 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 7
2020-06-15 11:32:11.356 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:32:11.357 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:32:11.359 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:32:11.360 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:32:11.360 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:32:11.361 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:32:11.362 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:32:11.362 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:32:11.364 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:32:11.364 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:32:11.364 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:32:11.366 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:32:11.367 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:32:11.367 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:32:11.370 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:32:11.373 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:32:11.374 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:32:11.375 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:32:11.375 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:32:11.375 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:32:11.376 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:32:11.379 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:32:11.380 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:32:11.379(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 44(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:32:11.382 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:41:42.999 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 11:41:42.999 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 11:41:43.001 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 11:41:43.013 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:41:43.014 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:41:43.012(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 2(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:41:43.016 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:41:51.141 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:41:51.141 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:41:51.142 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 2
2020-06-15 11:41:51.147 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:41:51.147 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:41:51.148 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 11:41:51.152 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:41:51.152 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:41:51.153 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:41:51.154 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:41:51.166 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 11:41:51.169 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:41:51.169 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:41:51.171 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:41:51.174 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:41:51.174 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:41:51.175 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:41:51.176 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:41:51.176 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:41:51.178 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:41:51.178 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:41:51.178 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:41:51.179 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:41:51.180 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:41:51.180 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:41:51.181 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:41:51.182 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:41:51.182 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:41:51.183 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:41:51.186 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:41:51.187 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:41:51.185(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 48(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:41:51.189 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:41:54.724 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 11:41:54.725 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 7(Long)
2020-06-15 11:41:54.727 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 11:41:54.732 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:41:54.732 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:41:54.734 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:41:54.881 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 11:41:54.882 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:41:54.883 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 12
2020-06-15 11:42:01.870 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:01.870 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:42:01.869(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:01.871 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:42:10.645 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:42:10.645 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 7(Long)
2020-06-15 11:42:10.646 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:42:10.665 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:42:10.666 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 7(Long)
2020-06-15 11:42:10.667 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:42:10.953 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:10.954 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:42:10.952(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=7, status=2) }(String), 0:0:0:0:0:0:0:1(String), 307(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:10.956 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:42:10.993 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:42:10.994 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:42:10.996 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:42:10.996 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:42:11.015 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 7
2020-06-15 11:42:11.017 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:11.017 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:42:11.022 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:42:11.024 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:11.024 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:42:11.026 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:11.030 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:11.030 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:42:11.032 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:11.032 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:11.033 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:42:11.034 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:11.034 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:11.034 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:42:11.036 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:11.039 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:11.039 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:42:11.042 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:11.044 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:11.046 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:42:11.047 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:11.056 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:11.057 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:42:11.052(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 64(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:11.059 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:42:15.306 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:42:15.307 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:42:15.308 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-15 11:42:15.311 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:42:15.311 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:42:15.312 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 0
2020-06-15 11:42:15.318 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:42:15.318 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:42:15.320 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:42:15.320 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:42:15.329 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 11:42:15.332 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:15.333 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:42:15.334 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:15.335 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:15.335 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:42:15.338 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:15.339 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:15.339 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:42:15.340 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:15.340 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:15.341 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:42:15.341 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:15.342 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:15.342 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:42:15.343 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:15.344 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:15.344 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:42:15.345 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:15.350 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:15.350 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:42:15.349(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 43(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:15.352 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:42:18.960 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:42:18.960 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:42:18.962 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:42:18.962 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-06-15 11:42:18.965 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 1
2020-06-15 11:42:18.966 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:18.966 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:42:18.970 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:42:20.714 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-06-15 11:42:20.715 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-06-15 11:42:20.716 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 12
2020-06-15 11:42:20.723 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:20.724 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:42:20.722(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.front.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 9(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:20.725 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:42:23.877 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-06-15 11:42:23.878 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-06-15 11:42:23.880 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : <==      Total: 6
2020-06-15 11:42:23.887 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:23.888 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:42:23.885(Timestamp), 访问分类页面(String), INFO(String), site.alanliang.geekblog.controller.front.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 8(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:23.890 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:42:27.521 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.countByDate      : ==>  Preparing: select year(create_time) 'year' , month(create_time) 'month', day(create_time) 'day' , count(id) 'articleCount' from t_article where create_time >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) and published = 1 and status = 2 group by year(create_time) ,month(create_time), day(create_time) 
2020-06-15 11:42:27.523 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.countByDate      : ==> Parameters: 
2020-06-15 11:42:27.526 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.countByDate      : <==      Total: 2
2020-06-15 11:42:27.533 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:42:27.533 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 
2020-06-15 11:42:27.536 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id and ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-15 11:42:27.538 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:42:27.548 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.A.listPreviewPageByDate          : <==      Total: 6
2020-06-15 11:42:27.548 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:27.549 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:42:27.552 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:27.553 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:27.553 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:42:27.554 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:27.555 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:27.555 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:42:27.557 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:27.558 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:27.559 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:42:27.561 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:27.561 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:27.561 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:42:27.564 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:27.564 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:42:27.564 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:42:27.566 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:42:27.573 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:27.573 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:42:27.571(Timestamp), 访问归档页面(String), INFO(String), site.alanliang.geekblog.controller.front.ArchivesController.archives()(String), { dateFilterType: null }(String), 0:0:0:0:0:0:0:1(String), 56(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:27.576 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:42:29.792 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:29.792 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:42:29.791(Timestamp), 访问分类页面(String), INFO(String), site.alanliang.geekblog.controller.front.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:29.793 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:42:32.356 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 11:42:32.357 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 11:42:32.359 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 11:42:32.362 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 11:42:32.363 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 11:42:32.364 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 11:42:32.371 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 11:42:32.372 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 11:42:32.373 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 11:42:32.387 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectList  : ==>  Preparing: SELECT url,description FROM t_photo WHERE (display = ?) ORDER BY sort ASC 
2020-06-15 11:42:32.388 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectList  : ==> Parameters: 1(Integer)
2020-06-15 11:42:32.391 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectList  : <==      Total: 0
2020-06-15 11:42:32.397 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.countByDate      : ==>  Preparing: select year(create_time) 'year' , month(create_time) 'month' , count(id) 'articleCount' from t_article where create_time >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) and published = 1 and status = 2 group by year(create_time) ,month(create_time) 
2020-06-15 11:42:32.400 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.countByDate      : ==> Parameters: 
2020-06-15 11:42:32.403 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.countByDate      : <==      Total: 1
2020-06-15 11:42:32.409 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:42:32.410 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:42:32.408(Timestamp), 访问关于我页面(String), INFO(String), site.alanliang.geekblog.controller.front.AboutController.about()(String), { dateFilterType: 2 }(String), 0:0:0:0:0:0:0:1(String), 56(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:42:32.411 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:43:17.502 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 11:43:17.503 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 2(Long)
2020-06-15 11:43:17.510 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 11:43:17.518 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:17.519 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:43:17.523 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:24.931 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, top=?, recommend=?, category_id=?, type=?, update_time=?, sort=?, status=? WHERE id=? 
2020-06-15 11:43:24.934 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: Java设计模式(String), JavaEE互联网轻量级框架整合开发第二章(String), <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>在Java框架中运用了很多的设计模式，常见的包括<strong>代理模式</strong>、<strong>责任链模式</strong>、<strong>观察者模式</strong>、<strong>普通工厂模式</strong>、<strong>抽象工厂模式</strong>和<strong>建造者模式</strong>等，那么下面让我们一起来了解一下。</p>
<h2 id="h2-1-"><a name="1    什么是设计模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    什么是设计模式</h2><blockquote>
<p><strong>设计模式</strong>（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
</blockquote>
<h2 id="h2-2-java-"><a name="2    Java反射技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    Java反射技术</h2><p>Java反射技术应用广泛，能够配置类的<strong>全限定名</strong>、<strong>方法</strong>和<strong>参数</strong>，<strong>完成对象的初始化</strong>等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。</p>
<p>我们简单了解一下反射的应用：</p>
<h3 id="h3-2-1-"><a name="2.1    通过反射构建对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1    通过反射构建对象</h3><p>（1）通过<strong>无参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;).newInstance();

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<p>（2）通过<strong>有参构造</strong>方式构建对象，代码如下：</p>
<pre><code class="lang-java">public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println(&quot;Hello &quot; + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl2&quot;)
                    .getConstructor(String.class)
                    .newInstance(&quot;张三&quot;);

        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}
</code></pre>
<ul>
<li><p>反射的<strong>优点</strong>：只要配置就可以生成对象，可以解除程序的耦合度。</p>
</li><li><p>反射的<strong>缺点</strong>：运行较慢。</p>
</li></ul>
<p>Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。</p>
<h3 id="h3-2-2-"><a name="2.2    反射方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    反射方法</h3><p>代码如下：</p>
<pre><code class="lang-java">public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod(&quot;sayHello&quot;, String.class);

            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod(&quot;sayHello&quot;, String.class);
            //调用方法，相当于target.sayHello(&quot;张三&quot;)
            returnObj = method.invoke(target, &quot;张三&quot;);

        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
</code></pre>
<h3 id="h3-2-3-"><a name="2.3    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    实例</h3><p>代码如下：</p>
<pre><code class="lang-java">public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName(&quot;com.ssm.learn.chapter2.reflect.ReflectServiceImpl&quot;)
                .newInstance();
        Method method = object.getClass().getMethod(&quot;sayHello&quot;, String.class);
        method.invoke(object,&quot;张三&quot;);
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
</code></pre>
<p>运行程序，得到以下结果：</p>
<pre><code>Hello 张三
</code></pre><h2 id="h2-3-"><a name="3    动态代理模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    动态代理模式</h2><p><strong>动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。</strong></p>
<p>举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：</p>
<p><img src="http://cdn.alanliang.site/note/代理模式示意图.png" alt="代理模式示意图"></p>
<p><strong>代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。</strong></p>
<p>代理分为两个步骤：</p>
<ol>
<li><p><strong>代理对象和真实对象之间建立代理关系</strong></p>
</li><li><p><strong>实现代理对象的代理逻辑方法</strong></p>
</li></ol>
<p>Java中最常用的动态代理技术有：</p>
<ul>
<li><p><strong>JDK动态代理</strong>。JDK自带功能，必须使用接口，比较复杂</p>
</li><li><p><strong>CGLIB</strong>。第三方提供技术，不必使用接口，比较简单</p>
<h3 id="h3-3-1jdk-"><a name="3.1JDK动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1JDK动态代理</h3></li></ul>
<p>首先定义<code>HelloWorld</code>接口，代码如下：</p>
<pre><code class="lang-java">public interface HelloWorld{
    public void sayHelloWorld();
}
</code></pre>
<p>然后提供实现类<code>HelloWorldImp</code>l来实现接口，代码如下：</p>
<pre><code class="lang-java">public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println(&quot;Hello World&quot;);
    }
}
</code></pre>
<p>动态代理绑定和代理逻辑实现，代码如下：</p>
<pre><code class="lang-java">public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;进入代理逻辑方法&quot;);
        System.out.println(&quot;在调用真实对象之前的服务&quot;);
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println(&quot;在调用真实对象之后的服务&quot;);
        return obj;
    }
}
</code></pre>
<p>测试JDK动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
</code></pre><h3 id="h3-3-2-cglib-"><a name="3.2    CGLIB动态代理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    CGLIB动态代理</h3><p>代码如下：</p>
<pre><code class="lang-java">public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println(&quot;调用真实对象前&quot;);
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println(&quot;调用真实对象后&quot;);
        return result;
    }
}
</code></pre>
<p>测试CGLIB动态代理，代码如下：</p>
<pre><code class="lang-java">public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello(&quot;张三&quot;);
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>调用真实对象前
Hello 张三
调用真实对象后
</code></pre><h3 id="h3-3-3-"><a name="3.3    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    拦截器</h3><p>由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。</p>
<h3 id="h3-3-4-"><a name="3.4    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4    实例</h3><p>用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口<code>Interceptor</code>，代码如下：</p>
<pre><code class="lang-java">public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
</code></pre>
<p>实现这个接口，代码如下：</p>
<pre><code class="lang-java">public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法前逻辑&quot;);
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;反射方法后逻辑&quot;);
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;取代了被代理对象的方法&quot;);
    }
}
</code></pre>
<p>在JDK动态代理中使用拦截器，代码如下：</p>
<pre><code class="lang-java">public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
</code></pre>
<p>代码的执行步骤：</p>
<ol>
<li>在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。</li><li>如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。</li><li>通过反射生成拦截器，并准备使用它。</li><li>调用拦截器的<code>before</code>方法，如果返回true则反射原来的方法；否则运行拦截器的<code>around</code>方法。</li><li>调用拦截器的<code>after</code>方法</li><li>返回结果</li></ol>
<p>测试拦截器，代码如下：</p>
<pre><code class="lang-java">public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),&quot;com.ssm.learn.chapter2.interceptor.MyInterceptor&quot;);
       proxy.sayHelloWorld();
    }
}
</code></pre>
<p>测试结果如下：</p>
<pre><code>反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
</code></pre><h2 id="h2-4-"><a name="4    责任链模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    责任链模式</h2><p>举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：</p>
<p><img src="http://cdn.alanliang.site/note/请假示例.png" alt="请假示例"></p>
<p><strong>当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。</strong></p>
<p>回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（<code>target</code>）来到项目经理处时，使用第一个动态代理<code>proxy1</code>，当他来到部门经理处时，部门经理会得到一个在项目经理的代理<code>proxy1</code>基础上生成的第二个动态代理<code>proxy2</code>来处理部门经理的逻辑，以此类推。</p>
<p>拦截逻辑如下图：</p>
<p><img src="http://cdn.alanliang.site/note/拦截逻辑.png" alt="拦截逻辑"></p>
<h3 id="h3-4-1-"><a name="4.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1    实例</h3><p>定义三个拦截器，代码如下：</p>
<pre><code class="lang-java">public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器1】的after方法&quot;);
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器2】的after方法&quot;);
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的before方法&quot;);
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println(&quot;【拦截器3】的after方法&quot;);
    }
}
</code></pre>
<p>测试责任链模式，代码如下：</p>
<pre><code class="lang-java">@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), &quot;com.ssm.learn.chapter2.interceptor.Interceptor1&quot;);
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, &quot;com.ssm.learn.chapter2.interceptor.Interceptor2&quot;);
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, &quot;com.ssm.learn.chapter2.interceptor.Interceptor3&quot;);
    proxy3.sayHelloWorld();
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
</code></pre><p><strong>由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。</strong></p>
<h2 id="h2-5-observer-"><a name="5    观察者（Observer）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5    观察者（Observer）模式</h2><p><strong>观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。</strong></p>
<p>例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。</p>
<p>例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
}
</code></pre><p>如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：</p>
<pre><code>if(产品库有新产品){
    推送新产品到淘宝;
    推送新产品到京东；
    推送新产品到国美;
    推送新产品到苏宁；
    推送新产品到当当;
    推送新产品到唯品会；
}
</code></pre><p>按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。</p>
<p><strong>而观察者模式更利用扩展，责任也更加清晰。</strong>首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：</p>
<p>​    <img src="http://cdn.alanliang.site/note/观察者模式示例.jpg" alt="观察者模式示例"></p>
<p><strong>类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。</strong></p>
<p><strong>这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。</strong></p>
<h3 id="h3-5-1-"><a name="5.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    实例</h3><p>被观察者——产品列表，继承<code>Observable</code>类，代码如下：</p>
<pre><code class="lang-java">public class ProductList extends Observable {
    //产品列表
    private List&lt;String&gt; productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList&lt;&gt;();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println(&quot;产品列表增加了新的产品 &quot;+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
</code></pre>
<p>这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过<code>getInstance()</code>方法获得产品列表单例，这里使用了单例模式。</p>
<p>观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现<code>Observer</code>接口的<code>update</code>方法，代码如下：</p>
<pre><code class="lang-java">public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到淘宝商城&quot;);
    }
}
</code></pre>
<pre><code class="lang-java">public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println(&quot;发送新产品【&quot; + newProduct + &quot;】同步到京东商城&quot;);
    }
}
</code></pre>
<p>测试观察者模式，代码如下：</p>
<pre><code class="lang-java">ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct(&quot;新增产品1&quot;);
    }
}
</code></pre>
<p>运行结果如下：</p>
<pre><code>产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
</code></pre><h2 id="h2-6-"><a name="6    工厂模式和抽象工厂模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6    工厂模式和抽象工厂模式</h2><p>在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。</p>
<h3 id="h3-6-1-simple-factory-"><a name="6.1    普通工厂（Simple Factory）模式：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.1    普通工厂（Simple Factory）模式：</h3><p>例如，有个<code>IProduct</code>的产品接口，它下面有5个实现类<code>Product1</code>、<code>Product2</code>、<code>Product3</code>、<code>Product4</code>和<code>Product5</code>。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（<code>ProductFactory</code>）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：    </p>
<p><img src="http://cdn.alanliang.site/note/产品工厂模式.jpg" alt="产品工厂模式"></p>
<p><code>ProductFactory</code>的伪代码如下：</p>
<pre><code class="lang-java">public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case &quot;1&quot;:return new Product1(XXX);
            case &quot;2&quot;:return new Product2(XXX);
            case &quot;3&quot;:return new Product3(XXX);
            case &quot;4&quot;:return new Product4(XXX);
            case &quot;5&quot;:return new Product5(XXX);
            default:
                throw new NotSupprotedException(&quot;未支持此编号产品生产。&quot;);
        }
    }
}
</code></pre>
<p>对于程序调用者而言，他只需要知道通过工厂的<code>createProduct</code>方法，指定产品编号——<code>productNo</code>可以得到对应的产品，而产品满足接口<code>IProduct</code>的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。</p>
<h3 id="h3-6-2-abstract-factory-"><a name="6.2    抽象工厂（Abstract Factory）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6.2    抽象工厂（Abstract Factory）模式</h3><p>抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：</p>
<p><img src="http://cdn.alanliang.site/note/抽象工厂示意图.jpg" alt="抽象工厂示意图"></p>
<p>为了统一，需要制定一个接口规范（<code>IProductFactory</code>），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：</p>
<pre><code class="lang-java">public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
</code></pre>
<p>现在再实现3个工厂类，代码如下：</p>
<pre><code class="lang-java">public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<pre><code class="lang-java">public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
</code></pre>
<p>使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂<code>ProductFactory</code>x创建对象。代码如下：</p>
<pre><code class="lang-java">public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == &#39;1&#39;) {
            factory = new ProductFactory1();
        } else if (ch == &#39;2&#39;) {
            factory = new ProductFactory2();
        } else if (ch == &#39;3&#39;) {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
</code></pre>
<p><strong>对于设计者而言，<code>ProductFactory</code>就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。</strong></p>
<h2 id="h2-7-builder-"><a name="7    建造者（Builder）模式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7    建造者（Builder）模式</h2><p><strong>建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。</strong></p>
<p>比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。</p>
<p><code>Builder</code>模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。</p>
<h3 id="h3-7-1-"><a name="7.1    实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7.1    实例</h3><p>创建一个配置类的对象<code>TickerHelper</code>，它能够帮助我们一步步构建对象。代码如下所示：</p>
<pre><code class="lang-java">public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println(&quot;构建成年人票逻辑：&quot; + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println(&quot;构建有座儿童票逻辑：&quot; + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println(&quot;构建无座儿童票逻辑：&quot; + info);
    }

    public void buildElderly(String info) {
        System.out.println(&quot;构建老年人票逻辑：&quot; + info);
    }

    public void buildSoldier(String info) {
        System.out.println(&quot;构建军人及其家属票逻辑：&quot; + info);
    }
}
</code></pre>
<p>然后，需要一个构造类——<code>TicketBuilder</code>，代码如下：</p>
<pre><code class="lang-java">public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println(&quot;通过TicketHelper构建套票信息&quot;);
        return null;
    }
}
</code></pre>
<p>通过这两个类就可以构建出套票，代码如下：</p>
<pre><code class="lang-java">public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult(&quot;成人票&quot;);
        helper.buildChildrenForSeat(&quot;有座儿童&quot;);
        helper.buildChildrenForNoSeat(&quot;无座儿童&quot;);
        helper.buildElderly(&quot;老年人票&quot;);
        helper.buildSoldier(&quot;军人票&quot;);
        Object ticket = TicketBuilder.builder(helper);
    }
}
</code></pre>
<p>本文参考杨开振的《JavaEE互联网轻量级框架整合开发》</p>
(String), ##前言

在Java框架中运用了很多的设计模式，常见的包括**代理模式**、**责任链模式**、**观察者模式**、**普通工厂模式**、**抽象工厂模式**和**建造者模式**等，那么下面让我们一起来了解一下。

##1	什么是设计模式

> **设计模式**（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

##2	Java反射技术

Java反射技术应用广泛，能够配置类的**全限定名**、**方法**和**参数**，**完成对象的初始化**等，增强了Java的可配置性，绝大数框架的基本原理也是基于这个技术。

我们简单了解一下反射的应用：

### 2.1	通过反射构建对象

（1）通过**无参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl {
    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl getInstance(){
        ReflectServiceImpl object =null;
        try {
            //通过反射生成对象
            object= (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl").newInstance();
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

（2）通过**有参构造**方式构建对象，代码如下：

```java
public class ReflectServiceImpl2 {

    private String name;

    public ReflectServiceImpl2(String name) {
        this.name = name;
    }

    public void sayHello(String name) {
        System.err.println("Hello " + name);
    }

    public ReflectServiceImpl2 getInstance(){
        ReflectServiceImpl2 object =null;
        try {
             //通过反射生成对象
            object= (ReflectServiceImpl2) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl2")
                    .getConstructor(String.class)
                    .newInstance("张三");
            
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return object;
    }
}

```

- 反射的**优点**：只要配置就可以生成对象，可以解除程序的耦合度。

- 反射的**缺点**：运行较慢。

Spring IoC大部分情况下为了灵活度、降低耦合度，而使用反射是值得的。

### 2.2	反射方法

代码如下：

```java
public Object reflectMethod() {
        Object returnObj = null;
        ReflectServiceImpl target = new ReflectServiceImpl();
        try {
            //Method method = ReflectServiceImpl.class.getMethod("sayHello", String.class);
            
            //当有具体对象target但不知道它是哪个类的可以这样写
            Method method = target.getClass().getMethod("sayHello", String.class);
            //调用方法，相当于target.sayHello("张三")
            returnObj = method.invoke(target, "张三");
            
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        return returnObj;
    }
```

### 2.3	实例

代码如下：

```java
public static Object reflect() {
    ReflectServiceImpl object = null;
    try {
        object = (ReflectServiceImpl) Class.forName("com.ssm.learn.chapter2.reflect.ReflectServiceImpl")
                .newInstance();
        Method method = object.getClass().getMethod("sayHello", String.class);
        method.invoke(object,"张三");
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    return object;
}

public static void main(String[] args) {
    ReflectServiceImpl.reflect();
}
```

运行程序，得到以下结果：

```
Hello 张三
```

##3	动态代理模式

**动态代理的意义在于生成一个占位（又称为代理对象），来代理真实对象，从而控制真实对象的访问。**

举个例子：客户来软件公司谈需求不会直接跟软件工程师谈，而是去找商务谈，客户认为商务代表了公司。如下图所示：

![代理模式示意图](http://cdn.alanliang.site/note/代理模式示意图.png)

**代理的作用：在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则控制是否使用真实对象。**

代理分为两个步骤：

1. **代理对象和真实对象之间建立代理关系**

2. **实现代理对象的代理逻辑方法**

Java中最常用的动态代理技术有：

- **JDK动态代理**。JDK自带功能，必须使用接口，比较复杂

- **CGLIB**。第三方提供技术，不必使用接口，比较简单

  ###3.1JDK动态代理

首先定义`HelloWorld`接口，代码如下：

```java
public interface HelloWorld{
    public void sayHelloWorld();
}
```

然后提供实现类`HelloWorldImp`l来实现接口，代码如下：

```java
public class HelloWorldImpl implements HelloWorld{
    @Override
    public void sayHelloWorld(){
        System.out.println("Hello World");
    }
}
```

动态代理绑定和代理逻辑实现，代码如下：

```java
public class JdkProxyExample implements InvocationHandler {

    //真实对象
    private Object target = null;

    /**
     * 建立代理对象和真实对象的代理关系
     *
     * @param target 真实对象
     * @return 代理对象
     */
    public Object bind(Object target) {
        this.target = target;
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
    }

    /**
     * 代理方法逻辑
     * @param proxy 代理对象
     * @param method 当前调度方法
     * @param args 当前方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("进入代理逻辑方法");
        System.out.println("在调用真实对象之前的服务");
        Object obj = method.invoke(target, args);//相当于调用sayHelloWord方法
        System.out.println("在调用真实对象之后的服务");
        return obj;
    }
}
```

测试JDK动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testJdkProxy() {
        JdkProxyExample jdkProxy = new JdkProxyExample();
        //绑定关系，因为挂在接口HelloWorld下，所以声明代理对象HelloWorld proxy
        HelloWorld proxy = (HelloWorld) jdkProxy.bind(new HelloWorldImpl());
        //注意，此时proxy对象已经是一个代理对象，他会进入代理的逻辑方法invoke里
        proxy.sayHelloWorld();
    }
}
```

运行结果如下：

```
进入代理逻辑方法
在调度真实对象之前的服务
Hello World
在调用真实对象之后的服务
```

###3.2	CGLIB动态代理

代码如下：

```java
public class CglibProxyExample implements MethodInterceptor {

    /**
     * 生成CGLIB代理对象
     * @param clazz Class类
     * @return Class类的CGLIB对象
     */
    public Object getProxy(Class clazz) {
        //CGLIB enhancer增强类对象
        Enhancer enhancer = new Enhancer();
        //设置增强类型
        enhancer.setSuperclass(clazz);
        //定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor的方法
        enhancer.setCallback(this);
        //生成并返回代理对象
        return enhancer.create();
    }

    /**
     * 代理逻辑方法
     * @param proxy 代理对象
     * @param method 执行方法
     * @param args 方法参数
     * @param methodProxy 方法代理
     * @return 代理逻辑返回
     * @throws Throwable 异常
     */
    @Override
    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
        System.out.println("调用真实对象前");
        Object result = methodProxy.invokeSuper(proxy, args);
        System.out.println("调用真实对象后");
        return result;
    }
}

```

测试CGLIB动态代理，代码如下：

```java
public class TestProxy {

    @Test
    public void testCGLIBProxy(){
        CglibProxyExample cglibProxyExample = new CglibProxyExample();
        ReflectServiceImpl obj = (ReflectServiceImpl) cglibProxyExample.getProxy(ReflectServiceImpl.class);
        obj.sayHello("张三");
    }
}
```

测试结果如下：

```
调用真实对象前
Hello 张三
调用真实对象后
```

###3.3	拦截器

由于动态代理一般比较难理解，程序开发者会设计一个拦截器接口供开发者使用，开发者只需要知道拦截器接口的方法、含义和作用即可，无须知道动态代理是如何实现的。

###3.4	实例

用JDK动态代理来实现一个拦截器的逻辑，为此先定义拦截器接口`Interceptor`，代码如下：

```java
public interface Interceptor {
    /**
     * 在真实对象前调用
     * @param proxy 代理对象
     * @param target 真实对象
     * @param method 调用方法
     * @param args 方法参数
     * @return 当返回true时则反射真实对象的方法，当返回false时则调用around方法
     * 当返回真实对象方法或者around方法执行后，调用after方法
     */
    public boolean before(Object proxy, Object target, Method method,Object[] args);

    public void around(Object proxy, Object target, Method method,Object[] args);

    public void after(Object proxy, Object target, Method method,Object[] args);
}
```

实现这个接口，代码如下：

```java
public class MyInterceptor implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法前逻辑");
        return false;//不反射被代理对象原有方法
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("反射方法后逻辑");
    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("取代了被代理对象的方法");
    }
}
```

在JDK动态代理中使用拦截器，代码如下：

```java
public class InterceptorJdkProxy implements InvocationHandler {
    //真实对象
    private Object target = null;
    //拦截器全限定名
    private String interceptorClass = null;

    public InterceptorJdkProxy(Object target, String interceptorClass) {
        this.target = target;
        this.interceptorClass = interceptorClass;
    }


    /**
     * 绑定委托对象并返回一个[代理占位]
     *
     * @param target 真实对象
     * @return 代理对象[占位]
     */
    public static Object bind(Object target, String InterceptorClass) {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InterceptorJdkProxy(target, InterceptorClass));
    }

    /**
     * 通过代理对象调用方法，首先进入这个方法
     *
     * @param proxy  代理对象
     * @param method 被调用方法
     * @param args   方法参数
     * @return 代理结果返回
     * @throws Throwable 异常
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (interceptorClass == null) {
            //没有设置拦截器则直接反射原有方法
            return method.invoke(target, args);
        }
        Object result = null;
        //通过反射生成拦截器
        Interceptor interceptor = (Interceptor) Class.forName(interceptorClass).newInstance();
        //调用前置方法
        if (interceptor.before(proxy, target, method, args)) {
            //返回true反射原有对象方法
            result = method.invoke(target, args);
        } else {
            //返回false执行around方法
            interceptor.around(proxy, target, method, args);
        }
        //调用后置方法
        interceptor.after(proxy, target, method, args);
        return result;
    }
}
```

代码的执行步骤：

1. 在bind方法中用JDK动态代理绑定了一个对象，然后返回代理对象。
2. 如果没有设置拦截器，则直接反射真实对象的方法，然后结束。否则，进行第三步。
3. 通过反射生成拦截器，并准备使用它。
4. 调用拦截器的`before`方法，如果返回true则反射原来的方法；否则运行拦截器的`around`方法。
5. 调用拦截器的`after`方法
6. 返回结果

测试拦截器，代码如下：

```java
public class TestInterceptor {

    @Test
    public void testInterceptor(){
       HelloWorld proxy = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(),"com.ssm.learn.chapter2.interceptor.MyInterceptor");
       proxy.sayHelloWorld();
    }
}

```

测试结果如下：

```
反射方法前逻辑
反射方法后逻辑
取代了被代理对象的方法
```

##4	责任链模式

举个例子，一个程序员需要请假一周。如果把请假申请单看成是一个对象，那么它需要经过项目经理、部门经理、人事经理等多个角色的审批，每个角色都有机会通过拦截这个申请单进行审批或者修改。这个时候就要考虑提供项目经理、部门经理和人事经理的处理逻辑了，所以需要提供3个拦截器，而传递的则是请假申请单，请假示例如图所示：

![请假示例](http://cdn.alanliang.site/note/请假示例.png)

**当一个对象在一条链上被多个拦截器拦截处理（拦截器也可以不拦截）时，我们把这样的设计模式称为责任链模式，它用于一个对象在多个角色中传递的场景。**

回到刚才的例子，申请单来到项目经理那，经理可能把申请时间“一周”改为“5天”，从而影响到后面的审批，因为后面的审批会依据前面的结果进行。这时候考虑采用层层代理来实现，就是当申请单（`target`）来到项目经理处时，使用第一个动态代理`proxy1`，当他来到部门经理处时，部门经理会得到一个在项目经理的代理`proxy1`基础上生成的第二个动态代理`proxy2`来处理部门经理的逻辑，以此类推。

拦截逻辑如下图：

![拦截逻辑](http://cdn.alanliang.site/note/拦截逻辑.png)

###4.1	实例

定义三个拦截器，代码如下：

```java
public class Interceptor1 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器1】的after方法");
    }
}
/************************************拦截器2*************************************/
public class Interceptor2 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器2】的after方法");
    }
}
/************************************拦截器3*************************************/
public class Interceptor3 implements Interceptor{
    @Override
    public boolean before(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的before方法");
        return true;
    }

    @Override
    public void around(Object proxy, Object target, Method method, Object[] args) {

    }

    @Override
    public void after(Object proxy, Object target, Method method, Object[] args) {
        System.out.println("【拦截器3】的after方法");
    }
}
```

测试责任链模式，代码如下：

```java
@Test
public void testInterceptors() {
    HelloWorld proxy1 = (HelloWorld) InterceptorJdkProxy.bind(new HelloWorldImpl(), "com.ssm.learn.chapter2.interceptor.Interceptor1");
    HelloWorld proxy2 = (HelloWorld) InterceptorJdkProxy.bind(proxy1, "com.ssm.learn.chapter2.interceptor.Interceptor2");
    HelloWorld proxy3 = (HelloWorld) InterceptorJdkProxy.bind(proxy2, "com.ssm.learn.chapter2.interceptor.Interceptor3");
    proxy3.sayHelloWorld();
}
```

运行结果如下：

```
【拦截器3】的before方法
【拦截器2】的before方法
【拦截器1】的before方法
Hello World
【拦截器1】的after方法
【拦截器2】的after方法
【拦截器3】的after方法
```

**由此可见，责任链模式的优点是我们可以在传递链上加入新的拦截器，增加拦截逻辑，其缺点是会增加代理和反射，而代理和反射的性能不高。**

##5	观察者（Observer）模式

**观察者模式又称为发布订阅模式，它定义了一种一对多的依赖关系，让多个观察者同时监视着被观察者的状态，当观察者的状态发生改变时，会通知所有观察者，并让其自动更新自己。**

例子1：微博推送机制。当作者发布一条新微博时，所有关注了该作者的粉丝都会收到推送。

例子2：一个商家有一些产品，他和一些电商合作，每当有新产品时，就会把这些产品推送到电商，现在只和淘宝、京东合作，于是有这样的伪代码：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
}
```

如果公司又和国美、苏宁、当当、唯品会签订合作协议，那么就需要时改变这段伪代码了：

```
if(产品库有新产品){
	推送新产品到淘宝;
	推送新产品到京东；
	推送新产品到国美;
	推送新产品到苏宁；
	推送新产品到当当;
	推送新产品到唯品会；
}
```

按照这种做法，如果还有其他电商合作，那么还要继续在if语句中增加逻辑。首先，如果电商越来越多，那么if语句的逻辑就越来越复杂。而且，如果推送商品给淘宝发生异常，需要捕捉异常，避免影响之后的电商接口，导致其不能往下进行，这样代码耦合就会增多。其次，if语句堆砌太多代码不利于维护和扩展。

**而观察者模式更利用扩展，责任也更加清晰。**首先，把每一个电商接口看成一个观察者，每一个观察者都能观察到产品列表（被监听对象）。当公司发布新产品时，就会发送到这个产品列表上，于是产品列表就发生了变化，这时就可以触发各个电商接口（观察者）发送新产品到对应的合作电商那里，观察者模式示例如图所示：

​	![观察者模式示例](http://cdn.alanliang.site/note/观察者模式示例.jpg)

**类似这样，一个对象（电商接口）会去监听另外一个对象（产品列表），当被监听对象（产品列表）发生变化时，对象（电商接口）就会触发一定的行为，以适合变化的逻辑模式，我们称为观察者模式。**

**这样的好处在于，程序不再出现if语句，观察者会根据被观察者对象的变化而做出对应的行为，无论是淘宝、京东或者其他电商团队只要维护自己的逻辑，而无须耦合在一起。同时责任是明确的，产品团队只需要维护产品列表，电商团队可以增加观察者去监听产品的电商接口。**

###5.1	实例

被观察者——产品列表，继承`Observable`类，代码如下：

```java
public class ProductList extends Observable {
    //产品列表
    private List<String> productList = null;
    //类的唯一实例
    private static ProductList instance;

    //构造方法私有化
    private ProductList() {
    }

    /**
     * 取得唯一实例
     *
     * @return 产品列表唯一实例
     */
    public static ProductList getInstance() {
        if (instance == null) {
            instance = new ProductList();
            instance.productList = new ArrayList<>();
        }
        return instance;
    }

    /**
     * 增加观察者（电商接口）
     * @param observer 观察者
     */
    public void addProductListObserver(Observer observer) {
        this.addObserver(observer);
    }

    /**
     * 新增产品
     * @param newProduct 新产品
     */
    public void addProduct(String newProduct){
        productList.add(newProduct);
        System.out.println("产品列表增加了新的产品 "+newProduct);
        this.setChanged();//设置被观察对象发生变化
        this.notifyObservers(newProduct);//通知观察者，并传递新产品
    }
}
```

这里的使用了构造方法私有化，避免通过new方式创建对象，而是通过`getInstance()`方法获得产品列表单例，这里使用了单例模式。

观察者——以淘宝和京东为例，实现他们的电商接口，作为观察者需要实现`Observer`接口的`update`方法，代码如下：

```java
public class TaoBaoObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到淘宝商城");
    }
}
```

```java
public class JingDongObserver implements Observer {
    @Override
    public void update(Observable o, Object product) {
        String newProduct = (String) product;
        System.out.println("发送新产品【" + newProduct + "】同步到京东商城");
    }
}
```

测试观察者模式，代码如下：

```java
ublic class TestObserver {
    @Test
    public void testObserver() {
        ProductList observable = ProductList.getInstance();
        TaoBaoObserver taoBaoObserver = new TaoBaoObserver();
        JingDongObserver jingDongObserver = new JingDongObserver();
        observable.addObserver(taoBaoObserver);
        observable.addObserver(jingDongObserver);
        observable.addProduct("新增产品1");
    }
}
```

运行结果如下：

```
产品列表增加了新的产品 新增产品1
发送新产品【新增产品1】同步到京东商城
发送新产品【新增产品1】同步到淘宝商城
```

##6	工厂模式和抽象工厂模式

在大部分情况下，我们都是以new方式来创建对象。举个例子，现实中车子的种类可能很多，有大巴车、轿车、救护车、越野车、卡车等，每个种类下面还有具体的型号，一个工厂生产如此多的车会难以管理，所以往往要进一步拆分为各个分工厂：大巴车、轿车等分工厂。但是客户不需要知道工厂如何拆分，他只会告诉客服需要什么样的车，客服就会根据客户的要求找到对应的工厂去生产车。对客户而言，车厂只是抽象概念，他只是大概知道有这样的一个工厂能够满足他的需要。

###6.1	普通工厂（Simple Factory）模式：

例如，有个`IProduct`的产品接口，它下面有5个实现类`Product1`、`Product2`、`Product3`、`Product4`和`Product5`。它们属于一个大类，可以通过产品工厂去管理它们的生成，但是由于类型不同，所以初始化有所不同。为了方便使用产品工厂（`ProductFactory`）类来创建这些产品的对象，用户可以通过产品号来确定需要哪种产品，如图所示：	

![产品工厂模式](http://cdn.alanliang.site/note/产品工厂模式.jpg)

`ProductFactory`的伪代码如下：

```java
public class ProductFactory{
    public static IProduct createProduct(String productNo){
        switch(productNo){
            case "1":return new Product1(XXX);
            case "2":return new Product2(XXX);
            case "3":return new Product3(XXX);
            case "4":return new Product4(XXX);
            case "5":return new Product5(XXX);
            default:
                throw new NotSupprotedException("未支持此编号产品生产。");
        }
    }
}
```

对于程序调用者而言，他只需要知道通过工厂的`createProduct`方法，指定产品编号——`productNo`可以得到对应的产品，而产品满足接口`IProduct`的规范，所以初始化就简单了许多。对于产品对象的创建，可以把一些特有产品规则写入工厂类中。

###6.2	抽象工厂（Abstract Factory）模式

抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体情况下，创建多个产品族中的产品对象。有时候对象很复杂，有几十种，又分为几个类别，如果使用简单工厂会使得这个工厂的逻辑过于复杂。所以把工厂分为好几个，这样便于工厂产品规则的维护。抽象工厂示意图如图所示：

![抽象工厂示意图](http://cdn.alanliang.site/note/抽象工厂示意图.jpg)

为了统一，需要制定一个接口规范（`IProductFactory`），所有的具体工厂和抽象工厂都要实现这一个接口，代码如下：

```java
public interface IProductFactory {
    public IProduct createProduct(String productNo);
}
```

现在再实现3个工厂类，代码如下：

```java
public class ProductFactory1 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂1生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory2 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂2生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

```java
public class ProductFactory3 implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        IProduct product = XXX;//工厂3生成产品对象规则，可以是一类产品的规则
        return product;
    }
}
```

使用一个公共的工厂，由它提供规则选择工厂，我们做如下业务约定：产品编号以x开头的用工厂`ProductFactory`x创建对象。代码如下：

```java
public class ProductFactory implements IProductFactory {
    @Override
    public IProduct createProduct(String productNo) {
        char ch = productNo.charAt(0);
        IProductFactory factory = null;
        if (ch == '1') {
            factory = new ProductFactory1();
        } else if (ch == '2') {
            factory = new ProductFactory2();
        } else if (ch == '3') {
            factory = new ProductFactory3();
        }
        if (factory != null) {
            return factory.createProduct(productNo);
        }
        return null;
    }
}
```

**对于设计者而言，`ProductFactory`就是一个抽象工厂，这样创建对象对调用者而言就简单多了。每一个工厂也只要维护其类型产品对象的生成，具体的工厂规则也不会特别复杂，难以维护。**

##7	建造者（Builder）模式

**建造者模式可以将一个产品的内部表象（属性）与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。**

比如一些旅游套票可以分为：普通成年人、退休老年人、半票有座小孩、免费无座小孩、军人及其家属等，他们有不同的规定和优惠。如果通过new或者工厂模式来创建对象会造成不便，因为参数过多，对象也复杂。

`Builder`模式是一种分步构建对象的模式。用一个配置类对各步进行统筹，然后将所有信息交由构造器来完成构造对象。

###7.1	实例

创建一个配置类的对象`TickerHelper`，它能够帮助我们一步步构建对象。代码如下所示：

```java
public class TicketHelper {
    public void buildAdult(String info) {
        System.out.println("构建成年人票逻辑：" + info);
    }

    public void buildChildrenForSeat(String info) {
        System.out.println("构建有座儿童票逻辑：" + info);
    }

    public void buildChildrenForNoSeat(String info) {
        System.out.println("构建无座儿童票逻辑：" + info);
    }

    public void buildElderly(String info) {
        System.out.println("构建老年人票逻辑：" + info);
    }

    public void buildSoldier(String info) {
        System.out.println("构建军人及其家属票逻辑：" + info);
    }
}
```

然后，需要一个构造类——`TicketBuilder`，代码如下：

```java
public class TicketBuilder {
    public static Object builder(TicketHelper helper){
        System.out.println("通过TicketHelper构建套票信息");
        return null;
    }
}
```

通过这两个类就可以构建出套票，代码如下：

```java
public class TestBuilder {
    @Test
    public void testBuilder() {
        TicketHelper helper = new TicketHelper();
        helper.buildAdult("成人票");
        helper.buildChildrenForSeat("有座儿童");
        helper.buildChildrenForNoSeat("无座儿童");
        helper.buildElderly("老年人票");
        helper.buildSoldier("军人票");
        Object ticket = TicketBuilder.builder(helper);
    }
}
```

本文参考杨开振的《JavaEE互联网轻量级框架整合开发》(String), http://cdn.alanliang.site/note/oilpainting2.jpg(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), 1(Long), 1(Integer), 2020-06-15 11:43:24.93(Timestamp), 5(Integer), 1(Integer), 2(Long)
2020-06-15 11:43:24.940 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:43:24.942 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-15 11:43:24.943 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 2(Long)
2020-06-15 11:43:24.945 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-15 11:43:24.979 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 11:43:24.980 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 2(Long), 12(Long), 2(Long), 17(Long), 2(Long), 18(Long)
2020-06-15 11:43:24.981 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 11:43:24.989 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-15 11:43:24.989 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 2(Long)
2020-06-15 11:43:24.990 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:43:25.326 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:43:25.327 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:43:25.326(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 394(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:43:25.328 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:43:31.964 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:43:31.964 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:43:31.968 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:43:31.969 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:43:31.983 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 7
2020-06-15 11:43:31.985 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:31.985 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:43:31.987 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:43:31.989 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:31.989 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:43:31.992 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:31.994 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:31.994 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:43:31.995 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:31.996 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:31.997 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:43:31.999 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:32.001 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:32.001 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:43:32.002 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:32.003 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:32.004 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:43:32.005 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:32.007 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:32.007 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:43:32.012 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:32.023 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:43:32.024 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:43:32.02(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 57(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:43:32.027 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:43:40.039 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:43:40.039 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 2(Long)
2020-06-15 11:43:40.042 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:43:40.059 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:43:40.060 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 2(Long)
2020-06-15 11:43:40.062 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:43:40.352 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:43:40.352 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:43:40.351(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=2, status=2) }(String), 0:0:0:0:0:0:0:1(String), 312(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:43:40.354 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:43:40.380 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:43:40.380 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:43:40.382 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:43:40.383 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:43:40.399 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 7
2020-06-15 11:43:40.400 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:40.400 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:43:40.402 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:43:40.404 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:40.404 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:43:40.409 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:40.410 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:40.410 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:43:40.412 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:40.415 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:40.416 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:43:40.419 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:40.420 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:40.420 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:43:40.422 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:40.426 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:40.426 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:43:40.428 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:40.429 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:40.429 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:43:40.431 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:40.441 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:43:40.442 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:43:40.439(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 60(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:43:40.444 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:43:53.972 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==>  Preparing: SELECT id,title,summary,content,text_content,cover,views,likes,comments,appreciable,commentable,published,top,recommend,author_id,category_id,type,create_time,update_time,sort,status FROM t_article WHERE id=? 
2020-06-15 11:43:53.973 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : ==> Parameters: 5(Long)
2020-06-15 11:43:53.976 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectById       : <==      Total: 1
2020-06-15 11:43:53.986 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:43:53.986 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:43:53.989 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:43:54.224 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 11:43:54.224 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:43:54.225 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 12
2020-06-15 11:43:58.815 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET title=?, summary=?, content=?, text_content=?, cover=?, appreciable=?, commentable=?, top=?, recommend=?, category_id=?, type=?, update_time=?, sort=?, status=? WHERE id=? 
2020-06-15 11:43:58.817 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 映射器(String), JavaEE互联网轻量级框架整合开发第五章(String), <h1 id="h1--5-"><a name="第5章    映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第5章    映射器</h1><p>映射器是MyBatis最复杂且最重要的组件。它由一个接口和XML文件（或者注解组成）。在映射器中，可以配置参数、各类的SQL语句、存储过程、缓存、级联等复杂的内容，并且通过简易的映射规则映射到指定的POJO或者其他对象上，映射器能有效屏蔽JDBC底层的代码。</p>
<p>映射器可以使用注解完成，但在企业应用不广，推荐使用XML方式，是因为：</p>
<ul>
<li>面对复杂性，SQL会显得无力，尤其是长句SQL；</li><li>注解的可读性较差；</li><li>注解丢失了XML上下文引用的功能</li></ul>
<h2 id="h2-5-1-"><a name="5.1    概述" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.1    概述</h2><p>映射器的常用配置元素如下表所示：</p>
<table>
<thead>
<tr>
<th>元素名称</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>select</td>
<td>查询语句，最常用、最复杂的元素之一</td>
<td>可以自定义参数，返回结果集等</td>
</tr>
<tr>
<td>insert</td>
<td>插入语句</td>
<td>执行后返回一个参数，代表插入的条数</td>
</tr>
<tr>
<td>update</td>
<td>更新语句</td>
<td>执行后返回一个参数，代表更新的条数</td>
</tr>
<tr>
<td>delete</td>
<td>删除语句</td>
<td>执行后返回一个参数，代表删除的条数</td>
</tr>
<tr>
<td><del>parameterMap</del></td>
<td>定义参数映射关系</td>
<td>即将被删除，不建议使用</td>
</tr>
<tr>
<td>sql</td>
<td>允许定义一部分SQL，然后在各个地方引用它</td>
<td>例如，定义一张表的列名，可以在多个SQL语句中使用</td>
</tr>
<tr>
<td>resultMap</td>
<td>用来描述从数据库结果集中来加载对象，它是最复杂、最强大的元素</td>
<td>提供映射规则</td>
</tr>
<tr>
<td>cache</td>
<td>给定名称空间的缓存配置</td>
<td>—-</td>
</tr>
<tr>
<td>cache-ref</td>
<td>其他命名空间缓存配置的引用</td>
<td>—-</td>
</tr>
</tbody>
</table>
<h2 id="h2-5-2-"><a name="5.2    引入映射器的方法" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2    引入映射器的方法</h2><h3 id="h3-5-2-1-"><a name="5.2.1    用文件路径引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.1    用文件路径引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;mapper resource=&quot;demo/mapper/demoMapper.xml&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，resource属性值为映射器的xml文件的资源路径</p>
<h3 id="h3-5-2-2-"><a name="5.2.2    用包名引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.2    用包名引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;package name=&quot;demo.mapper&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，name属性值为映射器的接口所在包的全限定名</p>
<h3 id="h3-5-2-3-"><a name="5.2.3    用类注册引入映射器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.2.3    用类注册引入映射器</h3><pre><code class="lang-xml">&lt;mappers&gt;
    &lt;mapper class=&quot;demo.mapper.DemoMapper1&quot;/&gt;
     &lt;mapper class=&quot;demo.mapper.DemoMapper2&quot;/&gt;
&lt;/mappers&gt;
</code></pre>
<p>其中，class属性值为映射器的接口的全限定名</p>
<h2 id="h2-5-3-select-"><a name="5.3    select元素——查询语句" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3    select元素——查询语句</h2><p>select元素的常用配置如下表所示：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>它和Mapper的命名空间组合起来是唯一的，供MyBatis调用</td>
<td>如果命名空间和id结合起来不唯一，MyBatis会抛出异常</td>
</tr>
<tr>
<td>parameterType</td>
<td>可以给出类的全限定名，也可以是别名，但是别名必须是MyBatis内部定义或者自定义的</td>
<td>可以选择JavaBean、Map等简单的参数类型传递给SQL</td>
</tr>
<tr>
<td><del>parameterMap</del></td>
<td>即将废弃的元素，不建议使用</td>
<td>—-</td>
</tr>
<tr>
<td>resultType</td>
<td>定义类的全路径，在允许自动匹配的情况下，结果集将通过JavaBean的规则映射；或定义为in、double、float、map等参数；也可以使用别名，但是要符合别名规范，且不能和resultMap同时使用</td>
<td>常用的参数之一，比如统计总条数时可以把它的值设置为int</td>
</tr>
<tr>
<td>resultMap</td>
<td>它是映射集的引用，将执行强大的映射功能。我们可以使用resultType和resultMap其中的一个，resultMap能提供自定义映射规则的机会</td>
<td>MyBatis最复杂的元素，可以配置映射规则、级联、typeHandler等</td>
</tr>
</tbody>
</table>
<p>另外，如果还要设置缓存，还会使用到FlushCache、useCache，这里不展开讲。</p>
<h3 id="h3-5-3-1-select-"><a name="5.3.1    简单的select元素的应用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.1    简单的select元素的应用</h3><p>先学习一个最简单的例子：统计用户表同一个姓氏的用户数量，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;countByFirstName&quot; parameterType=&quot;string&quot; resultType=&quot;int&quot;&gt;
    select count(*) total from t_user where user_name like concat(#{firstName},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>其中的元素含义：</p>
<ul>
<li>id：SQL语句的唯一标识</li><li>parameterType：SQL语句接收的参数类型，可以是类的别名也可以是类的全限定名</li><li>resultType：SQL语句返回的结果类型，可以是类的别名也可以是类的全限定名</li></ul>
<p>接着还需要定义一个接口方法，代码如下所示：</p>
<pre><code class="lang-java">public interface UserMapper {
    int countByFirstName(String firstName);
}
</code></pre>
<h3 id="h3-5-3-2-"><a name="5.3.2    自动映射和驼峰规则" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.2    自动映射和驼峰规则</h3><p>MyBatis提供自动映射功能，在默认情况下是开启的。</p>
<p>在settings元素中有两个可配置选项autoMappingBehavior和mapUnderscoreToCamelCase，它们是控制自动映射和驼峰映射的开关。一般而言，自动映射使用的多一些，而驼峰映射要求比较苛刻，应用不广。</p>
<p>autoMappingBehavior的取值有：</p>
<ul>
<li>NONE，不进行自动映射</li><li>PARTIAL，默认值，只对没有嵌套结果集进行自动映射</li><li>FULL，对所有的结果集进行自动映射，包括嵌套结果集</li></ul>
<p>在默认情况下使用默认值即可。规则如下所示：</p>
<pre><code class="lang-java">public class Role {
    private Long id;
    private String roleName;
    private String note;
    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<p>如果编写的SQL列名和POJO的属性名一致，那么就会形成自动映射。原来的列名role_name被别名roleName替代，所以也会对应起来。</p>
<h3 id="h3-5-3-3-"><a name="5.3.3    传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3    传递多个参数</h3><h4 id="h4-5-3-3-1-map-"><a name="5.3.3.1    使用map接口传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.1    使用map接口传递多个参数</h4><p>假设要通过角色名称（role_name）和备注（note）两个参数对角色进行模糊查询，则可以使用map接口。</p>
<p>把接口方法定义为：    </p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByMap(Map&lt;String,Object&gt; parameterMap);
</code></pre>
<p>使用它在SQL中设置对应的参数，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRolesByMap&quot; parameterType=&quot;map&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>测试如下：</p>
<pre><code class="lang-java">@Test
public void test2() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Map&lt;String, Object&gt; parameterMap = new HashMap&lt;&gt;();
    parameterMap.put(&quot;roleName&quot;, &quot;1&quot;);
    parameterMap.put(&quot;note&quot;, &quot;1&quot;);
    List&lt;Role&gt; roles = roleMapper.findRolesByMap(parameterMap);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>由于使用map不能限定其传递的数据类型，所以业务性质不强，可读性差，因此不推荐使用。</p>
<h4 id="h4-5-3-3-2-"><a name="5.3.3.2    使用注解传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.2    使用注解传递多个参数</h4><p>MyBatis提供了<a href="https://github.com/Param" title="&#64;Param" class="at-link">@Param</a>注解，它可以定义映射器的参数名称，使用它可读性更好。把接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByAnnotation(@Param(&quot;roleName&quot;) String roleName,
                                 @Param(&quot;note&quot;) String note);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-java">&lt;select id=&quot;findRolesByAnnotation&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>注意，此时不用给出parameterType属性，MyBatis会自动探索。<br>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test3() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    List&lt;Role&gt; roles = roleMapper.findRolesByAnnotation(&quot;1&quot;,&quot;1&quot;);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>改写后可读性大大提高，但是如果SQL很复杂，参数很多，那么接口方法的参数个数也会很多，这样使用很不方便。所以，MyBatis还提供了传递JavaBean的形式。</p>
<h4 id="h4-5-3-3-3-javabean-"><a name="5.3.3.3    通过JavaBean传递多个参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.3    通过JavaBean传递多个参数</h4><p>首先定义一个参数的POJO——RoleParams，代码如下所示：</p>
<pre><code class="lang-java">public class RoleParams {
    private String roleName;
    private String note;

    public RoleParams(){}
    /*getter and setter*/
}
</code></pre>
<p>此时把接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findRolesByBean(RoleParams roleParams);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findRolesByBean&quot; parameterType=&quot;com.ssm.learn.chapter5.pojo.RoleParams&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>注意此时的parameterType属性值修改为RoleParams的全限定名或者别名。</p>
<p>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test5() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RoleParams roleParams = new RoleParams();
    roleParams.setRoleName(&quot;1&quot;);
    roleParams.setNote(&quot;1&quot;);
    List&lt;Role&gt; roles = roleMapper.findRolesByBean(roleParams);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<h4 id="h4-5-3-3-4-"><a name="5.3.3.4    混合使用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.4    混合使用</h4><p>在某种情况下可能需要混合使用几种方式来传递参数。比如通过角色名称和备注查询一个角色，与此同时还支持分页，分页的POJO——PageParams如下所示：</p>
<pre><code class="lang-java">public class PageParams {
    private int start;
    private int limit;

    public PageParams(){}
    /*getter and setter*/
}
</code></pre>
<p>此时接口方法定义为：</p>
<pre><code class="lang-java">List&lt;Role&gt; findByMix(@Param(&quot;params&quot;)RoleParams roleParams, 
                     @Param(&quot;page&quot;)PageParams pageParams);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findByMix&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{params.roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{params.note},&#39;%&#39;)
    limit #{page.start},#{page.limit}
&lt;/select&gt;
</code></pre>
<p>可以看到MyBatis对RoleParams、PageParams这类的JavaBean提供EL（中间）支持</p>
<h4 id="h4-5-3-3-5-"><a name="5.3.3.5    总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.3.5    总结</h4><p>对4种传递参数的方法进行评价：</p>
<ul>
<li>使用map传递参数丧失了业务可读性，实际应用应该果断废弃；</li><li>使用<a href="https://github.com/Param" title="&#64;Param" class="at-link">@Param</a>注解适用于参数较少的情况，一般不超过5个；</li><li>当参数多于5个时，建议使用JavaBean方式；</li><li>对于使用混合参数的，要明确参数合理性</li></ul>
<h3 id="h3-5-3-4-resultmap-"><a name="5.3.4    使用resultMap映射结果集" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.4    使用resultMap映射结果集</h3><p>为了支持复杂的映射，select元素提供了resultMap属性。先定义resultMap属性，代码如下所示：</p>
<pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;getRoleUseResultMap&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMap&quot;&gt;
         select id,role_name as roleName,note from t_role where id = #{id};
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>resultMap的属性id是它的标识，type代表使用哪个类作为其映射的类，可以是别名或者全限定名；</li><li>它的子元素id代表resultMap的主键，而result代表其属性，id和result元素的属性property代表POJO的属性名称，而column代表SQL的列名。把POJO的属性和SQL的列名做对应。</li><li>在select中resultMap属性表明使用哪个resultMap作为映射规则</li></ul>
<h4 id="h4-5-3-5-rowbounds"><a name="5.3.5    分页参数RowBounds" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.3.5    分页参数RowBounds</h4><p>MyBatis不仅支持分页，而且还提供了专门处理分页的类——RowBounds。使用它很简单，只要给接口增加一个RowBounds参数即可。</p>
<pre><code class="lang-java"> List&lt;Role&gt; findByRowBounds(@Param(&quot;roleName&quot;) String roleName,
                            @Param(&quot;note&quot;) String note,
                            RowBounds rowBounds);
</code></pre>
<p>修改映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;findByRowBounds&quot; resultType=&quot;role&quot;&gt;
    select id,role_name as roleName,note from t_role
    where role_name like concat(&#39;%&#39;,#{roleName},&#39;%&#39;)
    and note like concat(&#39;%&#39;,#{note},&#39;%&#39;)
&lt;/select&gt;
</code></pre>
<p>代码中没有关于RowBounds的参数信息，它是MyBatis的一个附加参数，MyBatis会自动识别并完成分页。</p>
<p>测试如下所示：</p>
<pre><code class="lang-java">@Test
public void test7() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RowBounds rowBounds = new RowBounds(0, 20);
    List&lt;Role&gt; roles = roleMapper.findByRowBounds(&quot;1&quot;, &quot;1&quot;, rowBounds);
    logger.info(roles);
    sqlSession.close();
}
</code></pre>
<p>RowBounds接收两个参数，第一个是偏移量offset，第二个参数是限制条数limit，这里表示从1条开始限定返回至多20条记录的结果。RowBounds只适合查询少量数据的场景，查询大量数据可以使用分页插件。</p>
<h2 id="h2-5-4-insert-"><a name="5.4    insert元素——插入语句" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4    insert元素——插入语句</h2><p>insert元素的常用配置如下表所示：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>SQL编号，用于表示这条SQL语句</td>
<td>命名空间+id+databaseId唯一，否则MyBatis会抛出异常</td>
</tr>
<tr>
<td>parameterType</td>
<td>参数类型，同select元素</td>
<td>和select元素一样，可以是单个参数或者多个参数</td>
</tr>
<tr>
<td>useGeneratedKeys</td>
<td>是否启用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键。（比如MySQL和SQL Server这样的数据库表的自增主键）</td>
<td>默认值为false</td>
</tr>
<tr>
<td>keyProperty</td>
<td>（仅对insert和update有用）唯一标记一个属性，MyBatis会通过getGeneratedKeys的返回值，或者通过insert语句的selectKey子元素设置它的键值。如果是复合主键，要把每一个名称用逗号隔开</td>
<td>默认值为unset。不能和KeyColumn连用</td>
</tr>
<tr>
<td>keyColumn</td>
<td>（仅对insert和update有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像PostgreSQL）中是必须的，当主键列不是表中的第一列时需要设置。如果是复合主键，要把每一个名称用逗号隔开</td>
<td>不能和KeyProperty连用</td>
</tr>
</tbody>
</table>
<p>执行一条insert语句后，会返回一个整数表示其影响记录数。</p>
<h3 id="h3-5-4-2-insert-"><a name="5.4.2    简单的insert语句的应用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.2    简单的insert语句的应用</h3><p>写一条SQL插入角色，这是一条最简单的插入语句，代码如下所示：</p>
<pre><code class="lang-xml">&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot;&gt;
    insert into t_role(role_name,note)  values (#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<ul>
<li>id表示这条SQL；</li><li>parameterType代表传入参数类型；</li><li>没有配置的属性采用默认值</li></ul>
<h3 id="h3-5-4-3-"><a name="5.4.3    主键回填" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.3    主键回填</h3><p>上面的代码并没有插入id列，因为MySQL中的表采用了自增主键，但有时候还需要这个主键来关联其它业务。</p>
<p>insert标签中有这样一个属性useGeneratedKeys来获取主键，打开这个开关后，还要配置其属性keyProperty或keyColumn，告诉系统把生成的主键放入哪个属性，如果存在多个主键，就用逗号隔开。</p>
<p>修改映射文件，让程序返回主键，代码如下所示：</p>
<pre><code class="lang-xml">&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
    insert into t_role(role_name,note)  values (#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<p>这样就会把数据库生成的主键回填至keyProperty指定的POJO属性，这里是id。</p>
<p>测试主键回填的结果，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void test8() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Role role = new Role();
    role.setRoleName(&quot;二郎神&quot;);
    role.setNote(&quot;杨戬&quot;);
    logger.info(role);
    roleMapper.insertRole(role);
    logger.info(role);
    sqlSession.close();
}
</code></pre>
<p>运行可看到，在执行insertRole方法前roleid值为null，而执行后值不为null。</p>
<h3 id="h3-5-4-4-"><a name="5.4.4    自定义主键" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.4.4    自定义主键</h3><p>有时候主键可能依赖于某些规则，比如取消角色表的id递增规则，修改为：</p>
<ul>
<li>当角色表记录为空时，id设置为1</li><li>当角色表记录不为空时，id设置为当前id加3</li></ul>
<p>MyBatis可用selectKey元素实现自定义键值的生成规则。代码如下所示：</p>
<pre><code class="lang-xml">&lt;&lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;long&quot; order=&quot;BEFORE&quot;&gt;
        select if (max(id) = null,1,max(id)+3) from t_role
    &lt;/selectKey&gt;
    insert into t_role(id,role_name,note)  values (#{id},#{roleName},#{note});
&lt;/insert&gt;
</code></pre>
<p>以上代码定义了selectKey元素，它的keyProperty指定了id属性作为POJO的主键，resultType指定了返回long型的结果集，而order属性为BEFORE表示它将于当前定义的SQL前执行。</p>
<h2 id="h2-5-5-update-delete-"><a name="5.5    update元素和delete元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.5    update元素和delete元素</h2><p>update元素和delete元素比较简单，和insert元素差不多，执行后也会返回一个整数，用来标识该SQL语句影响了数据库的记录行数。更新和删除角色表记录，代码如下所示：</p>
<pre><code class="lang-xml">&lt;update id=&quot;updateRole&quot; parameterType=&quot;role&quot;&gt;
    update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
&lt;/update&gt;
</code></pre>
<pre><code class="lang-xml">&lt;delete id=&quot;deleteRole&quot; parameterType=&quot;long&quot;&gt;
    delete from t_role where id = #{id};
&lt;/delete&gt;
</code></pre>
<h2 id="h2-5-6-sql-"><a name="5.6    sql元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.6    sql元素</h2><p>sql元素的作用在于可以定义一条SQL的一部分，方便后面的SQL引用它，比如最典型的列名，通常情况下要在select、insert语句中反复编写，特别字段多的表。这时候可以使用sql元素，代码如下所示：</p>
<pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;&lt;!--namespace对应接口的全限定名--&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;sql id=&quot;roleCols&quot;&gt;
        id,role_name,note
    &lt;/sql&gt;

    &lt;select id=&quot;getRole&quot; resultType=&quot;role&quot;&gt;
        select &lt;include refid=&quot;roleCols&quot;/&gt; from t_role where id = #{id};
    &lt;/select&gt;

    &lt;insert id=&quot;insertRole&quot; parameterType=&quot;role&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
        &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;long&quot; order=&quot;BEFORE&quot;&gt;
            select if (max(id) = null,1,max(id)+3) from t_role
        &lt;/selectKey&gt;
        insert into t_role(&lt;include refid=&quot;roleCols&quot;/&gt;)  values (#{id},#{roleName},#{note});
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre>
<p>可以看到，通过sql元素定义，就可以include元素引入到各条SQL语句中，减少了列名的重复编写。</p>
<p>sql元素还支持变量传递，如下所示：</p>
<pre><code class="lang-xml">&lt;sql id=&quot;roleCols&quot;&gt;
    ${alias}.id,${alias}.role_name ,${alias}.note
&lt;/sql&gt;
&lt;select id=&quot;getRole&quot; resultType=&quot;role&quot;&gt;
    select 
    &lt;include refid=&quot;roleCols&quot;&gt;
        &lt;property name=&quot;alias&quot; value=&quot;r&quot;/&gt;
    &lt;/include&gt;
    from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<p>在include元素中定义了一个命名为alias的变量，其值是SQL表t_role的别名r，然后sql元素就可以使用这个变量名了。</p>
<h2 id="h2-5-7-resultmap-"><a name="5.7    resultMap元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.7    resultMap元素</h2><p>resultMap的作用主要是定义映射规则，也就是SQL到JavaBean的映射关系。</p>
<h3 id="h3-5-7-1-pojo-"><a name="5.7.1    使用POJO存储结果集" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.7.1    使用POJO存储结果集</h3><pre><code class="lang-xml">&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.RoleMapper&quot;&gt;
    &lt;resultMap id=&quot;roleMap&quot; type=&quot;role&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;roleName&quot; column=&quot;role_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>resultMap元素的属性id代表这个resultMap的标识，type代表需要映射的POJO，这里可以使用别名或者全限定名。在映射关系中，id表示对象的主键，property表示POJO的属性名称，column表示数据库列名。于是POJO就和数据库SQL的结果一一对应起来了。配置完成即可使用resultMap，如下所示：</p>
<pre><code class="lang-xml">&lt;select id=&quot;getRoleUseResultMap&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMap&quot;&gt;
     select id,role_name as roleName,note from t_role where id = #{id};
&lt;/select&gt;
</code></pre>
<h2 id="h2-5-8-"><a name="5.8    级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8    级联</h2><p>级联是一个数据库实体的概念。比如角色就需要存在用户与之对应，这样就有角色用户表，一个角色可能有多个用户，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。在MyBatis中还有一种被称为鉴别器的级联，它是一种可以选择具体实现类的级联，比如要查找雇员及其体检表的信息，但是雇员有性别之分，而根据性别的不同，其体检表的项目也会不一样，比如男性体检表可能有前列腺的项目，而女子体检表可能有子宫的项目，那么体检表应该分为男性和女性，从而根据雇员性别区关联。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统的复杂度，同时降低系统性能，一般最好不超过3层。</p>
<h3 id="h3-5-8-1-mybatis-"><a name="5.8.1    MyBatis中的级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.1    MyBatis中的级联</h3><p>MyBatis中的级联分为3种。</p>
<ul>
<li>鉴别器（discriminator）：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>值得注意的是，MyBatis没有多对多级联，因为多对多级联比较复杂，使用困难，而且可以通过两个一对多进行替换，所有MyBatis不支持。</p>
<p>为了更好地阐述级联，先给出一个雇员级联模型。</p>
<ul>
<li>该模型以雇员表为中心</li><li>雇员表和工牌表是一对一级联关系</li><li>雇员表和员工任务表是一对多级联关系</li><li>员工任务表和任务表是一对一级联关系</li><li>每个雇员都会有一个体检表，随着雇员字段性别取值不同，会有不同的关联表</li></ul>
<p>mysql脚本略</p>
<h3 id="h3-5-8-2-pojo"><a name="5.8.2    建立POJO" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.2    建立POJO</h3><p>男性体检表和女性体检表继承于体检表，因此可以得出3个体检表，代码如下所示：</p>
<pre><code class="lang-java">public class HealthForm {

   private Long id;
   private Long empId;
   private String heart;
   private String liver;
   private String spleen;
   private String lung;
   private String kidney;
   private String note;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class MaleHealthForm extends HealthForm {

   private String prostate;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class FemaleHealthForm extends HealthForm {

   private String uterus;

    /*getter and setter*/
}
</code></pre>
<p>显然这个关联关系是通过MyBatis的鉴别器去完成。</p>
<p>接下来设计员工表、工牌表和任务表的POJO，它们是以员工表为核心的，先完成工牌表和任务表的POJO，代码如下所示：</p>
<pre><code class="lang-java">public class WorkCard {
   private Long id;
   private Long empId;
   private String realName;
   private String department;
   private String mobile;
   private String position;
   private String note;

   /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class Task {
   private Long id;
   private String title;
   private String context;
   private String note;

   /*getter and setter*/
}
</code></pre>
<p>雇员任务表是通过任务编号(task_id)和任务进行一对一管理，这里只考虑其自身和任务编号的关联，而雇员对它的关联则由雇员去维护，这样就可得到雇员任务POJO，代码如下所示：</p>
<pre><code class="lang-java">public class EmployeeTask {
   private Long id;
   private Long empId;
    //任务按一对一级联
   private Task task = null;
   private String taskName;
   private String note;

   /*getter and setter*/
}
</code></pre>
<p>属性task是一个Task类对象，由它进行关联任务信息。</p>
<p>男雇员和女雇员继承于雇员，这就是一个鉴别器，通过雇员类的属性性别来决定使用哪个具体的子类初始化对象。它与工牌表是一对一关联关系，对于雇员任务表是一对多关联关系，由此可以得出3个类，代码如下所示：</p>
<pre><code class="lang-java">public class Employee {

   private Long id;
   private String realName;
   private SexEnum sex = null;
   private Date birthday;
   private String mobile;
   private String email;
   private String position;
   private String note;
    //工牌按一对一级联
   private WorkCard workCard;
   //雇员任务按一对多级联
   private List&lt;EmployeeTask&gt; employeeTaskList = null;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class MaleEmployee extends Employee {

   private MaleHealthForm maleHealthForm = null;

   /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">public class FemaleEmployee extends Employee {

   private FemaleHealthForm femaleHealthForm = null;

   /*getter and setter*/
}
</code></pre>
<h3 id="h3-5-8-3-"><a name="5.8.3    配置映射文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.3    配置映射文件</h3><p>配置TaskMapper.xml和WorkCardMapper.xml，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.TaskMapper&quot;&gt;
    &lt;select id=&quot;getTask&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.Task&quot;&gt;
        select id,title,context,note from t_task where id =#{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.WorkCardMapper&quot;&gt;
    &lt;select id=&quot;getWorkCardByEmpId&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.WorkCard&quot;&gt;
        select id, emp_id as empId, real_name as realName, department, mobile, position, note FROM t_work_card
        where emp_id = #{empId}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>雇员任务表通过任务编号（task_id）和任务表示关联，这是一个一对一的级联关系，使用association元素，雇员任务表一对一级联如代码所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper&quot;&gt;
    &lt;resultMap id=&quot;EmployeeTaskMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.EmployeeTask&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;empId&quot; column=&quot;emp_id&quot;/&gt;
        &lt;result property=&quot;taskName&quot; column=&quot;task_name&quot;/&gt;
        &lt;result property=&quot;note&quot; column=&quot;note&quot;/&gt;

        &lt;association property=&quot;task&quot; column=&quot;task_id&quot; select=&quot;com.ssm.learn.chapter5.mapper.TaskMapper.getTask&quot;/&gt;

    &lt;/resultMap&gt;

    &lt;select id=&quot;getEmployeeTaskByEmpId&quot; resultMap=&quot;EmployeeTaskMap&quot;&gt;
        select id, emp_id, task_id, note from t_employee_task where emp_id = #{empId}
    &lt;/select&gt;

&lt;/mapper&gt;
</code></pre>
<p>注意，association元素代表一对一级联的开始。property属性代表映射到POJO属性上。select配置是命名空间+SQL id的形式，这样便可以指向对应Mapper的SQL，MyBatis就会通过对应的SQL将数据查询回来。column代表SQL的列，用作参数传递给select属性制定的SQL，如果是多个参数则用逗号隔开。</p>
<p>体检表能拆分为男性雇员和女性雇员，所以就有两个简单的映射器，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.MaleHealthFormMapper&quot;&gt;
   &lt;select id=&quot;getMaleHealthForm&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.MaleHealthForm&quot;&gt;
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_male_health_form
       where emp_id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper&quot;&gt;
   &lt;select id=&quot;getFemaleHealthForm&quot; parameterType=&quot;long&quot; resultType=&quot;com.ssm.learn.chapter5.pojo.FemaleHealthForm&quot;&gt;
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_female_health_form
       where emp_id = #{id}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>创建雇员的映射关系，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper.EmployeeMapper&quot;&gt;
    &lt;resultMap id=&quot;employee&quot; type=&quot;com.ssm.learn.chapter5.pojo.Employee&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result column=&quot;real_name&quot; property=&quot;realName&quot;/&gt;
        &lt;result column=&quot;sex&quot; property=&quot;sex&quot; typeHandler=&quot;com.ssm.learn.chapter5.typeHandler.SexTypeHandler&quot;/&gt;
        &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;/&gt;
        &lt;result column=&quot;mobile&quot; property=&quot;mobile&quot;/&gt;
        &lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;
        &lt;result column=&quot;position&quot; property=&quot;position&quot;/&gt;
        &lt;result column=&quot;note&quot; property=&quot;note&quot;/&gt;
        &lt;association property=&quot;workCard&quot; column=&quot;id&quot;
                     select=&quot;com.ssm.learn.chapter5.mapper.WorkCardMapper.getWorkCardByEmpId&quot;/&gt;
        &lt;collection property=&quot;employeeTaskList&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId&quot;/&gt;
        &lt;discriminator javaType=&quot;long&quot; column=&quot;sex&quot;&gt;
            &lt;case value=&quot;1&quot; resultMap=&quot;MaleHealthFormMapper&quot;/&gt;
            &lt;case value=&quot;2&quot; resultMap=&quot;FemaleHealthFormMapper&quot;/&gt;
        &lt;/discriminator&gt;
    &lt;/resultMap&gt;

    &lt;resultMap id=&quot;FemaleEmployeeMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.FemaleEmployee&quot; extends=&quot;employee&quot;&gt;
        &lt;association property=&quot;femaleHealthForm&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper.getFemaleHealthForm&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;resultMap id=&quot;MaleEmployeeMap&quot; type=&quot;com.ssm.learn.chapter5.pojo.MaleEmployee&quot; extends=&quot;employee&quot;&gt;
        &lt;association property=&quot;maleHealthForm&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.MaleHealthFormMapper.getMaleHealthForm&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;select id=&quot;getEmployee&quot; parameterType=&quot;long&quot; resultMap=&quot;employee&quot;&gt;
        select id, real_name as realName, sex, birthday, mobile, email, position, note, from t_employee
        where id = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<ul>
<li>association元素，对工牌进行一对一级联。</li><li>collection元素，一对多级联，其select元素指向SQL，将通过column制定的SQL字段作为参数进行传递，然后将结果返回给雇员POJO的属性employeeTaskList。</li><li>discriminator元素，鉴别器，它的属性column代表使用哪个字段进行鉴别，这里是sex，而它的子元素case，则用于进行区分。而resultMap属性表示采用哪个ResultMap去映射，比如sex为1，则使用maleHealthFormMapper进行映射。</li></ul>
<p>而对于雇员体检表而言，id为employee的resultMap，被maleHealthMapper和femaleHealthMapper通过extends元素继承。</p>
<p>测试级联，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void test9() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);
        Employee employee = employeeMapper.getEmployee(1L);
        logger.info(employee.getBirthday());
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }

}
</code></pre>
<p>运行可以看到所有级联都成功了，但是这会引发性能问题，这叫N+1问题。</p>
<h3 id="h3-5-8-4-n-1-"><a name="5.8.4    N+1问题" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.4    N+1问题</h3><p>比如作为一个雇员的管理者，它只想看到员工信息和员工任务信息，那么体检表和工牌的信息就是多余的。</p>
<p>假设现在有N个关联关系完成了级联，那么只要再加入一个级联关系，就变成了N+1个级联，所有的级联SQL都会被执行，显然会有很多并不是我们关心的数据被取出，这样会造成很大的资源浪费，这就是N+1问题。</p>
<p>为了应对N+1问题，MyBatis提供了延迟加载功能，即在一开始取出雇员信息是，并不需要将工牌表、体检表、任务表的记录取出，而是只将雇员信息和雇员任务表的信息取出。当我们通过雇员POJO访问工牌表时，体检表和任务表的记录才通过对应的SQL取出。</p>
<h3 id="h3-5-8-5-"><a name="5.8.5    延迟加载" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.5    延迟加载</h3><p>MyBatis提供延迟加载，我们希望一次性把常用的级联数据通过SQL直接查询出来，而对于那些不常用的级联数据不要取出，而是等待要用时才取出，这些不常用的级联数据可以采用延迟加载的功能。</p>
<p>在MyBatis的settings配置中存在两个元素可以配置级联，如下所示：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>作用</th>
<th>配置选项说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>aggressiveLazyLoading</td>
<td>当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载</td>
<td>true\</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>修改MyBatis配置文件，增加如下代码：</p>
<pre><code class="lang-xml">&lt;settings&gt;
    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;
    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;true&quot;/&gt;
&lt;/settings&gt;
</code></pre>
<p>选项lazyLoadingEnabled决定是否开启延迟加载，而选项aggressiveLazyLoading决定是否采用层级加载，但是它们都是全局性配置，不能解决我们的需求。在MyBatis中使用fetchType属性，它可以处理全局定义无法处理的问题，进行自定义。fetchType出现在级联元素（association、collection，注意，discrimination没有这个属性）中，它由两个值可选：</p>
<ul>
<li>eager，获得当前POJO后立即加载对应的数据。</li><li>lazy，获得当前POJO后延迟加载对应的数据。</li></ul>
<p>在保证lazyLoadingEnabled=true和aggressiveLazyLoading=false的前提下，对雇员的映射文件关于雇员属性、雇员任务进行如下修改：</p>
<pre><code class="lang-xml">&lt;collection property=&quot;employeeTaskList&quot; column=&quot;id&quot; select=&quot;com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId&quot; fetchType=&quot;eager&quot;/&gt;
</code></pre>
<p>然后进行调试，这个时候已经按照我们的要求加载了数据，先加载雇员信息，然后加载雇员任务信息。fetchType属性会忽略全局配置项lazyLoadingEnabled和aggressiveLazyLoading。</p>
<h3 id="h3-5-8-6-"><a name="5.8.6    多对多级联" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.8.6    多对多级联</h3><p>现实中有许多用户，用户由归属于一些角色，这样一个用户可以对应多个角色，而一个角色又可以由多个用户担当。这就是多对多关联关系。但更多的都是拆分为两个一对多的关系，也就是一个角色对应多个用户和一个用户对应多个角色，这样就可以设计用户和角色的POJO了，代码如下所示：</p>
<pre><code class="lang-java">package com.ssm.learn.chapter5.pojo2;

import java.util.List;

public class Role2 {
   private Long id;
   private String roleName;
   private String note;
   // 关联用户信息，一对多关联
   private List&lt;User2&gt; userList;

    /*getter and setter*/
}
</code></pre>
<pre><code class="lang-java">package com.ssm.learn.chapter5.pojo2;

import java.util.List;

import com.ssm.learn.chapter5.enumeration.SexEnum;

public class User2 {
   private Long id;
   private String userName;
   private String realName;
   private SexEnum sex;
   private String moble;
   private String email;
   private String note;
   // 对角色一对多关联
   private List&lt;Role2&gt; roleList;

    /*getter and setter*/
}
</code></pre>
<p>配置映射文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper2.RoleMapper2&quot;&gt;
   &lt;resultMap type=&quot;com.ssm.learn.chapter5.pojo2.Role2&quot; id=&quot;roleMapper&quot;&gt;
      &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;
      &lt;result column=&quot;role_name&quot; property=&quot;roleName&quot; /&gt;
      &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;
      &lt;collection property=&quot;userList&quot; column=&quot;id&quot; fetchType=&quot;lazy&quot;
         select=&quot;com.ssm.learn.chapter5.mapper2.UserMapper2.findUserByRoleId&quot; /&gt;
   &lt;/resultMap&gt;

   &lt;select id=&quot;getRole&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMapper&quot;&gt;
      select id, role_name, note from t_role where id = #{id}
   &lt;/select&gt;

   &lt;select id=&quot;findRoleByUserId&quot; parameterType=&quot;long&quot; resultMap=&quot;roleMapper&quot;&gt;
      select r.id, r.role_name, r.note from t_role r, t_user_role ur
      where r.id = ur.role_id and ur.user_id = #{userId}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.ssm.learn.chapter5.mapper2.UserMapper2&quot;&gt;
   &lt;resultMap type=&quot;com.ssm.learn.chapter5.pojo2.User2&quot; id=&quot;userMapper&quot;&gt;
      &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;
      &lt;result column=&quot;user_name&quot; property=&quot;userName&quot; /&gt;
      &lt;result column=&quot;real_name&quot; property=&quot;realName&quot; /&gt;
      &lt;result column=&quot;sex&quot; property=&quot;sex&quot;
         typeHandler=&quot;com.ssm.learn.chapter5.typeHandler.SexTypeHandler&quot; /&gt;
      &lt;result column=&quot;mobile&quot; property=&quot;moble&quot; /&gt;
      &lt;result column=&quot;email&quot; property=&quot;email&quot; /&gt;
      &lt;result column=&quot;position&quot; property=&quot;position&quot; /&gt;
      &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;
      &lt;collection property=&quot;roleList&quot; column=&quot;id&quot; fetchType=&quot;lazy&quot;
         select=&quot;com.ssm.learn.chapter5.mapper2.RoleMapper2.findRoleByUserId&quot; /&gt;
   &lt;/resultMap&gt;
   &lt;select id=&quot;getUser&quot; parameterType=&quot;long&quot; resultMap=&quot;userMapper&quot;&gt;
      select id, user_name, real_name, sex, moble, email, note from t_user where
      id =#{id}
   &lt;/select&gt;
   &lt;select id=&quot;findUserByRoleId&quot; parameterType=&quot;long&quot; resultMap=&quot;userMapper&quot;&gt;
      select u.id, u.user_name, u.real_name, u.sex, u.moble, u.email, u.note
      from
      t_user u , t_user_role ur where u.id = ur.user_id and ur.role_id =#{roleId}
   &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>这里都使用了collection去关联，但是把fetchType都设置为lazy，启用延时加载。</p>
<p>测试代码如下：</p>
<pre><code class="lang-java">@Test
public void test10(){
    SqlSession sqlSession=null;
    try{
        sqlSession=SqlSessionFactoryUtils.openSqlSession();
        RoleMapper2 roleMapper2 = sqlSession.getMapper(RoleMapper2.class);
        Role2 role = roleMapper2.getRole(1L);
        role.getUserList();
        UserMapper2 userMapper2 = sqlSession.getMapper(UserMapper2.class);
        User2 user = userMapper2.getUser(1L);
    }catch (Exception e){
        e.printStackTrace();
    }finally {
        if(sqlSession!=null){
            sqlSession.close();
        }
    }
}
</code></pre>
<p>运行程序可以看到执行了3条SQL，因为调用getUserList所以才有了第二条SQL。</p>
<h2 id="h2-5-9-"><a name="5.9    缓存" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.9    缓存</h2><p>在MyBatis中允许使用缓存，把那些常用且命中率高的数据缓存起来，能够有效提高系统性能。</p>
<p>MyBatis分为一级缓存和二级缓存，同时可以配置关于缓存的设置。</p>
<h3 id="h3-5-9-1-"><a name="5.9.1    一级缓存和二级缓存" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5.9.1    一级缓存和二级缓存</h3><p>一级缓存是在SqlSession上的缓存，默认自动开启。二级缓存是在SqlSessionFactory上的缓存。</p>
<p>没有任何配置的环境测试一级缓存，代码如下所示：</p>
<pre><code class="lang-java">@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        logger.info(&quot;再获取一次POJO......&quot;);
        Role role2 = roleMapper.getRole(1L);
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }
}
</code></pre>
<p>运行代码，得到如下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 16:42:22,848 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:42:22,883 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 16:42:22,899 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 16:42:22,899 com.ssm.learn.chapter5.test.MyTest: 再获取一次POJO......
DEBUG 2020-02-25 16:42:22,900 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@63440df3]
</code></pre>
<p>可以看到虽然对同一个对象进行了两次获取，但是实际上只有一条SQL被执行，其原因是代码使用了同一个SqlSession对象获取数据。当一个SqlSession第一次通过SQL和参数获取对象后就会将它缓存起来，如果下次的SQL和参数没有发生变化，并且缓存没有超时或者声明需要刷新时，它就会从缓存中获取数据，而不是通过SQL获取了。修改代码，如下所示：</p>
<pre><code class="lang-java">@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    SqlSession sqlSession2 = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        sqlSession2 = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
        sqlSession.commit();
        logger.info(&quot;不同sqlSession再获取一次POJO......&quot;);
        RoleMapper roleMapper2 = sqlSession2.getMapper(RoleMapper.class);
        Role role2 = roleMapper2.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
        if (sqlSession2 != null) {
            sqlSession2.close();
        }
    }
}
</code></pre>
<p>运行代码，得到以下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 16:55:56,004 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:55:56,039 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 16:55:56,056 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 16:55:56,057 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 16:55:56,057 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Opening JDBC Connection
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.datasource.pooled.PooledDataSource: Created connection 1956710488.
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@74a10858]
DEBUG 2020-02-25 16:55:56,063 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?;
</code></pre>
<p>可以看到SQL被执行了两次，这说明一级缓存是在SqlSession层面的，对于不同的SqlSession对象是不能共享的。为了是SqlSession对象之间共享相同的缓存，有时候需要开启二级缓存，只需要在映射文件上加入代码：</p>
<pre><code class="lang-xml">&lt;cache/&gt;
</code></pre>
<p>这个时候MyBatis会序列化和反序列化对应的POJO，也就要求POJO是一个可序列化的对象，那么它就必须实现Serializable接口。代码如下所示：</p>
<pre><code class="lang-java">public class Role implements Serializable {
    ...
}
</code></pre>
<p>再次运行代码，得到以下日志：</p>
<pre><code class="lang-markdown">DEBUG 2020-02-25 17:02:39,248 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt;  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 17:02:39,281 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==&gt; Parameters: 1(Long)
DEBUG 2020-02-25 17:02:39,297 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: &lt;==      Total: 1
 INFO 2020-02-25 17:02:39,309 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.cache.decorators.LoggingCache: Cache Hit Ratio [com.ssm.learn.chapter5.mapper.RoleMapper]: 0.5
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@462d5aee]
</code></pre>
<p>可以看到不同的SqlSession在获取同一条记录，只发送了一条SQL。因为这个时候MyBatis将其保存在SqlSessionFactory层面。</p>
(String), # 第5章	映射器

映射器是MyBatis最复杂且最重要的组件。它由一个接口和XML文件（或者注解组成）。在映射器中，可以配置参数、各类的SQL语句、存储过程、缓存、级联等复杂的内容，并且通过简易的映射规则映射到指定的POJO或者其他对象上，映射器能有效屏蔽JDBC底层的代码。

映射器可以使用注解完成，但在企业应用不广，推荐使用XML方式，是因为：

- 面对复杂性，SQL会显得无力，尤其是长句SQL；
- 注解的可读性较差；
- 注解丢失了XML上下文引用的功能

## 5.1    概述

映射器的常用配置元素如下表所示：

| 元素名称         | 描述                                                         | 备注                                            |
| ---------------- | ------------------------------------------------------------ | ----------------------------------------------- |
| select           | 查询语句，最常用、最复杂的元素之一                           | 可以自定义参数，返回结果集等                    |
| insert           | 插入语句                                                     | 执行后返回一个参数，代表插入的条数              |
| update           | 更新语句                                                     | 执行后返回一个参数，代表更新的条数              |
| delete           | 删除语句                                                     | 执行后返回一个参数，代表删除的条数              |
| ~~parameterMap~~ | 定义参数映射关系                                             | 即将被删除，不建议使用                          |
| sql              | 允许定义一部分SQL，然后在各个地方引用它                      | 例如，定义一张表的列名，可以在多个SQL语句中使用 |
| resultMap        | 用来描述从数据库结果集中来加载对象，它是最复杂、最强大的元素 | 提供映射规则                                    |
| cache            | 给定名称空间的缓存配置                                       | ---                                             |
| cache-ref        | 其他命名空间缓存配置的引用                                   | ---                                             |

## 5.2	引入映射器的方法

### 5.2.1	用文件路径引入映射器

```xml
<mappers>
    <mapper resource="demo/mapper/demoMapper.xml"/>
</mappers>
```

其中，resource属性值为映射器的xml文件的资源路径

### 5.2.2	用包名引入映射器

```xml
<mappers>
    <package name="demo.mapper"/>
</mappers>
```

其中，name属性值为映射器的接口所在包的全限定名

### 5.2.3	用类注册引入映射器

```xml
<mappers>
    <mapper class="demo.mapper.DemoMapper1"/>
     <mapper class="demo.mapper.DemoMapper2"/>
</mappers>
```

其中，class属性值为映射器的接口的全限定名

## 5.3	select元素——查询语句

select元素的常用配置如下表所示：

| 元素             | 说明                                                         | 备注                                                       |
| ---------------- | ------------------------------------------------------------ | ---------------------------------------------------------- |
| id               | 它和Mapper的命名空间组合起来是唯一的，供MyBatis调用          | 如果命名空间和id结合起来不唯一，MyBatis会抛出异常          |
| parameterType    | 可以给出类的全限定名，也可以是别名，但是别名必须是MyBatis内部定义或者自定义的 | 可以选择JavaBean、Map等简单的参数类型传递给SQL             |
| ~~parameterMap~~ | 即将废弃的元素，不建议使用                                   | ---                                                        |
| resultType       | 定义类的全路径，在允许自动匹配的情况下，结果集将通过JavaBean的规则映射；或定义为in、double、float、map等参数；也可以使用别名，但是要符合别名规范，且不能和resultMap同时使用 | 常用的参数之一，比如统计总条数时可以把它的值设置为int      |
| resultMap        | 它是映射集的引用，将执行强大的映射功能。我们可以使用resultType和resultMap其中的一个，resultMap能提供自定义映射规则的机会 | MyBatis最复杂的元素，可以配置映射规则、级联、typeHandler等 |

另外，如果还要设置缓存，还会使用到FlushCache、useCache，这里不展开讲。

### 5.3.1	简单的select元素的应用

先学习一个最简单的例子：统计用户表同一个姓氏的用户数量，代码如下所示：

```xml
<select id="countByFirstName" parameterType="string" resultType="int">
    select count(*) total from t_user where user_name like concat(#{firstName},'%')
</select>
```

其中的元素含义：

- id：SQL语句的唯一标识
- parameterType：SQL语句接收的参数类型，可以是类的别名也可以是类的全限定名
- resultType：SQL语句返回的结果类型，可以是类的别名也可以是类的全限定名

接着还需要定义一个接口方法，代码如下所示：

```java
public interface UserMapper {
    int countByFirstName(String firstName);
}
```

### 5.3.2	自动映射和驼峰规则

MyBatis提供自动映射功能，在默认情况下是开启的。

在settings元素中有两个可配置选项autoMappingBehavior和mapUnderscoreToCamelCase，它们是控制自动映射和驼峰映射的开关。一般而言，自动映射使用的多一些，而驼峰映射要求比较苛刻，应用不广。

autoMappingBehavior的取值有：

- NONE，不进行自动映射
- PARTIAL，默认值，只对没有嵌套结果集进行自动映射
- FULL，对所有的结果集进行自动映射，包括嵌套结果集

在默认情况下使用默认值即可。规则如下所示：

```java
public class Role {
    private Long id;
    private String roleName;
    private String note;
    /*getter and setter*/
}
```

```xml
<select id="getRole" parameterType="long" resultType="role">
    select id,role_name as roleName,note from t_role where id = #{id};
</select>
```

如果编写的SQL列名和POJO的属性名一致，那么就会形成自动映射。原来的列名role_name被别名roleName替代，所以也会对应起来。

### 5.3.3	传递多个参数

####5.3.3.1	使用map接口传递多个参数

假设要通过角色名称（role_name）和备注（note）两个参数对角色进行模糊查询，则可以使用map接口。

把接口方法定义为：	

```java
List<Role> findRolesByMap(Map<String,Object> parameterMap);
```

使用它在SQL中设置对应的参数，代码如下所示：

```xml
<select id="findRolesByMap" parameterType="map" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

测试如下：

```java
@Test
public void test2() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Map<String, Object> parameterMap = new HashMap<>();
    parameterMap.put("roleName", "1");
    parameterMap.put("note", "1");
    List<Role> roles = roleMapper.findRolesByMap(parameterMap);
    logger.info(roles);
    sqlSession.close();
}
```

由于使用map不能限定其传递的数据类型，所以业务性质不强，可读性差，因此不推荐使用。

#### 5.3.3.2	使用注解传递多个参数

MyBatis提供了@Param注解，它可以定义映射器的参数名称，使用它可读性更好。把接口方法定义为：

```java
List<Role> findRolesByAnnotation(@Param("roleName") String roleName,
                                 @Param("note") String note);
```

修改映射文件，代码如下所示：

```java
<select id="findRolesByAnnotation" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

注意，此时不用给出parameterType属性，MyBatis会自动探索。
测试如下所示：

```java
@Test
public void test3() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    List<Role> roles = roleMapper.findRolesByAnnotation("1","1");
    logger.info(roles);
    sqlSession.close();
}
```

改写后可读性大大提高，但是如果SQL很复杂，参数很多，那么接口方法的参数个数也会很多，这样使用很不方便。所以，MyBatis还提供了传递JavaBean的形式。

#### 5.3.3.3	通过JavaBean传递多个参数

首先定义一个参数的POJO——RoleParams，代码如下所示：

```java
public class RoleParams {
    private String roleName;
    private String note;
    
    public RoleParams(){}
    /*getter and setter*/
}
```

此时把接口方法定义为：

```java
List<Role> findRolesByBean(RoleParams roleParams);
```

修改映射文件，代码如下所示：

```xml
<select id="findRolesByBean" parameterType="com.ssm.learn.chapter5.pojo.RoleParams" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

注意此时的parameterType属性值修改为RoleParams的全限定名或者别名。

测试如下所示：

```java
@Test
public void test5() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RoleParams roleParams = new RoleParams();
    roleParams.setRoleName("1");
    roleParams.setNote("1");
    List<Role> roles = roleMapper.findRolesByBean(roleParams);
    logger.info(roles);
    sqlSession.close();
}
```

#### 5.3.3.4	混合使用

在某种情况下可能需要混合使用几种方式来传递参数。比如通过角色名称和备注查询一个角色，与此同时还支持分页，分页的POJO——PageParams如下所示：

```java
public class PageParams {
    private int start;
    private int limit;
    
    public PageParams(){}
    /*getter and setter*/
}
```

此时接口方法定义为：

```java
List<Role> findByMix(@Param("params")RoleParams roleParams, 
                     @Param("page")PageParams pageParams);
```

修改映射文件，代码如下所示：

```xml
<select id="findByMix" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{params.roleName},'%')
    and note like concat('%',#{params.note},'%')
    limit #{page.start},#{page.limit}
</select>
```

可以看到MyBatis对RoleParams、PageParams这类的JavaBean提供EL（中间）支持

#### 5.3.3.5	总结

对4种传递参数的方法进行评价：

- 使用map传递参数丧失了业务可读性，实际应用应该果断废弃；
- 使用@Param注解适用于参数较少的情况，一般不超过5个；
- 当参数多于5个时，建议使用JavaBean方式；
- 对于使用混合参数的，要明确参数合理性

### 5.3.4    使用resultMap映射结果集

为了支持复杂的映射，select元素提供了resultMap属性。先定义resultMap属性，代码如下所示：

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper">
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>
    <select id="getRoleUseResultMap" parameterType="long" resultMap="roleMap">
         select id,role_name as roleName,note from t_role where id = #{id};
    </select>
</mapper>
```

- resultMap的属性id是它的标识，type代表使用哪个类作为其映射的类，可以是别名或者全限定名；
- 它的子元素id代表resultMap的主键，而result代表其属性，id和result元素的属性property代表POJO的属性名称，而column代表SQL的列名。把POJO的属性和SQL的列名做对应。
- 在select中resultMap属性表明使用哪个resultMap作为映射规则

####5.3.5    分页参数RowBounds

MyBatis不仅支持分页，而且还提供了专门处理分页的类——RowBounds。使用它很简单，只要给接口增加一个RowBounds参数即可。

```java
 List<Role> findByRowBounds(@Param("roleName") String roleName,
                            @Param("note") String note,
                            RowBounds rowBounds);
```

修改映射文件，代码如下所示：

```xml
<select id="findByRowBounds" resultType="role">
    select id,role_name as roleName,note from t_role
    where role_name like concat('%',#{roleName},'%')
    and note like concat('%',#{note},'%')
</select>
```

代码中没有关于RowBounds的参数信息，它是MyBatis的一个附加参数，MyBatis会自动识别并完成分页。

测试如下所示：

```java
@Test
public void test7() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    RowBounds rowBounds = new RowBounds(0, 20);
    List<Role> roles = roleMapper.findByRowBounds("1", "1", rowBounds);
    logger.info(roles);
    sqlSession.close();
}
```

RowBounds接收两个参数，第一个是偏移量offset，第二个参数是限制条数limit，这里表示从1条开始限定返回至多20条记录的结果。RowBounds只适合查询少量数据的场景，查询大量数据可以使用分页插件。

## 5.4	insert元素——插入语句

insert元素的常用配置如下表所示：

| 属性             | 描述                                                         | 备注                                              |
| ---------------- | ------------------------------------------------------------ | ------------------------------------------------- |
| id               | SQL编号，用于表示这条SQL语句                                 | 命名空间+id+databaseId唯一，否则MyBatis会抛出异常 |
| parameterType    | 参数类型，同select元素                                       | 和select元素一样，可以是单个参数或者多个参数      |
| useGeneratedKeys | 是否启用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键。（比如MySQL和SQL Server这样的数据库表的自增主键） | 默认值为false                                     |
| keyProperty      | （仅对insert和update有用）唯一标记一个属性，MyBatis会通过getGeneratedKeys的返回值，或者通过insert语句的selectKey子元素设置它的键值。如果是复合主键，要把每一个名称用逗号隔开 | 默认值为unset。不能和KeyColumn连用                |
| keyColumn        | （仅对insert和update有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像PostgreSQL）中是必须的，当主键列不是表中的第一列时需要设置。如果是复合主键，要把每一个名称用逗号隔开 | 不能和KeyProperty连用                             |

执行一条insert语句后，会返回一个整数表示其影响记录数。

### 5.4.2	简单的insert语句的应用

写一条SQL插入角色，这是一条最简单的插入语句，代码如下所示：

```xml
<insert id="insertRole" parameterType="role">
    insert into t_role(role_name,note)  values (#{roleName},#{note});
</insert>
```

- id表示这条SQL；
- parameterType代表传入参数类型；
- 没有配置的属性采用默认值

### 5.4.3    主键回填

上面的代码并没有插入id列，因为MySQL中的表采用了自增主键，但有时候还需要这个主键来关联其它业务。

insert标签中有这样一个属性useGeneratedKeys来获取主键，打开这个开关后，还要配置其属性keyProperty或keyColumn，告诉系统把生成的主键放入哪个属性，如果存在多个主键，就用逗号隔开。

修改映射文件，让程序返回主键，代码如下所示：

```xml
<insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
    insert into t_role(role_name,note)  values (#{roleName},#{note});
</insert>
```

这样就会把数据库生成的主键回填至keyProperty指定的POJO属性，这里是id。

测试主键回填的结果，代码如下所示：

```java
@Test
public void test8() {
    SqlSession sqlSession = SqlSessionFactoryUtils.openSqlSession();
    RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
    Role role = new Role();
    role.setRoleName("二郎神");
    role.setNote("杨戬");
    logger.info(role);
    roleMapper.insertRole(role);
    logger.info(role);
    sqlSession.close();
}
```

运行可看到，在执行insertRole方法前roleid值为null，而执行后值不为null。

### 5.4.4	自定义主键

有时候主键可能依赖于某些规则，比如取消角色表的id递增规则，修改为：

- 当角色表记录为空时，id设置为1
- 当角色表记录不为空时，id设置为当前id加3

MyBatis可用selectKey元素实现自定义键值的生成规则。代码如下所示：

```xml
<<insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
	<selectKey keyProperty="id" resultType="long" order="BEFORE">
    	select if (max(id) = null,1,max(id)+3) from t_role
	</selectKey>
	insert into t_role(id,role_name,note)  values (#{id},#{roleName},#{note});
</insert>
```

以上代码定义了selectKey元素，它的keyProperty指定了id属性作为POJO的主键，resultType指定了返回long型的结果集，而order属性为BEFORE表示它将于当前定义的SQL前执行。

## 5.5	update元素和delete元素

update元素和delete元素比较简单，和insert元素差不多，执行后也会返回一个整数，用来标识该SQL语句影响了数据库的记录行数。更新和删除角色表记录，代码如下所示：

```xml
<update id="updateRole" parameterType="role">
    update t_role set role_name=#{roleName},set note=#{note} where id=#{id};
</update>
```

```xml
<delete id="deleteRole" parameterType="long">
    delete from t_role where id = #{id};
</delete>
```

## 5.6	sql元素

sql元素的作用在于可以定义一条SQL的一部分，方便后面的SQL引用它，比如最典型的列名，通常情况下要在select、insert语句中反复编写，特别字段多的表。这时候可以使用sql元素，代码如下所示：

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper"><!--namespace对应接口的全限定名-->
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>

    <sql id="roleCols">
        id,role_name,note
    </sql>

    <select id="getRole" resultType="role">
        select <include refid="roleCols"/> from t_role where id = #{id};
    </select>

    <insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            select if (max(id) = null,1,max(id)+3) from t_role
        </selectKey>
        insert into t_role(<include refid="roleCols"/>)  values (#{id},#{roleName},#{note});
    </insert>
</mapper>
```

可以看到，通过sql元素定义，就可以include元素引入到各条SQL语句中，减少了列名的重复编写。

sql元素还支持变量传递，如下所示：

```xml
<sql id="roleCols">
    ${alias}.id,${alias}.role_name ,${alias}.note
</sql>
<select id="getRole" resultType="role">
    select 
    <include refid="roleCols">
        <property name="alias" value="r"/>
    </include>
    from t_role where id = #{id};
</select>
```

在include元素中定义了一个命名为alias的变量，其值是SQL表t_role的别名r，然后sql元素就可以使用这个变量名了。

## 5.7	resultMap元素

resultMap的作用主要是定义映射规则，也就是SQL到JavaBean的映射关系。

### 5.7.1	使用POJO存储结果集

```xml
<mapper namespace="com.ssm.learn.chapter5.mapper.RoleMapper">
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>
</mapper>  
```

resultMap元素的属性id代表这个resultMap的标识，type代表需要映射的POJO，这里可以使用别名或者全限定名。在映射关系中，id表示对象的主键，property表示POJO的属性名称，column表示数据库列名。于是POJO就和数据库SQL的结果一一对应起来了。配置完成即可使用resultMap，如下所示：

```xml
<select id="getRoleUseResultMap" parameterType="long" resultMap="roleMap">
     select id,role_name as roleName,note from t_role where id = #{id};
</select>
```

## 5.8	级联

级联是一个数据库实体的概念。比如角色就需要存在用户与之对应，这样就有角色用户表，一个角色可能有多个用户，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。在MyBatis中还有一种被称为鉴别器的级联，它是一种可以选择具体实现类的级联，比如要查找雇员及其体检表的信息，但是雇员有性别之分，而根据性别的不同，其体检表的项目也会不一样，比如男性体检表可能有前列腺的项目，而女子体检表可能有子宫的项目，那么体检表应该分为男性和女性，从而根据雇员性别区关联。

级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统的复杂度，同时降低系统性能，一般最好不超过3层。

### 5.8.1	MyBatis中的级联

MyBatis中的级联分为3种。

- 鉴别器（discriminator）：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。
- 一对一（association）：比如学生证和学生就是一种一对一的级联。
- 一对多（collection）：比如班级和学生就是一种一对多的级联。

值得注意的是，MyBatis没有多对多级联，因为多对多级联比较复杂，使用困难，而且可以通过两个一对多进行替换，所有MyBatis不支持。

为了更好地阐述级联，先给出一个雇员级联模型。

- 该模型以雇员表为中心
- 雇员表和工牌表是一对一级联关系
- 雇员表和员工任务表是一对多级联关系
- 员工任务表和任务表是一对一级联关系
- 每个雇员都会有一个体检表，随着雇员字段性别取值不同，会有不同的关联表

mysql脚本略

 ### 5.8.2    建立POJO

男性体检表和女性体检表继承于体检表，因此可以得出3个体检表，代码如下所示：

```java
public class HealthForm {
   
   private Long id;
   private Long empId;
   private String heart;
   private String liver;
   private String spleen;
   private String lung;
   private String kidney;
   private String note;
    
    /*getter and setter*/
}
```

```java
public class MaleHealthForm extends HealthForm {
   
   private String prostate;
	
    /*getter and setter*/
}
```

```java
public class FemaleHealthForm extends HealthForm {

   private String uterus;
	
    /*getter and setter*/
}
```

显然这个关联关系是通过MyBatis的鉴别器去完成。

接下来设计员工表、工牌表和任务表的POJO，它们是以员工表为核心的，先完成工牌表和任务表的POJO，代码如下所示：

```java
public class WorkCard {
   private Long id;
   private Long empId;
   private String realName;
   private String department;
   private String mobile;
   private String position;
   private String note;
    
   /*getter and setter*/
}
```

```java
public class Task {
   private Long id;
   private String title;
   private String context;
   private String note;
   
   /*getter and setter*/
}
```

雇员任务表是通过任务编号(task_id)和任务进行一对一管理，这里只考虑其自身和任务编号的关联，而雇员对它的关联则由雇员去维护，这样就可得到雇员任务POJO，代码如下所示：

```java
public class EmployeeTask {
   private Long id;
   private Long empId;
    //任务按一对一级联
   private Task task = null;
   private String taskName;
   private String note;
   
   /*getter and setter*/
}
```

属性task是一个Task类对象，由它进行关联任务信息。

男雇员和女雇员继承于雇员，这就是一个鉴别器，通过雇员类的属性性别来决定使用哪个具体的子类初始化对象。它与工牌表是一对一关联关系，对于雇员任务表是一对多关联关系，由此可以得出3个类，代码如下所示：

```java
public class Employee {

   private Long id;
   private String realName;
   private SexEnum sex = null;
   private Date birthday;
   private String mobile;
   private String email;
   private String position;
   private String note;
    //工牌按一对一级联
   private WorkCard workCard;
   //雇员任务按一对多级联
   private List<EmployeeTask> employeeTaskList = null;
   
    /*getter and setter*/
}
```

```java
public class MaleEmployee extends Employee {

   private MaleHealthForm maleHealthForm = null;
    
   /*getter and setter*/
}
```

```java
public class FemaleEmployee extends Employee {

   private FemaleHealthForm femaleHealthForm = null;

   /*getter and setter*/
}
```

### 5.8.3	配置映射文件

配置TaskMapper.xml和WorkCardMapper.xml，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.TaskMapper">
    <select id="getTask" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.Task">
        select id,title,context,note from t_task where id =#{id}
    </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.WorkCardMapper">
    <select id="getWorkCardByEmpId" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.WorkCard">
        select id, emp_id as empId, real_name as realName, department, mobile, position, note FROM t_work_card
        where emp_id = #{empId}
    </select>
</mapper>
```

雇员任务表通过任务编号（task_id）和任务表示关联，这是一个一对一的级联关系，使用association元素，雇员任务表一对一级联如代码所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper">
    <resultMap id="EmployeeTaskMap" type="com.ssm.learn.chapter5.pojo.EmployeeTask">
        <id property="id" column="id"/>
        <result property="empId" column="emp_id"/>
        <result property="taskName" column="task_name"/>
        <result property="note" column="note"/>
        
        <association property="task" column="task_id" select="com.ssm.learn.chapter5.mapper.TaskMapper.getTask"/>
        
    </resultMap>

    <select id="getEmployeeTaskByEmpId" resultMap="EmployeeTaskMap">
        select id, emp_id, task_id, note from t_employee_task where emp_id = #{empId}
    </select>

</mapper>
```

注意，association元素代表一对一级联的开始。property属性代表映射到POJO属性上。select配置是命名空间+SQL id的形式，这样便可以指向对应Mapper的SQL，MyBatis就会通过对应的SQL将数据查询回来。column代表SQL的列，用作参数传递给select属性制定的SQL，如果是多个参数则用逗号隔开。

体检表能拆分为男性雇员和女性雇员，所以就有两个简单的映射器，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.MaleHealthFormMapper">
   <select id="getMaleHealthForm" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.MaleHealthForm">
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_male_health_form
       where emp_id = #{id}
   </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper">
   <select id="getFemaleHealthForm" parameterType="long" resultType="com.ssm.learn.chapter5.pojo.FemaleHealthForm">
       select id, heart, liver, spleen, lung, kidney, prostate, note from t_female_health_form
       where emp_id = #{id}
   </select>
</mapper>
```

创建雇员的映射关系，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper.EmployeeMapper">
    <resultMap id="employee" type="com.ssm.learn.chapter5.pojo.Employee">
        <id property="id" column="id"/>
        <result column="real_name" property="realName"/>
        <result column="sex" property="sex" typeHandler="com.ssm.learn.chapter5.typeHandler.SexTypeHandler"/>
        <result column="birthday" property="birthday"/>
        <result column="mobile" property="mobile"/>
        <result column="email" property="email"/>
        <result column="position" property="position"/>
        <result column="note" property="note"/>
        <association property="workCard" column="id"
                     select="com.ssm.learn.chapter5.mapper.WorkCardMapper.getWorkCardByEmpId"/>
        <collection property="employeeTaskList" column="id" select="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId"/>
        <discriminator javaType="long" column="sex">
            <case value="1" resultMap="MaleHealthFormMapper"/>
            <case value="2" resultMap="FemaleHealthFormMapper"/>
        </discriminator>
    </resultMap>

    <resultMap id="FemaleEmployeeMap" type="com.ssm.learn.chapter5.pojo.FemaleEmployee" extends="employee">
        <association property="femaleHealthForm" column="id" select="com.ssm.learn.chapter5.mapper.FemaleHealthFormMapper.getFemaleHealthForm"/>
    </resultMap>

    <resultMap id="MaleEmployeeMap" type="com.ssm.learn.chapter5.pojo.MaleEmployee" extends="employee">
        <association property="maleHealthForm" column="id" select="com.ssm.learn.chapter5.mapper.MaleHealthFormMapper.getMaleHealthForm"/>
    </resultMap>

    <select id="getEmployee" parameterType="long" resultMap="employee">
        select id, real_name as realName, sex, birthday, mobile, email, position, note, from t_employee
        where id = #{id}
    </select>
</mapper>
```

- association元素，对工牌进行一对一级联。
- collection元素，一对多级联，其select元素指向SQL，将通过column制定的SQL字段作为参数进行传递，然后将结果返回给雇员POJO的属性employeeTaskList。
- discriminator元素，鉴别器，它的属性column代表使用哪个字段进行鉴别，这里是sex，而它的子元素case，则用于进行区分。而resultMap属性表示采用哪个ResultMap去映射，比如sex为1，则使用maleHealthFormMapper进行映射。

而对于雇员体检表而言，id为employee的resultMap，被maleHealthMapper和femaleHealthMapper通过extends元素继承。

测试级联，代码如下所示：

```java
@Test
public void test9() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);
        Employee employee = employeeMapper.getEmployee(1L);
        logger.info(employee.getBirthday());
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }

}
```

运行可以看到所有级联都成功了，但是这会引发性能问题，这叫N+1问题。

### 5.8.4	N+1问题

比如作为一个雇员的管理者，它只想看到员工信息和员工任务信息，那么体检表和工牌的信息就是多余的。

假设现在有N个关联关系完成了级联，那么只要再加入一个级联关系，就变成了N+1个级联，所有的级联SQL都会被执行，显然会有很多并不是我们关心的数据被取出，这样会造成很大的资源浪费，这就是N+1问题。

为了应对N+1问题，MyBatis提供了延迟加载功能，即在一开始取出雇员信息是，并不需要将工牌表、体检表、任务表的记录取出，而是只将雇员信息和雇员任务表的信息取出。当我们通过雇员POJO访问工牌表时，体检表和任务表的记录才通过对应的SQL取出。

### 5.8.5	延迟加载

MyBatis提供延迟加载，我们希望一次性把常用的级联数据通过SQL直接查询出来，而对于那些不常用的级联数据不要取出，而是等待要用时才取出，这些不常用的级联数据可以采用延迟加载的功能。

在MyBatis的settings配置中存在两个元素可以配置级联，如下所示：

| 配置项                | 作用                                                         | 配置选项说明 | 默认值 |
| --------------------- | ------------------------------------------------------------ | ------------ | ------ |
| lazyLoadingEnabled    | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态 | true\|false  | false  |
| aggressiveLazyLoading | 当启用时，对任意延迟属性的调用都会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载 | true\|false  | false  |

修改MyBatis配置文件，增加如下代码：

```xml
<settings>
    <setting name="lazyLoadingEnabled" value="true"/>
    <setting name="aggressiveLazyLoading" value="true"/>
</settings>
```

选项lazyLoadingEnabled决定是否开启延迟加载，而选项aggressiveLazyLoading决定是否采用层级加载，但是它们都是全局性配置，不能解决我们的需求。在MyBatis中使用fetchType属性，它可以处理全局定义无法处理的问题，进行自定义。fetchType出现在级联元素（association、collection，注意，discrimination没有这个属性）中，它由两个值可选：

- eager，获得当前POJO后立即加载对应的数据。
- lazy，获得当前POJO后延迟加载对应的数据。

在保证lazyLoadingEnabled=true和aggressiveLazyLoading=false的前提下，对雇员的映射文件关于雇员属性、雇员任务进行如下修改：

```xml
<collection property="employeeTaskList" column="id" select="com.ssm.learn.chapter5.mapper.EmployeeTaskMapper.getEmployeeTaskByEmpId" fetchType="eager"/>
```

然后进行调试，这个时候已经按照我们的要求加载了数据，先加载雇员信息，然后加载雇员任务信息。fetchType属性会忽略全局配置项lazyLoadingEnabled和aggressiveLazyLoading。

### 5.8.6	多对多级联

现实中有许多用户，用户由归属于一些角色，这样一个用户可以对应多个角色，而一个角色又可以由多个用户担当。这就是多对多关联关系。但更多的都是拆分为两个一对多的关系，也就是一个角色对应多个用户和一个用户对应多个角色，这样就可以设计用户和角色的POJO了，代码如下所示：

```java
package com.ssm.learn.chapter5.pojo2;

import java.util.List;

public class Role2 {
   private Long id;
   private String roleName;
   private String note;
   // 关联用户信息，一对多关联
   private List<User2> userList;

	/*getter and setter*/
}
```

```java
package com.ssm.learn.chapter5.pojo2;

import java.util.List;

import com.ssm.learn.chapter5.enumeration.SexEnum;

public class User2 {
   private Long id;
   private String userName;
   private String realName;
   private SexEnum sex;
   private String moble;
   private String email;
   private String note;
   // 对角色一对多关联
   private List<Role2> roleList;

	/*getter and setter*/
}
```

配置映射文件，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper2.RoleMapper2">
   <resultMap type="com.ssm.learn.chapter5.pojo2.Role2" id="roleMapper">
      <id column="id" property="id" />
      <result column="role_name" property="roleName" />
      <result column="note" property="note" />
      <collection property="userList" column="id" fetchType="lazy"
         select="com.ssm.learn.chapter5.mapper2.UserMapper2.findUserByRoleId" />
   </resultMap>

   <select id="getRole" parameterType="long" resultMap="roleMapper">
      select id, role_name, note from t_role where id = #{id}
   </select>

   <select id="findRoleByUserId" parameterType="long" resultMap="roleMapper">
      select r.id, r.role_name, r.note from t_role r, t_user_role ur
      where r.id = ur.role_id and ur.user_id = #{userId}
   </select>
</mapper>
```

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.learn.chapter5.mapper2.UserMapper2">
   <resultMap type="com.ssm.learn.chapter5.pojo2.User2" id="userMapper">
      <id column="id" property="id" />
      <result column="user_name" property="userName" />
      <result column="real_name" property="realName" />
      <result column="sex" property="sex"
         typeHandler="com.ssm.learn.chapter5.typeHandler.SexTypeHandler" />
      <result column="mobile" property="moble" />
      <result column="email" property="email" />
      <result column="position" property="position" />
      <result column="note" property="note" />
      <collection property="roleList" column="id" fetchType="lazy"
         select="com.ssm.learn.chapter5.mapper2.RoleMapper2.findRoleByUserId" />
   </resultMap>
   <select id="getUser" parameterType="long" resultMap="userMapper">
      select id, user_name, real_name, sex, moble, email, note from t_user where
      id =#{id}
   </select>
   <select id="findUserByRoleId" parameterType="long" resultMap="userMapper">
      select u.id, u.user_name, u.real_name, u.sex, u.moble, u.email, u.note
      from
      t_user u , t_user_role ur where u.id = ur.user_id and ur.role_id =#{roleId}
   </select>
</mapper>
```

这里都使用了collection去关联，但是把fetchType都设置为lazy，启用延时加载。

测试代码如下：

```java
@Test
public void test10(){
    SqlSession sqlSession=null;
    try{
        sqlSession=SqlSessionFactoryUtils.openSqlSession();
        RoleMapper2 roleMapper2 = sqlSession.getMapper(RoleMapper2.class);
        Role2 role = roleMapper2.getRole(1L);
        role.getUserList();
        UserMapper2 userMapper2 = sqlSession.getMapper(UserMapper2.class);
        User2 user = userMapper2.getUser(1L);
    }catch (Exception e){
        e.printStackTrace();
    }finally {
        if(sqlSession!=null){
            sqlSession.close();
        }
    }
}
```

运行程序可以看到执行了3条SQL，因为调用getUserList所以才有了第二条SQL。

## 5.9	缓存

在MyBatis中允许使用缓存，把那些常用且命中率高的数据缓存起来，能够有效提高系统性能。

MyBatis分为一级缓存和二级缓存，同时可以配置关于缓存的设置。

### 5.9.1	一级缓存和二级缓存

一级缓存是在SqlSession上的缓存，默认自动开启。二级缓存是在SqlSessionFactory上的缓存。

没有任何配置的环境测试一级缓存，代码如下所示：

```java
@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        logger.info("再获取一次POJO......");
        Role role2 = roleMapper.getRole(1L);
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
    }
}
```

运行代码，得到如下日志：

```markdown
DEBUG 2020-02-25 16:42:22,848 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:42:22,883 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 16:42:22,899 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 16:42:22,899 com.ssm.learn.chapter5.test.MyTest: 再获取一次POJO......
DEBUG 2020-02-25 16:42:22,900 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@63440df3]
```

可以看到虽然对同一个对象进行了两次获取，但是实际上只有一条SQL被执行，其原因是代码使用了同一个SqlSession对象获取数据。当一个SqlSession第一次通过SQL和参数获取对象后就会将它缓存起来，如果下次的SQL和参数没有发生变化，并且缓存没有超时或者声明需要刷新时，它就会从缓存中获取数据，而不是通过SQL获取了。修改代码，如下所示：

```java
@Test
public void testFirstLevelCache() {
    SqlSession sqlSession = null;
    SqlSession sqlSession2 = null;
    try {
        sqlSession = SqlSessionFactoryUtils.openSqlSession();
        sqlSession2 = SqlSessionFactoryUtils.openSqlSession();
        RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
        Role role = roleMapper.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
        sqlSession.commit();
        logger.info("不同sqlSession再获取一次POJO......");
        RoleMapper roleMapper2 = sqlSession2.getMapper(RoleMapper.class);
        Role role2 = roleMapper2.getRole(1L);
        //需要提交，如果是一级缓存，MyBatis才会缓存对象到SqlSessionFactory层面
    } catch (Exception e) {
        logger.info(e.getMessage(), e);
    } finally {
        if (sqlSession != null) {
            sqlSession.close();
        }
        if (sqlSession2 != null) {
            sqlSession2.close();
        }
    }
}
```

运行代码，得到以下日志：

```markdown
DEBUG 2020-02-25 16:55:56,004 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 16:55:56,039 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 16:55:56,056 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 16:55:56,057 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 16:55:56,057 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Opening JDBC Connection
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.datasource.pooled.PooledDataSource: Created connection 1956710488.
DEBUG 2020-02-25 16:55:56,062 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@74a10858]
DEBUG 2020-02-25 16:55:56,063 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
```

可以看到SQL被执行了两次，这说明一级缓存是在SqlSession层面的，对于不同的SqlSession对象是不能共享的。为了是SqlSession对象之间共享相同的缓存，有时候需要开启二级缓存，只需要在映射文件上加入代码：

```xml
<cache/>
```

这个时候MyBatis会序列化和反序列化对应的POJO，也就要求POJO是一个可序列化的对象，那么它就必须实现Serializable接口。代码如下所示：

```java
public class Role implements Serializable {
	...
}
```

再次运行代码，得到以下日志：

```markdown
DEBUG 2020-02-25 17:02:39,248 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==>  Preparing: select id,role_name as roleName,note from t_role where id = ?; 
DEBUG 2020-02-25 17:02:39,281 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: ==> Parameters: 1(Long)
DEBUG 2020-02-25 17:02:39,297 org.apache.ibatis.logging.jdbc.BaseJdbcLogger: <==      Total: 1
 INFO 2020-02-25 17:02:39,309 com.ssm.learn.chapter5.test.MyTest: 不同sqlSession再获取一次POJO......
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.cache.decorators.LoggingCache: Cache Hit Ratio [com.ssm.learn.chapter5.mapper.RoleMapper]: 0.5
DEBUG 2020-02-25 17:02:39,367 org.apache.ibatis.transaction.jdbc.JdbcTransaction: Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@462d5aee]
```

可以看到不同的SqlSession在获取同一条记录，只发送了一条SQL。因为这个时候MyBatis将其保存在SqlSessionFactory层面。

(String), http://cdn.alanliang.site/note/oilpainting5.jpg(String), false(Boolean), true(Boolean), true(Boolean), true(Boolean), 1(Long), 1(Integer), 2020-06-15 11:43:58.814(Timestamp), 5(Integer), 1(Integer), 5(Long)
2020-06-15 11:43:58.827 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:43:58.827 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==>  Preparing: DELETE FROM t_article_tag WHERE (article_id = ?) 
2020-06-15 11:43:58.827 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : ==> Parameters: 5(Long)
2020-06-15 11:43:58.829 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.delete        : <==    Updates: 3
2020-06-15 11:43:58.849 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 11:43:58.849 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 5(Long), 12(Long), 5(Long), 15(Long), 5(Long), 21(Long)
2020-06-15 11:43:58.850 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 11:43:58.851 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT published FROM t_article WHERE (id = ?) 
2020-06-15 11:43:58.851 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 5(Long)
2020-06-15 11:43:58.853 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:43:59.279 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:43:59.280 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:43:59.277(Timestamp), 更新文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.update()(String), { articleVo: ArticleVO(tagIdList=null) }(String), 0:0:0:0:0:0:0:1(String), 459(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:43:59.286 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:44:06.282 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:44:06.282 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:44:06.283 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:44:06.284 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:44:06.300 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 7
2020-06-15 11:44:06.302 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:06.302 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:44:06.306 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:44:06.308 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:06.309 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:44:06.311 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:06.313 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:06.314 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:44:06.315 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:06.316 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:06.316 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:44:06.318 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:06.319 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:06.319 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:44:06.321 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:06.322 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:06.322 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:44:06.323 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:06.327 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:06.328 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:44:06.331 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:06.339 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:44:06.340 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:44:06.339(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 57(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:44:06.342 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:44:12.316 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:44:12.316 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 5(Long)
2020-06-15 11:44:12.318 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:44:12.341 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:44:12.341 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 5(Long)
2020-06-15 11:44:12.343 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:44:12.681 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:44:12.681 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:44:12.68(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=5, status=2) }(String), 0:0:0:0:0:0:0:1(String), 363(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:44:12.683 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:44:12.707 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:44:12.707 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:44:12.709 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:44:12.709 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:44:12.723 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 7
2020-06-15 11:44:12.724 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:12.724 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:44:12.725 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:44:12.727 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:12.727 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:44:12.729 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:12.732 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:12.732 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:44:12.734 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:12.735 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:12.736 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:44:12.738 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:12.742 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:12.743 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:44:12.744 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:12.746 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:12.746 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:44:12.750 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:12.751 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:12.752 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:44:12.754 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:12.763 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:44:12.763 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:44:12.762(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 53(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:44:12.767 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:44:17.016 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:44:17.016 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:44:17.015(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:44:17.018 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:44:24.934 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:44:24.934 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:44:24.935 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-15 11:44:24.940 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:44:24.941 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:44:24.942 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 2
2020-06-15 11:44:24.948 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:44:24.949 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:44:24.950 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:44:24.951 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:44:24.964 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 11:44:24.968 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:24.968 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:44:24.969 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:24.972 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:24.972 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:44:24.976 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:24.977 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:24.978 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:44:24.979 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:24.981 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:24.981 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:44:24.982 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:24.982 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:24.983 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:44:24.983 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:24.984 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:44:24.984 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:44:24.985 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:44:24.990 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:44:24.990 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:44:24.989(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 54(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:44:24.992 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:45:56.589 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 11:45:56.589 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:45:56.590 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 12
2020-06-15 11:46:22.467 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 11:46:22.468 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 11:46:22.469 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 11:46:22.469 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 30(Long), 15(Long)
2020-06-15 11:46:22.470 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 11:46:22.473 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:46:22.474 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:46:22.473(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 3 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:46:22.475 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:46:24.355 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 11:46:24.355 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 11:46:24.356 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 11:46:24.356 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 11:46:24.357 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 11:46:24.361 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:46:24.361 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:46:24.36(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:46:24.362 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:46:25.949 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 11:46:25.950 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 11:46:25.951 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 11:46:25.951 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:46:25.952 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 11:46:25.955 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:46:25.955 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:46:25.954(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:46:25.957 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:47:16.992 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:47:16.995 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: Spring MVC的初始化和流程(String), JavaEE互联网轻量级框架整合开发第十四章(String), <h2 id="h2-14-1-mvc-"><a name="14.1    MVC设计概述" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.1    MVC设计概述</h2><p>MVC出现的根本原因：解耦各个模块。</p>
<h3 id="h3-14-1-1-spring-mvc-"><a name="14.1.1    Spring MVC的架构" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.1.1    Spring MVC的架构</h3><p> <img src="http://cdn.alanliang.site/note/Spring MVC架构.jpg" alt="Spring MVC架构"></p>
<h3 id="h3-14-1-2-spring-mvc-"><a name="14.1.2    Spring MVC组件与流程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.1.2    Spring MVC组件与流程</h3><p>Spring MVC的核心在于其流程，这是使用Spring MVC框架的基础，Spring MVC是一种基于Servlet的技术，它提供了核心控制器DispatcherServlet和相关的组件，并制定了松散的结构，以适合各种灵活的需要。其组件和流程如下：<img src="http://q8rsjstig.bkt.clouddn.com/note/Spring MVC组件和流程图.jpg" alt="Spring MVC组件和流程图"></p>
<p>当一个请求到来时，DispatcherServlet首先通过请求和事先解析好的HandlerMapping配置，找到对应的处理器（Handler），这里就准备开始运行处理器和拦截器组成的执行链，而运行处理器需要有一个对应的环境，这样就有了一个处理器的适配器（HandlerAdapter），通过这个适配器就能运行对应的处理器和拦截器，这里的处理器包含了控制器的内容和其它增强的功能，在处理器返回模型和视图给DispatcherServlet后，DispatcherServlet就会把对应的视图信息传递给视图解析器（ViewResolver），然后把模型渲染到视图中去。</p>
<h3 id="h3-14-1-3-spring-mvc-"><a name="14.1.3    Spring MVC入门的实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.1.3    Spring MVC入门的实例</h3><p>首先需要配置Web工程的web.xml文件，代码如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;
         version=&quot;4.0&quot;&gt;
    &lt;!--配置Spring IoC配置文件路径--&gt;
    &lt;context-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;/web/WEB-INF/applicationContext.xml&lt;/param-value&gt;
    &lt;/context-param&gt;
    &lt;!--配置ContextLoaderListener用于初始化Spring IoCrongqi--&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;
    &lt;!--配置DispatcherServlet--&gt;
    &lt;servlet&gt;
        &lt;!--注意：Spring MVC会根据servlet-name配置，找到WEB-INF/dispatcher-servlet作为配置文件载入Web工程中--&gt;
        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;!--使得Dispatch而在服务器启动时就初始化--&gt;
        &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</code></pre>
<ul>
<li>contextConfigLocation。它配置Spring IoC的配置文件路径，如果是多个配置文件则用逗号隔开，其默认值为/WEB-INF/application.xml。</li><li>ContextLoaderListener。它实现了接口ServletContextListener，可以在Web工程初始化之前完成对Spring IoC容器的初始化，也可以在Web工程关闭之时完成对容器的资源释放。</li><li>DispatcherServlet。首先配置了servlet-name为dispatcher，这就意味着需要一个/WEB-INF/dispacher-servlet.xml文件（注意名字的对应关系），并且配置了在服务器启动时就初始化它。</li><li>配置DispatcherServlet拦截以后缀“do”结束的请求。这样以“do”结尾的请求都会被拦截。</li></ul>
<p>在这个例子中，暂时不需要配置ApplicationContext.xml的任何内容。但是需要配置/WEB-INF/dispacher-servlet.xml文件，内容如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;
    &lt;!--使用注解驱动--&gt;
    &lt;mvc:annotation-driven/&gt;
    &lt;!--定义扫描装载的包--&gt;
    &lt;context:component-scan base-package=&quot;com.*&quot;/&gt;
    &lt;!--定义视图解析器--&gt;
    &lt;!--找到Web工程/WEB-INF/JSP文件夹、且文件结尾为jsp的文件作为映射--&gt;
    &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; p:prefix=&quot;/WEB-INF/jsp/&quot;
          p:suffix=&quot;/jsp&quot;/&gt;
    &lt;!--如果有配置数据库事务，需要开启事务注解的话，需要开启以下这段代码--&gt;
    &lt;!--
        &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;
    --&gt;
&lt;/beans&gt;
</code></pre>
<ul>
<li>\&lt;mvc-annotation-dirven/\&gt;表示使用注解驱动Spring MVC。</li><li>\&lt;context:component-scan\&gt;表示扫描组件，base-package属性配置需要扫描的包，加载控制器和其他的一些组件。</li><li>定义视图解析器，解析器中定义了视图的前缀和后缀，这样解析器就会在/WEB-INF/JSP文件夹找到对应的JSP文件作为视图响应用户请求。</li></ul>
<p>我们再开发一个简单的Controller，代码如下所示：</p>
<pre><code class="lang-java">//注解@Controller表示它是一个控制器
@Controller(&quot;myController&quot;)
//表明当请求的URI在/my下的时候才由该控制器响应
@RequestMapping(&quot;/my&quot;)
public class MyController {
    @RequestMapping(&quot;/index&quot;)
    //表明URI是/index的时候该方法才请求
    public ModelAndView index() {
        //模型和视图
        ModelAndView mv = new ModelAndView();
        //视图逻辑名称为index
        mv.setViewName(&quot;index&quot;);
        return mv;
    }
}
</code></pre>
<p>首先注解<a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a>表明该类是一个控制器，Spring MVC扫描时会将它作为控制器加载。然后<a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a>指定了对应的请求的URI，Spring MVC在初始化的时候就会解析这些信息并存放起来，于是便有了HandlerMapping。当发生请求时，Spring MVC就会使用这些信息去找到对应的控制器提供服务。</p>
<p>方法定义返回ModelAndView，在方法中把视图名称定义为index。根据配置，解析器会找到/WEB-INF/jsp/index.jsp作为响应。于是还需要开发这个jsp文件，代码如下所示：</p>
<pre><code class="lang-html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Welcome to Spring Web MVC project&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;h1&gt;Hello, Spring MVC&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>这个例子的执行流程如下：</p>
<p><img src="http://cdn.alanliang.site/note/实例组件和运行流程.jpg" alt="实例组件和运行流程"></p>
<p>当Spring MVC启动时就会解析MyController的注解，然后生成对应URI和请求的映射关系，并注册对应的方法。当收到请求时，首先根据URI找到对应的HandlerMapping，然后组织为一个执行链，通过请求类型找到RequestMappingHandlerAdapter，它的实例是在DispatcherServlet初始化的时候创建的。然后通过它去执行HandleExecutionChain的内容，最终在MyController的方法中将index视图返回DispatcherServlet。根据配置，最后它会找到/WEB-INF/jsp/index.jsp文件作为视图，响应最终的请求。</p>
<h2 id="h2-14-2-spring-mvc-"><a name="14.2    Spring MVC初始化" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.2    Spring MVC初始化</h2><h3 id="h3-14-2-1-spring-ioc-"><a name="14.2.1    初始化Spring IoC上下文" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.2.1    初始化Spring IoC上下文</h3><p>通过实现ServletContextListener接口可以在DispatcherServlet初始化前就可以完成Spring IoC容器的初始化，也可以在结束期完成对Spring IoC容器的销毁。部分源码如下：</p>
<pre><code class="lang-java">package org.springframework.web.context;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

public class ContextLoaderListener extends ContextLoader implements ServletContextListener {
    ...
    /*初始化容器，使用的是满足ApplicationContext接口的Spring Web IoC容器*/
    public void contextInitialized(ServletContextEvent event) {
        this.initWebApplicationContext(event.getServletContext());
    }

    public void contextDestroyed(ServletContextEvent event) {
        //关闭Web IoC容器
        this.closeWebApplicationContext(event.getServletContext());
        //清除相关参数
        ContextCleanupListener.cleanupAttributes(event.getServletContext());
    }
}
</code></pre>
<h3 id="h3-14-2-2-"><a name="14.2.2    初始化映射请求上下文" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.2.2    初始化映射请求上下文</h3><p>映射请求上下文是通过DispatcherServlet初始化。在大部分场景下，都应该让DispatcherServlet在服务器启动期间就完成Spring IoC容器的初始化，建议在Web容器刚开始时初始化。</p>
<pre><code class="lang-java">@Override
protected void onRefresh(ApplicationContext context){
    initStrategies(context);
}

protected void initStrategies(ApplicationContext context){
    //初始化文件的解析
    initMultipartResolver(context);
    //本地解析化
    initLocaleResolver(context);
    //主题解析
    initThemeResolver(context);
    //处理器映射
    initHandlerMappings(context);
      //处理器的适配器
    initHandlerAdapters(context);
    //Handler的异常处理解析器
    initHandlerExceptionResolvers(context);
       //当处理器没有返回逻辑视图名等相关信息时，自动将请求URL映射为逻辑视图名
    initRequestToViewNameTranslator(context);
     //视图逻辑名称转化器，即允许返回逻辑视图名称，然后它将找到真实的视图
    initViewResolvers(context);
    //这是一个关注Flash开发的Map管理器
    initFlashMapManager(context);
}
</code></pre>
<ul>
<li>MultipartResolver：文件解析器，用户支持服务器的文件上传。</li><li>LocaleResolver：国际化解析器，可以提供国际化的功能。</li><li>ThemeResolver：主题解析器，类似于软件皮肤的转换功能。</li><li>HandlerMapping：Spring MVC中非常重要的内容，它会包装用户提供一个控制器的方法和它的一些拦截器，通过调用它就能运行控制器。</li><li>HandlerAdapter：处理器适配器，因为处理器会在不同的上下文中运行，所以Spring MVC会找到合适的适配器并运行处理器服务方法，比如处理控制器的SimpleControllerHandlerAdapter、处理普通请求的HttpRequestHandlerAdapter等。</li><li>HandlerExceptionResolver：处理器异常解析器，出现异常后，可以转到指定的异常页面，这样使得用户的UI体验得到了改善。</li><li>RequestToViewNameTranslator：视图逻辑名称转换器，有时候在控制器中返回一个视图名称，通过它可以找到实际的视图。当处理器没有返回逻辑视图名等相关信息时，自动将请求URL映射为逻辑视图名。</li><li>ViewResolver：视图解析器，当控制器返回后，通过视图解析器会把逻辑视图名称进行解析，然后定位实际视图。</li></ul>
<h3 id="h3-14-2-3-"><a name="14.2.3    使用注解配置方式初始化" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.2.3    使用注解配置方式初始化</h3><p>使用注解方式很简单，首先继承AbstractAnnotationConfigDispatcherServletInitializer，然后实现它所定义的方法。代码如下：</p>
<pre><code class="lang-java">public class MyWebApplInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
    @Override
    protected Class&lt;?&gt;[] getRootConfigClasses() {
        //可以返回Spring的Java配置文件数组
        return new Class&lt;?&gt;[]{};
    }

    //DispatcherServlet的URI映射关系
    @Override
    protected Class&lt;?&gt;[] getServletConfigClasses() {
        //可以返回Spring的Java配置文件数组
        return new Class&lt;?&gt;[]{WebConfig.class};
    }

    //DispatcherServlet拦截内容
    @Override
    protected String[] getServletMappings() {
        return new String[]{&quot;*.do&quot;};
    }
}
</code></pre>
<p>这里使用它去代替XML配置。</p>
<h2 id="h2-14-3-spring-mvc-"><a name="14.3    Spring MVC开发流程详解" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.3    Spring MVC开发流程详解</h2><p>在目前的开发中，大部分都会采用注解的开发方式，使用注解十分简单，主要是以一个注解<a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a>标注，一般只需要通过配置扫描，只是往往还要结合注解<a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a>配置。<a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a>可以配置在类或者方法上，它的作用是指定URI和哪个类（或者方法）作为一个处理请求的处理器，为了更加灵活，Spring MVC还定义了处理器的拦截器，当启动Spring MVC时，Spring MVC就会去解析<a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a>中的<a href="https://github.com/requestMapping" title="&#64;requestMapping" class="at-link">@requestMapping</a>的配置，再结合配置的拦截器，这样它就会组成多个拦截器和一个控制器的形式，存放到HandlerMapping中去。当请求来到服务器，首先是通过请求信息找到对应的HandlerMapping，进而找到对应的拦截器和处理器，这样就能运行对应的控制器和拦截器。</p>
<h3 id="h3-14-3-1-requestmapping"><a name="14.3.1    配置@RequestMapping" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.3.1    配置<a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a></h3><p><a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a>中最常用的是请求路径和请求类型，其他的大部分作为限定项，根据需要进行匹配。比如在入门实例MyController中加入一个index2方法，代码如下所示：</p>
<pre><code class="lang-java">@RequestMapping(value = &quot;/index2&quot;, method = RequestMethod.GET)
public ModelAndView index2() {
    ModelAndView mv = new ModelAndView();
    mv.setViewName(&quot;index&quot;);
    return mv;
}
</code></pre>
<p>这样就能够响应/my/index2.do的HTTP GET请求（只能响应GET请求，没配置method会响应所有类型的请求）了。</p>
<h3 id="h3-14-3-2-"><a name="14.3.2    控制器的开发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.3.2    控制器的开发</h3><p>控制器开发一般分为3步：</p>
<ul>
<li>获取请求参数。</li><li>处理业务逻辑。</li><li>绑定模型和视图。</li></ul>
<h4 id="h4-14-3-2-1-"><a name="14.3.2.1    获取请求参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.3.2.1    获取请求参数</h4><p>在Spring MVC中建议不要使用Servlet容器提供的API，不然这样做控制器将会依赖于Servlet容器，比如以下代码：</p>
<pre><code class="lang-java">@RequestMapping(value=&quot;/index2&quot;, method=RequestMethod.GET)
public ModelAndView index2(HttpSession session, HttpServletRequest request){
    ModelAndView mv = new ModelAndView();
    mv.setViewName(&quot;index&quot;);
    return mv;
}
</code></pre>
<p>Spring MVC会自动解析代码中的方法参数session、request，然后传递关于Servlet容器的API参数，所以是可以获取到的。但如果这样做，那么对于index2方法而言，它就和Servlet容器紧密关联了，不利于扩展和测试。为了更加灵活，Spring MVC提供了更多的方法和注解用于获取参数。</p>
<p>如果要获取一个HTTP请求的参数——Long类型的id，那么可以直接使用注解<a href="https://github.com/requestParam" title="&#64;requestParam" class="at-link">@requestParam</a>来获取它，index方法可以写成如下代码：</p>
<pre><code class="lang-java">@RequestMapping(value = &quot;/index2&quot;, method = RequestMethod.GET)
public ModelAndView index2(@RequestParam(&quot;id&quot;) Long id) {
    System.out.println(&quot;params[id] = &quot; + id);
    ModelAndView mv = new ModelAndView();
    mv.setViewName(&quot;index&quot;);
    return mv;
}
</code></pre>
<p>通过<a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a>注解就能从HTTP请求中获取参数，相当于以下代码：</p>
<pre><code class="lang-java">String idStr = request.getParameter(&quot;id&quot;);
Long id = Long.parseLong(idStr);
</code></pre>
<p>在默认情况下，对于使用了注解<a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a>的参数而言，它要求参数不能为空，否则Spring MVC将抛出异常。有时我们还希望给参数一个默认值。<a href="https://github.com/requestParam" title="&#64;requestParam" class="at-link">@requestParam</a>还给出了两个有用的配置项。</p>
<ul>
<li><p>required：表示该属性是否必须有值，默认为true。也就是不允许参数为空，如果允许为空则配置为false。</p>
</li><li><p>defaultValue：表示该属性的默认值。</p>
</li></ul>
<p>通过注解和约定，消除了对Servlet API的依赖，以便进行测试和扩展。</p>
<p>除此之外，假设在登录系统时在Session设置了userName，那么可以使用Spring MVC提供的注解<a href="https://github.com/SessionAtrribute" title="&#64;SessionAtrribute" class="at-link">@SessionAtrribute</a>来获取。代码如下：</p>
<pre><code class="lang-java">@RequestMapping(value = &quot;/index2&quot;, method = RequestMethod.GET)
    public ModelAndView index2(@SessionAttribute(&quot;userName&quot;) String userName) {
        System.out.println(&quot;session[userName] = &quot; + userName);
        ModelAndView mv = new ModelAndView();
        mv.setViewName(&quot;index&quot;);
        return mv;
    }
</code></pre>
<h3 id="h3-14-3-2-2-"><a name="14.3.2.2    实现逻辑和绑定视图" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14.3.2.2    实现逻辑和绑定视图</h3><p>一般而言，实现的逻辑和数据库有关联，首先修改applicationContext.xml文件，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd

       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;
    &lt;!--使用注解驱动--&gt;
    &lt;context:annotation-config/&gt;
    &lt;!--数据库连接池--&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm_learn&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;1234&quot;/&gt;
        &lt;property name=&quot;maxTotal&quot; value=&quot;255&quot;/&gt;
        &lt;property name=&quot;maxIdle&quot; value=&quot;5&quot;/&gt;
        &lt;property name=&quot;maxWaitMillis&quot; value=&quot;10000&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--集成mybatis--&gt;
    &lt;bean id=&quot;factory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:/mybatis/mybatis-config.xml&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--配置数据源事务管理器--&gt;
    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--采用自动扫描方式创建mapper bean--&gt;
    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
        &lt;property name=&quot;basePackage&quot; value=&quot;com.ssm.chapter14&quot;/&gt;
        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;factory&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<p>假设上述的XML配置文件已经通过扫描的方式初始化了一个Spring IoC中的Bean——RoleService，而且它提供一个参数类型为Long的方法getRole来获取角色，那么可以通过自动装配的方式在控制器中注入它，代码如下：</p>
<pre><code class="lang-java">@Controller
@RequestMapping(&quot;role&quot;)
public class RoleController {
    //注入RoleService
    @Autowired
    private RoleService roleService;

    @RequestMapping(value = &quot;/getRole&quot;, method = RequestMethod.GET)
    public ModelAndView getRole(@RequestParam(&quot;id&quot;) Long id) {
        Role role = roleService.getRole(id);
        ModelAndView mv = new ModelAndView();
        mv.setViewName(&quot;roleDetails&quot;);
        //给数据模型添加一个角色对象
        mv.addObject(&quot;role&quot;, role);
        return mv;
    }
}
</code></pre>
(String), 

## 14.1	MVC设计概述

MVC出现的根本原因：解耦各个模块。

### 14.1.1	Spring MVC的架构

 ![Spring MVC架构](http://cdn.alanliang.site/note/Spring MVC架构.jpg)

### 14.1.2	Spring MVC组件与流程

Spring MVC的核心在于其流程，这是使用Spring MVC框架的基础，Spring MVC是一种基于Servlet的技术，它提供了核心控制器DispatcherServlet和相关的组件，并制定了松散的结构，以适合各种灵活的需要。其组件和流程如下：![Spring MVC组件和流程图](http://q8rsjstig.bkt.clouddn.com/note/Spring MVC组件和流程图.jpg)

当一个请求到来时，DispatcherServlet首先通过请求和事先解析好的HandlerMapping配置，找到对应的处理器（Handler），这里就准备开始运行处理器和拦截器组成的执行链，而运行处理器需要有一个对应的环境，这样就有了一个处理器的适配器（HandlerAdapter），通过这个适配器就能运行对应的处理器和拦截器，这里的处理器包含了控制器的内容和其它增强的功能，在处理器返回模型和视图给DispatcherServlet后，DispatcherServlet就会把对应的视图信息传递给视图解析器（ViewResolver），然后把模型渲染到视图中去。

### 14.1.3	Spring MVC入门的实例

首先需要配置Web工程的web.xml文件，代码如下所示：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--配置Spring IoC配置文件路径-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/web/WEB-INF/applicationContext.xml</param-value>
    </context-param>
    <!--配置ContextLoaderListener用于初始化Spring IoCrongqi-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--配置DispatcherServlet-->
    <servlet>
        <!--注意：Spring MVC会根据servlet-name配置，找到WEB-INF/dispatcher-servlet作为配置文件载入Web工程中-->
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--使得Dispatch而在服务器启动时就初始化-->
        <load-on-startup>2</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>
```

- contextConfigLocation。它配置Spring IoC的配置文件路径，如果是多个配置文件则用逗号隔开，其默认值为/WEB-INF/application.xml。
- ContextLoaderListener。它实现了接口ServletContextListener，可以在Web工程初始化之前完成对Spring IoC容器的初始化，也可以在Web工程关闭之时完成对容器的资源释放。
- DispatcherServlet。首先配置了servlet-name为dispatcher，这就意味着需要一个/WEB-INF/dispacher-servlet.xml文件（注意名字的对应关系），并且配置了在服务器启动时就初始化它。
- 配置DispatcherServlet拦截以后缀“do”结束的请求。这样以“do”结尾的请求都会被拦截。

在这个例子中，暂时不需要配置ApplicationContext.xml的任何内容。但是需要配置/WEB-INF/dispacher-servlet.xml文件，内容如下：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <!--使用注解驱动-->
    <mvc:annotation-driven/>
    <!--定义扫描装载的包-->
    <context:component-scan base-package="com.*"/>
    <!--定义视图解析器-->
    <!--找到Web工程/WEB-INF/JSP文件夹、且文件结尾为jsp的文件作为映射-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/jsp/"
          p:suffix="/jsp"/>
    <!--如果有配置数据库事务，需要开启事务注解的话，需要开启以下这段代码-->
    <!--
        <tx:annotation-driven transaction-manager="transactionManager"/>
    -->
</beans>
```

- \<mvc-annotation-dirven/\>表示使用注解驱动Spring MVC。
- \<context:component-scan\>表示扫描组件，base-package属性配置需要扫描的包，加载控制器和其他的一些组件。
- 定义视图解析器，解析器中定义了视图的前缀和后缀，这样解析器就会在/WEB-INF/JSP文件夹找到对应的JSP文件作为视图响应用户请求。

我们再开发一个简单的Controller，代码如下所示：

```java
//注解@Controller表示它是一个控制器
@Controller("myController")
//表明当请求的URI在/my下的时候才由该控制器响应
@RequestMapping("/my")
public class MyController {
    @RequestMapping("/index")
    //表明URI是/index的时候该方法才请求
    public ModelAndView index() {
        //模型和视图
        ModelAndView mv = new ModelAndView();
        //视图逻辑名称为index
        mv.setViewName("index");
        return mv;
    }
}
```

首先注解@Controller表明该类是一个控制器，Spring MVC扫描时会将它作为控制器加载。然后@RequestMapping指定了对应的请求的URI，Spring MVC在初始化的时候就会解析这些信息并存放起来，于是便有了HandlerMapping。当发生请求时，Spring MVC就会使用这些信息去找到对应的控制器提供服务。

方法定义返回ModelAndView，在方法中把视图名称定义为index。根据配置，解析器会找到/WEB-INF/jsp/index.jsp作为响应。于是还需要开发这个jsp文件，代码如下所示：

```html
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>Welcome to Spring Web MVC project</title>
  </head>
  <body>
  <h1>Hello, Spring MVC</h1>
  </body>
</html>
```

这个例子的执行流程如下：

![实例组件和运行流程](http://cdn.alanliang.site/note/实例组件和运行流程.jpg)

当Spring MVC启动时就会解析MyController的注解，然后生成对应URI和请求的映射关系，并注册对应的方法。当收到请求时，首先根据URI找到对应的HandlerMapping，然后组织为一个执行链，通过请求类型找到RequestMappingHandlerAdapter，它的实例是在DispatcherServlet初始化的时候创建的。然后通过它去执行HandleExecutionChain的内容，最终在MyController的方法中将index视图返回DispatcherServlet。根据配置，最后它会找到/WEB-INF/jsp/index.jsp文件作为视图，响应最终的请求。

## 14.2	Spring MVC初始化

### 14.2.1	初始化Spring IoC上下文

通过实现ServletContextListener接口可以在DispatcherServlet初始化前就可以完成Spring IoC容器的初始化，也可以在结束期完成对Spring IoC容器的销毁。部分源码如下：

```java
package org.springframework.web.context;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

public class ContextLoaderListener extends ContextLoader implements ServletContextListener {
    ...
    /*初始化容器，使用的是满足ApplicationContext接口的Spring Web IoC容器*/
    public void contextInitialized(ServletContextEvent event) {
        this.initWebApplicationContext(event.getServletContext());
    }
	
    public void contextDestroyed(ServletContextEvent event) {
        //关闭Web IoC容器
        this.closeWebApplicationContext(event.getServletContext());
        //清除相关参数
        ContextCleanupListener.cleanupAttributes(event.getServletContext());
    }
}
```

### 14.2.2	初始化映射请求上下文

映射请求上下文是通过DispatcherServlet初始化。在大部分场景下，都应该让DispatcherServlet在服务器启动期间就完成Spring IoC容器的初始化，建议在Web容器刚开始时初始化。

```java
@Override
protected void onRefresh(ApplicationContext context){
    initStrategies(context);
}

protected void initStrategies(ApplicationContext context){
    //初始化文件的解析
    initMultipartResolver(context);
    //本地解析化
    initLocaleResolver(context);
    //主题解析
    initThemeResolver(context);
    //处理器映射
    initHandlerMappings(context);
  	//处理器的适配器
    initHandlerAdapters(context);
    //Handler的异常处理解析器
    initHandlerExceptionResolvers(context);
   	//当处理器没有返回逻辑视图名等相关信息时，自动将请求URL映射为逻辑视图名
    initRequestToViewNameTranslator(context);
     //视图逻辑名称转化器，即允许返回逻辑视图名称，然后它将找到真实的视图
    initViewResolvers(context);
    //这是一个关注Flash开发的Map管理器
    initFlashMapManager(context);
}
```

- MultipartResolver：文件解析器，用户支持服务器的文件上传。
- LocaleResolver：国际化解析器，可以提供国际化的功能。
- ThemeResolver：主题解析器，类似于软件皮肤的转换功能。
- HandlerMapping：Spring MVC中非常重要的内容，它会包装用户提供一个控制器的方法和它的一些拦截器，通过调用它就能运行控制器。
- HandlerAdapter：处理器适配器，因为处理器会在不同的上下文中运行，所以Spring MVC会找到合适的适配器并运行处理器服务方法，比如处理控制器的SimpleControllerHandlerAdapter、处理普通请求的HttpRequestHandlerAdapter等。
- HandlerExceptionResolver：处理器异常解析器，出现异常后，可以转到指定的异常页面，这样使得用户的UI体验得到了改善。
- RequestToViewNameTranslator：视图逻辑名称转换器，有时候在控制器中返回一个视图名称，通过它可以找到实际的视图。当处理器没有返回逻辑视图名等相关信息时，自动将请求URL映射为逻辑视图名。
- ViewResolver：视图解析器，当控制器返回后，通过视图解析器会把逻辑视图名称进行解析，然后定位实际视图。

###14.2.3	使用注解配置方式初始化

使用注解方式很简单，首先继承AbstractAnnotationConfigDispatcherServletInitializer，然后实现它所定义的方法。代码如下：

```java
public class MyWebApplInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
    @Override
    protected Class<?>[] getRootConfigClasses() {
        //可以返回Spring的Java配置文件数组
        return new Class<?>[]{};
    }

    //DispatcherServlet的URI映射关系
    @Override
    protected Class<?>[] getServletConfigClasses() {
        //可以返回Spring的Java配置文件数组
        return new Class<?>[]{WebConfig.class};
    }

    //DispatcherServlet拦截内容
    @Override
    protected String[] getServletMappings() {
        return new String[]{"*.do"};
    }
}
```

这里使用它去代替XML配置。

## 14.3	Spring MVC开发流程详解

在目前的开发中，大部分都会采用注解的开发方式，使用注解十分简单，主要是以一个注解@Controller标注，一般只需要通过配置扫描，只是往往还要结合注解@RequestMapping配置。@RequestMapping可以配置在类或者方法上，它的作用是指定URI和哪个类（或者方法）作为一个处理请求的处理器，为了更加灵活，Spring MVC还定义了处理器的拦截器，当启动Spring MVC时，Spring MVC就会去解析@Controller中的@requestMapping的配置，再结合配置的拦截器，这样它就会组成多个拦截器和一个控制器的形式，存放到HandlerMapping中去。当请求来到服务器，首先是通过请求信息找到对应的HandlerMapping，进而找到对应的拦截器和处理器，这样就能运行对应的控制器和拦截器。

### 14.3.1	配置@RequestMapping

@RequestMapping中最常用的是请求路径和请求类型，其他的大部分作为限定项，根据需要进行匹配。比如在入门实例MyController中加入一个index2方法，代码如下所示：

```java
@RequestMapping(value = "/index2", method = RequestMethod.GET)
public ModelAndView index2() {
    ModelAndView mv = new ModelAndView();
    mv.setViewName("index");
    return mv;
}
```

这样就能够响应/my/index2.do的HTTP GET请求（只能响应GET请求，没配置method会响应所有类型的请求）了。

### 14.3.2	控制器的开发

控制器开发一般分为3步：

- 获取请求参数。
- 处理业务逻辑。
- 绑定模型和视图。

#### 14.3.2.1    获取请求参数

在Spring MVC中建议不要使用Servlet容器提供的API，不然这样做控制器将会依赖于Servlet容器，比如以下代码：

```java
@RequestMapping(value="/index2", method=RequestMethod.GET)
public ModelAndView index2(HttpSession session, HttpServletRequest request){
    ModelAndView mv = new ModelAndView();
    mv.setViewName("index");
    return mv;
}
```

Spring MVC会自动解析代码中的方法参数session、request，然后传递关于Servlet容器的API参数，所以是可以获取到的。但如果这样做，那么对于index2方法而言，它就和Servlet容器紧密关联了，不利于扩展和测试。为了更加灵活，Spring MVC提供了更多的方法和注解用于获取参数。

如果要获取一个HTTP请求的参数——Long类型的id，那么可以直接使用注解@requestParam来获取它，index方法可以写成如下代码：

```java
@RequestMapping(value = "/index2", method = RequestMethod.GET)
public ModelAndView index2(@RequestParam("id") Long id) {
    System.out.println("params[id] = " + id);
    ModelAndView mv = new ModelAndView();
    mv.setViewName("index");
    return mv;
}
```

通过@RequestParam注解就能从HTTP请求中获取参数，相当于以下代码：

```java
String idStr = request.getParameter("id");
Long id = Long.parseLong(idStr);
```

在默认情况下，对于使用了注解@RequestParam的参数而言，它要求参数不能为空，否则Spring MVC将抛出异常。有时我们还希望给参数一个默认值。@requestParam还给出了两个有用的配置项。

- required：表示该属性是否必须有值，默认为true。也就是不允许参数为空，如果允许为空则配置为false。

- defaultValue：表示该属性的默认值。

通过注解和约定，消除了对Servlet API的依赖，以便进行测试和扩展。

除此之外，假设在登录系统时在Session设置了userName，那么可以使用Spring MVC提供的注解@SessionAtrribute来获取。代码如下：

```java
@RequestMapping(value = "/index2", method = RequestMethod.GET)
    public ModelAndView index2(@SessionAttribute("userName") String userName) {
        System.out.println("session[userName] = " + userName);
        ModelAndView mv = new ModelAndView();
        mv.setViewName("index");
        return mv;
    }
```

### 14.3.2.2	实现逻辑和绑定视图

一般而言，实现的逻辑和数据库有关联，首先修改applicationContext.xml文件，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <!--使用注解驱动-->
    <context:annotation-config/>
    <!--数据库连接池-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/ssm_learn"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
        <property name="maxTotal" value="255"/>
        <property name="maxIdle" value="5"/>
        <property name="maxWaitMillis" value="10000"/>
    </bean>
    <!--集成mybatis-->
    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"/>
    </bean>
    <!--配置数据源事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--采用自动扫描方式创建mapper bean-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ssm.chapter14"/>
        <property name="sqlSessionFactoryBeanName" value="factory"/>
    </bean>
</beans>
```

假设上述的XML配置文件已经通过扫描的方式初始化了一个Spring IoC中的Bean——RoleService，而且它提供一个参数类型为Long的方法getRole来获取角色，那么可以通过自动装配的方式在控制器中注入它，代码如下：

```java
@Controller
@RequestMapping("role")
public class RoleController {
    //注入RoleService
    @Autowired
    private RoleService roleService;

    @RequestMapping(value = "/getRole", method = RequestMethod.GET)
    public ModelAndView getRole(@RequestParam("id") Long id) {
        Role role = roleService.getRole(id);
        ModelAndView mv = new ModelAndView();
        mv.setViewName("roleDetails");
        //给数据模型添加一个角色对象
        mv.addObject("role", role);
        return mv;
    }
}
```

(String), http://cdn.alanliang.site/note/landscape2.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), false(Boolean), true(Boolean), 3(Long), 1(Long), 1(Integer), 2020-06-15 11:47:16.991(Timestamp), 2020-06-15 11:47:16.991(Timestamp), 4(Integer), 1(Integer)
2020-06-15 11:47:17.006 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 11:47:17.008 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) 
2020-06-15 11:47:17.009 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 8(Long), 12(Long), 8(Long), 14(Long)
2020-06-15 11:47:17.010 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 2
2020-06-15 11:47:17.215 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:47:17.216 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:47:17.214(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: ... }(String), 0:0:0:0:0:0:0:1(String), 221(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:47:17.218 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:47:18.929 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:47:18.930 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:47:18.934 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:47:18.934 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:47:18.943 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 8
2020-06-15 11:47:18.946 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:18.947 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:47:18.951 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:47:18.952 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:18.952 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:47:18.953 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:18.954 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:18.954 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:47:18.955 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:18.955 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:18.956 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:47:18.956 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:18.957 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:18.957 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:47:18.957 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:18.958 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:18.958 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:47:18.959 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:18.959 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:18.959 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:47:18.960 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:18.960 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:18.960 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:47:18.962 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:47:18.969 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:47:18.970 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:47:18.969(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 43(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:47:18.971 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:47:27.394 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:47:27.395 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:47:27.393(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:47:27.396 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:47:32.020 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:47:32.020 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 8(Long)
2020-06-15 11:47:32.022 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:47:32.039 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:47:32.039 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 8(Long)
2020-06-15 11:47:32.040 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:47:32.287 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:47:32.287 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:47:32.286(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=8, status=2) }(String), 0:0:0:0:0:0:0:1(String), 266(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:47:32.289 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:47:32.313 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:47:32.313 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:47:32.314 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:47:32.314 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:47:32.327 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 8
2020-06-15 11:47:32.328 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:32.329 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:47:32.331 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:47:32.334 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:32.336 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:47:32.338 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:32.340 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:32.340 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:47:32.343 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:32.344 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:32.344 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:47:32.345 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:32.349 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:32.349 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:47:32.351 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:32.354 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:32.354 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:47:32.355 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:32.356 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:32.356 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:47:32.358 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:32.360 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:32.360 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:47:32.363 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:47:32.370 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:47:32.370 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:47:32.368(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 56(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:47:32.372 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:47:37.342 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:47:37.342 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:47:37.343 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 3
2020-06-15 11:47:37.345 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:47:37.345 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:47:37.347 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 3
2020-06-15 11:47:37.351 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:47:37.351 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:47:37.353 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:47:37.354 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:47:37.361 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 11:47:37.362 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:37.362 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:47:37.364 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:37.366 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:37.366 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:47:37.368 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:37.370 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:37.370 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:47:37.373 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:37.376 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:37.377 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:47:37.378 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:47:37.379 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:37.379 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:47:37.380 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:37.380 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:37.380 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:47:37.381 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:37.385 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:47:37.385 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:47:37.384(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 42(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:47:37.389 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:47:42.564 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:47:42.564 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:47:42.565 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:47:42.565 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-06-15 11:47:42.568 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 2
2020-06-15 11:47:42.569 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:42.569 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:47:42.572 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:47:42.577 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:47:42.577 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:47:42.578 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:50:16.881 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 11:50:16.882 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: SpringMVC组件开发(String), #D5F5E3(String), 2020-06-15 11:50:16.88(Timestamp), 2020-06-15 11:50:16.88(Timestamp)
2020-06-15 11:50:16.883 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 11:50:16.886 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:16.888 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 深入Spring MVC组件开发(String), JavaEE互联网轻量级框架整合开发第十五章(String), <h2 id="h2-15-1-"><a name="15.1    控制器接收各类请求参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.1    控制器接收各类请求参数</h2><p>为了应付多种传递参数的方式，先探索Spring MVC的传参方法。</p>
<p>为此先创建一个接收各类参数的控制器——ParamsController，代码如下：</p>
<pre><code class="lang-java">@Controller
@RequestMapping(&quot;/params&quot;)
public class ParamsController {
    //待开发代码
}
</code></pre>
<p>然后，将在接收参数控制器的基础上增加方法来演示如何接收各类参数，以角色表单为例，内容如下：</p>
<pre><code class="lang-html">&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        &lt;title&gt;参数&lt;/title&gt;
        &lt;!-- 加载Query文件--&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/jquery-3.2.0.js&quot;&gt;
        &lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
          &lt;!--
            此处插入JavaScript脚本
            --&gt;
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form id=&quot;form&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td&gt;角色名称&lt;/td&gt;
                    &lt;td&gt;&lt;input id=&quot;roleName&quot; name=&quot;roleName&quot; value=&quot;&quot; /&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;备注&lt;/td&gt;
                    &lt;td&gt;&lt;input id=&quot;note&quot; name=&quot;note&quot; /&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td align=&quot;right&quot;&gt;&lt;input id=&quot;commit&quot; type=&quot;button&quot; value=&quot;提交&quot; /&gt;&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="h3-15-1-1-"><a name="15.1.1    接收普通请求参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.1.1    接收普通请求参数</h3><p>如果传递的参数名称和HTTP的保存一致，那么无需任何注解也可以获取参数。以上表单传递了两个HTTP参数：角色名称和备注，响应的请求是”./params/commonParams.do”，也就是提交表单后，它就会请求对应的URL。</p>
<p>首先，在ParamsController增加对应的方法并获取参数，以下代码就是一个无注解获取HTTP请求参数的代码。</p>
<pre><code class="lang-java"> @RequestMapping(&quot;/commonParams&quot;)
    public ModelAndView commonParams(String roleName, String note) {
        System.out.println(&quot;roleName=&gt;&quot; + roleName);
        System.out.println(&quot;note=&gt;&quot; + note);
        ModelAndView mv = new ModelAndView();
        mv.setViewName(&quot;index&quot;);
        return mv;
    }
</code></pre>
<p>通过参数名称和HTTP请求参数名称一致来获取参数，如果不一致将无法获取，这样的方式允许参数为空。</p>
<p>但是，在参数很多的情况下，比如新增一个用户可能需要十几个字段，这时应该考虑使用一个POJO来管理这些参数。在没有任何注解的情况下，Spring MVC也有映射POJO的能力。新建一个角色参数类，代码如下：</p>
<pre><code class="lang-java">public class RoleParams {
    private String roleName;
    private String note;
    /*getter and setter*/
}
</code></pre>
<p>然后，在ParamController中增加一个方法来通过这个POJO获取HTTP请求参数，代码如下：</p>
<pre><code class="lang-java"> @RequestMapping(&quot;/commonParamsPojo&quot;)
    public ModelAndView commonParamsPojo(RoleParams roleParams) {
        System.out.println(&quot;roleName=&gt;&quot; + roleParams.getRoleName());
        System.out.println(&quot;note=&gt;&quot; + roleParams.getNote());
        ModelAndView mv = new ModelAndView();
        mv.setViewName(&quot;index&quot;);
        return mv;
    }
</code></pre>
<p>显然通过POJO也会获取到对应参数，需要注意的是POJO的属性名称也要和HTTP请求参数名称保持一致。但是有时候前端的参数命名规则和后台的不一样，比如前端把角色名称的参数命名为role_name，这时就要进行转换了。</p>
<h3 id="h3-15-1-2-requestparam-"><a name="15.1.2    使用@RequestParam注解获取参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.1.2    使用<a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a>注解获取参数</h3><p>Spring MVC提供了<a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a>注解来解决前后端参数名称命名不一致的问题。</p>
<p>把HTTP的参数名称从roleName修改为role_name，那么需要重新绑定规则，此时使用<a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a>注解，代码如下：</p>
<pre><code class="lang-java"> @RequestMapping(&quot;/requestParam&quot;)
    public ModelAndView requestParam(@RequestParam(&quot;role_name&quot;)String roleName,
                                     @RequestParam(&quot;note&quot;) String note){
        System.out.println(&quot;roleName=&gt;&quot; + roleName);
        System.out.println(&quot;note=&gt;&quot; + note);
        ModelAndView mv = new ModelAndView();
        mv.setViewName(&quot;index&quot;);
        return mv;
    }
</code></pre>
<h3 id="h3-15-1-3-url-"><a name="15.1.3    使用URL传递参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.1.3    使用URL传递参数</h3><p>一些网站使用URL形式传递参数，这样符合RESTful风格，对于一些业务比较简单的应用是非常常见的，比如以下代码，获取一个角色的信息，我们希望把URL写成/params/getRole/1，其中1就是一个参数，代表角色编号。现在写一个方法，它将只支持HTTP的GET请求，通过URL：/params/getRole/1来获取角色并且打印出JSON数据，他需要<a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a>和<a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a>两个注解共同协作完成，代码如下所示：</p>
<pre><code class="lang-java">//注入RoleService
@Autowired
private RoleService roleService;

//{id}表示接受一个参数
@RequestMapping(&quot;/getRole/{id}&quot;)
//注解@PathVariable表示从URL的请求地址中获取参数
public ModelAndView pathVariable(@PathVariable(&quot;id&quot;) Long id) {
    Role role = roleService.getRole(id);
    ModelAndView mv = new ModelAndView();
    //绑定数据模型
    mv.addObject(role);
    //设置为JSON视图
    mv.setView(new MappingJackson2JsonView());
    return mv;
}
</code></pre>
<p>{id}表示处理器需要接受一个由URL组成的参数，且参数名称为id，那么在方法中的<a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a>(“id”)表示将获取这个在<a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a>中定义名称为id的参数，这样就可以在方法内获取这个参数了。</p>
<p>测试结果如下：</p>
<p><img src="http://cdn.alanliang.site/note/图15-2 通过URL获取参数.png" alt="图15-2 通过URL获取参数"></p>
<h3 id="h3-15-1-4-json-"><a name="15.1.4    传递JSON参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.1.4    传递JSON参数</h3><p>有时候参数的传递还需要更多参数，比如查询可能需要分页参数，这是非常常见的场景。对于查询参数，假设还有开始行start和限制返回大小的limit，由PageParams类传递，代码如下：</p>
<pre><code class="lang-java">public class PageParams {
    private int start;
    private int limit;
    /*getter and setter*/
}
</code></pre>
<p>只需要在RoleParams的基础上加上一个PageParams属性就可以使用分页参数了，代码如下：</p>
<pre><code class="lang-java">public class RoleParams {
    private String roleName;
    private String note;
    private PageParams pageParams = null;//分页参数
    /*getter and setter*/
}
</code></pre>
<p>这个查询参数和分页参数都可以被传递了。这时客户端还需要写一段JavaScript代码来模拟这个过程，往表单插入一定JavaScript代码，代码如下：</p>
<pre><code class="lang-javascript">&lt;script type=&quot;text/javascript&quot;&gt;
    $(document).ready(function () {
    $(&quot;#commit&quot;).click(function() {
        var str = $(&quot;form&quot;).serialize();
        //提交表单
        $.post({
            url: &quot;./params/commonParamPojo2.do&quot;,
            //将form数据序列化，传递给后台，则将数据以roleName=xxx&amp;&amp;note=xxx传递
            data: $(&quot;form&quot;).serialize(),
            //成功后的方法
            success: function (result) {
            }
        });
    });
});
&lt;/script&gt;
</code></pre>
<p>注意，传递的JSON数据需要和对应参数的POJO保持一致。另外，在请求时需要告知请求的参数类型为JSON，这是不可缺少的，传递的参数是一个字符串，而不是一个JSON，所以这里使用JSON.stringify()方法将JSON数据转换为字符串。</p>
<p>这个时候可以使用Spring MVC提供的注解<a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a>接收参数，代码如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/findRoles&quot;)
public ModelAndView findRoles(@RequestBody RoleParams roleParams){
    List&lt;Role&gt; roleList = roleService.findRoles(roleParams);
    ModelAndView mv = new ModelAndView();
    mv.addObject(roleList);
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    return mv;
}
</code></pre>
<h3 id="h3-15-1-5-"><a name="15.1.5    接收列表数据和表单序列化" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.1.5    接收列表数据和表单序列化</h3><p>在一些场景，如果需要一次性删除多个角色，那么一般将一个角色编号的数组传递给后台，或新增角色，甚至同时新增多个角色。无论如何，这都需要用到Java的集合或者数组来保存对应的参数。</p>
<p>Spring MVC也支持这样的场景，假设要删除多个角色，显然你希望传递一个角色编号的数组给后台处理。通过JavaScript模仿传递角色数组给后台控制器，代码如下：</p>
<pre><code class="lang-javascript">/**传递数组**/
$(document).ready(function () {
    //删除角色数组
    var idList = [1, 2, 3];
    //jQuery的post请求
    $.post({
        url: &quot;./params/deleteRoles.do&quot;,
        //将JSON转化为字符串传递
        data: JSON.stringify(idList),
        //指定传递数据类型，不可缺少
        contentType: &quot;application/json&quot;,
        //成功后的方法
        success: function (result) {
        }
    });
});
</code></pre>
<p>通过JSON的字符串化将参数传递到后台，这个时候就可以接收参数了，代码如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/deleteRoles&quot;)
public ModelAndView deleteRoles(@RequestBody List&lt;Long&gt; idList) {
    ModelAndView mv = new ModelAndView();
    //删除角色
    int total = roleService.deleteRoles(idList);
    mv.addObject(&quot;total&quot;, total);
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    return mv;
}
</code></pre>
<p>这里注解<a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a>表示要求Spring MVC将传递过来的JSON数组数据，转换为对应的Java集合类型。把List转化为数组（Long[]）也是可行的，但是这里的参数只是一个非常简单的长整型，而在实际开发中也许要传递多个角色用于保存，这也是没问题的，修改JavaScript代码，代码如下：</p>
<pre><code class="lang-javascript">$(document).ready(function () {
    //新增角色数组
    var roleList = [
        {roleName: &#39;role_name_1&#39;, note: &#39;note_1&#39;},
        {roleName: &#39;role_name_2&#39;, note: &#39;note_2&#39;},
        {roleName: &#39;role_name_3&#39;, note: &#39;note_3&#39;}
    ];
    //jQuery的post请求
    $.post({
        url: &quot;./params/addRoles.do&quot;,
        //将JSON转化为字符串传递
        data: JSON.stringify(roleList),
        contentType: &quot;application/json&quot;,
        //成功后的方法
        success: function (result) {
        }
    });
});
</code></pre>
<p>然后，使用<a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a>获取，代码如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/addRoles&quot;)
    public ModelAndView addRoles(@RequestBody List&lt;Role&gt; roleList){
        ModelAndView mv = new ModelAndView();
        //新增角色
        int total = roleService.insertRoles(roleList);
        mv.addObject(&quot;total&quot;,total);
        mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
        return mv;
    }
</code></pre>
<p>通过表单序列化也可以将表单数据转换为字符串传递给后台，因为一些隐藏表单需要一定的计算，所以我们也需要在用户点击提交按钮后，通过序列化去提交表单。下面的表单就是通过表单序列化提交数据，代码如下：</p>
<pre><code class="lang-javascript">&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
        &lt;title&gt;参数&lt;/title&gt;
        &lt;!-- 加载Query文件--&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/jquery-3.2.0.js&quot;&gt;
        &lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
        $(document).ready(function () {
            $(&quot;#commit&quot;).click(function() {
                var str = $(&quot;form&quot;).serialize();
                //提交表单
                $.post({
                    url: &quot;./params/commonParamPojo2.do&quot;,
                    //将form数据序列化，传递给后台，则将数据以roleName=xxx&amp;&amp;note=xxx传递
                    data: $(&quot;form&quot;).serialize(),
                    //成功后的方法
                    success: function (result) {
                    }
                });
            });
        });
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form id=&quot;form&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td&gt;角色名称&lt;/td&gt;
                    &lt;td&gt;&lt;input id=&quot;roleName&quot; name=&quot;roleName&quot; value=&quot;&quot; /&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;备注&lt;/td&gt;
                    &lt;td&gt;&lt;input id=&quot;note&quot; name=&quot;note&quot; /&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td align=&quot;right&quot;&gt;&lt;input id=&quot;commit&quot; type=&quot;button&quot; value=&quot;提交&quot; /&gt;&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>由于序列化参数的传递规则变为roleName=xxx&amp;&amp;note=xxx，所以获取参数也是十分容易，代码如下：</p>
<pre><code class="lang-java"> @RequestMapping(&quot;/commonParamPojo2&quot;)
    public ModelAndView commonParamPojo2(String roleName, String note) {
        System.out.println(&quot;roleName=&gt;&quot; + roleName);
        System.out.println(&quot;note=&gt;&quot; + note);
        ModelAndView mv = new ModelAndView();
        mv.setViewName(&quot;index&quot;);
        return mv;
    }
</code></pre>
<p>这样就能获取序列化表单后的参数了。</p>
<h2 id="h2-15-2-"><a name="15.2    重定向" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.2    重定向</h2><p>要将一个角色信息转化为JSON视图的功能，只要传递角色信息给它，它就能将信息转化为视图，代码如下：</p>
<pre><code class="lang-java">  @RequestMapping(&quot;/showRoleJsonInfo&quot;)
    public ModelAndView showRoleJsonInfo(Long id, String roleName, String note) {
        ModelAndView mv = new ModelAndView();
        mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
        mv.addObject(&quot;id&quot;, id);
        mv.addObject(&quot;roleName&quot;, roleName);
        mv.addObject(&quot;note&quot;, note);
        return mv;
    }
</code></pre>
<p>现在的需求是，每当新增一个角色信息时，需要将其数据（因为角色编号会回填）以JSON视图的形式展示给请求者。在数据保存到数据库后，由数据库返回角色编号，再将角色信息传递给showRoleJsonInfo方法，就可以展示JSON视图给请求者了，代码如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/addRole&quot;)
//Model为重定向数据模型，Spring MVC会自动初始化它
public String addRole(Model model, String roleName, String note) {
    Role role = new Role();
    role.setRoleName(roleName);
    role.setNote(note);
    //插入角色后，会回填角色编号
    roleService.insertRole(role);
    //绑定重定向数据模型
    model.addAttribute(&quot;roleName&quot;, roleName);
    model.addAttribute(&quot;note&quot;, note);
    model.addAttribute(&quot;id&quot;, role.getId());
    return &quot;redirect:./showRoleJsonInfo.do&quot;;
}
</code></pre>
<p>这里Model代表一个数据模型，可以给它附上对应的数据模型，然后通过返回字符串来实现重定向的功能。Spring MVC约定，当返回的字符串带有redirect的时候，他就会认为需要的是一个重定向，而事实上，不仅可以通过返回字符串来实现重定向，也可以通过返回视图来实现重定向。代码如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/addRole2&quot;)
public ModelAndView addRole2(ModelAndView mv, String roleName, String note) {
    Role role = new Role();
    role.setRoleName(roleName);
    role.setNote(note);
    //插入角色后，会回填角色编号
    roleService.insertRole(role);
    //绑定重定向数据模型
    mv.addObject(&quot;roleName&quot;, roleName);
    mv.addObject(&quot;note&quot;, note);
    mv.addObject(&quot;id&quot;, role.getId());
    mv.setViewName(&quot;redirect:./showRoleJsonInfo.do&quot;);
    return mv;
}
</code></pre>
<p>这里只是传递一些简单的参数，有时需要传递角色POJO来完成任务，而不是一个个字段的传递，比如把获取角色信息JSON视图的代码改写为如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/showRoleJsonInfo2&quot;)
public ModelAndView showRoleJsonInfo(Role role) {
    ModelAndView mv = new ModelAndView();
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    mv.addObject(&quot;role&quot;, role);
    return mv;
}
</code></pre>
<p>显然这样会比原来的转化方式要简洁得多，但在URL重定向的过程中，并不能有效传递对象，因为HTTP的重定向参数是以字符串传递的。这时Spring MVC提供了另外的一个办法——flash属性，你需要提供的数据模型是一个RedirectAttribute，实现如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/addRole3&quot;)
public String addRole3(RedirectAttributes ra, Role role) {
    //插入角色后，会回填角色编号
    roleService.insertRole(role);
    //绑定重定向数据模型
    ra.addFlashAttribute(role);
    return &quot;redirect:./showRoleJsonInfo.do&quot;;
}
</code></pre>
<p>这样就能传递POJO对象给下一个地址了。使用addFlashAttribute方法后，Spring MVC会将数据保存到Session中（Session在一个会话期有效），重定向后就会将其清除，这样就能传递数据给下一个地址了。</p>
<h2 id="h2-15-3-"><a name="15.3    保存并获取属性参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.3    保存并获取属性参数</h2><p>在Java EE的基础学习中，有时我们会暂存数据到HTTP的request对象或者Session对象中，在开发控制器时，有时也需要使用这些对象来保存或获取数据。Spring MVC提供了相关支持，它的注解有3个：<a href="https://github.com/RequestAttribute" title="&#64;RequestAttribute" class="at-link">@RequestAttribute</a>、<a href="https://github.com/SessionAttribute" title="&#64;SessionAttribute" class="at-link">@SessionAttribute</a>和<a href="https://github.com/SessionAttributes" title="&#64;SessionAttributes" class="at-link">@SessionAttributes</a>，它们的作用如下：</p>
<ul>
<li><a href="https://github.com/RequestAttribute" title="&#64;RequestAttribute" class="at-link">@RequestAttribute</a>获取HTTP的请求（request）对象属性值，用于传递给控制器的参数。</li><li><p><a href="https://github.com/SessionAttribute" title="&#64;SessionAttribute" class="at-link"><a href="https://github.com/SessionAttribute" title="&#64;SessionAttribute" class="at-link">@SessionAttribute</a></a>获取HTTP的请求（Session）对象属性值，用于传递给控制器的参数。</p>
</li><li><p><a href="https://github.com/SessionAttributes" title="&#64;SessionAttributes" class="at-link"><a href="https://github.com/SessionAttributes" title="&#64;SessionAttributes" class="at-link">@SessionAttributes</a></a>,可以给它配置一个字符串数组，这个数组对应的是数据模型对应的键值对，然后将这些键值对保存到Session中。</p>
</li></ul>
<p>对于<a href="https://github.com/RequestAttribute" title="&#64;RequestAttribute" class="at-link">@RequestAttribute</a>这个注解，因为在请求的范围内，Spring MVC更希望你使用它所提供的数据模型。他的数据模型本身就是在请求的生命周期中存在。</p>
<h3 id="h3-15-3-1-requestattribute"><a name="15.3.1    注解@RequestAttribute" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.3.1    注解<a href="https://github.com/RequestAttribute" title="&#64;RequestAttribute" class="at-link">@RequestAttribute</a></h3><p><a href="https://github.com/RequestAttribute" title="&#64;RequestAttribute" class="at-link">@RequestAttribute</a>主要的作用是从HTTP的request对象中取出请求属性，只是它的范围周期是在一次请求中存在，首先创建一个JSP文件，代码如下：</p>
<pre><code class="lang-html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; 
    &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        &lt;title&gt;Insert title here&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
       &lt;%
       //设置请求属性
       request.setAttribute(&quot;id&quot;, 11L);
       //转发给控制器
       request.getRequestDispatcher(&quot;./attribute/requestAttribute.do&quot;).forward(request, response);
       %&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>然后，用控制器AttributeController处理它，并且使用<a href="https://github.com/RequestAttribute" title="&#64;RequestAttribute" class="at-link">@RequestAttribute</a>获取对应属性，代码如下：</p>
<pre><code class="lang-java">@Controller
@RequestMapping(&quot;/attributes&quot;)
public class AttributeController {
    @Autowired
    private RoleService roleService;

    public ModelAndView reqAttr(@RequestAttribute(&quot;id&quot;) Long id) {
        ModelAndView mv = new ModelAndView();
        Role role = roleService.getRole(id);
        mv.addObject(&quot;role&quot;, role);
        mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
        return mv;
    }
}
</code></pre>
<p>显然通过JSP的跳转就会转发到这个控制器的reqAttr方法，在参数中使用了<a href="https://github.com/RequestAttribute" title="&#64;RequestAttribute" class="at-link">@RequestAttribute</a>注解，这样就能获取请求的id属性了。</p>
<h3 id="h3-15-3-2-sessionattribute-sessionattributes"><a name="15.3.2    注解@SessionAttribute和注解@SessionAttributes" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.3.2    注解<a href="https://github.com/SessionAttribute" title="&#64;SessionAttribute" class="at-link">@SessionAttribute</a>和注解<a href="https://github.com/SessionAttributes" title="&#64;SessionAttributes" class="at-link">@SessionAttributes</a></h3><p>在控制器中可以使用注解<a href="https://github.com/SessionAttributes" title="&#64;SessionAttributes" class="at-link">@SessionAttributes</a>来设置对应的键值对，不过这个注解只能标注类，不能标注方法或参数。它可以配置属性名称或者属性类型。它的作用是当类使用了该注解后，Spring MVC执行完控制器的逻辑后，将数据模型中对应的属性名称或者属性类型保存到HTTP的Session对象中。</p>
<p>下面对AttributeController进行改造，代码如下：</p>
<pre><code class="lang-java">@Controller
@RequestMapping(&quot;/attributes&quot;)
//可以配置数据模型的名称和类型，两者取或关系
@SessionAttributes(names = {&quot;id&quot;}, types = {Role.class})
public class AttributeController {
    @Autowired
    private RoleService roleService;

       ...

    @RequestMapping(&quot;/sessionAttributes&quot;)
    public ModelAndView sessionAttrs(Long id) {
        ModelAndView mv = new ModelAndView();
        Role role = roleService.getRole(id);
        //根据类型，Session将会保存角色信息
        mv.addObject(&quot;role&quot;, role);
        //根据名称，Session将会保存id
        mv.addObject(&quot;id&quot;, id);
        //视图名称，定义跳转到一个JSP文件上
        mv.setViewName(&quot;sessionAttribute&quot;);
        return mv;
    }

}
</code></pre>
<p>这时请求/attribute/sessionAttributes.do?id=1，然后通过JSP文件去验证<a href="https://github.com/SessionAttributes" title="&#64;SessionAttributes" class="at-link">@SessionAttributes</a>配置是否有效，代码如下：</p>
<pre><code class="lang-html">&lt;%@ page language=&quot;java&quot; import=&quot;com.ssm.chapter15.pojo.Role&quot; contentType=&quot;text/html; charset=UTF-8&quot;
         pageEncoding=&quot;UTF-8&quot; %&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
    &lt;title&gt;session&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;%
    Role role = (Role) session.getAttribute(&quot;role&quot;);
    out.println(&quot;id = &quot; + role.getId() + &quot;&lt;/p&gt;&quot;);
    out.println(&quot;roleName = &quot; + role.getRoleName() + &quot;&lt;/p&gt;&quot;);
    out.println(&quot;note = &quot; + role.getNote() + &quot;&lt;/p&gt;&quot;);

    Long id = (Long)session.getAttribute(&quot;id&quot;);
    out.println(&quot;id = &quot; + id + &quot;&lt;/p&gt;&quot;);
%&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>这样就可以不使用Servlet API提供了Session对象了，有利于测试和维护。Spring MVC还提供了<a href="https://github.com/SessionAttribute" title="&#64;SessionAttribute" class="at-link">@SessionAttribute</a>来读取Session属性。</p>
<p>首先创建一个JSP文件，保存Session属性，代码如下：</p>
<pre><code class="lang-html">&lt;%@ page language=&quot;java&quot; import=&quot;com.ssm.chapter15.pojo.Role&quot; contentType=&quot;text/html; charset=UTF-8&quot;
         pageEncoding=&quot;UTF-8&quot; %&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
    &lt;title&gt;session&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%
        //设置Session属性
        session.setAttribute(&quot;id&quot;, 1L);
        //执行跳转
        response.sendRedirect(&quot;./attribute/sessionAttribute.do&quot;);
    %&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>然后在控制器AttributeController上加入对应方法，实现通过注解<a href="https://github.com/SessionAttribute" title="&#64;SessionAttribute" class="at-link">@SessionAttribute</a>获取Session属性，代码如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/sessionAttribute&quot;)
public ModelAndView sessionAttr(@SessionAttribute(&quot;id&quot;) Long id){
    ModelAndView mv = new ModelAndView();
    Role role = roleService.getRole(id);
    mv.addObject(&quot;role&quot;,role);
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    return mv;
}
</code></pre>
<p>和<a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a>一样，<a href="https://github.com/SessionAttribute" title="&#64;SessionAttribute" class="at-link">@SessionAttribute</a>注解的参数默认不可以为空。</p>
<h3 id="h3-15-3-3-cookievalue-requestheader"><a name="15.3.3    注解@CookieValue和注解@RequestHeader" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.3.3    注解<a href="https://github.com/CookieValue" title="&#64;CookieValue" class="at-link">@CookieValue</a>和注解<a href="https://github.com/RequestHeader" title="&#64;RequestHeader" class="at-link">@RequestHeader</a></h3><p>从名称而言，这两个注解很明确，就是从Cookie和HTTP请求头获取对应的请求信息。对于Cookie而言，需要考虑到用户是可以禁用的。使用实例代码如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/getHeaderAndCookie&quot;)
public String testHeaderAndCookie(@RequestHeader(value = &quot;User-Agent&quot;, required = false, defaultValue = &quot;attribute&quot;) String userAgent,
                                  @CookieValue(value = &quot;JSESSIONID&quot;, required = true, defaultValue = &quot;MyJsessionId&quot;) String JsessionId) {
    System.out.println(&quot;User-Agent: &quot; + userAgent);
    System.out.println(&quot;JSESSIONID: &quot; + JsessionId);
    return &quot;index&quot;;
}
</code></pre>
<p>这里演示了从HTTP请求头和Cookie中读取信息。</p>
<h2 id="h2-15-4-"><a name="15.4    拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.4    拦截器</h2><p>拦截器允许在执行处理器前后进行操作，甚至是在渲染视图后进行操作。Spring MVC会在启动期间通过<a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a>注解解析URI和处理器的关系，在运行的时候突发请求找到对应的HandlerMapping，然后构建HanderExecutionChain对象，它是一个执行的责任链对象。</p>
<h3 id="h3-15-4-1-"><a name="15.4.1    拦截器的定义" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.4.1    拦截器的定义</h3><p>Spring要求处理器的拦截器继承HandlerInterceptorAdapter，这个类定义了三个方法，代码如下：</p>
<pre><code class="lang-java">public class RoleInterceptor1 extends HandlerInterceptorAdapter {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        System.err.println(&quot;preHandle1&quot;);
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
            ModelAndView modelAndView) throws Exception {
        System.err.println(&quot;postHandle1&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
            throws Exception {
        System.err.println(&quot;afterCompletion1&quot;);
    }

}
</code></pre>
<ul>
<li>preHandle方法：在处理器之前执行的前置方法，这样Spring MVC可以在进入处理器前处理一些方法。注意，它将返回一个boolean值，会影响到后面Spring MVC的流程。</li><li>postHandle方法：在处理器之后执行的后置方法，处理器的逻辑完成后运行它。</li><li>afterCompletion方法：无论是否产生异常都会在渲染视图后执行的方法。</li></ul>
<h3 id="h3-15-4-2-"><a name="15.4.2    拦截器的执行流程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.4.2    拦截器的执行流程</h3><p>一个拦截器的流程如图：</p>
<p><img src="http://cdn.alanliang.site/note/拦截器执行流程.jpg" alt="拦截器执行流程"></p>
<p>注意，当前置方法返回false时，就不会执行后面的逻辑了。</p>
<h3 id="h3-15-4-3-"><a name="15.4.3    开发拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.4.3    开发拦截器</h3><p>注意，当XML配置文件加入了元素\&lt;mvc:annotation-driven\&gt;或者使用Java配置使用注解<a href="https://github.com/EnableWebMvc" title="&#64;EnableWebMvc" class="at-link">@EnableWebMvc</a>时，系统就会初始化拦截器ConversionServiceExposingInterceptor，它是一个开始就被Spring MVC默认加载的拦截器，它的主要作用是根据配置在控制器上的注解来完成对应的功能。Spring MVC提供的公共拦截器HandlerInterceptorAdapter。下面完成一个角色拦截器，它只是一个简单的测试，代码如下：</p>
<pre><code class="lang-java">public class RoleInterceptor extends HandlerInterceptorAdapter {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        System.err.println(&quot;preHandle&quot;);
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
            ModelAndView modelAndView) throws Exception {
        System.err.println(&quot;postHandle&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, 
             Object handler, Exception ex) throws Exception {
        System.err.println(&quot;afterCompletion&quot;);
    }

}
</code></pre>
<p>还需要进一步配置它才能使用。在Spring MVC的配置文件（比如dispatcher-servlet.xml）中加入代码:</p>
<pre><code class="lang-xml">&lt;mvc:interceptors&gt;
    &lt;mvc:interceptor&gt;
        &lt;mvc:mapping path=&quot;/role/*.do&quot;/&gt;
        &lt;bean class=&quot;com.ssm.chapter15.interceptor.RoleInterceptor&quot;/&gt;
    &lt;/mvc:interceptor&gt;
&lt;/mvc:interceptors&gt;
</code></pre>
<p>用元素\&lt;mvc:interceptors\&gt;配置拦截器，在它里面可以配置多个拦截器。上述代码配置了一个角色拦截器，把class配置指定为开发的拦截器而元素\&lt;mvc:mapping\&gt;的属性path则告诉Spring MVC拦截什么请求，它使用了一个正则表达式匹配。 </p>
<h3 id="h3-15-4-4-"><a name="15.4.4    多个拦截器执行的顺序" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.4.4    多个拦截器执行的顺序</h3><p>先创建3个角色拦截器，代码如下：</p>
<pre><code class="lang-java">public class RoleInterceptor1 extends HandlerInterceptorAdapter {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        System.err.println(&quot;preHandle1&quot;);
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
            ModelAndView modelAndView) throws Exception {
        System.err.println(&quot;postHandle1&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
            throws Exception {
        System.err.println(&quot;afterCompletion1&quot;);
    }

}
</code></pre>
<pre><code class="lang-java">public class RoleInterceptor2 extends HandlerInterceptorAdapter {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        System.err.println(&quot;preHandle2&quot;);
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
            ModelAndView modelAndView) throws Exception {
        System.err.println(&quot;postHandle2&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
            throws Exception {
        System.err.println(&quot;afterCompletion2&quot;);
    }

}
</code></pre>
<pre><code class="lang-java">public class RoleInterceptor3 extends HandlerInterceptorAdapter {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        System.err.println(&quot;preHandle3&quot;);
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
            ModelAndView modelAndView) throws Exception {
        System.err.println(&quot;postHandle3&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
            throws Exception {
        System.err.println(&quot;afterCompletion3&quot;);
    }

}
</code></pre>
<p>修改配置文件，将这些拦截器按顺序配置，代码如下：</p>
<pre><code class="lang-xml">&lt;mvc:interceptors&gt;
    &lt;mvc:interceptor&gt;
        &lt;mvc:mapping path=&quot;/role/*.do&quot; /&gt;
        &lt;bean class=&quot;com.ssm.chapter15.interceptor.RoleInterceptor1&quot; /&gt;
    &lt;/mvc:interceptor&gt;
    &lt;mvc:interceptor&gt;
        &lt;mvc:mapping path=&quot;/role/*.do&quot; /&gt;
        &lt;bean class=&quot;com.ssm.chapter15.interceptor.RoleInterceptor2&quot; /&gt;
    &lt;/mvc:interceptor&gt;
    &lt;mvc:interceptor&gt;
        &lt;mvc:mapping path=&quot;/role/*.do&quot; /&gt;
        &lt;bean class=&quot;com.ssm.chapter15.interceptor.RoleInterceptor3&quot; /&gt;
    &lt;/mvc:interceptor&gt;
&lt;/mvc:interceptors&gt;
</code></pre>
<p>测试结果如下：</p>
<pre><code>......
preHandle1
preHandle2
preHandle3
......控制器逻辑日志......
postHandle3
postHandle2
postHandle1
......
afterCompletion3
afterCompletion2
afterCompletion1
......
</code></pre><p>结果与责任链模式的运行顺序一致。</p>
<h2 id="h2-15-5-"><a name="15.5    验证表单" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.5    验证表单</h2><p>在实际开发中，获得数据后的第一步就是检验数据的正确性，一般会通过注解校验，发现错误后返回给用户，但是对于一些逻辑上的错误，比如购买金额=购买数量*单价，这样的规则就很难使用注解验证，这时可以使用Spring提供的验证器（Validator）规则去验证。</p>
<h3 id="h3-15-5-1-jsr-303-"><a name="15.5.1    使用JSR 303注解验证输入内容" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.5.1    使用JSR 303注解验证输入内容</h3><p>Spring提供了对Bean的功能校验，通过注解<a href="https://github.com/Valid" title="&#64;Valid" class="at-link">@Valid</a>标明哪个Bean需要启用注解式的验证。在javax.validation.constrants.*中定义了一系列的JSR 303规范给出的注解，规则可查看<a href="https://www.jianshu.com/p/89d3cf1eaf14，为了使用这些注解，假设要完成一个交易表单，代码如下：">https://www.jianshu.com/p/89d3cf1eaf14，为了使用这些注解，假设要完成一个交易表单，代码如下：</a></p>
<pre><code class="lang-html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
         pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
    &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        &lt;title&gt;validate&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;

        &lt;form action = &quot;./validate/annotation.do&quot;&gt; 
        &lt;!-- 
        &lt;form action = &quot;./validate/validator.do&quot;&gt;
        --&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td&gt;产品编号：&lt;/td&gt;
                    &lt;td&gt;&lt;input name=&quot;productId&quot; id=&quot;productId&quot;/&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;用户编号：&lt;/td&gt;
                    &lt;td&gt;&lt;input name=&quot;userId&quot; id=&quot;userId&quot;/&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;交易日期：&lt;/td&gt;
                    &lt;td&gt;&lt;input name=&quot;date&quot; id=&quot;date&quot;/&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;价格：&lt;/td&gt;
                    &lt;td&gt;&lt;input name=&quot;price&quot; id=&quot;price&quot;/&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;数量：&lt;/td&gt;
                    &lt;td&gt;&lt;input name=&quot;quantity&quot; id=&quot;quantity&quot;/&gt; &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;交易金额：&lt;/td&gt;
                    &lt;td&gt;&lt;input name=&quot;amount&quot; id=&quot;amount&quot;/&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;用户邮件：&lt;/td&gt;
                    &lt;td&gt;&lt;input name=&quot;email&quot; id=&quot;email&quot;/&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;备注：&lt;/td&gt;
                    &lt;td&gt;&lt;textarea id=&quot;note&quot;  name=&quot;note&quot; cols=&quot;20&quot; rows=&quot;5&quot;&gt;&lt;/textarea&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;&lt;td colspan=&quot;2&quot; align=&quot;right&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt; &lt;/tr&gt;
            &lt;/table&gt;
        &lt;form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>假设数据需要满足如下规则：</p>
<ul>
<li>产品编号、用户编号、交易日期、价格、数量、交易金额不能为空。</li><li>交易日期格式为yyyy-MM-dd，且只能在未来。</li><li>价格最小值为0.1。</li><li>数量是一个整数，且最小值为1，最大值为100。</li><li>交易金额最小值为1，最大值为5万。</li><li>用户邮件需要满足邮件正则式。</li><li>备注内容不得多于256个字符。</li></ul>
<p>创建一个POJO，如下：</p>
<pre><code class="lang-java">public class Transaction {
    // 产品编号
    @NotNull // 不能为空
    private Long productId;

    // 用户编号
    @NotNull // 不能为空
    private Long userId;

    // 交易日期
    @Future // 只能是将来的日期
    @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) // 日期格式化转换
    @NotNull // 不能为空
    private Date date;

    // 价格
    @NotNull // 不能为空
    @DecimalMin(value = &quot;0.1&quot;) // 最小值0.1元
    private Double price;

    // 数量
    @Min(1) // 最小值为1
    @Max(100) // 最大值
    @NotNull // 不能为空
    private Integer quantity;

    // 交易金额
    @NotNull // 不能为空
    @DecimalMax(&quot;500000.00&quot;) // 最大金额为5万元
    @DecimalMin(&quot;1.00&quot;) // 最小交易金额1元
    private Double amount;

    // 邮件
    @Pattern(// 正则式
            regexp = &quot;^([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)*@&quot;
                    + &quot;([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)+[\\.][A-Za-z]{2,3}([\\.][A-Za-z]{2})?$&quot;,
            // 自定义消息提示
            message = &quot;不符合邮件格式&quot;)
    private String email;

    // 备注
    @Size(min = 0, max = 256) // 0到255个字符
    private String note;
}
</code></pre>
<p>这样就可以给每一个字段加入对应校验，它会生成默认的错误信息。在邮件的检验中，还使用了配置项message来重新定义了当校验失败后的错误信息，这样就能够启动Spring的校验规则来校验表单了。</p>
<p>用控制器完成表单验证，代码如下：</p>
<pre><code class="lang-java">@Controller
@RequestMapping(&quot;/validate&quot;)
public class ValidateController {

    @RequestMapping(&quot;/annotation&quot;)
    public ModelAndView annotationValidate(@Valid Transaction trans, Errors errors) {
        // 是否存在错误
        if (errors.hasErrors()) {
            // 获取错误信息
            List&lt;FieldError&gt; errorList = errors.getFieldErrors();
            for (FieldError error : errorList) {
                // 打印字段错误信息
                System.err.println(&quot;fied :&quot; + error.getField() + &quot;\t&quot; + &quot;msg:&quot; + error.getDefaultMessage());
            }
        }
        ModelAndView mv = new ModelAndView();
        mv.setViewName(&quot;index&quot;);
        return mv;
    }
}
</code></pre>
<p>使用注解<a href="https://github.com/Valid" title="&#64;Valid" class="at-link">@Valid</a>标明这个Bean将会被检验，而另外一个类型为Errors的参数则是用于保存是否存在错误信息的。</p>
<p>有时检验并不简单，它可能还有其他一些复杂的规则。比如，交易日期往往就不是一个应该录入的数据，而是系统提取当前日期。又如规则：交易金额=数量*价格，这样又需要其他的一些验证规则了，Spring提供了验证框架。</p>
<h3 id="h3-15-5-2-"><a name="15.5.2    使用验证器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.5.2    使用验证器</h3><p>有时除了简单的输入格式、非空性等校验，也需要一定的业务校验，Spring提供了Validator接口来实现检验，它将在进入控制器逻辑之前对参数的合法性进行校验。</p>
<p>Validator接口定义如下：</p>
<pre><code class="lang-java">public interface Validator {
    /**
    *判断当前验证器是否用于校验clazz类型的POJO
    *@param clazz --POJO类型
    *@return true启动校验，false则不再校验
    */
    boolean supports(Class&lt;?&gt; clazz);

    /**
    *检验POJO的合法性
    *@param target POJO请求对象
    *@param errors 错误信息
    */
    void validate(Object target, Errors errors);
}
</code></pre>
<p>下面进行一项验证，要求：交易金额=价格*数量，代码如下：</p>
<pre><code class="lang-java">public class TransactionValidator implements Validator {
    @Override
    public boolean supports(Class&lt;?&gt; clazz) {
        //判断验证是否为Transaction，如果是则进行判断[修改为：验证]
        return Transaction.class.equals(clazz);
    }

    @Override
    public void validate(Object target, Errors errors) {
        Transaction trans = (Transaction) target;
        //求交易金额和价格×数量的差额
        double dis = trans.getAmount() - (trans.getPrice() * trans.getQuantity());
        //如果差额大于0.01，则认为业务错误
        if (Math.abs(dis) &gt; 0.01) {
            //加入错误信息
            errors.rejectValue(&quot;amount&quot;, null, &quot;交易金额和购买数量与价格不匹配&quot;);
        }
    }
}
</code></pre>
<p>这样这个验证器就判断了是否为Transaction对象，如果是就去验证后面的逻辑，那么要将它捆绑到对应的控制器中，这时Spring MVC提供了注解<a href="https://github.com/initBinder" title="&#64;initBinder" class="at-link">@initBinder</a>。在ValidateController中添加代码，代码如下：</p>
<pre><code class="lang-java">@InitBinder
public void initBinder(DataBinder binder) {
    // 数据绑定器加入验证器
    binder.setValidator(new TransactionValidator());
}

@RequestMapping(&quot;/validator&quot;)
public ModelAndView validator(@Valid Transaction trans, Errors errors) {
    // 是否存在错误
    if (errors.hasErrors()) {
        // 获取错误信息
        List&lt;FieldError&gt; errorList = errors.getFieldErrors();
        for (FieldError error : errorList) {
            // 打印字段错误信息
            System.err.println(&quot;fied :&quot; + error.getField() + &quot;\t&quot; + &quot;msg:&quot; + error.getDefaultMessage());
        }
    }
    ModelAndView mv = new ModelAndView();
    mv.setViewName(&quot;index&quot;);
    return mv;
}
</code></pre>
<p>注解<a href="https://github.com/Valid" title="&#64;Valid" class="at-link">@Valid</a>就是为了启动这个验证器，而参数Errors则是记录验证器返回错误信息的。</p>
<p>比较遗憾的是，JSR303注解方式和验证器不能同时使用，不过可以在使用JSR303注解方式得到基本的校验信息后，再使用自己得方法进行验证。</p>
<h2 id="h2-15-6-"><a name="15.6    数据模型" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.6    数据模型</h2><p>视图是业务处理后展现给用户的内容，不过一般伴随着业务处理返回的数据，用来给用户查看。在此之前，我们一直使用ModelAndView来定义视图类型，包括JSON视图，也用它来加载数据模型，ModelAndView有一个类型为ModelMap的属性model，而ModelMap继承了LinkedHashMap，因此用它可以存放各种键值对。</p>
<p>在控制器的方法中，可以把ModelAndView、Model、ModelMap作为参数。在Spring MVC，三者可以相互转换。</p>
<h3 id="h3-15-7-"><a name="15.7    视图和视图解析器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.7    视图和视图解析器</h3><p>视图是展示给用户的内容，而在此之前，要通过控制器得到对应的数据模型，如果是非逻辑视图，则不会经过视图解析器定位视图，而是直接渲染数据模型便结束了；而逻辑视图则要对其进一步解析，已定位真实视图，这就是视图解析器的作用。</p>
<h3 id="h3-15-7-1-"><a name="15.7.1    视图" class="reference-link"></a><span class="header-link octicon octicon-link"></span>15.7.1    视图</h3><p>为了满足各种需求，在Spring MVC中定义了多种视图，绑定到数据模型中，那么视图就可以展示数据模型的信息了。只是常用的并不多。它们都要实现接口——View，代码如下：</p>
<pre><code class="lang-java">public interface View {
    //响应状态属性
    String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + &quot;.responseStatus&quot;;
    //定义数据模型下取出变量路径
    String PATH_VARIABLES = View.class.getName() + &quot;.pathVariables&quot;;
    //选择响应内容类型
    String SELECTED_CONTENT_TYPE = View.class.getName() + &quot;.selectedContentType&quot;;
    //选择响应客户端的类型
    String getContentType();
    //渲染方法，model是数据模型
    void render(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception;

}
</code></pre>
<p>注意getContentType方法和render方法。getContentType表示返回一个字符串，标明给用户什么类型的文件响应、可以是HTML、JSON、PDF等。而render方法则是一个渲染视图的方法，其中Model是数据模型，HTPP请求对象和响应对象用于处理HTP请求的各类问题。</p>
<p>当控制器返回ModelAndView时，视图解析器就会解析它，然后将数据模型传递给render方法，这样就能渲染视图了。在Spring MVC中实现视图的类很多，比如JSTL视图JstlView，JSON视图MappingJackon2JsonView，PDF视图AbstractPdfView等，通过它们的render方法，Spring MVC就可以将数据模型渲染成各类视图，以满足各种需求。</p>
<p>视图又分为逻辑视图和非逻辑视图，比如MappingJackon2JsonView是一个非逻辑视图，它的目的就是将数据模型转换为一个JSON视图，展现给用户，，无须对视图名字再进行下一步解析，比如下面代码：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/RequestAttribute&quot;)
public ModelAndView reqAttr(@RequestAttribute(&quot;id&quot;) Long id) {
    ModelAndView mv = new ModelAndView();
    Role role = roleService.getRole(id);
    mv.addObject(&quot;role&quot;, role);
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    return mv;
}
</code></pre>
<p>MappingJackon2JsonView在没有视图解析器的情况下可以进行渲染，最终将其绑定的数据模型转换了JSON数据。</p>
<p>InternalResourceView是一个逻辑视图，对于逻辑视图而言它需要一个视图解析器，常见配置如下：</p>
<pre><code class="lang-xml">&lt;!-- 找到Web工程/WEB-INF/JSP文件夹，且文件结尾为jsp的文件作为映射 --&gt;
&lt;bean id=&quot;viewResolver&quot;
      class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;
      p:prefix=&quot;/WEB-INF/jsp/&quot; p:suffix=&quot;.jsp&quot; /&gt;
</code></pre>
<p>通过前缀和后缀加上视图名称就能找到对应的JSP文件，然后把数据模型渲染到JSP文件中，这样便能展示视图给用户了。</p>
(String), ## 15.1	控制器接收各类请求参数

为了应付多种传递参数的方式，先探索Spring MVC的传参方法。

为此先创建一个接收各类参数的控制器——ParamsController，代码如下：

```java
@Controller
@RequestMapping("/params")
public class ParamsController {
    //待开发代码
}
```

然后，将在接收参数控制器的基础上增加方法来演示如何接收各类参数，以角色表单为例，内容如下：

```html
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>参数</title>
        <!-- 加载Query文件-->
        <script type="text/javascript" src="https://code.jquery.com/jquery-3.2.0.js">
        </script>
        <script type="text/javascript">
      	<!--
        	此处插入JavaScript脚本
            -->
        </script>
    </head>
    <body>
        <form id="form">
            <table>
                <tr>
                    <td>角色名称</td>
                    <td><input id="roleName" name="roleName" value="" /></td>
                </tr>
                <tr>
                    <td>备注</td>
                    <td><input id="note" name="note" /></td>
                </tr>
                <tr>
                    <td></td>
                    <td align="right"><input id="commit" type="button" value="提交" /></td>
                </tr>
            </table>
        </form>
    </body>
</html>
```

### 15.1.1	接收普通请求参数

如果传递的参数名称和HTTP的保存一致，那么无需任何注解也可以获取参数。以上表单传递了两个HTTP参数：角色名称和备注，响应的请求是"./params/commonParams.do"，也就是提交表单后，它就会请求对应的URL。

首先，在ParamsController增加对应的方法并获取参数，以下代码就是一个无注解获取HTTP请求参数的代码。

```java
 @RequestMapping("/commonParams")
    public ModelAndView commonParams(String roleName, String note) {
        System.out.println("roleName=>" + roleName);
        System.out.println("note=>" + note);
        ModelAndView mv = new ModelAndView();
        mv.setViewName("index");
        return mv;
    }
```

通过参数名称和HTTP请求参数名称一致来获取参数，如果不一致将无法获取，这样的方式允许参数为空。

但是，在参数很多的情况下，比如新增一个用户可能需要十几个字段，这时应该考虑使用一个POJO来管理这些参数。在没有任何注解的情况下，Spring MVC也有映射POJO的能力。新建一个角色参数类，代码如下：

```java
public class RoleParams {
	private String roleName;
	private String note;
	/*getter and setter*/
}
```

然后，在ParamController中增加一个方法来通过这个POJO获取HTTP请求参数，代码如下：

```java
 @RequestMapping("/commonParamsPojo")
    public ModelAndView commonParamsPojo(RoleParams roleParams) {
        System.out.println("roleName=>" + roleParams.getRoleName());
        System.out.println("note=>" + roleParams.getNote());
        ModelAndView mv = new ModelAndView();
        mv.setViewName("index");
        return mv;
    }
```

显然通过POJO也会获取到对应参数，需要注意的是POJO的属性名称也要和HTTP请求参数名称保持一致。但是有时候前端的参数命名规则和后台的不一样，比如前端把角色名称的参数命名为role_name，这时就要进行转换了。

### 15.1.2	使用@RequestParam注解获取参数

Spring MVC提供了@RequestParam注解来解决前后端参数名称命名不一致的问题。

把HTTP的参数名称从roleName修改为role_name，那么需要重新绑定规则，此时使用@RequestParam注解，代码如下：

```java
 @RequestMapping("/requestParam")
    public ModelAndView requestParam(@RequestParam("role_name")String roleName,
                                     @RequestParam("note") String note){
        System.out.println("roleName=>" + roleName);
        System.out.println("note=>" + note);
        ModelAndView mv = new ModelAndView();
        mv.setViewName("index");
        return mv;
    }
```

### 15.1.3	使用URL传递参数

一些网站使用URL形式传递参数，这样符合RESTful风格，对于一些业务比较简单的应用是非常常见的，比如以下代码，获取一个角色的信息，我们希望把URL写成/params/getRole/1，其中1就是一个参数，代表角色编号。现在写一个方法，它将只支持HTTP的GET请求，通过URL：/params/getRole/1来获取角色并且打印出JSON数据，他需要@RequestMapping和@PathVariable两个注解共同协作完成，代码如下所示：

```java
//注入RoleService
@Autowired
private RoleService roleService;

//{id}表示接受一个参数
@RequestMapping("/getRole/{id}")
//注解@PathVariable表示从URL的请求地址中获取参数
public ModelAndView pathVariable(@PathVariable("id") Long id) {
    Role role = roleService.getRole(id);
    ModelAndView mv = new ModelAndView();
    //绑定数据模型
    mv.addObject(role);
    //设置为JSON视图
    mv.setView(new MappingJackson2JsonView());
    return mv;
}
```

{id}表示处理器需要接受一个由URL组成的参数，且参数名称为id，那么在方法中的@PathVariable("id")表示将获取这个在@RequestMapping中定义名称为id的参数，这样就可以在方法内获取这个参数了。

测试结果如下：

![图15-2 通过URL获取参数](http://cdn.alanliang.site/note/图15-2 通过URL获取参数.png)

### 15.1.4	传递JSON参数

有时候参数的传递还需要更多参数，比如查询可能需要分页参数，这是非常常见的场景。对于查询参数，假设还有开始行start和限制返回大小的limit，由PageParams类传递，代码如下：

```java
public class PageParams {
	private int start;
	private int limit;
	/*getter and setter*/
}
```

只需要在RoleParams的基础上加上一个PageParams属性就可以使用分页参数了，代码如下：

```java
public class RoleParams {
	private String roleName;
	private String note;
    private PageParams pageParams = null;//分页参数
    /*getter and setter*/
}
```

这个查询参数和分页参数都可以被传递了。这时客户端还需要写一段JavaScript代码来模拟这个过程，往表单插入一定JavaScript代码，代码如下：

```javascript
<script type="text/javascript">
    $(document).ready(function () {
    $("#commit").click(function() {
        var str = $("form").serialize();
        //提交表单
        $.post({
            url: "./params/commonParamPojo2.do",
            //将form数据序列化，传递给后台，则将数据以roleName=xxx&&note=xxx传递
            data: $("form").serialize(),
            //成功后的方法
            success: function (result) {
            }
        });
    });
});
</script>
```

注意，传递的JSON数据需要和对应参数的POJO保持一致。另外，在请求时需要告知请求的参数类型为JSON，这是不可缺少的，传递的参数是一个字符串，而不是一个JSON，所以这里使用JSON.stringify()方法将JSON数据转换为字符串。

这个时候可以使用Spring MVC提供的注解@RequestBody接收参数，代码如下：

```java
@RequestMapping("/findRoles")
public ModelAndView findRoles(@RequestBody RoleParams roleParams){
    List<Role> roleList = roleService.findRoles(roleParams);
    ModelAndView mv = new ModelAndView();
    mv.addObject(roleList);
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    return mv;
}
```

### 15.1.5	接收列表数据和表单序列化

在一些场景，如果需要一次性删除多个角色，那么一般将一个角色编号的数组传递给后台，或新增角色，甚至同时新增多个角色。无论如何，这都需要用到Java的集合或者数组来保存对应的参数。

Spring MVC也支持这样的场景，假设要删除多个角色，显然你希望传递一个角色编号的数组给后台处理。通过JavaScript模仿传递角色数组给后台控制器，代码如下：

```javascript
/**传递数组**/
$(document).ready(function () {
    //删除角色数组
    var idList = [1, 2, 3];
    //jQuery的post请求
    $.post({
        url: "./params/deleteRoles.do",
        //将JSON转化为字符串传递
        data: JSON.stringify(idList),
        //指定传递数据类型，不可缺少
        contentType: "application/json",
        //成功后的方法
        success: function (result) {
        }
    });
});
```

通过JSON的字符串化将参数传递到后台，这个时候就可以接收参数了，代码如下：

```java
@RequestMapping("/deleteRoles")
public ModelAndView deleteRoles(@RequestBody List<Long> idList) {
    ModelAndView mv = new ModelAndView();
    //删除角色
    int total = roleService.deleteRoles(idList);
    mv.addObject("total", total);
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    return mv;
}
```

这里注解@RequestBody表示要求Spring MVC将传递过来的JSON数组数据，转换为对应的Java集合类型。把List转化为数组（Long[]）也是可行的，但是这里的参数只是一个非常简单的长整型，而在实际开发中也许要传递多个角色用于保存，这也是没问题的，修改JavaScript代码，代码如下：

```javascript
$(document).ready(function () {
    //新增角色数组
    var roleList = [
        {roleName: 'role_name_1', note: 'note_1'},
        {roleName: 'role_name_2', note: 'note_2'},
        {roleName: 'role_name_3', note: 'note_3'}
    ];
    //jQuery的post请求
    $.post({
        url: "./params/addRoles.do",
        //将JSON转化为字符串传递
        data: JSON.stringify(roleList),
        contentType: "application/json",
        //成功后的方法
        success: function (result) {
        }
    });
});
```

然后，使用@RequestBody获取，代码如下：

```java
@RequestMapping("/addRoles")
    public ModelAndView addRoles(@RequestBody List<Role> roleList){
        ModelAndView mv = new ModelAndView();
        //新增角色
        int total = roleService.insertRoles(roleList);
        mv.addObject("total",total);
        mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
        return mv;
    }
```

通过表单序列化也可以将表单数据转换为字符串传递给后台，因为一些隐藏表单需要一定的计算，所以我们也需要在用户点击提交按钮后，通过序列化去提交表单。下面的表单就是通过表单序列化提交数据，代码如下：

```javascript
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
        <title>参数</title>
        <!-- 加载Query文件-->
        <script type="text/javascript" src="https://code.jquery.com/jquery-3.2.0.js">
        </script>
        <script type="text/javascript">
        $(document).ready(function () {
            $("#commit").click(function() {
            	var str = $("form").serialize();
            	//提交表单
            	$.post({
                    url: "./params/commonParamPojo2.do",
                    //将form数据序列化，传递给后台，则将数据以roleName=xxx&&note=xxx传递
                    data: $("form").serialize(),
                    //成功后的方法
                    success: function (result) {
                    }
                });
            });
        });
        </script>
    </head>
    <body>
        <form id="form">
            <table>
                <tr>
                    <td>角色名称</td>
                    <td><input id="roleName" name="roleName" value="" /></td>
                </tr>
                <tr>
                    <td>备注</td>
                    <td><input id="note" name="note" /></td>
                </tr>
                <tr>
                    <td></td>
                    <td align="right"><input id="commit" type="button" value="提交" /></td>
                </tr>
            </table>
        </form>
    </body>
</html>
```

由于序列化参数的传递规则变为roleName=xxx&&note=xxx，所以获取参数也是十分容易，代码如下：

```java
 @RequestMapping("/commonParamPojo2")
    public ModelAndView commonParamPojo2(String roleName, String note) {
        System.out.println("roleName=>" + roleName);
        System.out.println("note=>" + note);
        ModelAndView mv = new ModelAndView();
        mv.setViewName("index");
        return mv;
    }
```

这样就能获取序列化表单后的参数了。

## 15.2	重定向

要将一个角色信息转化为JSON视图的功能，只要传递角色信息给它，它就能将信息转化为视图，代码如下：

```java
  @RequestMapping("/showRoleJsonInfo")
    public ModelAndView showRoleJsonInfo(Long id, String roleName, String note) {
        ModelAndView mv = new ModelAndView();
        mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
        mv.addObject("id", id);
        mv.addObject("roleName", roleName);
        mv.addObject("note", note);
        return mv;
    }
```

现在的需求是，每当新增一个角色信息时，需要将其数据（因为角色编号会回填）以JSON视图的形式展示给请求者。在数据保存到数据库后，由数据库返回角色编号，再将角色信息传递给showRoleJsonInfo方法，就可以展示JSON视图给请求者了，代码如下：

```java
@RequestMapping("/addRole")
//Model为重定向数据模型，Spring MVC会自动初始化它
public String addRole(Model model, String roleName, String note) {
    Role role = new Role();
    role.setRoleName(roleName);
    role.setNote(note);
    //插入角色后，会回填角色编号
    roleService.insertRole(role);
    //绑定重定向数据模型
    model.addAttribute("roleName", roleName);
    model.addAttribute("note", note);
    model.addAttribute("id", role.getId());
    return "redirect:./showRoleJsonInfo.do";
}
```

这里Model代表一个数据模型，可以给它附上对应的数据模型，然后通过返回字符串来实现重定向的功能。Spring MVC约定，当返回的字符串带有redirect的时候，他就会认为需要的是一个重定向，而事实上，不仅可以通过返回字符串来实现重定向，也可以通过返回视图来实现重定向。代码如下：

```java
@RequestMapping("/addRole2")
public ModelAndView addRole2(ModelAndView mv, String roleName, String note) {
    Role role = new Role();
    role.setRoleName(roleName);
    role.setNote(note);
    //插入角色后，会回填角色编号
    roleService.insertRole(role);
    //绑定重定向数据模型
    mv.addObject("roleName", roleName);
    mv.addObject("note", note);
    mv.addObject("id", role.getId());
    mv.setViewName("redirect:./showRoleJsonInfo.do");
    return mv;
}
```

这里只是传递一些简单的参数，有时需要传递角色POJO来完成任务，而不是一个个字段的传递，比如把获取角色信息JSON视图的代码改写为如下：

```java
@RequestMapping("/showRoleJsonInfo2")
public ModelAndView showRoleJsonInfo(Role role) {
    ModelAndView mv = new ModelAndView();
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    mv.addObject("role", role);
    return mv;
}
```

显然这样会比原来的转化方式要简洁得多，但在URL重定向的过程中，并不能有效传递对象，因为HTTP的重定向参数是以字符串传递的。这时Spring MVC提供了另外的一个办法——flash属性，你需要提供的数据模型是一个RedirectAttribute，实现如下：

```java
@RequestMapping("/addRole3")
public String addRole3(RedirectAttributes ra, Role role) {
    //插入角色后，会回填角色编号
    roleService.insertRole(role);
    //绑定重定向数据模型
    ra.addFlashAttribute(role);
    return "redirect:./showRoleJsonInfo.do";
}
```

这样就能传递POJO对象给下一个地址了。使用addFlashAttribute方法后，Spring MVC会将数据保存到Session中（Session在一个会话期有效），重定向后就会将其清除，这样就能传递数据给下一个地址了。

## 15.3	保存并获取属性参数

在Java EE的基础学习中，有时我们会暂存数据到HTTP的request对象或者Session对象中，在开发控制器时，有时也需要使用这些对象来保存或获取数据。Spring MVC提供了相关支持，它的注解有3个：@RequestAttribute、@SessionAttribute和@SessionAttributes，它们的作用如下：

- @RequestAttribute获取HTTP的请求（request）对象属性值，用于传递给控制器的参数。
- @SessionAttribute获取HTTP的请求（Session）对象属性值，用于传递给控制器的参数。

- @SessionAttributes,可以给它配置一个字符串数组，这个数组对应的是数据模型对应的键值对，然后将这些键值对保存到Session中。

对于@RequestAttribute这个注解，因为在请求的范围内，Spring MVC更希望你使用它所提供的数据模型。他的数据模型本身就是在请求的生命周期中存在。

### 15.3.1	注解@RequestAttribute

@RequestAttribute主要的作用是从HTTP的request对象中取出请求属性，只是它的范围周期是在一次请求中存在，首先创建一个JSP文件，代码如下：

```html
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" 
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Insert title here</title>
    </head>
    <body>
       <%
       //设置请求属性
       request.setAttribute("id", 11L);
       //转发给控制器
       request.getRequestDispatcher("./attribute/requestAttribute.do").forward(request, response);
       %>
    </body>
</html>
```

然后，用控制器AttributeController处理它，并且使用@RequestAttribute获取对应属性，代码如下：

```java
@Controller
@RequestMapping("/attributes")
public class AttributeController {
    @Autowired
    private RoleService roleService;

    public ModelAndView reqAttr(@RequestAttribute("id") Long id) {
        ModelAndView mv = new ModelAndView();
        Role role = roleService.getRole(id);
        mv.addObject("role", role);
        mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
        return mv;
    }
}
```

显然通过JSP的跳转就会转发到这个控制器的reqAttr方法，在参数中使用了@RequestAttribute注解，这样就能获取请求的id属性了。

### 15.3.2	注解@SessionAttribute和注解@SessionAttributes

在控制器中可以使用注解@SessionAttributes来设置对应的键值对，不过这个注解只能标注类，不能标注方法或参数。它可以配置属性名称或者属性类型。它的作用是当类使用了该注解后，Spring MVC执行完控制器的逻辑后，将数据模型中对应的属性名称或者属性类型保存到HTTP的Session对象中。

下面对AttributeController进行改造，代码如下：

```java
@Controller
@RequestMapping("/attributes")
//可以配置数据模型的名称和类型，两者取或关系
@SessionAttributes(names = {"id"}, types = {Role.class})
public class AttributeController {
    @Autowired
    private RoleService roleService;

   	...

    @RequestMapping("/sessionAttributes")
    public ModelAndView sessionAttrs(Long id) {
        ModelAndView mv = new ModelAndView();
        Role role = roleService.getRole(id);
        //根据类型，Session将会保存角色信息
        mv.addObject("role", role);
        //根据名称，Session将会保存id
        mv.addObject("id", id);
        //视图名称，定义跳转到一个JSP文件上
        mv.setViewName("sessionAttribute");
        return mv;
    }

}
```

这时请求/attribute/sessionAttributes.do?id=1，然后通过JSP文件去验证@SessionAttributes配置是否有效，代码如下：

```html
<%@ page language="java" import="com.ssm.chapter15.pojo.Role" contentType="text/html; charset=UTF-8"
         pageEncoding="UTF-8" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>session</title>
</head>
<body>
<%
    Role role = (Role) session.getAttribute("role");
    out.println("id = " + role.getId() + "</p>");
    out.println("roleName = " + role.getRoleName() + "</p>");
    out.println("note = " + role.getNote() + "</p>");

    Long id = (Long)session.getAttribute("id");
    out.println("id = " + id + "</p>");
%>
</body>
</html>
```

这样就可以不使用Servlet API提供了Session对象了，有利于测试和维护。Spring MVC还提供了@SessionAttribute来读取Session属性。

首先创建一个JSP文件，保存Session属性，代码如下：

```html
<%@ page language="java" import="com.ssm.chapter15.pojo.Role" contentType="text/html; charset=UTF-8"
         pageEncoding="UTF-8" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>session</title>
</head>
<body>
    <%
        //设置Session属性
        session.setAttribute("id", 1L);
        //执行跳转
        response.sendRedirect("./attribute/sessionAttribute.do");
    %>
</body>
</html>
```

然后在控制器AttributeController上加入对应方法，实现通过注解@SessionAttribute获取Session属性，代码如下：

```java
@RequestMapping("/sessionAttribute")
public ModelAndView sessionAttr(@SessionAttribute("id") Long id){
    ModelAndView mv = new ModelAndView();
    Role role = roleService.getRole(id);
    mv.addObject("role",role);
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    return mv;
}
```

和@RequestParam一样，@SessionAttribute注解的参数默认不可以为空。

### 15.3.3	注解@CookieValue和注解@RequestHeader

从名称而言，这两个注解很明确，就是从Cookie和HTTP请求头获取对应的请求信息。对于Cookie而言，需要考虑到用户是可以禁用的。使用实例代码如下：

```java
@RequestMapping("/getHeaderAndCookie")
public String testHeaderAndCookie(@RequestHeader(value = "User-Agent", required = false, defaultValue = "attribute") String userAgent,
                                  @CookieValue(value = "JSESSIONID", required = true, defaultValue = "MyJsessionId") String JsessionId) {
    System.out.println("User-Agent: " + userAgent);
    System.out.println("JSESSIONID: " + JsessionId);
    return "index";
}
```

这里演示了从HTTP请求头和Cookie中读取信息。

## 15.4	拦截器

拦截器允许在执行处理器前后进行操作，甚至是在渲染视图后进行操作。Spring MVC会在启动期间通过@RequestMapping注解解析URI和处理器的关系，在运行的时候突发请求找到对应的HandlerMapping，然后构建HanderExecutionChain对象，它是一个执行的责任链对象。

### 15.4.1	拦截器的定义

Spring要求处理器的拦截器继承HandlerInterceptorAdapter，这个类定义了三个方法，代码如下：

```java
public class RoleInterceptor1 extends HandlerInterceptorAdapter {
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		System.err.println("preHandle1");
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		System.err.println("postHandle1");
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		System.err.println("afterCompletion1");
	}

}
```

- preHandle方法：在处理器之前执行的前置方法，这样Spring MVC可以在进入处理器前处理一些方法。注意，它将返回一个boolean值，会影响到后面Spring MVC的流程。
- postHandle方法：在处理器之后执行的后置方法，处理器的逻辑完成后运行它。
- afterCompletion方法：无论是否产生异常都会在渲染视图后执行的方法。

### 15.4.2    拦截器的执行流程

一个拦截器的流程如图：

![拦截器执行流程](http://cdn.alanliang.site/note/拦截器执行流程.jpg)

注意，当前置方法返回false时，就不会执行后面的逻辑了。

### 15.4.3	开发拦截器

注意，当XML配置文件加入了元素\<mvc:annotation-driven\>或者使用Java配置使用注解@EnableWebMvc时，系统就会初始化拦截器ConversionServiceExposingInterceptor，它是一个开始就被Spring MVC默认加载的拦截器，它的主要作用是根据配置在控制器上的注解来完成对应的功能。Spring MVC提供的公共拦截器HandlerInterceptorAdapter。下面完成一个角色拦截器，它只是一个简单的测试，代码如下：

```java
public class RoleInterceptor extends HandlerInterceptorAdapter {
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		System.err.println("preHandle");
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		System.err.println("postHandle");
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, 
             Object handler, Exception ex) throws Exception {
		System.err.println("afterCompletion");
	}

}
```

还需要进一步配置它才能使用。在Spring MVC的配置文件（比如dispatcher-servlet.xml）中加入代码:

```xml
<mvc:interceptors>
    <mvc:interceptor>
        <mvc:mapping path="/role/*.do"/>
        <bean class="com.ssm.chapter15.interceptor.RoleInterceptor"/>
    </mvc:interceptor>
</mvc:interceptors>
```

用元素\<mvc:interceptors\>配置拦截器，在它里面可以配置多个拦截器。上述代码配置了一个角色拦截器，把class配置指定为开发的拦截器而元素\<mvc:mapping\>的属性path则告诉Spring MVC拦截什么请求，它使用了一个正则表达式匹配。 

### 15.4.4	多个拦截器执行的顺序

先创建3个角色拦截器，代码如下：

```java
public class RoleInterceptor1 extends HandlerInterceptorAdapter {
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		System.err.println("preHandle1");
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		System.err.println("postHandle1");
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		System.err.println("afterCompletion1");
	}

}
```

```java
public class RoleInterceptor2 extends HandlerInterceptorAdapter {
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		System.err.println("preHandle2");
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		System.err.println("postHandle2");
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		System.err.println("afterCompletion2");
	}

}
```

```java
public class RoleInterceptor3 extends HandlerInterceptorAdapter {
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		System.err.println("preHandle3");
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		System.err.println("postHandle3");
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		System.err.println("afterCompletion3");
	}

}

```

修改配置文件，将这些拦截器按顺序配置，代码如下：

```xml
<mvc:interceptors>
    <mvc:interceptor>
        <mvc:mapping path="/role/*.do" />
        <bean class="com.ssm.chapter15.interceptor.RoleInterceptor1" />
    </mvc:interceptor>
    <mvc:interceptor>
        <mvc:mapping path="/role/*.do" />
        <bean class="com.ssm.chapter15.interceptor.RoleInterceptor2" />
    </mvc:interceptor>
    <mvc:interceptor>
        <mvc:mapping path="/role/*.do" />
        <bean class="com.ssm.chapter15.interceptor.RoleInterceptor3" />
    </mvc:interceptor>
</mvc:interceptors>
```

测试结果如下：

```
......
preHandle1
preHandle2
preHandle3
......控制器逻辑日志......
postHandle3
postHandle2
postHandle1
......
afterCompletion3
afterCompletion2
afterCompletion1
......
```

结果与责任链模式的运行顺序一致。

## 15.5	验证表单

在实际开发中，获得数据后的第一步就是检验数据的正确性，一般会通过注解校验，发现错误后返回给用户，但是对于一些逻辑上的错误，比如购买金额=购买数量*单价，这样的规则就很难使用注解验证，这时可以使用Spring提供的验证器（Validator）规则去验证。

### 15.5.1	使用JSR 303注解验证输入内容

Spring提供了对Bean的功能校验，通过注解@Valid标明哪个Bean需要启用注解式的验证。在javax.validation.constrants.*中定义了一系列的JSR 303规范给出的注解，规则可查看https://www.jianshu.com/p/89d3cf1eaf14，为了使用这些注解，假设要完成一个交易表单，代码如下：

```html
<%@ page language="java" contentType="text/html; charset=UTF-8"
         pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>validate</title>
    </head>
    <body>
        
        <form action = "./validate/annotation.do"> 
        <!-- 
        <form action = "./validate/validator.do">
        -->
            <table>
                <tr>
                    <td>产品编号：</td>
                    <td><input name="productId" id="productId"/></td>
                </tr>
                <tr>
                    <td>用户编号：</td>
                    <td><input name="userId" id="userId"/></td>
                </tr>
                <tr>
                    <td>交易日期：</td>
                    <td><input name="date" id="date"/></td>
                </tr>
                <tr>
                    <td>价格：</td>
                    <td><input name="price" id="price"/></td>
                </tr>
                <tr>
                    <td>数量：</td>
                    <td><input name="quantity" id="quantity"/> </td>
                </tr>
                <tr>
                    <td>交易金额：</td>
                    <td><input name="amount" id="amount"/></td>
                </tr>
                <tr>
                    <td>用户邮件：</td>
                    <td><input name="email" id="email"/></td>
                </tr>
                <tr>
                    <td>备注：</td>
                    <td><textarea id="note"  name="note" cols="20" rows="5"></textarea></td>
                </tr>
                <tr><td colspan="2" align="right"> <input type="submit" value="提交"/> </tr>
            </table>
        <form>
    </body>
</html>
```

假设数据需要满足如下规则：

- 产品编号、用户编号、交易日期、价格、数量、交易金额不能为空。
- 交易日期格式为yyyy-MM-dd，且只能在未来。
- 价格最小值为0.1。
- 数量是一个整数，且最小值为1，最大值为100。
- 交易金额最小值为1，最大值为5万。
- 用户邮件需要满足邮件正则式。
- 备注内容不得多于256个字符。

创建一个POJO，如下：

```java
public class Transaction {
	// 产品编号
	@NotNull // 不能为空
	private Long productId;

	// 用户编号
	@NotNull // 不能为空
	private Long userId;

	// 交易日期
	@Future // 只能是将来的日期
	@DateTimeFormat(pattern = "yyyy-MM-dd") // 日期格式化转换
	@NotNull // 不能为空
	private Date date;

	// 价格
	@NotNull // 不能为空
	@DecimalMin(value = "0.1") // 最小值0.1元
	private Double price;

	// 数量
	@Min(1) // 最小值为1
	@Max(100) // 最大值
	@NotNull // 不能为空
	private Integer quantity;

	// 交易金额
	@NotNull // 不能为空
	@DecimalMax("500000.00") // 最大金额为5万元
	@DecimalMin("1.00") // 最小交易金额1元
	private Double amount;

	// 邮件
	@Pattern(// 正则式
			regexp = "^([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)*@"
					+ "([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)+[\\.][A-Za-z]{2,3}([\\.][A-Za-z]{2})?$",
			// 自定义消息提示
			message = "不符合邮件格式")
	private String email;

	// 备注
	@Size(min = 0, max = 256) // 0到255个字符
	private String note;
}
```

这样就可以给每一个字段加入对应校验，它会生成默认的错误信息。在邮件的检验中，还使用了配置项message来重新定义了当校验失败后的错误信息，这样就能够启动Spring的校验规则来校验表单了。

用控制器完成表单验证，代码如下：

```java
@Controller
@RequestMapping("/validate")
public class ValidateController {

    @RequestMapping("/annotation")
    public ModelAndView annotationValidate(@Valid Transaction trans, Errors errors) {
        // 是否存在错误
        if (errors.hasErrors()) {
            // 获取错误信息
            List<FieldError> errorList = errors.getFieldErrors();
            for (FieldError error : errorList) {
                // 打印字段错误信息
                System.err.println("fied :" + error.getField() + "\t" + "msg:" + error.getDefaultMessage());
            }
        }
        ModelAndView mv = new ModelAndView();
        mv.setViewName("index");
        return mv;
    }
}
```

使用注解@Valid标明这个Bean将会被检验，而另外一个类型为Errors的参数则是用于保存是否存在错误信息的。

有时检验并不简单，它可能还有其他一些复杂的规则。比如，交易日期往往就不是一个应该录入的数据，而是系统提取当前日期。又如规则：交易金额=数量*价格，这样又需要其他的一些验证规则了，Spring提供了验证框架。

### 15.5.2	使用验证器

有时除了简单的输入格式、非空性等校验，也需要一定的业务校验，Spring提供了Validator接口来实现检验，它将在进入控制器逻辑之前对参数的合法性进行校验。

Validator接口定义如下：

```java
public interface Validator {
	/**
	*判断当前验证器是否用于校验clazz类型的POJO
	*@param clazz --POJO类型
	*@return true启动校验，false则不再校验
	*/
	boolean supports(Class<?> clazz);
    
    /**
    *检验POJO的合法性
    *@param target POJO请求对象
    *@param errors 错误信息
    */
	void validate(Object target, Errors errors);
}
```

下面进行一项验证，要求：交易金额=价格*数量，代码如下：

```java
public class TransactionValidator implements Validator {
	@Override
	public boolean supports(Class<?> clazz) {
		//判断验证是否为Transaction，如果是则进行判断[修改为：验证]
		return Transaction.class.equals(clazz);
	}

	@Override
	public void validate(Object target, Errors errors) {
		Transaction trans = (Transaction) target;
		//求交易金额和价格×数量的差额
		double dis = trans.getAmount() - (trans.getPrice() * trans.getQuantity());
		//如果差额大于0.01，则认为业务错误
		if (Math.abs(dis) > 0.01) {
			//加入错误信息
			errors.rejectValue("amount", null, "交易金额和购买数量与价格不匹配");
		}
	}
}
```

这样这个验证器就判断了是否为Transaction对象，如果是就去验证后面的逻辑，那么要将它捆绑到对应的控制器中，这时Spring MVC提供了注解@initBinder。在ValidateController中添加代码，代码如下：

```java
@InitBinder
public void initBinder(DataBinder binder) {
    // 数据绑定器加入验证器
    binder.setValidator(new TransactionValidator());
}

@RequestMapping("/validator")
public ModelAndView validator(@Valid Transaction trans, Errors errors) {
    // 是否存在错误
    if (errors.hasErrors()) {
        // 获取错误信息
        List<FieldError> errorList = errors.getFieldErrors();
        for (FieldError error : errorList) {
            // 打印字段错误信息
            System.err.println("fied :" + error.getField() + "\t" + "msg:" + error.getDefaultMessage());
        }
    }
    ModelAndView mv = new ModelAndView();
    mv.setViewName("index");
    return mv;
}
```

注解@Valid就是为了启动这个验证器，而参数Errors则是记录验证器返回错误信息的。

比较遗憾的是，JSR303注解方式和验证器不能同时使用，不过可以在使用JSR303注解方式得到基本的校验信息后，再使用自己得方法进行验证。

## 15.6	数据模型

视图是业务处理后展现给用户的内容，不过一般伴随着业务处理返回的数据，用来给用户查看。在此之前，我们一直使用ModelAndView来定义视图类型，包括JSON视图，也用它来加载数据模型，ModelAndView有一个类型为ModelMap的属性model，而ModelMap继承了LinkedHashMap，因此用它可以存放各种键值对。

在控制器的方法中，可以把ModelAndView、Model、ModelMap作为参数。在Spring MVC，三者可以相互转换。

### 15.7	视图和视图解析器

视图是展示给用户的内容，而在此之前，要通过控制器得到对应的数据模型，如果是非逻辑视图，则不会经过视图解析器定位视图，而是直接渲染数据模型便结束了；而逻辑视图则要对其进一步解析，已定位真实视图，这就是视图解析器的作用。

### 15.7.1	视图

为了满足各种需求，在Spring MVC中定义了多种视图，绑定到数据模型中，那么视图就可以展示数据模型的信息了。只是常用的并不多。它们都要实现接口——View，代码如下：

```java
public interface View {
	//响应状态属性
	String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + ".responseStatus";
	//定义数据模型下取出变量路径
	String PATH_VARIABLES = View.class.getName() + ".pathVariables";
	//选择响应内容类型
	String SELECTED_CONTENT_TYPE = View.class.getName() + ".selectedContentType";
	//选择响应客户端的类型
	String getContentType();
	//渲染方法，model是数据模型
	void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception;

}
```

注意getContentType方法和render方法。getContentType表示返回一个字符串，标明给用户什么类型的文件响应、可以是HTML、JSON、PDF等。而render方法则是一个渲染视图的方法，其中Model是数据模型，HTPP请求对象和响应对象用于处理HTP请求的各类问题。

当控制器返回ModelAndView时，视图解析器就会解析它，然后将数据模型传递给render方法，这样就能渲染视图了。在Spring MVC中实现视图的类很多，比如JSTL视图JstlView，JSON视图MappingJackon2JsonView，PDF视图AbstractPdfView等，通过它们的render方法，Spring MVC就可以将数据模型渲染成各类视图，以满足各种需求。

视图又分为逻辑视图和非逻辑视图，比如MappingJackon2JsonView是一个非逻辑视图，它的目的就是将数据模型转换为一个JSON视图，展现给用户，，无须对视图名字再进行下一步解析，比如下面代码：

```java
@RequestMapping("/RequestAttribute")
public ModelAndView reqAttr(@RequestAttribute("id") Long id) {
    ModelAndView mv = new ModelAndView();
    Role role = roleService.getRole(id);
    mv.addObject("role", role);
    mv.setViewName(String.valueOf(new MappingJackson2JsonView()));
    return mv;
}
```

MappingJackon2JsonView在没有视图解析器的情况下可以进行渲染，最终将其绑定的数据模型转换了JSON数据。

InternalResourceView是一个逻辑视图，对于逻辑视图而言它需要一个视图解析器，常见配置如下：

```xml
<!-- 找到Web工程/WEB-INF/JSP文件夹，且文件结尾为jsp的文件作为映射 -->
<bean id="viewResolver"
      class="org.springframework.web.servlet.view.InternalResourceViewResolver"
      p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" />
```

通过前缀和后缀加上视图名称就能找到对应的JSP文件，然后把数据模型渲染到JSP文件中，这样便能展示视图给用户了。(String), http://cdn.alanliang.site/note/landscape3.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 3(Long), 1(Long), 1(Integer), 2020-06-15 11:50:16.879(Timestamp), 2020-06-15 11:50:16.879(Timestamp), 5(Integer), 1(Integer)
2020-06-15 11:50:16.902 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 11:50:16.904 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) 
2020-06-15 11:50:16.904 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 9(Long), 12(Long), 9(Long), 14(Long), 9(Long), 24(Long)
2020-06-15 11:50:16.906 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 3
2020-06-15 11:50:17.204 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:17.217 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:17.203(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: ... }(String), 0:0:0:0:0:0:0:1(String), 319(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:17.221 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:50:18.991 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:50:18.992 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:50:18.993 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:50:18.993 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:50:19.005 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-06-15 11:50:19.006 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.006 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:50:19.007 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:50:19.008 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.009 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:50:19.011 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:19.013 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.013 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:50:19.014 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:19.015 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.015 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:50:19.021 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:19.022 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.022 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:50:19.023 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:19.024 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.024 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:50:19.025 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:19.027 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.027 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:50:19.028 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:19.028 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.028 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:50:19.029 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:50:19.030 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:19.030 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 11:50:19.031 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:19.040 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:19.041 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:19.04(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 48(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:19.042 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:50:21.976 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 11:50:21.976 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 11:50:21.978 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 11:50:21.979 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:50:21.980 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 13
2020-06-15 11:50:21.988 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:21.988 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:21.987(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:21.989 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:50:23.905 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 11:50:23.905 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 23(Long)
2020-06-15 11:50:23.906 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 11:50:23.987 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 11:50:23.987 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:50:23.988 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 11
2020-06-15 11:50:33.139 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 11:50:33.139 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 装配Bean(String)
2020-06-15 11:50:33.140 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 11:50:33.141 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 11:50:33.142 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: 装配Bean(String), #A0EEE1(String), 2020-06-15 11:50:33.138(Timestamp), 23(Long)
2020-06-15 11:50:33.143 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 11:50:33.149 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:33.149 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:33.148(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: ... }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:33.150 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:50:34.776 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 11:50:34.776 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 11:50:34.778 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 11:50:34.779 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:50:34.780 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 13
2020-06-15 11:50:34.783 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:34.784 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:34.783(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:34.784 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:50:38.191 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 11:50:38.191 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 24(Long)
2020-06-15 11:50:38.192 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 11:50:38.273 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 11:50:38.273 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:50:38.273 DEBUG 9648 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 12
2020-06-15 11:50:41.898 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 11:50:41.898 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: SpringMVC组件开发(String)
2020-06-15 11:50:41.899 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 11:50:41.900 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 11:50:41.900 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: SpringMVC组件开发(String), #BEE7E9(String), 2020-06-15 11:50:41.897(Timestamp), 24(Long)
2020-06-15 11:50:41.901 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 11:50:41.905 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:41.905 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:41.904(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: ... }(String), 0:0:0:0:0:0:0:1(String), 6(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:41.906 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:50:43.540 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 11:50:43.540 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 11:50:43.541 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 11:50:43.542 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:50:43.543 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 13
2020-06-15 11:50:43.546 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:43.546 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:43.545(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:43.547 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:50:56.056 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:50:56.056 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 8(Long)
2020-06-15 11:50:56.057 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:50:56.069 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:50:56.069 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 8(Long)
2020-06-15 11:50:56.070 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:50:56.269 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:56.269 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:56.269(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=8, status=2) }(String), 0:0:0:0:0:0:0:1(String), 212(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:56.270 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:50:56.284 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:50:56.284 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:50:56.286 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:50:56.286 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:50:56.295 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-06-15 11:50:56.296 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.296 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:50:56.298 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:50:56.299 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.299 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:50:56.303 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:56.303 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.303 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:50:56.305 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:56.305 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.305 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:50:56.306 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:56.307 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.307 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:50:56.309 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:56.310 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.310 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:50:56.311 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:56.312 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.312 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:50:56.315 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:56.316 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.316 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:50:56.317 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:50:56.317 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:50:56.317 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 11:50:56.318 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:50:56.321 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:50:56.321 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:50:56.32(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 37(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:50:56.322 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:51:03.604 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 11:51:03.604 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 9(Long)
2020-06-15 11:51:03.606 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 11:51:03.619 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 11:51:03.619 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 11:51:03.620 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 11:51:03.843 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:51:03.843 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:51:03.842(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=9, status=2) }(String), 0:0:0:0:0:0:0:1(String), 237(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:51:03.844 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:51:03.860 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:51:03.860 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:51:03.861 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:51:03.861 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:51:03.869 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 9
2020-06-15 11:51:03.870 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.870 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:51:03.872 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:51:03.873 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.873 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:51:03.874 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:03.877 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.878 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:51:03.879 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:03.880 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.880 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:51:03.881 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:03.881 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.881 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:51:03.882 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:03.882 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.882 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:51:03.883 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:03.883 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.884 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:51:03.884 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:03.885 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.885 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:51:03.885 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:51:03.886 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:03.886 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 11:51:03.887 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:03.891 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:51:03.892 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:51:03.891(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 31(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:51:03.896 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:51:12.297 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 11:51:12.297 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 11:51:12.298 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 4
2020-06-15 11:51:12.301 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 11:51:12.301 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 11:51:12.304 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 4
2020-06-15 11:51:12.309 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:51:12.310 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:51:12.311 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:51:12.311 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:51:12.317 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 11:51:12.319 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:12.319 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 11:51:12.324 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:12.326 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:12.326 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:51:12.327 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:12.327 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:12.327 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:51:12.328 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:12.329 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:12.329 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:51:12.330 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:12.331 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:12.331 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:51:12.332 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:51:12.333 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:12.333 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:51:12.333 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:12.339 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:51:12.339 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:51:12.337(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 40(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:51:12.340 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:51:23.869 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 11:51:23.869 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 11:51:23.874 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 11:51:23.874 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-06-15 11:51:23.880 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 3
2020-06-15 11:51:23.880 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:23.881 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:51:23.882 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:23.882 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:23.883 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:51:23.885 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:23.886 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:23.886 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:51:23.889 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:51:26.955 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-06-15 11:51:26.955 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-06-15 11:51:26.957 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 13
2020-06-15 11:51:26.961 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:51:26.961 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:51:26.96(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.front.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:51:26.963 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:51:30.319 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:51:30.320 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:51:30.319(Timestamp), 访问分类页面(String), INFO(String), site.alanliang.geekblog.controller.front.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:51:30.320 DEBUG 9648 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:51:35.407 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.countByDate      : ==>  Preparing: select year(create_time) 'year' , month(create_time) 'month', day(create_time) 'day' , count(id) 'articleCount' from t_article where create_time >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) and published = 1 and status = 2 group by year(create_time) ,month(create_time), day(create_time) 
2020-06-15 11:51:35.408 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.countByDate      : ==> Parameters: 
2020-06-15 11:51:35.409 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.countByDate      : <==      Total: 2
2020-06-15 11:51:35.413 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:51:35.413 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 
2020-06-15 11:51:35.414 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id and ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-15 11:51:35.416 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 0(Long), 6(Long)
2020-06-15 11:51:35.423 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByDate          : <==      Total: 6
2020-06-15 11:51:35.424 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:35.424 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 11:51:35.426 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:35.426 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:35.427 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:51:35.427 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:51:35.428 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:35.428 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:51:35.429 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:35.430 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:35.430 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:51:35.433 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:35.434 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:35.434 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:51:35.436 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:35.436 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:51:35.436 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:51:35.437 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:51:35.444 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:51:35.445 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:51:35.442(Timestamp), 访问归档页面(String), INFO(String), site.alanliang.geekblog.controller.front.ArchivesController.archives()(String), { dateFilterType: null }(String), 0:0:0:0:0:0:0:1(String), 35(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:51:35.446 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:51:40.794 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 11:51:40.795 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 11:51:40.796 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 11:51:40.802 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 11:51:40.802 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 11:51:40.803 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 11:51:40.811 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.countByDate      : ==>  Preparing: select year(create_time) 'year' , month(create_time) 'month' , count(id) 'articleCount' from t_article where create_time >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) and published = 1 and status = 2 group by year(create_time) ,month(create_time) 
2020-06-15 11:51:40.811 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.countByDate      : ==> Parameters: 
2020-06-15 11:51:40.813 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.countByDate      : <==      Total: 1
2020-06-15 11:51:40.819 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:51:40.820 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 11:51:40.819(Timestamp), 访问关于我页面(String), INFO(String), site.alanliang.geekblog.controller.front.AboutController.about()(String), { dateFilterType: 2 }(String), 0:0:0:0:0:0:0:1(String), 24(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:51:40.821 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 11:52:38.748 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 11:52:38.748 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 11:52:38.751 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 11:52:38.753 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 11:52:38.753 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 11:52:38.755 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 13
2020-06-15 11:54:55.875 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:54:55.875 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:54:55.874(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 3(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:54:55.877 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:56:47.331 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 11:56:47.333 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: SpringBoot(String), #D5F5E3(String), 2020-06-15 11:56:47.331(Timestamp), 2020-06-15 11:56:47.331(Timestamp)
2020-06-15 11:56:47.335 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 11:56:47.336 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 11:56:47.336 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: SpringSecurity(String), #D5F5E3(String), 2020-06-15 11:56:47.335(Timestamp), 2020-06-15 11:56:47.335(Timestamp)
2020-06-15 11:56:47.337 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 11:56:47.340 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:56:47.341 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: friday权限管理系统项目总结(String), 基于Spring Boot2.X的后台权限管理系统，适合于学习Spring Boot开发、项目毕业设计以及研发团队快速搭建项目，提供纯净的权限管理功能，可作为开发项目的脚手架，作为基础项目。(String), <h4 id="h4-u4ECBu7ECD"><a name="介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>介绍</h4><p>基于Spring Boot2.X的后台权限管理系统，适合于学习Spring Boot开发、项目毕业设计以及研发团队快速搭建项目，提供纯净的权限管理功能，可作为开发项目的脚手架，作为基础项目。</p>
<h4 id="h4-u8F6Fu4EF6u6280u672F"><a name="软件技术" class="reference-link"></a><span class="header-link octicon octicon-link"></span>软件技术</h4><ol>
<li>Spring Boot 2.2.5</li><li>Spring Security 5.2.2</li><li>Mybatis 3.5.4</li><li>Logback 1.2.3</li><li>Druid 1.1.10</li><li>Swagger 2.9.2</li><li>Lombok 1.18.12</li><li>X-admin 2.2</li><li>Thymeleaf 3.0.11</li><li>Layui 2.5.3</li><li>MySQL 5.6</li></ol>
<h4 id="h4-u5185u7F6Eu529Fu80FD"><a name="内置功能" class="reference-link"></a><span class="header-link octicon octicon-link"></span>内置功能</h4><ol>
<li>用户管理：用户查询、添加用户、修改用户、用户角色设置、删除用户；</li><li>角色管理：角色查询、添加角色、修改角色、角色菜单权限配置、删除角色；</li><li>菜单管理：菜单查询、添加菜单、修改菜单、删除菜单；</li><li>登录、登出：基于Spring Security的认证和授权；</li><li>Druid数据源监控功能；</li><li>Swagger接口文档功能；</li><li>修改密码；</li><li>代码自动生成：根据数据表以及自定义模板自动生成html、controller、service、serviceImpl、dao、mapper.xml文件；</li></ol>
<h2 id="h2-1-"><a name="1    创建数据库" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1    创建数据库</h2><p>本项目采用MySQL5.6数据库，创建基于RBAC模式的权限管理系统设计数据库，数据库模型如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/RBAC数据库模型.png" alt="RBAC数据库模型"></p>
<p>执行SQL如下：</p>
<pre><code class="lang-mysql">/*
 Navicat Premium Data Transfer

 Source Server         : mysql
 Source Server Type    : MySQL
 Source Server Version : 50640
 Source Host           : localhost:3306
 Source Schema         : friday2

 Target Server Type    : MySQL
 Target Server Version : 50640
 File Encoding         : 65001

 Date: 27/03/2020 15:38:07
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for permission
-- ----------------------------
DROP TABLE IF EXISTS `permission`;
CREATE TABLE `permission`  (
  `permission_id` bigint(11) NOT NULL AUTO_INCREMENT,
  `parent_id` bigint(11) NOT NULL,
  `permission_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `css` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `href` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `type` int(4) NOT NULL,
  `permission` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `sort` int(11) NOT NULL,
  PRIMARY KEY (`permission_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for role
-- ----------------------------
DROP TABLE IF EXISTS `role`;
CREATE TABLE `role`  (
  `role_id` bigint(11) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`role_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for role_permisson
-- ----------------------------
DROP TABLE IF EXISTS `role_permisson`;
CREATE TABLE `role_permisson`  (
  `role_id` bigint(11) NOT NULL,
  `permission_id` bigint(11) NOT NULL,
  PRIMARY KEY (`role_id`, `permission_id`) USING BTREE,
  INDEX `fk_permission_permmissionid`(`permission_id`) USING BTREE,
  CONSTRAINT `fk_permission_permmissionid` FOREIGN KEY (`permission_id`) REFERENCES `permission` (`permission_id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_role_roleid2` FOREIGN KEY (`role_id`) REFERENCES `role` (`role_id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for role_user
-- ----------------------------
DROP TABLE IF EXISTS `role_user`;
CREATE TABLE `role_user`  (
  `role_id` bigint(11) NOT NULL,
  `user_id` bigint(11) NOT NULL,
  PRIMARY KEY (`role_id`, `user_id`) USING BTREE,
  INDEX `fk_user_userid`(`user_id`) USING BTREE,
  CONSTRAINT `fk_role_roleid` FOREIGN KEY (`role_id`) REFERENCES `role` (`role_id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_user_userid` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `user_id` bigint(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `nickname` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `phone` varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `sex` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `birthday` date NULL DEFAULT NULL,
  `status` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`user_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

SET FOREIGN_KEY_CHECKS = 1;
</code></pre>
<h2 id="h2-2-"><a name="2    构建项目" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2    构建项目</h2><h3 id="h3-2-1-spring-initializer-spring-boot-"><a name="2.1使用Spring Initializer创建Spring Boot项目" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1使用Spring Initializer创建Spring Boot项目</h3><p>打开IDEA，创建新项目，选择Spring Initializer，输入项目信息，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/构建项目.png" alt="构建项目"></p>
<p>点击Next后，勾选需要的模块，并且在maven仓库搜索其它模块，并添加至pom文件中，最后pom文件如下所示：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.gdpu&lt;/groupId&gt;
    &lt;artifactId&gt;myfriday2&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;myfriday2&lt;/name&gt;
    &lt;description&gt;Authority management system project for Spring Boot&lt;/description&gt;

    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;
        &lt;!--spring security启动器--&gt;
       &lt;!-- &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
        &lt;/dependency&gt;--&gt;
        &lt;!--thymeleaf模板启动器--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!--web模块启动器--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;!--mybatis启动器--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;2.1.2&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--devtools热部署启动器--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
            &lt;scope&gt;runtime&lt;/scope&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        &lt;!--mysql连接驱动--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;mysql&lt;/groupId&gt;
            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
            &lt;scope&gt;runtime&lt;/scope&gt;
            &lt;version&gt;5.1.45&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--lombok插件--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        &lt;!--test模块启动器--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;
                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
        &lt;/dependency&gt;
        &lt;!--security test模块--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!--手动引入的依赖--&gt;
        &lt;!--druid数据库连接池--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;1.1.10&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;
</code></pre>
<h3 id="h3-2-2-"><a name="2.2    配置数据源" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2    配置数据源</h3><pre><code class="lang-yml">#配置数据源
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/friday2?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false
    username: root
    password: 1234
    platform: mysql
    # 连接池指定 springboot2.02版本默认使用HikariCP 此处要替换成Druid
    # 下面为连接池的补充设置，应用到上面所有数据源中
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 初始化大小，最小，最大
      initial-size: 1
      min-idle: 3
      max-active: 20
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 30000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 30000
      validation-query: select &#39;x&#39;
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      max-pool-prepared-statement-per-connection-size: 20
</code></pre>
<p>编写测试数据源代码，代码如下：</p>
<pre><code class="lang-java">@Autowired
private DataSource dataSource;

@Test
void testDataSource(){
    System.out.println(dataSource.getClass());
}
</code></pre>
<p>测试结果如图，通过Debug方式可以看到数据源的配置信息：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/测试数据源1.png" alt="测试数据源1"></p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/测试数据源2.png" alt="测试数据源2"></p>
<h3 id="h3-2-3-mybatis-generator-"><a name="2.3    使用MyBatis Generator生成代码" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3    使用MyBatis Generator生成代码</h3><p>首先，在pom文件添加MyBatis Generator的依赖，代码如下：</p>
<pre><code class="lang-xml">&lt;!--mybatis generator代码生成--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;
    &lt;version&gt;1.3.5&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>MyBatis Generator的使用参考官方文档：<a href="http://mybatis.org/generator/index.html">http://mybatis.org/generator/index.html</a></p>
<p>然后，编写MyBatis Generator的XML配置文件-mgb.xml，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE generatorConfiguration
        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;

&lt;generatorConfiguration&gt;
    &lt;!--配置数据源--&gt;
    &lt;context id=&quot;MySQLTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;
        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;
                        connectionURL=&quot;jdbc:mysql://localhost:3306/friday2&quot;
                        userId=&quot;root&quot;
                        password=&quot;1234&quot;&gt;
        &lt;/jdbcConnection&gt;
        &lt;!--指定JavaBean的生成位置--&gt;
        &lt;javaModelGenerator targetPackage=&quot;com.gdpu.myfriday2.model&quot; targetProject=&quot;src/main/java&quot;&gt;
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;
            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;
        &lt;/javaModelGenerator&gt;
        &lt;!--指定mapper映射文件的生成位置--&gt;
        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;
        &lt;/sqlMapGenerator&gt;
        &lt;!--指定mapper接口的生成位置--&gt;
        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.gdpu.myfriday2.dao&quot; targetProject=&quot;src/main/java&quot;&gt;
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;
        &lt;/javaClientGenerator&gt;
        &lt;!--指定表的生成策略--&gt;
        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;/&gt;
        &lt;table tableName=&quot;role&quot; domainObjectName=&quot;Role&quot;/&gt;
        &lt;table tableName=&quot;role_user&quot; domainObjectName=&quot;RoleUser&quot;/&gt;
        &lt;table tableName=&quot;permission&quot; domainObjectName=&quot;Permission&quot;/&gt;
        &lt;table tableName=&quot;role_permission&quot; domainObjectName=&quot;RolePermission&quot;/&gt;
    &lt;/context&gt;
&lt;/generatorConfiguration&gt;
</code></pre>
<p>接着编写Java配置文件，代码如下：</p>
<pre><code class="lang-java">@Test
void testMybatisGenerator() throws Exception {
    List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();
    boolean overwrite = true;
    //以下为MyBatis Generator的XML配置文件的位置
    File configFile = new File(&quot;src/main/resources/mbg.xml&quot;);
    ConfigurationParser cp = new ConfigurationParser(warnings);
    Configuration config = cp.parseConfiguration(configFile);
    DefaultShellCallback callback = new DefaultShellCallback(overwrite);
    MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
    myBatisGenerator.generate(null);
}
</code></pre>
<p>执行后，生成代码如图：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/生成代码1.png" alt="生成代码1"></p>
<p><img src="C:\Users\AlanLiang\Desktop\笔记\项目\friday\图片\生成代码2.png" alt="生成代码2"></p>
<p>在application.yml文件中配置mybatis，代码如下：</p>
<pre><code class="lang-yml">#配置mybatis
mybatis:
  #配置model别名
  type-aliases-package: com.gdpu.friday.model
  configuration:
    #开启驼峰命名映射
    map-underscore-to-camel-case: true
  #指定mapper映射文件位置
  mapper-locations: classpath:/mapper/*.xml
</code></pre>
<p>在每个mapper接口上添加<a href="https://github.com/Repository" title="&#64;Repository" class="at-link">@Repository</a>注解，以便注入spring容器，以UserMapper为例，代码如下：</p>
<pre><code class="lang-java">@Repository
public interface UserMapper {
    ...
}
</code></pre>
<p>在springboot启动类中加入<a href="https://github.com/MapperScan" title="&#64;MapperScan" class="at-link">@MapperScan</a>注解，用于扫描mapper接口，代码如下：</p>
<pre><code class="lang-java">@MapperScan(&quot;com.gdpu.myfriday2.dao&quot;)
@SpringBootApplication
public class Myfriday2Application {

    public static void main(String[] args) {
        SpringApplication.run(Myfriday2Application.class, args);
    }

}
</code></pre>
<p>接着测试mapper，代码如下：</p>
<pre><code class="lang-java">@Autowired
private UserMapper userMapper;

@Test
void testUserMapper() {
    User user = new User();
    user.setUsername(&quot;admin&quot;);
    user.setPassword(&quot;123456&quot;);
    user.setNickname(&quot;系统管理员&quot;);
    user.setEmail(&quot;admin@qq.com&quot;);
    user.setPhone(&quot;13415418399&quot;);
    user.setSex(&quot;M&quot;);
    user.setBirthday(new Date(1998, 5, 10));
    user.setStatus(&quot;启用&quot;);
    user.setCreateTime(new Date());
    user.setUpdateTime(new Date());
    userMapper.insertSelective(user);
}
</code></pre>
<h3 id="h3-2-4-xadmin-"><a name="2.4    引入Xadmin前端模板" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.4    引入Xadmin前端模板</h3><p>首先下载Xadmin，链接为：<a href="http://x.xuebingsi.com/index/down/index.html">http://x.xuebingsi.com/index/down/index.html</a></p>
<p>然后，复制资源文件至static目录下，如图所示：</p>
<p><img src="http://q8rsjstig.bkt.clouddn.com/note/引入xadmin资源.png" alt="引入xadmin资源"></p>
<p>接着复制index.html页面至templates目录下，引入thymeleaf名称空间，修改资源路径，代码如下：</p>
<pre><code class="lang-html">&lt;html class=&quot;x-admin-sm&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;后台登录-X-admin2.2&lt;/title&gt;
    &lt;meta name=&quot;renderer&quot; content=&quot;webkit|ie-comp|ie-stand&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;
    &lt;meta name=&quot;viewport&quot;
          content=&quot;width=device-width,user-scalable=yes, minimum-scale=0.4, initial-scale=0.8,target-densitydpi=low-dpi&quot;/&gt;
    &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot;/&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/xadmin/css/font.css&quot; th:href=&quot;@{/xadmin/css/font.css}&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/xadmin/css/xadmin.css&quot; th:href=&quot;@{/xadmin/css/xadmin.css}&quot;&gt;
    &lt;script src=&quot;../static/xadmin/lib/layui/layui.js&quot; charset=&quot;utf-8&quot; th:src=&quot;@{/xadmin/lib/layui/layui.js}&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;../static/xadmin/js/xadmin.js&quot; th:src=&quot;@{/xadmin/js/xadmin.js}&quot;&gt;&lt;/script&gt;
    &lt;!-- 让IE8/9支持媒体查询，从而兼容栅格 --&gt;
    &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;https://cdn.staticfile.org/html5shiv/r29/html5.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.staticfile.org/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
    &lt;script&gt;
        // 是否开启刷新记忆tab功能
        // var is_remember = false;
    &lt;/script&gt;
&lt;/head&gt;
</code></pre>
<p>最后，浏览器地址栏输入localhost:8080，成功访问主页，项目搭建完成。</p>
<h2 id="h2-3-"><a name="3    遇到的问题和错误" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3    遇到的问题和错误</h2><h3 id="h3-3-1-layui"><a name="3.1    layui" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1    layui</h3><h4 id="h4-3-11-layui-"><a name="3.11    layui数据表格显示请求成功，但不显示数据" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.11    layui数据表格显示请求成功，但不显示数据</h4><p>可能是layui存在bug，在table.render加入如下代码可以解决：</p>
<pre><code class="lang-javascript">, response: {
    statusName: &#39;code&#39; //规定数据状态的字段名称，默认：code
   , statusCode: 200 //规定成功的状态码，默认：0
   , msgName: &#39;msg&#39; //规定状态信息的字段名称，默认：msg
   , countName: &#39;count&#39; //规定数据总数的字段名称，默认：count
   , dataName: &#39;data&#39; //规定数据列表的字段名称，默认：data
}
</code></pre>
<h3 id="h3-3-12-layui-"><a name="3.12    layui登录窗口嵌套" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.12    layui登录窗口嵌套</h3><p>在登录页面加上以下代码可解决：</p>
<pre><code class="lang-java">/***判断是否存在父级页面,存在则刷新,不存在则不刷新**/
if (selfA.location !== top.location) {
    top.location = self.location;
}
</code></pre>
<h3 id="h3-3-13-layui-"><a name="3.13    layui一行显示两个块元素" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.13    layui一行显示两个块元素</h3><p>在外层套一个div，class为layui-inline，块元素再套一个div，class为layui-input-inline，代码如下：</p>
<pre><code class="lang-html">&lt;div class=&quot;layui-inline&quot;&gt;
    &lt;div class=&quot;layui-input-inline&quot;&gt;
        &lt;input name=&quot;verCode&quot; lay-verify=&quot;required&quot; placeholder=&quot;验证码&quot; type=&quot;text&quot; &gt;
    &lt;/div&gt;
    &lt;div class=&quot;layui-input-inline&quot;&gt;
        &lt;img src=&quot;/captcha&quot; width=&quot;130px&quot; height=&quot;48px&quot; th:src=&quot;@{/captcha}&quot;/&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h3 id="h3-3-14-"><a name="3.14    刷新验证码" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.14    刷新验证码</h3><pre><code class="lang-js">//刷新验证码
$(&#39;#verCodeImg&#39;).click(function flushVerCode() {
    this.src = this.src + &quot;?&quot; + Math.random();
});
</code></pre>
<h2 id="h2-3-2-spring-security"><a name="3.2    Spring Security" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2    Spring Security</h2><h3 id="h3-3-21-"><a name="3.21    配置类" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.21    配置类</h3><pre><code class="lang-java">@EnableWebSecurity
@Configuration
@EnableGlobalMethodSecurity(prePostEnabled = true)//启用spring security注解
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Qualifier(&quot;userDetailServiceImpl&quot;)
    @Autowired
    private UserDetailsService userDetailsService;
    @Autowired
    private MyAuthenticationSuccessHandler myAuthenticationSuccessHandler;
    @Autowired
    private MyAuthenticationFailureHandler myAuthenticationFailureHandler;
    @Autowired
    private MyAccessDeniedHandler myAccessDeniedHandler;
    @Autowired
    private ValidateCodeFilter validateCodeFilter;

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //开启登录配置
        http.authorizeRequests()
                //放行访问登录页面、验证码和静态资源的请求
                .antMatchers(&quot;/login.html&quot;, &quot;/captcha&quot;, &quot;/xadmin/**&quot;, &quot;/tretable-lay/**&quot;, &quot;/ztree/**&quot;, &quot;/js/**&quot;, &quot;/static/**&quot;).permitAll()
                //其余请求在认证后可访问
                .anyRequest().authenticated();

        //添加图形验证码
        http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class)
                //允许表单登录
                .formLogin()
                //自定义登录页面
                .loginPage(&quot;/login.html&quot;)
                //自定义登录表单提交路径
                .loginProcessingUrl(&quot;/login&quot;)
                //认证成功处理
                .successHandler(myAuthenticationSuccessHandler)
                //认证失败处理
                .failureHandler(myAuthenticationFailureHandler)
                .and()
                //记住我
                .rememberMe();

        //自定义退出登录
        http.logout().permitAll()
                .invalidateHttpSession(true)
                .deleteCookies(&quot;JSESSIONID&quot;)
                .logoutSuccessUrl(&quot;/login.html&quot;);

        //处理权限异常
        http.exceptionHandling().accessDeniedHandler(myAccessDeniedHandler);

        //禁用拦截除GET方式以外的请求
        http.csrf().disable();
        //解决X-Frame-Options DENY问题
        http.headers().frameOptions().sameOrigin();
    }
}
</code></pre>
<h3 id="h3-3-22-"><a name="3.22    自定义无权限处理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.22    自定义无权限处理</h3><pre><code class="lang-java">@Component
public class MyAccessDeniedHandler implements AccessDeniedHandler {
    @Override
    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)
            throws IOException, ServletException {
        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
        response.setCharacterEncoding(&quot;utf-8&quot;);
        response.sendRedirect(&quot;/403.html&quot;);
    }

}
</code></pre>
<h2 id="h2-3-3-spring-mvc"><a name="3.3    Spring MVC" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3    Spring MVC</h2><h3 id="h3-3-31-"><a name="3.31    解决日期格式转换问题" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.31    解决日期格式转换问题</h3><p>错误信息如下：</p>
<pre><code>Failed to convert value of type &#39;java.lang.String&#39; to required type &#39;java.lang.Long&#39;; nested exception is java.lang.NumberFormatException: For input string: &quot;info&quot;
</code></pre><p>在Controller中加入以下代码：</p>
<pre><code class="lang-java">/**
     * 将日期格式的String类型转为Date类型
     *
     * @param binder 数据绑定
     */
@InitBinder
public void dateBinder(WebDataBinder binder) {
    String pattern = &quot;yyyy-MM-dd&quot;;
    CustomDateEditor editor = new CustomDateEditor(new SimpleDateFormat(pattern), true);
    binder.registerCustomEditor(Date.class, editor);
}
</code></pre>
<h3 id="h3-3-32-thymeleaf-"><a name="3.32    不能解析thymeleaf模板" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.32    不能解析thymeleaf模板</h3><p>错误信息如下：</p>
<pre><code>org.thymeleaf.exceptions.TemplateInputException: Error resolving template [user/info], template might not exist or might not be accessible by any of the configured Template Resolvers
</code></pre><p>一般是templates目录下没有这个页面，或者添加了但是没有重启服务器，或者是Controller中视图名称写错了，或者是当前方法返回数据但没有加<a href="https://github.com/ResponseBody" title="&#64;ResponseBody" class="at-link">@ResponseBody</a></p>
<h2 id="h2-4-"><a name="4    项目代码" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4    项目代码</h2><p><a href="https://github.com/AlanLiang1998/my_friday">https://github.com/AlanLiang1998/my_friday</a></p>
(String), #### 介绍

基于Spring Boot2.X的后台权限管理系统，适合于学习Spring Boot开发、项目毕业设计以及研发团队快速搭建项目，提供纯净的权限管理功能，可作为开发项目的脚手架，作为基础项目。

#### 软件技术

1. Spring Boot 2.2.5
2. Spring Security 5.2.2
3. Mybatis 3.5.4
4. Logback 1.2.3
5. Druid 1.1.10
6. Swagger 2.9.2
7. Lombok 1.18.12
8. X-admin 2.2
9. Thymeleaf 3.0.11
10. Layui 2.5.3
11. MySQL 5.6

#### 内置功能

1. 用户管理：用户查询、添加用户、修改用户、用户角色设置、删除用户；
2. 角色管理：角色查询、添加角色、修改角色、角色菜单权限配置、删除角色；
3. 菜单管理：菜单查询、添加菜单、修改菜单、删除菜单；
4. 登录、登出：基于Spring Security的认证和授权；
5. Druid数据源监控功能；
6. Swagger接口文档功能；
7. 修改密码；
8. 代码自动生成：根据数据表以及自定义模板自动生成html、controller、service、serviceImpl、dao、mapper.xml文件；

## 1    创建数据库

本项目采用MySQL5.6数据库，创建基于RBAC模式的权限管理系统设计数据库，数据库模型如图所示：

![RBAC数据库模型](http://q8rsjstig.bkt.clouddn.com/note/RBAC数据库模型.png)

执行SQL如下：

```mysql
/*
 Navicat Premium Data Transfer

 Source Server         : mysql
 Source Server Type    : MySQL
 Source Server Version : 50640
 Source Host           : localhost:3306
 Source Schema         : friday2

 Target Server Type    : MySQL
 Target Server Version : 50640
 File Encoding         : 65001

 Date: 27/03/2020 15:38:07
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for permission
-- ----------------------------
DROP TABLE IF EXISTS `permission`;
CREATE TABLE `permission`  (
  `permission_id` bigint(11) NOT NULL AUTO_INCREMENT,
  `parent_id` bigint(11) NOT NULL,
  `permission_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `css` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `href` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `type` int(4) NOT NULL,
  `permission` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `sort` int(11) NOT NULL,
  PRIMARY KEY (`permission_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for role
-- ----------------------------
DROP TABLE IF EXISTS `role`;
CREATE TABLE `role`  (
  `role_id` bigint(11) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`role_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for role_permisson
-- ----------------------------
DROP TABLE IF EXISTS `role_permisson`;
CREATE TABLE `role_permisson`  (
  `role_id` bigint(11) NOT NULL,
  `permission_id` bigint(11) NOT NULL,
  PRIMARY KEY (`role_id`, `permission_id`) USING BTREE,
  INDEX `fk_permission_permmissionid`(`permission_id`) USING BTREE,
  CONSTRAINT `fk_permission_permmissionid` FOREIGN KEY (`permission_id`) REFERENCES `permission` (`permission_id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_role_roleid2` FOREIGN KEY (`role_id`) REFERENCES `role` (`role_id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for role_user
-- ----------------------------
DROP TABLE IF EXISTS `role_user`;
CREATE TABLE `role_user`  (
  `role_id` bigint(11) NOT NULL,
  `user_id` bigint(11) NOT NULL,
  PRIMARY KEY (`role_id`, `user_id`) USING BTREE,
  INDEX `fk_user_userid`(`user_id`) USING BTREE,
  CONSTRAINT `fk_role_roleid` FOREIGN KEY (`role_id`) REFERENCES `role` (`role_id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `fk_user_userid` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `user_id` bigint(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `nickname` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `phone` varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `sex` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `birthday` date NULL DEFAULT NULL,
  `status` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `update_time` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`user_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

SET FOREIGN_KEY_CHECKS = 1;

```

##2	构建项目

### 2.1使用Spring Initializer创建Spring Boot项目

打开IDEA，创建新项目，选择Spring Initializer，输入项目信息，如图所示：

![构建项目](http://q8rsjstig.bkt.clouddn.com/note/构建项目.png)

点击Next后，勾选需要的模块，并且在maven仓库搜索其它模块，并添加至pom文件中，最后pom文件如下所示：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.gdpu</groupId>
    <artifactId>myfriday2</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>myfriday2</name>
    <description>Authority management system project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <!--spring security启动器-->
       <!-- <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>-->
        <!--thymeleaf模板启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!--web模块启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--mybatis启动器-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.2</version>
        </dependency>
        <!--devtools热部署启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <!--mysql连接驱动-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
            <version>5.1.45</version>
        </dependency>
        <!--lombok插件-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!--test模块启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--security test模块-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--手动引入的依赖-->
        <!--druid数据库连接池-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.10</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
```

### 2.2	配置数据源

```yml
#配置数据源
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/friday2?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
    username: root
    password: 1234
    platform: mysql
    # 连接池指定 springboot2.02版本默认使用HikariCP 此处要替换成Druid
    # 下面为连接池的补充设置，应用到上面所有数据源中
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 初始化大小，最小，最大
      initial-size: 1
      min-idle: 3
      max-active: 20
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 30000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 30000
      validation-query: select 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      max-pool-prepared-statement-per-connection-size: 20
```

编写测试数据源代码，代码如下：

```java
@Autowired
private DataSource dataSource;

@Test
void testDataSource(){
    System.out.println(dataSource.getClass());
}
```

测试结果如图，通过Debug方式可以看到数据源的配置信息：

![测试数据源1](http://q8rsjstig.bkt.clouddn.com/note/测试数据源1.png)

![测试数据源2](http://q8rsjstig.bkt.clouddn.com/note/测试数据源2.png)

### 2.3	使用MyBatis Generator生成代码

首先，在pom文件添加MyBatis Generator的依赖，代码如下：

```xml
<!--mybatis generator代码生成-->
<dependency>
    <groupId>org.mybatis.generator</groupId>
    <artifactId>mybatis-generator-core</artifactId>
    <version>1.3.5</version>
</dependency>
```

MyBatis Generator的使用参考官方文档：http://mybatis.org/generator/index.html

然后，编写MyBatis Generator的XML配置文件-mgb.xml，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--配置数据源-->
    <context id="MySQLTables" targetRuntime="MyBatis3">
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/friday2"
                        userId="root"
                        password="1234">
        </jdbcConnection>
        <!--指定JavaBean的生成位置-->
        <javaModelGenerator targetPackage="com.gdpu.myfriday2.model" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--指定mapper映射文件的生成位置-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!--指定mapper接口的生成位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.gdpu.myfriday2.dao" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <!--指定表的生成策略-->
        <table tableName="user" domainObjectName="User"/>
        <table tableName="role" domainObjectName="Role"/>
        <table tableName="role_user" domainObjectName="RoleUser"/>
        <table tableName="permission" domainObjectName="Permission"/>
        <table tableName="role_permission" domainObjectName="RolePermission"/>
    </context>
</generatorConfiguration>
```

接着编写Java配置文件，代码如下：

```java
@Test
void testMybatisGenerator() throws Exception {
    List<String> warnings = new ArrayList<String>();
    boolean overwrite = true;
    //以下为MyBatis Generator的XML配置文件的位置
    File configFile = new File("src/main/resources/mbg.xml");
    ConfigurationParser cp = new ConfigurationParser(warnings);
    Configuration config = cp.parseConfiguration(configFile);
    DefaultShellCallback callback = new DefaultShellCallback(overwrite);
    MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
    myBatisGenerator.generate(null);
}
```

执行后，生成代码如图：

![生成代码1](http://q8rsjstig.bkt.clouddn.com/note/生成代码1.png)

![生成代码2](C:\Users\AlanLiang\Desktop\笔记\项目\friday\图片\生成代码2.png)

在application.yml文件中配置mybatis，代码如下：

```yml
#配置mybatis
mybatis:
  #配置model别名
  type-aliases-package: com.gdpu.friday.model
  configuration:
    #开启驼峰命名映射
    map-underscore-to-camel-case: true
  #指定mapper映射文件位置
  mapper-locations: classpath:/mapper/*.xml
```

在每个mapper接口上添加@Repository注解，以便注入spring容器，以UserMapper为例，代码如下：

```java
@Repository
public interface UserMapper {
    ...
}
```

在springboot启动类中加入@MapperScan注解，用于扫描mapper接口，代码如下：

```java
@MapperScan("com.gdpu.myfriday2.dao")
@SpringBootApplication
public class Myfriday2Application {

    public static void main(String[] args) {
        SpringApplication.run(Myfriday2Application.class, args);
    }

}
```

接着测试mapper，代码如下：

```java
@Autowired
private UserMapper userMapper;

@Test
void testUserMapper() {
    User user = new User();
    user.setUsername("admin");
    user.setPassword("123456");
    user.setNickname("系统管理员");
    user.setEmail("admin@qq.com");
    user.setPhone("13415418399");
    user.setSex("M");
    user.setBirthday(new Date(1998, 5, 10));
    user.setStatus("启用");
    user.setCreateTime(new Date());
    user.setUpdateTime(new Date());
    userMapper.insertSelective(user);
}
```

### 2.4	引入Xadmin前端模板

首先下载Xadmin，链接为：http://x.xuebingsi.com/index/down/index.html

然后，复制资源文件至static目录下，如图所示：

![引入xadmin资源](http://q8rsjstig.bkt.clouddn.com/note/引入xadmin资源.png)

接着复制index.html页面至templates目录下，引入thymeleaf名称空间，修改资源路径，代码如下：

```html
<html class="x-admin-sm" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>后台登录-X-admin2.2</title>
    <meta name="renderer" content="webkit|ie-comp|ie-stand">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport"
          content="width=device-width,user-scalable=yes, minimum-scale=0.4, initial-scale=0.8,target-densitydpi=low-dpi"/>
    <meta http-equiv="Cache-Control" content="no-siteapp"/>
    <link rel="stylesheet" href="../static/xadmin/css/font.css" th:href="@{/xadmin/css/font.css}">
    <link rel="stylesheet" href="../static/xadmin/css/xadmin.css" th:href="@{/xadmin/css/xadmin.css}">
    <script src="../static/xadmin/lib/layui/layui.js" charset="utf-8" th:src="@{/xadmin/lib/layui/layui.js}"></script>
    <script type="text/javascript" src="../static/xadmin/js/xadmin.js" th:src="@{/xadmin/js/xadmin.js}"></script>
    <!-- 让IE8/9支持媒体查询，从而兼容栅格 -->
    <!--[if lt IE 9]>
    <script src="https://cdn.staticfile.org/html5shiv/r29/html5.min.js"></script>
    <script src="https://cdn.staticfile.org/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
        // 是否开启刷新记忆tab功能
        // var is_remember = false;
    </script>
</head>
```

最后，浏览器地址栏输入localhost:8080，成功访问主页，项目搭建完成。



## 3	遇到的问题和错误

###3.1	layui

#### 3.11	layui数据表格显示请求成功，但不显示数据

可能是layui存在bug，在table.render加入如下代码可以解决：

```javascript
, response: {
    statusName: 'code' //规定数据状态的字段名称，默认：code
   , statusCode: 200 //规定成功的状态码，默认：0
   , msgName: 'msg' //规定状态信息的字段名称，默认：msg
   , countName: 'count' //规定数据总数的字段名称，默认：count
   , dataName: 'data' //规定数据列表的字段名称，默认：data
}
```

### 3.12	layui登录窗口嵌套

在登录页面加上以下代码可解决：

```java
/***判断是否存在父级页面,存在则刷新,不存在则不刷新**/
if (selfA.location !== top.location) {
    top.location = self.location;
}
```

### 3.13	layui一行显示两个块元素

在外层套一个div，class为layui-inline，块元素再套一个div，class为layui-input-inline，代码如下：

```html
<div class="layui-inline">
    <div class="layui-input-inline">
        <input name="verCode" lay-verify="required" placeholder="验证码" type="text" >
    </div>
    <div class="layui-input-inline">
        <img src="/captcha" width="130px" height="48px" th:src="@{/captcha}"/>
    </div>
</div>
```

### 3.14	刷新验证码

```js
//刷新验证码
$('#verCodeImg').click(function flushVerCode() {
    this.src = this.src + "?" + Math.random();
});
```

## 3.2	Spring Security

### 3.21	配置类

```java
@EnableWebSecurity
@Configuration
@EnableGlobalMethodSecurity(prePostEnabled = true)//启用spring security注解
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Qualifier("userDetailServiceImpl")
    @Autowired
    private UserDetailsService userDetailsService;
    @Autowired
    private MyAuthenticationSuccessHandler myAuthenticationSuccessHandler;
    @Autowired
    private MyAuthenticationFailureHandler myAuthenticationFailureHandler;
    @Autowired
    private MyAccessDeniedHandler myAccessDeniedHandler;
    @Autowired
    private ValidateCodeFilter validateCodeFilter;

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //开启登录配置
        http.authorizeRequests()
                //放行访问登录页面、验证码和静态资源的请求
                .antMatchers("/login.html", "/captcha", "/xadmin/**", "/tretable-lay/**", "/ztree/**", "/js/**", "/static/**").permitAll()
                //其余请求在认证后可访问
                .anyRequest().authenticated();

        //添加图形验证码
        http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class)
                //允许表单登录
                .formLogin()
                //自定义登录页面
                .loginPage("/login.html")
                //自定义登录表单提交路径
                .loginProcessingUrl("/login")
                //认证成功处理
                .successHandler(myAuthenticationSuccessHandler)
                //认证失败处理
                .failureHandler(myAuthenticationFailureHandler)
                .and()
                //记住我
                .rememberMe();

        //自定义退出登录
        http.logout().permitAll()
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID")
                .logoutSuccessUrl("/login.html");

        //处理权限异常
        http.exceptionHandling().accessDeniedHandler(myAccessDeniedHandler);

        //禁用拦截除GET方式以外的请求
        http.csrf().disable();
        //解决X-Frame-Options DENY问题
        http.headers().frameOptions().sameOrigin();
    }
}

```

### 3.22	自定义无权限处理

```java
@Component
public class MyAccessDeniedHandler implements AccessDeniedHandler {
    @Override
    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)
            throws IOException, ServletException {
        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
        response.setCharacterEncoding("utf-8");
        response.sendRedirect("/403.html");
    }

}

```

## 3.3	Spring MVC

### 3.31	解决日期格式转换问题

错误信息如下：

```
Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "info"
```

在Controller中加入以下代码：

```java
/**
     * 将日期格式的String类型转为Date类型
     *
     * @param binder 数据绑定
     */
@InitBinder
public void dateBinder(WebDataBinder binder) {
    String pattern = "yyyy-MM-dd";
    CustomDateEditor editor = new CustomDateEditor(new SimpleDateFormat(pattern), true);
    binder.registerCustomEditor(Date.class, editor);
}
```

### 3.32	不能解析thymeleaf模板

错误信息如下：

```
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [user/info], template might not exist or might not be accessible by any of the configured Template Resolvers
```

一般是templates目录下没有这个页面，或者添加了但是没有重启服务器，或者是Controller中视图名称写错了，或者是当前方法返回数据但没有加@ResponseBody

##	4	项目代码

https://github.com/AlanLiang1998/my_friday(String), http://cdn.alanliang.site/note/landscape4.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), false(Boolean), false(Boolean), 3(Long), 3(Long), 1(Integer), 2020-06-15 11:56:47.33(Timestamp), 2020-06-15 11:56:47.33(Timestamp), 2(Integer), 1(Integer)
2020-06-15 11:56:47.347 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 11:56:47.348 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) , (?,?) , (?,?) 
2020-06-15 11:56:47.348 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 10(Long), 12(Long), 10(Long), 25(Long), 10(Long), 26(Long), 10(Long), 15(Long)
2020-06-15 11:56:47.349 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 4
2020-06-15 11:56:47.577 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:56:47.577 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:56:47.576(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: ... }(String), 0:0:0:0:0:0:0:1(String), 243(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:56:47.578 DEBUG 9648 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:56:49.309 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 11:56:49.310 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 11:56:49.311 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 11:56:49.311 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:56:49.325 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 10
2020-06-15 11:56:49.326 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.326 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 11:56:49.328 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 11:56:49.328 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.329 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 11:56:49.329 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:56:49.330 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.330 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 11:56:49.331 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:56:49.332 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.332 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 11:56:49.333 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:56:49.333 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.333 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 11:56:49.334 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:56:49.334 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.334 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 11:56:49.336 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:56:49.336 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.336 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 11:56:49.340 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:56:49.341 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.341 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 11:56:49.342 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 11:56:49.343 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.343 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 11:56:49.344 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 11:56:49.344 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 11:56:49.344 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 11:56:49.345 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 11:56:49.348 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:56:49.348 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:56:49.347(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 39(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:56:49.349 DEBUG 9648 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:57:02.276 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-06-15 11:57:02.276 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-06-15 11:57:02.278 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-06-15 11:57:02.278 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 11:57:02.280 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-06-15 11:57:02.286 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:57:02.287 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:57:02.283(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:57:02.289 DEBUG 9648 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:57:04.128 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:57:04.128 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:57:04.127(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:57:04.129 DEBUG 9648 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:57:05.772 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:57:05.772 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:57:05.772(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:57:05.774 DEBUG 9648 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:57:09.659 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:57:09.659 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:57:09.659(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:57:09.660 DEBUG 9648 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:57:37.467 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:57:37.467 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:57:37.466(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:57:37.468 DEBUG 9648 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:57:46.824 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 11:57:46.824 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 11:57:46.822(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 11:57:46.825 DEBUG 9648 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 11:59:08.212  INFO 15444 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 15444 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 11:59:08.214 DEBUG 15444 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 11:59:08.215  INFO 15444 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 11:59:08.255  INFO 15444 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 11:59:08.255  INFO 15444 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 11:59:09.119  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 11:59:09.121  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 11:59:09.187  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 62ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 11:59:09.191  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 11:59:09.192  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 11:59:09.203  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 11:59:09.213  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 11:59:09.214  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 11:59:09.231  INFO 15444 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 11:59:09.231  INFO 15444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-15 11:59:09.618  INFO 15444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:59:09.765  INFO 15444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:59:09.767  INFO 15444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@77d34e9a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:59:09.769  INFO 15444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:59:09.777  INFO 15444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:59:09.787  INFO 15444 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$9f4e20e6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 11:59:10.130  INFO 15444 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 11:59:10.138  INFO 15444 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 11:59:10.138  INFO 15444 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 11:59:10.239  INFO 15444 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 11:59:10.239  INFO 15444 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1984 ms
2020-06-15 11:59:10.372  INFO 15444 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 11:59:10.373  INFO 15444 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 11:59:10.386 DEBUG 15444 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 11:59:10.492  INFO 15444 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 11:59:10.857  INFO 15444 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 11:59:12.288  WARN 15444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:59:12.289  WARN 15444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:59:12.289  WARN 15444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:59:12.289  WARN 15444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:59:12.313  WARN 15444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:59:12.314  WARN 15444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:59:12.314  WARN 15444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:59:12.314  WARN 15444 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 11:59:12.438  INFO 15444 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 11:59:12.627  WARN 15444 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 11:59:13.721  INFO 15444 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 11:59:13.737  INFO 15444 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 11:59:13.877  INFO 15444 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@275d29ab, org.springframework.security.web.context.SecurityContextPersistenceFilter@eda4d2f, org.springframework.security.web.header.HeaderWriterFilter@3c564fc9, org.springframework.security.web.authentication.logout.LogoutFilter@1a56ba8a, site.alanliang.geekblog.security.ValidateCodeFilter@29b3a3cd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6fd94cca, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5e3c547d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7288b1e3, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@3289b975, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3cca5db8, org.springframework.security.web.session.SessionManagementFilter@676e755f, org.springframework.security.web.access.ExceptionTranslationFilter@637f867, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@345bf982]
2020-06-15 11:59:13.954  INFO 15444 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 11:59:14.409  INFO 15444 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 11:59:14.427  INFO 15444 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 11:59:14.482  INFO 15444 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 11:59:14.680  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 11:59:14.681  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 11:59:14.686  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 11:59:14.688  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 11:59:14.688  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 11:59:14.690  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 11:59:14.691  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 11:59:14.694  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 11:59:14.695  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 11:59:14.722  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 11:59:14.723  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 11:59:14.726  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 11:59:14.733  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 11:59:14.735  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 11:59:14.737  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 11:59:14.738  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 11:59:14.741  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 11:59:14.742  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 11:59:14.743  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 11:59:14.745  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 11:59:14.747  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 11:59:14.748  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 11:59:14.751  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 11:59:14.753  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 11:59:14.755  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 11:59:14.759  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 11:59:14.759  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 11:59:14.761  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 11:59:14.761  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 11:59:14.763  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 11:59:14.764  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 11:59:14.769  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 11:59:14.770  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 11:59:14.774  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 11:59:14.775  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 11:59:14.777  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 11:59:14.778  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 11:59:14.781  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 11:59:14.782  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 11:59:14.784  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 11:59:14.785  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 11:59:14.786  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 11:59:14.787  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 11:59:14.790  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 11:59:14.791  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 11:59:14.792  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 11:59:14.793  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 11:59:14.800  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 11:59:14.802  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 11:59:14.803  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 11:59:14.805  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 11:59:14.807  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 11:59:14.808  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 11:59:14.809  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 11:59:14.810  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 11:59:14.810  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 11:59:14.814  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 11:59:14.816  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 11:59:14.817  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 11:59:14.818  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 11:59:14.819  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 11:59:14.821  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 11:59:14.822  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 11:59:14.824  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 11:59:14.828  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 11:59:14.831  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 11:59:14.831  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 11:59:14.832  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 11:59:14.833  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 11:59:14.835  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 11:59:14.838  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 11:59:14.839  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 11:59:14.840  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 11:59:14.841  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 11:59:14.843  INFO 15444 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 11:59:14.872  INFO 15444 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 11:59:14.874  INFO 15444 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.407 seconds (JVM running for 8.564)
2020-06-15 11:59:54.054  INFO 15444 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 11:59:54.054  INFO 15444 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 11:59:54.065  INFO 15444 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-06-15 11:59:54.140 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 11:59:54.299 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 11:59:54.328 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 11:59:54.344 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 11:59:54.350 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 11:59:54.366 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 12:00:04.178 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 12:00:04.178 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 12:00:04.181 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 12:00:04.182 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 12:00:04.182 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 12:00:04.189 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 12:00:04.291  INFO 15444 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 12:00:06.456 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:00:06.465 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:00:06.45(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:00:06.467 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:00:06.801  INFO 15444 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 12:00:06.802  INFO 15444 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 12:00:07.235 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 12:00:07.240 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 12:00:07.246 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 12:00:07.500 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 12:00:07.501 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 12:00:07.502 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 12:00:07.511 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 12:00:07.512 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 12:00:07.515 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 12:00:07.530 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 12:00:07.531 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 12:00:07.532 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 12:00:07.542 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 12:00:07.543 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 12:00:07.544 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 12:00:07.549 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 12:00:07.549 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 12:00:07.550 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 12:00:07.556 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 12:00:07.558 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 12:00:07.559 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 12:00:07.563 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 12:00:07.564 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 12:00:07.565 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 12:00:07.568 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 12:00:07.569 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 12:00:07.573 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 12:00:07.575 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 12:00:07.576 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 12:00:07.578 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 12:00:07.581 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 12:00:07.581 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 12:00:07.583 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 12:00:07.589 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 12:00:07.591 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 12:00:07.592 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 12:00:07.596 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 12:00:07.597 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 12:00:07.599 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 12:00:07.609 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 12:00:07.612 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 12:00:07.649 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 12:00:07.650 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 12:00:07.651 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 12:00:07.697 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 12:00:07.700 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:00:07.701 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 12:00:07.702 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:00:07.707 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:00:07.709 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 11:13:07.0(Timestamp), 2020-06-15 12:00:07.702(Timestamp)
2020-06-15 12:00:07.710 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 12:00:07.711 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:00:07.711 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 12:00:07.716 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:00:07.717 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:00:07.718 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 11:13:07.0(Timestamp), 2020-06-15 12:00:07.716(Timestamp)
2020-06-15 12:00:07.719 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 12:00:07.720 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:00:07.721 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 12:00:07.725 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:00:07.727 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:00:07.728 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 11:13:07.0(Timestamp), 2020-06-15 12:00:07.726(Timestamp)
2020-06-15 12:00:07.729 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 12:00:07.730 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:00:07.730 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 12:00:07.731 DEBUG 15444 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:00:07.733 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:00:07.733 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 11:13:07.0(Timestamp), 2020-06-15 12:00:07.732(Timestamp)
2020-06-15 12:00:07.734 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 12:00:07.743 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 12:00:07.744 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 12:00:07.745 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 12:00:16.444 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:00:16.447 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:00:16.444(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 25(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:00:16.448 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:00:17.247 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:00:17.247 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:00:17.245(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 12(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:00:17.248 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:00:28.761 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 12:00:28.762 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 12:00:28.772 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 12:00:28.773 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:00:28.776 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-06-15 12:00:28.786 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:00:28.787 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:00:28.785(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 55(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:00:28.788 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:00:32.725 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:00:32.726 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:00:32.724(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:00:32.727 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:00:56.506 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_comment 
2020-06-15 12:00:56.507 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 
2020-06-15 12:00:56.516 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:00:56.517 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:00:56.516(Timestamp), 查询评论(String), INFO(String), site.alanliang.geekblog.controller.admin.CommentController.listTableByPage()(String), { page: 1 limit: 15 commentQuery: CommentQuery(startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 14(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:00:56.518 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:01:02.742 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 12:01:02.743 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 12:01:02.745 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 12:01:02.745 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 100(Long)
2020-06-15 12:01:02.749 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-06-15 12:01:02.753 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:01:02.754 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:01:02.753(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 100 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:01:02.759 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:01:04.273 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:01:04.275 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:01:04.272(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:01:04.276 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:01:33.323 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 12:01:33.324 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 12:01:33.326 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 12:01:33.327 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:01:33.330 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-06-15 12:01:33.341 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:01:33.342 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:01:33.34(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:01:33.343 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:03:04.661 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 12:03:04.662 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 25(Long)
2020-06-15 12:03:04.663 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 12:03:04.860 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 12:03:04.863 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 12:03:04.866 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 13
2020-06-15 12:03:19.000 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 12:03:19.001 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: SpringBoot(String)
2020-06-15 12:03:19.002 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 12:03:19.004 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 12:03:19.008 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: SpringBoot(String), #BEEDC7(String), 2020-06-15 12:03:18.999(Timestamp), 25(Long)
2020-06-15 12:03:19.009 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 12:03:19.020 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:03:19.021 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:03:19.02(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: ... }(String), 0:0:0:0:0:0:0:1(String), 19(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:03:19.023 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:03:20.687 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 12:03:20.687 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 12:03:20.690 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 12:03:20.690 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:03:20.693 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-06-15 12:03:20.697 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:03:20.698 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:03:20.696(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:03:20.699 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:03:26.281 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE id=? 
2020-06-15 12:03:26.282 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : ==> Parameters: 26(Long)
2020-06-15 12:03:26.283 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.selectById    : <==      Total: 1
2020-06-15 12:03:26.377 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT color FROM t_tag GROUP BY color 
2020-06-15 12:03:26.377 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 12:03:26.378 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 14
2020-06-15 12:04:19.652 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 12:04:19.654 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 12:04:19.656 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 12:04:19.657 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 12:04:19.658 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 12:04:19.659 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 12:04:19.660 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 12:04:19.661 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 12:04:19.662 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 12:04:19.663 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 12:04:19.664 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 12:04:19.665 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 12:04:19.665 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 12:04:19.670 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 12:04:19.670 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 12:04:19.670 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 12:04:19.671 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 12:04:19.677 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 12:04:56.964 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag WHERE (name = ?) 
2020-06-15 12:04:56.965 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: SpringSecurity(String)
2020-06-15 12:04:56.968 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 1
2020-06-15 12:04:56.972 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.updateById    : ==>  Preparing: UPDATE t_tag SET name=?, color=?, update_time=? WHERE id=? 
2020-06-15 12:04:56.973 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.updateById    : ==> Parameters: SpringSecurity(String), #00CCFF(String), 2020-06-15 12:04:56.962(Timestamp), 26(Long)
2020-06-15 12:04:56.973 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.updateById    : <==    Updates: 1
2020-06-15 12:04:56.982 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:04:56.983 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:04:56.981(Timestamp), 更新标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.update()(String), { tag: ... }(String), 0:0:0:0:0:0:0:1(String), 16(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:04:56.986 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:04:58.706 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 12:04:58.707 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 12:04:58.711 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 12:04:58.713 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:04:58.719 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-06-15 12:04:58.728 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:04:58.731 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:04:58.726(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:04:58.735 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:05:12.907 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 12:05:12.910 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 12:05:12.913 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 4
2020-06-15 12:05:12.922 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 12:05:12.924 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 12:05:12.929 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 4
2020-06-15 12:05:12.951 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 12:05:12.953 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 12:05:12.956 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 12:05:12.957 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 12:05:13.078 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 12:05:13.083 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:13.085 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:05:13.089 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:13.092 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:13.093 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:05:13.099 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:13.103 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:13.103 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:05:13.105 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:13.107 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:13.107 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:05:13.109 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:13.111 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:13.111 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:05:13.113 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:05:13.115 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:13.115 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:05:13.117 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:13.123 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:05:13.126 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:05:13.122(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 226(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:05:13.134 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:05:19.325 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 12:05:19.325 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 12:05:19.329 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 12:05:19.330 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-06-15 12:05:19.336 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 3
2020-06-15 12:05:19.338 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:19.339 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:05:19.342 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:19.345 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:19.345 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:05:19.349 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:19.351 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:19.351 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:05:19.352 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:05:27.448 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 12:05:27.449 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 12:05:27.451 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 12:05:27.480 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 12:05:27.482 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 12:05:27.486 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 12:05:27.488 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:05:27.520 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 10
2020-06-15 12:05:27.526 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.526 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:05:27.530 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:05:27.533 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.534 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:05:27.539 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:27.540 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.541 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:05:27.544 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:27.549 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.550 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:05:27.552 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:27.555 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.555 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:05:27.557 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:27.558 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.558 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:05:27.562 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:27.564 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.564 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:05:27.566 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:27.571 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.571 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:05:27.572 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:05:27.574 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.574 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:05:27.577 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:27.579 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:27.579 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:05:27.582 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:05:27.589 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:05:27.590 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:05:27.588(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 124(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:05:27.594 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:05:31.509 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 12:05:31.511 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 10(Long)
2020-06-15 12:05:31.512 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 12:05:31.597 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 12:05:31.599 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 10(Long)
2020-06-15 12:05:31.605 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 12:05:31.906 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:05:31.907 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:05:31.905(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=10, status=2) }(String), 0:0:0:0:0:0:0:1(String), 401(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:05:31.908 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:05:31.936 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 12:05:31.936 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 12:05:31.939 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 12:05:31.939 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:05:31.965 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 10
2020-06-15 12:05:31.967 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:31.968 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:05:31.971 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:05:31.973 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:31.974 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:05:31.977 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:31.979 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:31.979 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:05:31.980 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:31.984 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:31.985 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:05:31.986 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:31.987 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:31.987 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:05:31.989 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:31.992 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:31.993 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:05:31.998 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:32.001 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:32.002 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:05:32.003 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:32.004 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:32.005 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:05:32.006 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:05:32.007 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:32.008 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:05:32.013 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:32.016 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:32.017 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:05:32.021 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:05:32.031 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:05:32.032 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:05:32.029(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 95(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:05:32.036 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:05:35.034 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 12:05:35.035 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 12:05:35.037 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 4
2020-06-15 12:05:35.046 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 12:05:35.046 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 12:05:35.049 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 4
2020-06-15 12:05:35.057 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 12:05:35.057 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 12:05:35.061 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 12:05:35.062 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 12:05:35.070 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 12:05:35.071 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:35.072 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:05:35.073 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:35.077 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:35.077 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:05:35.080 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:35.082 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:35.082 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:05:35.083 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:35.084 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:35.084 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:05:35.086 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:35.087 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:35.087 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:05:35.088 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:05:35.088 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:35.089 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:05:35.090 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:35.096 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:05:35.097 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:05:35.095(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 61(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:05:35.098 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:05:37.598 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 12:05:37.598 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 12:05:37.600 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 12:05:37.600 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-06-15 12:05:37.608 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 4
2020-06-15 12:05:37.611 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:37.611 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:05:37.612 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:37.613 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:37.613 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:05:37.614 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:05:37.615 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:37.615 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:05:37.616 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:05:37.617 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:05:37.617 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:05:37.618 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:07:20.575 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:07:20.576 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:07:20.573(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 26(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:07:20.580 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:07:32.644 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:07:32.645 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:07:32.643(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:07:32.649 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:07:45.586 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:07:45.587 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:07:45.585(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 5(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:07:45.588 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:08:16.895 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:08:16.896 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:08:16.894(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:08:16.897 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:08:31.256 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:08:31.257 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:08:31.256(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:08:31.259 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:08:59.752 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-06-15 12:08:59.753 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-06-15 12:08:59.756 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 15
2020-06-15 12:08:59.765 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:08:59.765 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:08:59.764(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.front.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 13(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:08:59.767 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:09:00.843 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id LEFT JOIN t_article_tag tat ON ta.id = tat.article_id WHERE tat.tag_id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-15 12:09:00.846 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 12(Long)
2020-06-15 12:09:00.851 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id left join t_article_tag tat on ta.id = tat.article_id where tat.tag_id = ? and ta.published = 1 and ta.status = 2 order by ta.sort desc LIMIT ?,? 
2020-06-15 12:09:00.853 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 12(Long), 0(Long), 6(Long)
2020-06-15 12:09:00.875 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.listPreviewPageByTagId         : <==      Total: 6
2020-06-15 12:09:00.879 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:00.879 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:09:00.884 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:09:00.886 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:00.886 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:09:00.888 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:09:00.892 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:00.892 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:09:00.896 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:09:00.898 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:00.899 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:09:00.901 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:09:00.903 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:00.903 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:09:00.905 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:09:00.909 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:00.909 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:09:00.913 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:09:04.498 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id LEFT JOIN t_article_tag tat ON ta.id = tat.article_id WHERE tat.tag_id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-15 12:09:04.498 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 12(Long)
2020-06-15 12:09:04.500 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByTagId         : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id left join t_article_tag tat on ta.id = tat.article_id where tat.tag_id = ? and ta.published = 1 and ta.status = 2 order by ta.sort desc LIMIT ?,? 
2020-06-15 12:09:04.501 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByTagId         : ==> Parameters: 12(Long), 6(Long), 6(Long)
2020-06-15 12:09:04.508 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.A.listPreviewPageByTagId         : <==      Total: 4
2020-06-15 12:09:04.510 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:04.511 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:09:04.513 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:09:04.514 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:04.514 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:09:04.516 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:09:04.517 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:04.518 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:09:04.518 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:09:04.519 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:09:04.519 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:09:04.520 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:09:29.424 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 12:09:29.424 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 12:09:29.426 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 12:09:29.426 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 12:09:29.427 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 12:09:29.429 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 12:09:29.532  INFO 15444 --- [http-nio-8889-exec-9] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 12:09:31.598 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:09:31.599 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:09:31.596(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:09:31.602 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:09:31.786 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 12:09:31.787 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 12:09:31.790 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 12:09:32.002 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 12:09:32.002 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 12:09:32.003 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 12:09:32.006 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 12:09:32.007 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 12:09:32.007 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 12:09:32.010 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 12:09:32.011 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 12:09:32.012 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 12:09:32.016 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 12:09:32.016 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 12:09:32.017 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 12:09:32.020 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 12:09:32.020 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 12:09:32.021 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 12:09:32.025 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 12:09:32.026 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 12:09:32.027 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 12:09:32.032 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 12:09:32.034 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 12:09:32.035 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 12:09:32.038 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 12:09:32.039 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 12:09:32.040 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 12:09:32.042 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 12:09:32.042 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 12:09:32.045 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 12:09:32.047 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 12:09:32.048 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 12:09:32.054 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 12:09:32.057 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 12:09:32.058 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 12:09:32.059 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 12:09:32.063 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 12:09:32.063 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 12:09:32.065 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 12:09:32.071 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 12:09:32.071 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 12:09:32.073 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 12:09:32.074 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 12:09:32.075 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 12:09:32.109 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 12:09:32.110 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 12:09:32.111 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 12:09:32.152 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 12:09:32.153 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:09:32.154 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 12:09:32.154 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:09:32.156 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:09:32.156 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 12:00:06.0(Timestamp), 2020-06-15 12:09:32.155(Timestamp)
2020-06-15 12:09:32.157 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 12:09:32.158 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:09:32.158 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 12:09:32.159 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:09:32.160 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:09:32.160 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 12:00:06.0(Timestamp), 2020-06-15 12:09:32.159(Timestamp)
2020-06-15 12:09:32.161 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 12:09:32.161 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:09:32.162 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 12:09:32.162 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:09:32.163 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:09:32.164 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 12:00:06.0(Timestamp), 2020-06-15 12:09:32.162(Timestamp)
2020-06-15 12:09:32.165 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 12:09:32.167 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:09:32.168 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 12:09:32.169 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:09:32.170 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:09:32.170 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 12:00:06.0(Timestamp), 2020-06-15 12:09:32.169(Timestamp)
2020-06-15 12:09:32.171 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 12:09:32.174 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 12:09:32.174 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 12:09:32.175 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 12:11:14.703 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 12:11:14.704 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 12:11:14.706 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 15
2020-06-15 12:13:39.720 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:13:39.723 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:13:39.727 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:13:39.728 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:13:39.730 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 12:13:39.736 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:13:39.737 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:13:39.735(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 25(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:13:39.742 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:13:41.475 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:13:41.475 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:13:41.477 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:13:41.477 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 45(Long), 15(Long)
2020-06-15 12:13:41.479 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 1
2020-06-15 12:13:41.488 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:13:41.489 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:13:41.486(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 4 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:13:41.490 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:13:43.515 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:13:43.515 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:13:43.516 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:13:43.516 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 30(Long), 15(Long)
2020-06-15 12:13:43.517 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 12:13:43.521 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:13:43.521 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:13:43.52(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 3 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:13:43.522 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:13:47.002 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:13:47.002 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:13:47.003 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:13:47.003 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 12:13:47.004 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 12:13:47.008 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:13:47.008 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:13:47.007(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:13:47.010 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:13:51.753 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:13:51.753 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:13:51.752(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:13:51.755 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:15:07.710 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:15:07.711 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:15:07.71(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:15:07.712 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:15:09.835 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content WHERE (name LIKE ?) 
2020-06-15 12:15:09.836 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: %2020-04-20%(String)
2020-06-15 12:15:09.843 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:15:09.843 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:15:09.842(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=2020-04-20, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 10(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:15:09.845 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:15:14.251 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:15:14.251 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:15:14.252 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:15:14.252 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:15:14.253 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 12:15:14.258 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:15:14.258 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:15:14.257(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:15:14.259 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:15:16.479 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:15:16.479 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:15:16.481 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:15:16.481 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 30(Long), 15(Long)
2020-06-15 12:15:16.482 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 12:15:16.485 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:15:16.485 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:15:16.484(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 3 limit: 15 qiNiuQuery: QiNiuQuery(name=, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:15:16.487 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:15:17.687 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:15:17.688 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:15:17.689 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:15:17.689 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 45(Long), 15(Long)
2020-06-15 12:15:17.689 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 1
2020-06-15 12:15:17.692 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:15:17.693 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:15:17.692(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 4 limit: 15 qiNiuQuery: QiNiuQuery(name=, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:15:17.694 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:15:19.019 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:15:19.020 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:15:19.022 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:15:19.022 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 12:15:19.024 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 12:15:19.028 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:15:19.029 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:15:19.028(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:15:19.031 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:15:21.060 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:15:21.060 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:15:21.059(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=, startDate=, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:15:21.062 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:17:34.768 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 12:17:34.768 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 12:17:34.769 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 12:17:34.770 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 12:17:34.770 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 12:17:34.772 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 12:17:34.867  INFO 15444 --- [http-nio-8889-exec-10] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 12:17:36.905 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:17:36.906 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:17:36.904(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:17:36.909 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:17:37.070 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 12:17:37.071 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 3(Long)
2020-06-15 12:17:37.073 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 11
2020-06-15 12:17:37.282 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 12:17:37.283 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 12:17:37.284 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 12:17:37.286 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 12:17:37.286 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 12:17:37.287 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 12:17:37.288 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 12:17:37.289 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 12:17:37.290 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 12:17:37.296 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 12:17:37.297 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 12:17:37.332 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 12:17:37.334 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 12:17:37.334 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 12:17:37.374 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 12:17:37.375 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:17:37.375 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 12:17:37.375 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:17:37.376 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:17:37.377 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 11:12:41.0(Timestamp), 2020-06-15 12:17:37.375(Timestamp)
2020-06-15 12:17:37.377 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 12:17:37.378 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:17:37.380 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 12:17:37.382 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:17:37.383 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:17:37.384 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 11:12:41.0(Timestamp), 2020-06-15 12:17:37.382(Timestamp)
2020-06-15 12:17:37.385 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 12:17:37.385 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:17:37.385 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 12:17:37.386 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:17:37.387 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:17:37.388 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 11:12:41.0(Timestamp), 2020-06-15 12:17:37.386(Timestamp)
2020-06-15 12:17:37.388 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 12:17:37.389 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:17:37.389 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 12:17:37.390 DEBUG 15444 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:17:37.391 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:17:37.391 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 11:12:41.0(Timestamp), 2020-06-15 12:17:37.39(Timestamp)
2020-06-15 12:17:37.392 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 12:17:58.469 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:17:58.469 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:17:58.468(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:17:58.470 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:17:58.796 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 12:17:58.796 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 12:17:58.798 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 12:17:58.801 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 12:17:58.801 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 12:17:58.802 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 12:17:58.803 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 12:17:58.803 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 12:17:58.804 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 12:17:58.810 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 12:17:58.810 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 12:17:58.845 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 12:17:58.846 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 12:17:58.847 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 12:17:58.889 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 12:17:58.892 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:17:58.892 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 12:17:58.894 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:17:58.895 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:17:58.895 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 12:17:37.0(Timestamp), 2020-06-15 12:17:58.894(Timestamp)
2020-06-15 12:17:58.896 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 12:17:58.897 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:17:58.897 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 12:17:58.898 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:17:58.898 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:17:58.899 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 12:17:37.0(Timestamp), 2020-06-15 12:17:58.898(Timestamp)
2020-06-15 12:17:58.899 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 12:17:58.900 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:17:58.900 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 12:17:58.901 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:17:58.902 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:17:58.902 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 12:17:37.0(Timestamp), 2020-06-15 12:17:58.901(Timestamp)
2020-06-15 12:17:58.903 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 12:17:58.903 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 12:17:58.903 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 12:17:58.904 DEBUG 15444 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 12:17:58.905 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 12:17:58.905 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 12:17:37.0(Timestamp), 2020-06-15 12:17:58.904(Timestamp)
2020-06-15 12:17:58.908 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 12:18:02.865 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 12:18:02.866 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 12:18:02.867 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 12:18:02.881 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 12:18:02.882 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 12:18:02.883 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 12:18:02.883 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:18:02.896 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 10
2020-06-15 12:18:02.897 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.897 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:18:02.899 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:18:02.900 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.900 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:18:02.901 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:18:02.902 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.902 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:18:02.904 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:18:02.905 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.906 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:18:02.908 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:18:02.911 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.912 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:18:02.913 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:18:02.914 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.915 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:18:02.916 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:18:02.917 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.917 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:18:02.918 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:18:02.918 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.918 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:18:02.920 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:18:02.920 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.920 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:18:02.923 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:18:02.928 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:18:02.928 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:18:02.930 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:18:02.934 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:18:02.934 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:18:02.933(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 53(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:18:02.935 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:23:35.137 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:23:35.137 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:23:35.136(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:23:35.139 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:23:39.021 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:23:39.021 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:23:39.02(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:23:39.022 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:23:57.057 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:23:57.058 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:23:57.059 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:23:57.060 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 12:23:57.061 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 12:23:57.065 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:23:57.065 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:23:57.064(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 10(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:23:57.067 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:24:05.591 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 12:24:05.591 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 12:24:05.593 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 12:24:05.593 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:24:05.594 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 12:24:05.598 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:24:05.598 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:24:05.597(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:24:05.600 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:25:03.781 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:25:03.799 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: 跟武哥一起学习Spring Boot(String), 本课程首发于 CSDN GitChat 达人课《跟武哥一起学Spring Boot》，该文档为课程详细笔记。(String), <h1 id="h1--spring-boot"><a name="跟武哥一起学习Spring Boot" class="reference-link"></a><span class="header-link octicon octicon-link"></span>跟武哥一起学习Spring Boot</h1><h1 id="h1-u4F5Cu8005u4FE1u606F"><a name="作者信息" class="reference-link"></a><span class="header-link octicon octicon-link"></span>作者信息</h1><p>本课程首发于 CSDN GitChat 达人课《跟武哥一起学Spring Boot》，该文档为课程详细笔记。<br>作者：倪升武（武哥）<br>微信公众号：武哥聊编程<br><img src="https://img-blog.csdnimg.cn/202002150421550.jpg" alt="武哥聊编程"></p>
<blockquote>
<p>版权申明：本课程已经免费，但版权属于 CSDN 和作者，未经允许，不得将该笔记用于商业用途和其他不正当用途，否则追究法律责任。</p>
</blockquote>
<h1 id="h1--"><a name="导读：课程概览" class="reference-link"></a><span class="header-link octicon octicon-link"></span>导读：课程概览</h1><h2 id="h2-1-spring-boot-"><a name="1. Spring Boot是什么" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. Spring Boot是什么</h2><p>我们知道，从 2002 年开始，Spring 一直在飞速的发展，如今已经成为了在Java EE（Java Enterprise Edition）开发中真正意义上的标准，但是随着技术的发展，Java EE使用 Spring 逐渐变得笨重起来，大量的 XML 文件存在于项目之中。<strong>繁琐的配置，整合第三方框架的配置问题，导致了开发和部署效率的降低</strong>。  </p>
<p>2012 年 10 月，Mike Youngstrom 在 Spring jira 中创建了一个功能请求，要求<strong>在 Spring 框架中支持无容器 Web 应用程序体系结构</strong>。他谈到了在主容器引导 spring 容器内配置 Web 容器服务。这是 jira 请求的摘录：</p>
<blockquote>
<p>我认为 Spring 的 Web 应用体系结构可以大大简化，如果它提供了从上到下利用 Spring 组件和配置模型的工具和参考体系结构。在简单的 <code>main()</code>方法引导的 Spring 容器内嵌入和统一这些常用Web 容器服务的配置。 </p>
</blockquote>
<p>这一要求促使了 2013 年初开始的 Spring Boot 项目的研发，到今天，Spring Boot 的版本已经到了 2.0.3 RELEASE。Spring Boot 并不是用来替代 Spring 的解决方案，而<strong>是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具</strong>。</p>
<p>它集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是零配置的开箱即用（out-of-the-box），大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。   </p>
<h2 id="h2-2-spring-boot"><a name="2. 为什么学习Spring Boot" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. 为什么学习Spring Boot</h2><h3 id="h3-2-1-spring-"><a name="2.1 从Spring官方来看" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 从Spring官方来看</h3><p>我们打开 Spring 的<a href="http://spring.io/">官方网站</a>，可以看到下图：  </p>
<p><img src="https://images.gitbook.cn/98fda7f0-8656-11e8-8675-5537a701ae7d" alt="Spring官网首图"></p>
<p>我们可以看到图中官方对 Spring Boot 的定位：<em>Build Anything</em>， Build任何东西。Spring Boot旨在尽可能快地启动和运行，并且只需最少的 Spring 前期配置。  同时我们也来看一下官方对后面两个的定位：  </p>
<p>SpringCloud：<em>Coordinate Anything</em>，协调任何事情；<br>SpringCloud Data Flow：<em>Connect everything</em>，连接任何东西。</p>
<p>仔细品味一下，Spring 官网对 Spring Boot、SpringCloud 和 SpringCloud Data Flow三者定位的措辞非常有味道，同时也可以看出，Spring 官方对这三个技术非常重视，是现在以及今后学习的重点（SpringCloud 相关达人课课程届时也会上线）。</p>
<h3 id="h3-2-2-spring-boot-"><a name="2.2 从Spring Boot的优点来看" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 从Spring Boot的优点来看</h3><p>Spring Boot 有哪些优点？主要给我们解决了哪些问题呢？我们以下图来说明：</p>
<p><img src="https://images.gitbook.cn/e17b8c40-8656-11e8-8a91-d70bc2d847c5" alt="Spring Boot的优点"></p>
<h4 id="h4-2-2-1-"><a name="2.2.1 良好的基因" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.1 良好的基因</h4><p>Spring Boot 是伴随着 Spring 4.0 诞生的，从字面理解，Boot是引导的意思，因此 Spring Boot 旨在帮助开发者快速搭建 Spring 框架。Spring Boot 继承了原有 Spring 框架的优秀基因，使 Spring 在使用中更加方便快捷。</p>
<p><img src="https://images.gitbook.cn/00078650-8657-11e8-87de-d910a3ee087e" alt="Spring Boot与Spring"></p>
<h4 id="h4-2-2-2-"><a name="2.2.2 简化编码" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.2 简化编码</h4><p>举个例子，比如我们要创建一个 web 项目，使用 Spring 的朋友都知道，在使用 Spring 的时候，需要在 pom 文件中添加多个依赖，而 Spring Boot 则会帮助开发着快速启动一个 web 容器，在 Spring Boot 中，我们只需要在 pom 文件中添加如下一个 starter-web 依赖即可。</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>我们点击进入该依赖后可以看到，Spring Boot 这个 starter-web 已经包含了多个依赖，包括之前在 Spring 工程中需要导入的依赖，我们看一下其中的一部分，如下：</p>
<pre><code class="lang-xml">&lt;!-- .....省略其他依赖 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
    &lt;version&gt;5.0.7.RELEASE&lt;/version&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
    &lt;version&gt;5.0.7.RELEASE&lt;/version&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<p>由此可以看出，Spring Boot 大大简化了我们的编码，我们不用一个个导入依赖，直接一个依赖即可。</p>
<h4 id="h4-2-2-3-"><a name="2.2.3 简化配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.3 简化配置</h4><p>Spring 虽然使Java EE轻量级框架，但由于其繁琐的配置，一度被人认为是“配置地狱”。各种XML、Annotation配置会让人眼花缭乱，而且配置多的话，如果出错了也很难找出原因。Spring Boot更多的是采用 Java Config 的方式，对 Spring 进行配置。举个例子：</p>
<p>我新建一个类，但是我不用 <code><a href="https://github.com/Service" title="&#64;Service" class="at-link">@Service</a></code>注解，也就是说，它是个普通的类，那么我们如何使它也成为一个 Bean 让 Spring 去管理呢？只需要<code><a href="https://github.com/Configuration" title="&#64;Configuration" class="at-link">@Configuration</a></code> 和<code><a href="https://github.com/Bean" title="&#64;Bean" class="at-link">@Bean</a></code>两个注解即可，如下：</p>
<pre><code class="lang-java">public class TestService {
    public String sayHello () {
        return &quot;Hello Spring Boot!&quot;;
    }
}
</code></pre>
<pre><code class="lang-java">import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class JavaConfig {
    @Bean
    public TestService getTestService() {
        return new TestService();
    }
}
</code></pre>
<p><code><a href="https://github.com/Configuration" title="&#64;Configuration" class="at-link">@Configuration</a></code>表示该类是个配置类，<code><a href="https://github.com/Bean" title="&#64;Bean" class="at-link">@Bean</a></code>表示该方法返回一个 Bean。这样就把<code>TestService</code>作为 Bean 让 Spring 去管理了，在其他地方，我们如果需要使用该 Bean，和原来一样，直接使用<code><a href="https://github.com/Resource" title="&#64;Resource" class="at-link">@Resource</a></code>注解注入进来即可使用，非常方便。</p>
<pre><code class="lang-java">@Resource
private TestService testService;
</code></pre>
<p>另外，部署配置方面，原来 Spring 有多个 xml 和 properties配置，在 Spring Boot 中只需要个 application.yml即可。</p>
<h4 id="h4-2-2-4-"><a name="2.2.4 简化部署" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.4 简化部署</h4><p>在使用 Spring 时，项目部署时需要我们在服务器上部署 tomcat，然后把项目打成 war 包扔到 tomcat里，在使用 Spring Boot 后，我们不需要在服务器上去部署 tomcat，因为 Spring Boot 内嵌了 tomcat，我们只需要将项目打成 jar 包，使用 <code>java -jar xxx.jar</code>一键式启动项目。</p>
<p>另外，也降低对运行环境的基本要求，环境变量中有JDK即可。</p>
<h4 id="h4-2-2-5-"><a name="2.2.5 简化监控" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.5 简化监控</h4><p>我们可以引入 spring-boot-start-actuator 依赖，直接使用 REST 方式来获取进程的运行期性能参数，从而达到监控的目的，比较方便。但是 Spring Boot 只是个微框架，没有提供相应的服务发现与注册的配套功能，没有外围监控集成方案，没有外围安全管理方案，所以在微服务架构中，还需要 Spring Cloud 来配合一起使用。</p>
<h3 id="h3-2-3-"><a name="2.3 从未来发展的趋势来看" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3 从未来发展的趋势来看</h3><p>微服务是未来发展的趋势，项目会从传统架构慢慢转向微服务架构，因为微服务可以使不同的团队专注于更小范围的工作职责、使用独立的技术、更安全更频繁地部署。而 继承了 Spring 的优良特性，与 Spring 一脉相承，而且 支持各种REST API 的实现方式。Spring Boot 也是官方大力推荐的技术，可以看出，Spring Boot 是未来发展的一个大趋势。</p>
<h2 id="h2-3-"><a name="3. 本课程能学到什么" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 本课程能学到什么</h2><p>本课程使用目前 Spring Boot 最新版本2.0.3 RELEASE，课程文章均为作者在实际项目中剥离出来的场景和demo，目标是带领学习者快速上手 Spring Boot，将 Spring Boot 相关技术点快速运用在微服务项目中。全篇分为两部分：基础篇和进阶篇。  </p>
<p>基础篇（01—10课）主要介绍 Spring Boot 在项目中最常使用的一些功能点，旨在带领学习者快速掌握 Spring Boot 在开发时需要的知识点，能够把 Spring Boot 相关技术运用到实际项目架构中去。该部分以 Spring Boot 框架为主线，内容包括Json数据封装、日志记录、属性配置、MVC支持、在线文档、模板引擎、异常处理、AOP 处理、持久层集成等等。  </p>
<p>进阶篇（11—17课）主要是介绍 Spring Boot 在项目中拔高一些的技术点，包括集成的一些组件，旨在带领学习者在项目中遇到具体的场景时能够快速集成，完成对应的功能。该部分以 Spring Boot 框架为主线，内容包括拦截器、监听器、缓存、安全认证、分词插件、消息队列等等。  </p>
<p>认真读完该系列文章之后，学习者会快速了解并掌握 Spring Boot 在项目中最常用的技术点，作者课程的最后，会基于课程内容搭建一个 Spring Boot 项目的空架构，该架构也是从实际项目中剥离出来，学习者可以运用该架构于实际项目中，具备使用 Spring Boot 进行实际项目开发的能力。  </p>
<p>课程所有源码提供免费下载：<a href="https://gitee.com/eson15/springboot_study">下载地址</a>。</p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h2 id="h2-4-"><a name="4. 适合阅读的人群" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 适合阅读的人群</h2><p>本课程适合以下人群阅读：</p>
<ul>
<li>有一定的Java语言基础，了解Spring、Maven的在校学生或自学者</li><li>有传统项目经验，想往微服务方向发展的工作人员</li><li>热衷于新技术并对 Spring Boot 感兴趣的人员</li><li>希望了解 Spring Boot 2.0.3 的研究人员</li></ul>
<h2 id="h2-5-"><a name="5. 本课程开发环境和插件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5. 本课程开发环境和插件</h2><p>本课程的开发环境：</p>
<ul>
<li>开发工具：IDEA 2017</li><li>JDK版本： JDK 1.8</li><li>Spring Boot版本：2.0.3 RELEASE</li><li>Maven版本：3.5.2</li></ul>
<p>涉及到的插件：</p>
<ul>
<li>FastJson</li><li>Swagger2</li><li>Thymeleaf</li><li>MyBatis</li><li>Redis</li><li>ActiveMQ</li><li>Shiro</li><li>Lucence</li></ul>
<h2 id="h2-6-"><a name="6. 课程目录" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6. 课程目录</h2><ul>
<li>导读：课程概览</li><li>第01课：Spring Boot开发环境搭建和项目启动</li><li>第02课：Spring Boot返回Json数据及数据封装</li><li>第03课：Spring Boot使用slf4j进行日志记录</li><li>第04课：Spring Boot中的项目属性配置</li><li>第05课：Spring Boot中的MVC支持</li><li>第06课：Spring Boot集成Swagger2展现在线接口文档</li><li>第07课：Spring Boot集成Thymeleaf模板引擎</li><li>第08课：Spring Boot中的全局异常处理</li><li>第09课：Spring Boot中的切面AOP处理</li><li>第10课：Spring Boot中集成MyBatis</li><li>第11课：Spring Boot事务配置管理</li><li>第12课：Spring Boot中使用监听器</li><li>第13课：Spring Boot中使用拦截器</li><li>第14课：Spring Boot中集成Redis</li><li>第15课：Spring Boot中集成ActiveMQ</li><li>第16课：Spring Boot中集成Shiro</li><li>第17课：Spring Boot中结成Lucence</li><li>第18课：Spring Boot搭建实际项目开发中的架构</li></ul>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--01-spring-boot-"><a name="第01课：Spring Boot开发环境搭建和项目启动" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第01课：Spring Boot开发环境搭建和项目启动</h1><p>上一节对 SpringBoot 的特性做了一个介绍，本节主要对 <strong>jdk 的配置、Spring Boot工程的构建和项目的启动、Spring Boot 项目工程的结构做一下讲解和分析</strong>。</p>
<h2 id="h2-1-jdk-"><a name="1. jdk 的配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. jdk 的配置</h2><p>本课程是使用 IDEA 进行开发，在IDEA 中配置 jdk 的方式很简单，打开<code>File-&gt;Project Structure</code>，如下图所：</p>
<p><img src="https://images.gitbook.cn/9befde80-8659-11e8-9b0d-95de449dc107" alt="IDEA中配置jdk"></p>
<ol>
<li>选择 SDKs</li><li>在 JDK home path 中选择本地 jdk 的安装目录</li><li>在 Name 中为 jdk 自定义名字</li></ol>
<p>通过以上三步骤，即可导入本地安装的 jdk。如果是使用 STS 或者 eclipse 的朋友，可以通过两步骤添加：</p>
<ul>
<li><code>window-&gt;preference-&gt;java-&gt;Instralled JRES</code>来添加本地 jdk。</li><li><code>window--&gt;preference--&gt;java--&gt;Compiler</code>选择 jre，和 jdk 保持一致。</li></ul>
<h2 id="h2-2-spring-boot-"><a name="2. Spring Boot 工程的构建" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. Spring Boot 工程的构建</h2><h3 id="h3-2-1-idea-"><a name="2.1 IDEA 快速构建" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 IDEA 快速构建</h3><p>IDEA 中可以通过<code>File-&gt;New-&gt;Project</code>来快速构建 Spring Boot 工程。如下，选择 Spring Initializr，在 Project SDK 中选择刚刚我们导入的 jdk，点击 Next，到了项目的配置信息。</p>
<ul>
<li>Group：填企业域名，本课程使用com.itcodai</li><li>Artifact：填项目名称，本课程中每一课的工程名以<code>course+课号</code>命令，这里使用 course01</li><li>Dependencies：可以添加我们项目中所需要的依赖信息，根据实际情况来添加，本课程只需要选择 Web 即可。</li></ul>
<h3 id="h3-2-2-"><a name="2.2 官方构建" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 官方构建</h3><p>第二种方式可以通过官方构建，步骤如下：</p>
<ul>
<li>访问 <a href="http://start.spring.io/。">http://start.spring.io/。</a></li><li>在页面上输入相应的 Spring Boot 版本、Group 和 Artifact 信息以及项目依赖，然后创建项目。</li><li><img src="https://images.gitbook.cn/014a1ba0-865b-11e8-956e-f528114b28bd" alt="创建Spring Boot工程"></li><li>解压后，使用 IDEA 导入该 maven 工程：<code>File-&gt;New-&gt;Model from Existing Source</code>，然后选择解压后的项目文件夹即可。如果是使用 eclipse 的朋友，可以通过<code>Import-&gt;Existing Maven Projects-&gt;Next</code>，然后选择解压后的项目文件夹即可。</li></ul>
<h3 id="h3-2-3-maven-"><a name="2.3 maven配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3 maven配置</h3><p>创建了 Spring Boot 项目之后，需要进行 maven 配置。打开<code>File-&gt;settings</code>，搜索 maven，配置一下本地的 maven 信息。如下：</p>
<p><img src="https://images.gitbook.cn/2ff7b930-865b-11e8-8675-5537a701ae7d" alt="maven配置"></p>
<p>在 Maven home directory 中选择本地 Maven 的安装路径；在 User settings file 中选择本地 Maven 的配置文件所在路径。在配置文件中，我们配置一下国内阿里的镜像，这样在下载 maven 依赖时，速度很快。</p>
<pre><code class="lang-xml">&lt;mirror&gt;
    &lt;id&gt;nexus-aliyun&lt;/id&gt;
    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
    &lt;name&gt;Nexus aliyun&lt;/name&gt;
    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;
&lt;/mirror&gt;
</code></pre>
<p>如果是使用 eclipse 的朋友，可以通过<code>window--&gt;preference--&gt;Maven--&gt;User Settings</code>来配置，配置方式和上面一致。</p>
<h3 id="h3-2-4-"><a name="2.4 编码配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.4 编码配置</h3><p>同样地，新建项目后，我们一般都需要配置编码，这点非常重要，很多初学者都会忘记这一步，所以要养成良好的习惯。</p>
<p>IDEA 中，仍然是打开<code>File-&gt;settings</code>，搜索 encoding，配置一下本地的编码信息。如下：</p>
<p><img src="https://images.gitbook.cn/57564e60-865b-11e8-8a91-d70bc2d847c5" alt="编码配置"></p>
<p>如果是使用 eclipse 的朋友，有两个地方需要设置一下编码：</p>
<ul>
<li>window—&gt; perferences—&gt;General—&gt;Workspace，将Text file encoding改成utf-8</li><li>window—&gt;perferences—&gt;General—&gt;content types，选中Text，将Default encoding填入utf-8</li></ul>
<p>OK，编码设置完成即可启动项目工程了。</p>
<h2 id="h2-3-spring-boot-"><a name="3. Spring Boot 项目工程结构" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. Spring Boot 项目工程结构</h2><p>Spring Boot 项目总共有三个模块，如下图所示：</p>
<p><img src="https://images.gitbook.cn/8b32fa80-865b-11e8-9d13-03ea4b4d8504" alt="Spring Boot项目工程结构"></p>
<ul>
<li>src/main/java路径：主要编写业务程序</li><li>src/main/resources路径：存放静态文件和配置文件</li><li>src/test/java路径：主要编写测试程序</li></ul>
<p>默认情况下，如上图所示会创建一个启动类 Course01Application，该类上面有个<code><a href="https://github.com/SpringBootApplication" title="&#64;SpringBootApplication" class="at-link">@SpringBootApplication</a></code>注解，该启动类中有个 main 方法，没错，Spring Boot 启动只要运行该 main 方法即可，非常方便。另外，Spring Boot 内部集成了 tomcat，不需要我们人为手动去配置 tomcat，开发者只需要关注具体的业务逻辑即可。</p>
<p>到此为止，Spring Boot 就启动成功了，为了比较清楚的看到效果，我们写一个 Controller 来测试一下，如下：</p>
<pre><code class="lang-java">package com.itcodai.course01.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(&quot;/start&quot;)
public class StartController {

    @RequestMapping(&quot;/springboot&quot;)
    public String startSpringBoot() {
        return &quot;Welcome to the world of Spring Boot!&quot;;
    }
}
</code></pre>
<p>重新运行 main 方法启动项目，在浏览器中输入 <code>localhost:8080/start/springboot</code>，如果看到 <code>“Welcome to the world of Spring Boot!”</code>，那么恭喜你项目启动成功！Spring Boot 就是这么简单方便！端口号默认是8080，如果想要修改，可以在 application.yml 文件中使用 <code>server.port</code> 来人为指定端口，如8001端口：</p>
<pre><code class="lang-xml">server:
  port: 8001
</code></pre>
<h2 id="h2-4-"><a name="4. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 总结</h2><p>本节我们快速学习了如何在 IDEA 中导入 jdk，以及使用 IDEA 如何配置 maven 和编码，如何快速的创建和启动 Spring Boot 工程。IDEA 对 Spring Boot 的支持非常友好，建议大家使用 IDEA 进行 Spring Boot 的开发，从下一课开始，我们真正进入 Spring Boot 的学习中。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--02-spring-boot-json-"><a name="第02课：Spring Boot返回Json数据及数据封装" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第02课：Spring Boot返回Json数据及数据封装</h1><p>在项目开发中，接口与接口之间，前后端之间数据的传输都使用 Json 格式，在 Spring Boot 中，接口返回 Json 格式的数据很简单，在 Controller 中使用<code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code>注解即可返回 Json 格式的数据，<code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code>也是 Spring Boot 新增的一个注解，我们点进去看一下该注解都包含了哪些东西。</p>
<pre><code class="lang-java">@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Controller
@ResponseBody
public @interface RestController {
    String value() default &quot;&quot;;
}
</code></pre>
<p>可以看出， <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 注解包含了原来的 <code><a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a></code> 和 <code><a href="https://github.com/ResponseBody" title="&#64;ResponseBody" class="at-link">@ResponseBody</a></code> 注解，使用过 Spring 的朋友对 <code><a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a></code> 注解已经非常了解了，这里不再赘述， <code><a href="https://github.com/ResponseBody" title="&#64;ResponseBody" class="at-link">@ResponseBody</a></code> 注解是将返回的数据结构转换为 Json 格式。所以在默认情况下，使用了 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 注解即可将返回的数据结构转换成 Json 格式，Spring Boot 中默认使用的 Json 解析技术框架是 jackson。我们点开 pom.xml 中的 <code>spring-boot-starter-web</code> 依赖，可以看到一个 <code>spring-boot-starter-json</code> 依赖：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-json&lt;/artifactId&gt;
    &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<p>Spring Boot 中对依赖都做了很好的封装，可以看到很多 <code>spring-boot-starter-xxx</code> 系列的依赖，这是 Spring Boot 的特点之一，不需要人为去引入很多相关的依赖了，starter-xxx 系列直接都包含了所必要的依赖，所以我们再次点进去上面这个 <code>spring-boot-starter-json</code> 依赖，可以看到：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
    &lt;version&gt;2.9.6&lt;/version&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-datatype-jdk8&lt;/artifactId&gt;
    &lt;version&gt;2.9.6&lt;/version&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;
    &lt;version&gt;2.9.6&lt;/version&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-module-parameter-names&lt;/artifactId&gt;
    &lt;version&gt;2.9.6&lt;/version&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<p>到此为止，我们知道了 Spring Boot 中默认使用的 json 解析框架是 jackson。下面我们看一下默认的 jackson 框架对常用数据类型的转 Json 处理。</p>
<h2 id="h2-1-spring-boot-json-"><a name="1. Spring Boot 默认对Json的处理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. Spring Boot 默认对Json的处理</h2><p>在实际项目中，常用的数据结构无非有类对象、List对象、Map对象，我们看一下默认的 jackson 框架对这三个常用的数据结构转成 json 后的格式如何。</p>
<h3 id="h3-1-1-user-"><a name="1.1 创建 User 实体类" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.1 创建 User 实体类</h3><p>为了测试，我们需要创建一个实体类，这里我们就用 User 来演示。</p>
<pre><code class="lang-java">public class User {
    private Long id;
    private String username;
    private String password;
    /* 省略get、set和带参构造方法 */
}
</code></pre>
<h3 id="h3-1-2-controller-"><a name="1.2 创建Controller类" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.2 创建Controller类</h3><p>然后我们创建一个 Controller，分别返回 <code>User</code>对象、<code>List&lt;User&gt;</code> 和 <code>Map&lt;String, Object&gt;</code>。</p>
<pre><code class="lang-java">import com.itcodai.course02.entity.User;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping(&quot;/json&quot;)
public class JsonController {

    @RequestMapping(&quot;/user&quot;)
    public User getUser() {
        return new User(1, &quot;倪升武&quot;, &quot;123456&quot;);
    }

    @RequestMapping(&quot;/list&quot;)
    public List&lt;User&gt; getUserList() {
        List&lt;User&gt; userList = new ArrayList&lt;&gt;();
        User user1 = new User(1, &quot;倪升武&quot;, &quot;123456&quot;);
        User user2 = new User(2, &quot;达人课&quot;, &quot;123456&quot;);
        userList.add(user1);
        userList.add(user2);
        return userList;
    }

    @RequestMapping(&quot;/map&quot;)
    public Map&lt;String, Object&gt; getMap() {
        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(3);
        User user = new User(1, &quot;倪升武&quot;, &quot;123456&quot;);
        map.put(&quot;作者信息&quot;, user);
        map.put(&quot;博客地址&quot;, &quot;http://blog.itcodai.com&quot;);
        map.put(&quot;CSDN地址&quot;, &quot;http://blog.csdn.net/eson_15&quot;);
        map.put(&quot;粉丝数量&quot;, 4153);
        return map;
    }
}
</code></pre>
<h3 id="h3-1-3-json"><a name="1.3 测试不同数据类型返回的json" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.3 测试不同数据类型返回的json</h3><p>OK，写好了接口，分别返回了一个 User 对象、一个 List 集合和一个 Map 集合，其中 Map 集合中的 value 存的是不同的数据类型。接下来我们依次来测试一下效果。</p>
<p>在浏览器中输入：<code>localhost:8080/json/user</code> 返回 json 如下：</p>
<pre><code class="lang-json">{&quot;id&quot;:1,&quot;username&quot;:&quot;倪升武&quot;,&quot;password&quot;:&quot;123456&quot;}
</code></pre>
<p>在浏览器中输入：<code>localhost:8080/json/list</code> 返回 json 如下：</p>
<pre><code class="lang-json">[{&quot;id&quot;:1,&quot;username&quot;:&quot;倪升武&quot;,&quot;password&quot;:&quot;123456&quot;},{&quot;id&quot;:2,&quot;username&quot;:&quot;达人课&quot;,&quot;password&quot;:&quot;123456&quot;}]
</code></pre>
<p>在浏览器中输入：<code>localhost:8080/json/map</code> 返回 json 如下：</p>
<pre><code class="lang-json">{&quot;作者信息&quot;:{&quot;id&quot;:1,&quot;username&quot;:&quot;倪升武&quot;,&quot;password&quot;:&quot;123456&quot;},&quot;CSDN地址&quot;:&quot;http://blog.csdn.net/eson_15&quot;,&quot;粉丝数量&quot;:4153,&quot;博客地址&quot;:&quot;http://blog.itcodai.com&quot;}
</code></pre>
<p>可以看出，map 中不管是什么数据类型，都可以转成相应的 json 格式，这样就非常方便。</p>
<h3 id="h3-1-4-jackson-null-"><a name="1.4 jackson 中对null的处理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.4 jackson 中对null的处理</h3><p>在实际项目中，我们难免会遇到一些 null 值出现，我们转 json 时，是不希望有这些 null 出现的，比如我们期望所有的 null 在转 json 时都变成 “” 这种空字符串，那怎么做呢？在 Spring Boot 中，我们做一下配置即可，新建一个 jackson 的配置类：</p>
<pre><code class="lang-java">import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;

import java.io.IOException;

@Configuration
public class JacksonConfig {
    @Bean
    @Primary
    @ConditionalOnMissingBean(ObjectMapper.class)
    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {
        ObjectMapper objectMapper = builder.createXmlMapper(false).build();
        objectMapper.getSerializerProvider().setNullValueSerializer(new JsonSerializer&lt;Object&gt;() {
            @Override
            public void serialize(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                jsonGenerator.writeString(&quot;&quot;);
            }
        });
        return objectMapper;
    }
}
</code></pre>
<p>然后我们修改一下上面返回 map 的接口，将几个值改成 null 测试一下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/map&quot;)
public Map&lt;String, Object&gt; getMap() {
    Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(3);
    User user = new User(1, &quot;倪升武&quot;, null);
    map.put(&quot;作者信息&quot;, user);
    map.put(&quot;博客地址&quot;, &quot;http://blog.itcodai.com&quot;);
    map.put(&quot;CSDN地址&quot;, null);
    map.put(&quot;粉丝数量&quot;, 4153);
    return map;
}
</code></pre>
<p>重启项目，再次输入：<code>localhost:8080/json/map</code>，可以看到 jackson 已经将所有 null 字段转成了空字符串了。</p>
<pre><code class="lang-json">{&quot;作者信息&quot;:{&quot;id&quot;:1,&quot;username&quot;:&quot;倪升武&quot;,&quot;password&quot;:&quot;&quot;},&quot;CSDN地址&quot;:&quot;&quot;,&quot;粉丝数量&quot;:4153,&quot;博客地址&quot;:&quot;http://blog.itcodai.com&quot;}
</code></pre>
<h2 id="h2-2-fastjson-"><a name="2. 使用阿里巴巴FastJson的设置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. 使用阿里巴巴FastJson的设置</h2><h3 id="h3-2-1-jackson-fastjson-"><a name="2.1 jackson 和 fastJson 的对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 jackson 和 fastJson 的对比</h3><p>有很多朋友习惯于使用阿里巴巴的 fastJson 来做项目中 json 转换的相关工作，目前我们项目中使用的就是阿里的 fastJson，那么 jackson 和 fastJson 有哪些区别呢？根据网上公开的资料比较得到下表。</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">fastJson</th>
<th style="text-align:center">jackson</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">上手难易程度</td>
<td style="text-align:center">容易</td>
<td style="text-align:center">中等</td>
</tr>
<tr>
<td style="text-align:center">高级特性支持</td>
<td style="text-align:center">中等</td>
<td style="text-align:center">丰富</td>
</tr>
<tr>
<td style="text-align:center">官方文档、Example支持</td>
<td style="text-align:center">中文</td>
<td style="text-align:center">英文</td>
</tr>
<tr>
<td style="text-align:center">处理json速度</td>
<td style="text-align:center">略快</td>
<td style="text-align:center">快</td>
</tr>
</tbody>
</table>
<p>关于 fastJson 和 jackson 的对比，网上有很多资料可以查看，主要是根据自己实际项目情况来选择合适的框架。从扩展上来看，fastJson 没有 jackson 灵活，从速度或者上手难度来看，fastJson 可以考虑，我们项目中目前使用的是阿里的 fastJson，挺方便的。</p>
<h3 id="h3-2-2-fastjson-"><a name="2.2 fastJson依赖导入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 fastJson依赖导入</h3><p>使用 fastJson 需要导入依赖，本课程使用 1.2.35 版本，依赖如下：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
    &lt;version&gt;1.2.35&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="h3-2-2-fastjson-null"><a name="2.2 使用 fastJson 处理 null" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 使用 fastJson 处理 null</h3><p>使用 fastJson 时，对 null 的处理和 jackson 有些不同，需要继承  <code>WebMvcConfigurationSupport</code> 类，然后覆盖 <code>configureMessageConverters</code> 方法，在方法中，我们可以选择对要实现 null 转换的场景，配置好即可。如下：</p>
<pre><code class="lang-java">import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.support.config.FastJsonConfig;
import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

@Configuration
public class fastJsonConfig extends WebMvcConfigurationSupport {

    /**
     * 使用阿里 FastJson 作为JSON MessageConverter
     * @param converters
     */
    @Override
    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {
        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();
        FastJsonConfig config = new FastJsonConfig();
        config.setSerializerFeatures(
                // 保留map空的字段
                SerializerFeature.WriteMapNullValue,
                // 将String类型的null转成&quot;&quot;
                SerializerFeature.WriteNullStringAsEmpty,
                // 将Number类型的null转成0
                SerializerFeature.WriteNullNumberAsZero,
                // 将List类型的null转成[]
                SerializerFeature.WriteNullListAsEmpty,
                // 将Boolean类型的null转成false
                SerializerFeature.WriteNullBooleanAsFalse,
                // 避免循环引用
                SerializerFeature.DisableCircularReferenceDetect);

        converter.setFastJsonConfig(config);
        converter.setDefaultCharset(Charset.forName(&quot;UTF-8&quot;));
        List&lt;MediaType&gt; mediaTypeList = new ArrayList&lt;&gt;();
        // 解决中文乱码问题，相当于在Controller上的@RequestMapping中加了个属性produces = &quot;application/json&quot;
        mediaTypeList.add(MediaType.APPLICATION_JSON);
        converter.setSupportedMediaTypes(mediaTypeList);
        converters.add(converter);
    }
}
</code></pre>
<h2 id="h2-3-"><a name="3. 封装统一返回的数据结构" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 封装统一返回的数据结构</h2><p>以上是 Spring Boot 返回 json 的几个代表的例子，但是在实际项目中，除了要封装数据之外，我们往往需要在返回的 json 中添加一些其他信息，比如返回一些状态码 code ，返回一些 msg 给调用者，这样调用者可以根据 code 或者 msg 做一些逻辑判断。所以在实际项目中，我们需要封装一个统一的 json 返回结构存储返回信息。 </p>
<h3 id="h3-3-1-json-"><a name="3.1 定义统一的 json 结构" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1 定义统一的 json 结构</h3><p>由于封装的 json 数据的类型不确定，所以在定义统一的 json 结构时，我们需要用到泛型。统一的 json 结构中属性包括数据、状态码、提示信息即可，构造方法可以根据实际业务需求做相应的添加即可，一般来说，应该有默认的返回结构，也应该有用户指定的返回结构。如下：</p>
<pre><code class="lang-java">public class JsonResult&lt;T&gt; {

    private T data;
    private String code;
    private String msg;

    /**
     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！
     */
    public JsonResult() {
        this.code = &quot;0&quot;;
        this.msg = &quot;操作成功！&quot;;
    }

    /**
     * 若没有数据返回，可以人为指定状态码和提示信息
     * @param code
     * @param msg
     */
    public JsonResult(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }

    /**
     * 有数据返回时，状态码为0，默认提示信息为：操作成功！
     * @param data
     */
    public JsonResult(T data) {
        this.data = data;
        this.code = &quot;0&quot;;
        this.msg = &quot;操作成功！&quot;;
    }

    /**
     * 有数据返回，状态码为0，人为指定提示信息
     * @param data
     * @param msg
     */
    public JsonResult(T data, String msg) {
        this.data = data;
        this.code = &quot;0&quot;;
        this.msg = msg;
    }
    // 省略get和set方法
}
</code></pre>
<h3 id="h3-3-2-controller-"><a name="3.2 修改 Controller 中的返回值类型及测试" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2 修改 Controller 中的返回值类型及测试</h3><p>由于 JsonResult 使用了泛型，所以所有的返回值类型都可以使用该统一结构，在具体的场景将泛型替换成具体的数据类型即可，非常方便，也便于维护。在实际项目中，还可以继续封装，比如状态码和提示信息可以定义一个枚举类型，以后我们只需要维护这个枚举类型中的数据即可（在本课程中就不展开了）。根据以上的 JsonResult，我们改写一下 Controller，如下：</p>
<pre><code class="lang-java">@RestController
@RequestMapping(&quot;/jsonresult&quot;)
public class JsonResultController {

    @RequestMapping(&quot;/user&quot;)
    public JsonResult&lt;User&gt; getUser() {
        User user = new User(1, &quot;倪升武&quot;, &quot;123456&quot;);
        return new JsonResult&lt;&gt;(user);
    }

    @RequestMapping(&quot;/list&quot;)
    public JsonResult&lt;List&gt; getUserList() {
        List&lt;User&gt; userList = new ArrayList&lt;&gt;();
        User user1 = new User(1, &quot;倪升武&quot;, &quot;123456&quot;);
        User user2 = new User(2, &quot;达人课&quot;, &quot;123456&quot;);
        userList.add(user1);
        userList.add(user2);
        return new JsonResult&lt;&gt;(userList, &quot;获取用户列表成功&quot;);
    }

    @RequestMapping(&quot;/map&quot;)
    public JsonResult&lt;Map&gt; getMap() {
        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(3);
        User user = new User(1, &quot;倪升武&quot;, null);
        map.put(&quot;作者信息&quot;, user);
        map.put(&quot;博客地址&quot;, &quot;http://blog.itcodai.com&quot;);
        map.put(&quot;CSDN地址&quot;, null);
        map.put(&quot;粉丝数量&quot;, 4153);
        return new JsonResult&lt;&gt;(map);
    }
}
</code></pre>
<p>我们重新在浏览器中输入：<code>localhost:8080/jsonresult/user</code> 返回 json 如下：</p>
<pre><code class="lang-json">{&quot;code&quot;:&quot;0&quot;,&quot;data&quot;:{&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;倪升武&quot;},&quot;msg&quot;:&quot;操作成功！&quot;}
</code></pre>
<p>输入：<code>localhost:8080/jsonresult/list</code>，返回 json 如下：</p>
<pre><code class="lang-json">{&quot;code&quot;:&quot;0&quot;,&quot;data&quot;:[{&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;倪升武&quot;},{&quot;id&quot;:2,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;达人课&quot;}],&quot;msg&quot;:&quot;获取用户列表成功&quot;}
</code></pre>
<p>输入：<code>localhost:8080/jsonresult/map</code>，返回 json 如下：</p>
<pre><code class="lang-json">{&quot;code&quot;:&quot;0&quot;,&quot;data&quot;:{&quot;作者信息&quot;:{&quot;id&quot;:1,&quot;password&quot;:&quot;&quot;,&quot;username&quot;:&quot;倪升武&quot;},&quot;CSDN地址&quot;:null,&quot;粉丝数量&quot;:4153,&quot;博客地址&quot;:&quot;http://blog.itcodai.com&quot;},&quot;msg&quot;:&quot;操作成功！&quot;}
</code></pre>
<p>通过封装，我们不但将数据通过 json 传给前端或者其他接口，还带上了状态码和提示信息，这在实际项目场景中应用非常广泛。</p>
<h2 id="h2-4-"><a name="4. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 总结</h2><p>本节主要对 Spring Boot 中 json 数据的返回做了详细的分析，从 Spring Boot 默认的 jackson 框架到阿里巴巴的 fastJson 框架，分别对它们的配置做了相应的讲解。另外，结合实际项目情况，总结了实际项目中使用的 json 封装结构体，加入了状态码和提示信息，使得返回的 json 数据信息更加完整。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--03-spring-boot-slf4j-"><a name="第03课：Spring Boot使用slf4j进行日志记录" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第03课：Spring Boot使用slf4j进行日志记录</h1><p>在开发中，我们经常使用 <code>System.out.println()</code> 来打印一些信息，但是这样不好，因为大量的使用 <code>System.out</code> 会增加资源的消耗。我们实际项目中使用的是 slf4j 的 logback 来输出日志，效率挺高的，Spring Boot 提供了一套日志系统，logback 是最优的选择。</p>
<h2 id="h2-1-slf4j-"><a name="1. slf4j 介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. slf4j 介绍</h2><p>引用百度百科里的一段话：</p>
<blockquote>
<p>SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。</p>
</blockquote>
<p>这段的大概意思是：你只需要按统一的方式写记录日志的代码，而无需关心日志是通过哪个日志系统，以什么风格输出的。因为它们取决于部署项目时绑定的日志系统。例如，在项目中使用了 slf4j 记录日志，并且绑定了 log4j（即导入相应的依赖），则日志会以 log4j 的风格输出；后期需要改为以 logback 的风格输出日志，只需要将 log4j 替换成 logback 即可，不用修改项目中的代码。这对于第三方组件的引入的不同日志系统来说几乎零学习成本，况且它的优点不仅仅这一个而已，还有简洁的占位符的使用和日志级别的判断。</p>
<p>正因为 sfl4j 有如此多的优点，阿里巴巴已经将 slf4j 作为他们的日志框架了。在《阿里巴巴Java开发手册(正式版)》中，日志规约一项第一条就强制要求使用 slf4j：</p>
<blockquote>
<p>1.【强制】应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架SLF4J中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>
</blockquote>
<p>“强制”两个字体现出了 slf4j 的优势，所以建议在实际项目中，使用 slf4j 作为自己的日志框架。使用 slf4j 记录日志非常简单，直接使用  LoggerFactory 创建即可。</p>
<pre><code class="lang-java">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Test {
    private static final Logger logger = LoggerFactory.getLogger(Test.class);
    // ……
}
</code></pre>
<h2 id="h2-2-application-yml-"><a name="2. application.yml 中对日志的配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. application.yml 中对日志的配置</h2><p>Spring Boot 对 slf4j 支持的很好，内部已经集成了 slf4j，一般我们在使用的时候，会对slf4j 做一下配置。<code>application.yml</code> 文件是 Spring Boot 中唯一一个需要配置的文件，一开始创建工程的时候是 <code>application.properties</code> 文件，个人比较细化用 yml 文件，因为 yml 文件的层次感特别好，看起来更直观，但是 yml 文件对格式要求比较高，比如英文冒号后面必须要有个空格，否则项目估计无法启动，而且也不报错。用 properties 还是 yml 视个人习惯而定，都可以。本课程使用 yml。</p>
<p>我们看一下 application.yml 文件中对日志的配置：</p>
<pre><code class="lang-xml">logging:
  config: logback.xml
  level:
    com.itcodai.course03.dao: trace
</code></pre>
<p><code>logging.config</code> 是用来指定项目启动的时候，读取哪个配置文件，这里指定的是日志配置文件是根路径下的 <code>logback.xml</code> 文件，关于日志的相关配置信息，都放在 <code>logback.xml</code> 文件中了。<code>logging.level</code> 是用来指定具体的 mapper 中日志的输出级别，上面的配置表示 <code>com.itcodai.course03.dao</code> 包下的所有 mapper 日志输出级别为 trace，会将操作数据库的 sql 打印出来，开发时设置成 trace 方便定位问题，在生产环境上，将这个日志级别再设置成 error 级别即可（本节课不讨论 mapper 层，在后面 Spring Boot 集成 MyBatis 时再详细讨论）。</p>
<p>常用的日志级别按照从高到低依次为：ERROR、WARN、INFO、DEBUG。</p>
<h2 id="h2-3-logback-xml-"><a name="3. logback.xml 配置文件解析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. logback.xml 配置文件解析</h2><p>在上面 <code>application.yml</code> 文件中，我们指定了日志配置文件 <code>logback.xml</code>，<code>logback.xml</code> 文件中主要用来做日志的相关配置。在 <code>logback.xml</code> 中，我们可以定义日志输出的格式、路径、控制台输出格式、文件大小、保存时长等等。下面来分析一下：</p>
<h3 id="h3-3-1-"><a name="3.1 定义日志输出格式和存储路径" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1 定义日志输出格式和存储路径</h3><pre><code class="lang-xml">&lt;configuration&gt;
    &lt;property name=&quot;LOG_PATTERN&quot; value=&quot;%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&quot; /&gt;
    &lt;property name=&quot;FILE_PATH&quot; value=&quot;D:/logs/course03/demo.%d{yyyy-MM-dd}.%i.log&quot; /&gt;
&lt;/configuration&gt;
</code></pre>
<p>我们来看一下这个定义的含义：首先定义一个格式，命名为 “LOG_PATTERN”，该格式中 <code>%date</code> 表示日期，<code>%thread</code> 表示线程名，<code>%-5level</code> 表示级别从左显示5个字符宽度，<code>%logger{36}</code>  表示 logger 名字最长36个字符，<code>%msg</code> 表示日志消息，<code>%n</code> 是换行符。</p>
<p>然后再定义一下名为 “FILE_PATH” 文件路径，日志都会存储在该路径下。<code>%i</code> 表示第 i 个文件，当日志文件达到指定大小时，会将日志生成到新的文件里，这里的 i 就是文件索引，日志文件允许的大小可以设置，下面会讲解。这里需要注意的是，不管是 windows 系统还是 Linux 系统，日志存储的路径必须要是绝对路径。</p>
<h3 id="h3-3-2-"><a name="3.2 定义控制台输出" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2 定义控制台输出</h3><pre><code class="lang-xml">&lt;configuration&gt;
    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;!-- 按照上面配置的LOG_PATTERN来打印日志 --&gt;
            &lt;pattern&gt;${LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
    &lt;/appender&gt;
&lt;/configuration&gt;
</code></pre>
<p>使用 <code>&lt;appender&gt;</code> 节点设置个控制台输出（<code>class=&quot;ch.qos.logback.core.ConsoleAppender&quot;</code>）的配置，定义为 “CONSOLE”。使用上面定义好的输出格式（LOG_PATTERN）来输出，使用 <code>${}</code> 引用进来即可。</p>
<h3 id="h3-3-3-"><a name="3.3 定义日志文件的相关参数" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3 定义日志文件的相关参数</h3><pre><code class="lang-xml">&lt;configuration&gt;
    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;!-- 按照上面配置的FILE_PATH路径来保存日志 --&gt;
            &lt;fileNamePattern&gt;${FILE_PATH}&lt;/fileNamePattern&gt;
            &lt;!-- 日志保存15天 --&gt;
            &lt;maxHistory&gt;15&lt;/maxHistory&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;!-- 单个日志文件的最大，超过则新建日志文件存储 --&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;
        &lt;/rollingPolicy&gt;

        &lt;encoder&gt;
            &lt;!-- 按照上面配置的LOG_PATTERN来打印日志 --&gt;
            &lt;pattern&gt;${LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
    &lt;/appender&gt;
&lt;/configuration&gt;
</code></pre>
<p>使用 <code>&lt;appender&gt;</code> 定义一个名为 “FILE” 的文件配置，主要是配置日志文件保存的时间、单个日志文件存储的大小、以及文件保存的路径和日志的输出格式。</p>
<h3 id="h3-3-4-"><a name="3.4 定义日志输出级别" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4 定义日志输出级别</h3><pre><code class="lang-xml">&lt;configuration&gt;
    &lt;logger name=&quot;com.itcodai.course03&quot; level=&quot;INFO&quot; /&gt;
    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;FILE&quot; /&gt;
    &lt;/root&gt;
&lt;/configuration&gt;
</code></pre>
<p>有了上面那些定义后，最后我们使用 <code>&lt;logger&gt;</code> 来定义一下项目中默认的日志输出级别，这里定义级别为 INFO，然后针对 INFO 级别的日志，使用 <code>&lt;root&gt;</code> 引用上面定义好的控制台日志输出和日志文件的参数。这样 logback.xml 文件中的配置就设置完了。</p>
<h2 id="h2-4-logger-"><a name="4. 使用Logger在项目中打印日志" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 使用Logger在项目中打印日志</h2><p>在代码中，我们一般使用 Logger 对象来打印出一些 log 信息，可以指定打印出的日志级别，也支持占位符，很方便。</p>
<pre><code class="lang-java">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(&quot;/test&quot;)
public class TestController {

    private final static Logger logger = LoggerFactory.getLogger(TestController.class);

    @RequestMapping(&quot;/log&quot;)
    public String testLog() {
        logger.debug(&quot;=====测试日志debug级别打印====&quot;);
        logger.info(&quot;======测试日志info级别打印=====&quot;);
        logger.error(&quot;=====测试日志error级别打印====&quot;);
        logger.warn(&quot;======测试日志warn级别打印=====&quot;);

        // 可以使用占位符打印出一些参数信息
        String str1 = &quot;blog.itcodai.com&quot;;
        String str2 = &quot;blog.csdn.net/eson_15&quot;;
        logger.info(&quot;======倪升武的个人博客：{}；倪升武的CSDN博客：{}&quot;, str1, str2);

        return &quot;success&quot;;
    }
}
</code></pre>
<p>启动该项目，在浏览器中输入 <code>localhost:8080/test/log</code> 后可以看到控制台的日志记录：</p>
<blockquote>
<p>======测试日志info级别打印=====<br>=====测试日志error级别打印====<br>======测试日志warn级别打印=====<br>======倪升武的个人博客：blog.itcodai.com；倪升武的CSDN博客：blog.csdn.net/eson_15</p>
</blockquote>
<p>因为 INFO 级别比 DEBUG 级别高，所以 debug 这条没有打印出来，如果将 logback.xml 中的日志级别设置成 DEBUG，那么四条语句都会打印出来，这个大家自己去测试了。同时可以打开 D:\logs\course03\ 目录，里面有刚刚项目启动，以后后面生成的所有日志记录。在项目部署后，我们大部分都是通过查看日志文件来定位问题。</p>
<h2 id="h2-5-"><a name="5. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5. 总结</h2><p>本节课主要对 slf4j 做了一个简单的介绍，并且对 Spring Boot 中如何使用 slf4j 输出日志做了详细的说明，着重分析了 <code>logback.xml</code> 文件中对日志相关信息的配置，包括日志的不同级别。最后针对这些配置，在代码中使用 Logger 打印出一些进行测试。在实际项目中，这些日志都是排查问题的过程中非常重要的资料。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--04-spring-boot-"><a name="第04课：Spring Boot中的项目属性配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第04课：Spring Boot中的项目属性配置</h1><p>我们知道，在项目中，很多时候需要用到一些配置的信息，这些信息可能在测试环境和生产环境下会有不同的配置，后面根据实际业务情况有可能还会做修改，针对这种情况，我们不能将这些配置在代码中写死，最好就是写到配置文件中。比如可以把这些信息写到 <code>application.yml</code> 文件中。   </p>
<h2 id="h2-1-"><a name="1. 少量配置信息的情形" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. 少量配置信息的情形</h2><p>举个例子，在微服务架构中，最常见的就是某个服务需要调用其他服务来获取其提供的相关信息，那么在该服务的配置文件中需要配置被调用的服务地址，比如在当前服务里，我们需要调用订单微服务获取订单相关的信息，假设 订单服务的端口号是 8002，那我们可以做如下配置：</p>
<pre><code class="lang-xml">server:
  port: 8001

# 配置微服务的地址
url:
  # 订单微服务的地址
  orderUrl: http://localhost:8002
</code></pre>
<p>然后在业务代码中如何获取到这个配置的订单服务地址呢？我们可以使用 <code><a href="https://github.com/Value" title="&#64;Value" class="at-link">@Value</a></code> 注解来解决。在对应的类中加上一个属性，在属性上使用 <code><a href="https://github.com/Value" title="&#64;Value" class="at-link">@Value</a></code> 注解即可获取到配置文件中的配置信息，如下：</p>
<pre><code class="lang-java">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(&quot;/test&quot;)
public class ConfigController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigController.class);

    @Value(&quot;${url.orderUrl}&quot;)
    private String orderUrl;

    @RequestMapping(&quot;/config&quot;)
    public String testConfig() {
        LOGGER.info(&quot;=====获取的订单服务地址为：{}&quot;, orderUrl);
        return &quot;success&quot;;
    }
}
</code></pre>
<p><code><a href="https://github.com/Value" title="&#64;Value" class="at-link">@Value</a></code> 注解上通过 <code>${key}</code> 即可获取配置文件中和 key 对应的 value 值。我们启动一下项目，在浏览器中输入 <code>localhost:8080/test/config</code> 请求服务后，可以看到控制台会打印出订单服务的地址：</p>
<pre><code>=====获取的订单服务地址为：http://localhost:8002
</code></pre><p>说明我们成功获取到了配置文件中的订单微服务地址，在实际项目中也是这么用的，后面如果因为服务器部署的原因，需要修改某个服务的地址，那么只要在配置文件中修改即可。  </p>
<h2 id="h2-2-"><a name="2. 多个配置信息的情形" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. 多个配置信息的情形</h2><p>这里再引申一个问题，随着业务复杂度的增加，一个项目中可能会有越来越多的微服务，某个模块可能需要调用多个微服务获取不同的信息，那么就需要在配置文件中配置多个微服务的地址。可是，在需要调用这些微服务的代码中，如果这样一个个去使用 <code><a href="https://github.com/Value" title="&#64;Value" class="at-link">@Value</a></code> 注解引入相应的微服务地址的话，太过于繁琐，也不科学。</p>
<p>所以，在实际项目中，业务繁琐，逻辑复杂的情况下，需要考虑封装一个或多个配置类。举个例子：假如在当前服务中，某个业务需要同时调用订单微服务、用户微服务和购物车微服务，分别获取订单、用户和购物车相关信息，然后对这些信息做一定的逻辑处理。那么在配置文件中，我们需要将这些微服务的地址都配置好：</p>
<pre><code class="lang-xml"># 配置多个微服务的地址
url:
  # 订单微服务的地址
  orderUrl: http://localhost:8002
  # 用户微服务的地址
  userUrl: http://localhost:8003
  # 购物车微服务的地址
  shoppingUrl: http://localhost:8004
</code></pre>
<p>也许实际业务中，远远不止这三个微服务，甚至十几个都有可能。对于这种情况，我们可以先定义一个 <code>MicroServiceUrl</code> 类来专门保存微服务的 url，如下：</p>
<pre><code class="lang-java">@Component
@ConfigurationProperties(prefix = &quot;url&quot;)
public class MicroServiceUrl {

    private String orderUrl;
    private String userUrl;
    private String shoppingUrl;
    // 省去get和set方法
}
</code></pre>
<p>细心的朋友应该可以看到，使用 <code><a href="https://github.com/ConfigurationProperties" title="&#64;ConfigurationProperties" class="at-link">@ConfigurationProperties</a></code> 注解并且使用 prefix 来指定一个前缀，然后该类中的属性名就是配置中去掉前缀后的名字，一一对应即可。即：前缀名 + 属性名就是配置文件中定义的 key。同时，该类上面需要加上 <code><a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a></code> 注解，把该类作为组件放到Spring容器中，让 Spring 去管理，我们使用的时候直接注入即可。</p>
<p>需要注意的是，使用 <code><a href="https://github.com/ConfigurationProperties" title="&#64;ConfigurationProperties" class="at-link">@ConfigurationProperties</a></code> 注解需要导入它的依赖：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
    &lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;
</code></pre>
<p>OK，到此为止，我们将配置写好了，接下来写个 Controller 来测试一下。此时，不需要在代码中一个个引入这些微服务的 url 了，直接通过 <code><a href="https://github.com/Resource" title="&#64;Resource" class="at-link">@Resource</a></code> 注解将刚刚写好配置类注入进来即可使用了，非常方便。如下：</p>
<pre><code class="lang-java">@RestController
@RequestMapping(&quot;/test&quot;)
public class TestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);

    @Resource
    private MicroServiceUrl microServiceUrl;

    @RequestMapping(&quot;/config&quot;)
    public String testConfig() {
        LOGGER.info(&quot;=====获取的订单服务地址为：{}&quot;, microServiceUrl.getOrderUrl());
        LOGGER.info(&quot;=====获取的用户服务地址为：{}&quot;, microServiceUrl.getUserUrl());
        LOGGER.info(&quot;=====获取的购物车服务地址为：{}&quot;, microServiceUrl.getShoppingUrl());

        return &quot;success&quot;;
    }
}
</code></pre>
<p>再次启动项目，请求一下可以看到，控制台打印出如下信息，说明配置文件生效，同时正确获取配置文件内容：</p>
<pre><code>=====获取的订单服务地址为：http://localhost:8002
=====获取的订单服务地址为：http://localhost:8002
=====获取的用户服务地址为：http://localhost:8003
=====获取的购物车服务地址为：http://localhost:8004
</code></pre><h2 id="h2-3-"><a name="3. 指定项目配置文件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 指定项目配置文件</h2><p>我们知道，在实际项目中，一般有两个环境：开发环境和生产环境。开发环境中的配置和生产环境中的配置往往不同，比如：环境、端口、数据库、相关地址等等。我们不可能在开发环境调试好之后，部署到生产环境后，又要将配置信息全部修改成生产环境上的配置，这样太麻烦，也不科学。</p>
<p>最好的解决方法就是开发环境和生产环境都有一套对用的配置信息，然后当我们在开发时，指定读取开发环境的配置，当我们将项目部署到服务器上之后，再指定去读取生产环境的配置。</p>
<p>我们新建两个配置文件： <code>application-dev.yml</code> 和 <code>application-pro.yml</code>，分别用来对开发环境和生产环境进行相关配置。这里为了方便，我们分别设置两个访问端口号，开发环境用 8001，生产环境用 8002.</p>
<pre><code class="lang-xml"># 开发环境配置文件
server:
  port: 8001
</code></pre>
<pre><code class="lang-xml"># 开发环境配置文件
server:
  port: 8002
</code></pre>
<p>然后在 <code>application.yml</code> 文件中指定读取哪个配置文件即可。比如我们在开发环境下，指定读取 <code>applicationn-dev.yml</code> 文件，如下：</p>
<pre><code class="lang-xml">spring:
  profiles:
    active:
    - dev
</code></pre>
<p>这样就可以在开发的时候，指定读取  <code>application-dev.yml</code> 文件，访问的时候使用 8001 端口，部署到服务器后，只需要将 <code>application.yml</code> 中指定的文件改成 <code>application-pro.yml</code> 即可，然后使用 8002 端口访问，非常方便。</p>
<h2 id="h2-4-"><a name="4. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 总结</h2><p>本节课主要讲解了 Spring Boot 中如何在业务代码中读取相关配置，包括单一配置和多个配置项，在微服务中，这种情况非常常见，往往会有很多其他微服务需要调用，所以封装一个配置类来接收这些配置是个很好的处理方式。除此之外，例如数据库相关的连接参数等等，也可以放到一个配置类中，其他遇到类似的场景，都可以这么处理。最后介绍了开发环境和生产环境配置的快速切换方式，省去了项目部署时，诸多配置信息的修改。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--05-spring-boot-mvc-"><a name="第05课：Spring Boot中的MVC支持" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第05课：Spring Boot中的MVC支持</h1><p>Spring Boot 的 MVC 支持主要来介绍实际项目中最常用的几个注解，包括 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code>、 <code><a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a></code>、<code><a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a></code>、<code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 以及 <code><a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a></code>。主要介绍这几个注解常用的使用方式和特点。  </p>
<h2 id="h2-1-restcontroller"><a name="1. @RestController" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. <a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></h2><p><code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 是 Spring Boot 新增的一个注解，我们看一下该注解都包含了哪些东西。</p>
<pre><code class="lang-java">@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Controller
@ResponseBody
public @interface RestController {
    String value() default &quot;&quot;;
}
</code></pre>
<p>可以看出， <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 注解包含了原来的 <code><a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a></code> 和 <code><a href="https://github.com/ResponseBody" title="&#64;ResponseBody" class="at-link">@ResponseBody</a></code> 注解，使用过 Spring 的朋友对 <code><a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a></code> 注解已经非常了解了，这里不再赘述， <code><a href="https://github.com/ResponseBody" title="&#64;ResponseBody" class="at-link">@ResponseBody</a></code> 注解是将返回的数据结构转换为 Json 格式。所以 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 可以看作是 <code><a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a></code> 和 <code><a href="https://github.com/ResponseBody" title="&#64;ResponseBody" class="at-link">@ResponseBody</a></code> 的结合体，相当于偷个懒，我们使用 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 之后就不用再使用 <code><a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a></code> 了。但是需要注意一个问题：如果是前后端分离，不用模板渲染的话，比如 Thymeleaf，这种情况下是可以直接使用<code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 将数据以 json 格式传给前端，前端拿到之后解析；但如果不是前后端分离，需要使用模板来渲染的话，一般 Controller 中都会返回到具体的页面，那么此时就不能使用<code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code>了，比如：</p>
<pre><code class="lang-java">public String getUser() {
    return &quot;user&quot;;
}
</code></pre>
<p>其实是需要返回到 user.html 页面的，如果使用 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 的话，会将 user 作为字符串返回的，所以这时候我们需要使用 <code><a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a></code> 注解。这在下一节 Spring Boot 集成 Thymeleaf 模板引擎中会再说明。</p>
<h2 id="h2-2-requestmapping"><a name="2. @RequestMapping" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. <a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a></h2><p><code><a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a></code> 是一个用来处理请求地址映射的注解，它可以用于类上，也可以用于方法上。在类的级别上的注解会将一个特定请求或者请求模式映射到一个控制器之上，表示类中的所有响应请求的方法都是以该地址作为父路径；在方法的级别表示进一步指定到处理方法的映射关系。</p>
<p>该注解有6个属性，一般在项目中比较常用的有三个属性：value、method 和 produces。</p>
<ul>
<li>value 属性：指定请求的实际地址，value 可以省略不写</li><li>method 属性：指定请求的类型，主要有 GET、PUT、POST、DELETE，默认为 GET</li><li>produces属性：指定返回内容类型，如 produces = “application/json; charset=UTF-8”</li></ul>
<p><code><a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a></code> 注解比较简单，举个例子：</p>
<pre><code class="lang-java">@RestController
@RequestMapping(value = &quot;/test&quot;, produces = &quot;application/json; charset=UTF-8&quot;)
public class TestController {

    @RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)
    public String testGet() {
        return &quot;success&quot;;
    }
}
</code></pre>
<p>这个很简单，启动项目在浏览器中输入 <code>localhost:8080/test/get</code> 测试一下即可。</p>
<p>针对四种不同的请求方式，是有相应注解的，不用每次在 <code><a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a></code> 注解中加 method 属性来指定，上面的 GET 方式请求可以直接使用 <code><a href="https://github.com/GetMapping" title="&#64;GetMapping" class="at-link">@GetMapping</a>(&quot;/get&quot;)</code> 注解，效果一样。相应地，PUT 方式、POST 方式和 DELETE 方式对应的注解分别为 <code><a href="https://github.com/PutMapping" title="&#64;PutMapping" class="at-link">@PutMapping</a></code>、<code><a href="https://github.com/PostMapping" title="&#64;PostMapping" class="at-link">@PostMapping</a></code> 和 <code>DeleteMapping</code>。</p>
<h2 id="h2-3-pathvariable"><a name="3. @PathVariable" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. <a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a></h2><p><code><a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a></code> 注解主要是用来获取 url 参数，Spring Boot 支持 restfull 风格的 url，比如一个 GET 请求携带一个参数 id 过来，我们将 id 作为参数接收，可以使用 <code><a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a></code> 注解。如下：</p>
<pre><code class="lang-java">@GetMapping(&quot;/user/{id}&quot;)
public String testPathVariable(@PathVariable Integer id) {
    System.out.println(&quot;获取到的id为：&quot; + id);
    return &quot;success&quot;;
}
</code></pre>
<p>这里需要注意一个问题，如果想要 url 中占位符中的 id 值直接赋值到参数 id 中，需要保证 url 中的参数和方法接收参数一致，否则就无法接收。如果不一致的话，其实也可以解决，需要用 <code><a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a></code> 中的 value 属性来指定对应关系。如下：</p>
<pre><code class="lang-java">@RequestMapping(&quot;/user/{idd}&quot;)
public String testPathVariable(@PathVariable(value = &quot;idd&quot;) Integer id) {
    System.out.println(&quot;获取到的id为：&quot; + id);
    return &quot;success&quot;;
}
</code></pre>
<p>对于访问的 url，占位符的位置可以在任何位置，不一定非要在最后，比如这样也行：<code>/xxx/{id}/user</code>。另外，url 也支持多个占位符，方法参数使用同样数量的参数来接收，原理和一个参数是一样的，例如：</p>
<pre><code class="lang-java">@GetMapping(&quot;/user/{idd}/{name}&quot;)
    public String testPathVariable(@PathVariable(value = &quot;idd&quot;) Integer id, @PathVariable String name) {
        System.out.println(&quot;获取到的id为：&quot; + id);
        System.out.println(&quot;获取到的name为：&quot; + name);
        return &quot;success&quot;;
    }
</code></pre>
<p>运行项目，在浏览器中请求 <code>localhost:8080/test/user/2/zhangsan</code> 可以看到控制台输出如下信息：</p>
<pre><code>获取到的id为：2
获取到的name为：zhangsan
</code></pre><p>所以支持多个参数的接收。同样地，如果 url 中的参数和方法中的参数名称不同的话，也需要使用 value 属性来绑定两个参数。</p>
<h2 id="h2-4-requestparam"><a name="4. @RequestParam" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. <a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></h2><p><code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 注解顾名思义，也是获取请求参数的，上面我们介绍了 <code><a href="https://github.com/PathValiable" title="&#64;PathValiable" class="at-link">@PathValiable</a></code> 注解也是获取请求参数的，那么 <code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 和 <code><a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a></code> 有什么不同呢？主要区别在于： <code><a href="https://github.com/PathValiable" title="&#64;PathValiable" class="at-link">@PathValiable</a></code> 是从 url 模板中获取参数值， 即这种风格的 url：<code>http://localhost:8080/user/{id}</code> ；而 <code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 是从 request 里面获取参数值，即这种风格的 url：<code>http://localhost:8080/user?id=1</code>  。我们使用该 url 带上参数 id 来测试一下如下代码：</p>
<pre><code class="lang-java">@GetMapping(&quot;/user&quot;)
public String testRequestParam(@RequestParam Integer id) {
    System.out.println(&quot;获取到的id为：&quot; + id);
    return &quot;success&quot;;
}
</code></pre>
<p>可以正常从控制台打印出 id 信息。同样地，url 上面的参数和方法的参数需要一致，如果不一致，也需要使用 value 属性来说明，比如 url 为：<code>http://localhost:8080/user?idd=1</code></p>
<pre><code class="lang-java">@RequestMapping(&quot;/user&quot;)
public String testRequestParam(@RequestParam(value = &quot;idd&quot;, required = false) Integer id) {
    System.out.println(&quot;获取到的id为：&quot; + id);
    return &quot;success&quot;;
}
</code></pre>
<p>除了 value 属性外，还有个两个属性比较常用：</p>
<ul>
<li>required 属性：true 表示该参数必须要传，否则就会报 404 错误，false 表示可有可无。</li><li>defaultValue 属性：默认值，表示如果请求中没有同名参数时的默认值。</li></ul>
<p>从 url 中可以看出，<code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 注解用于 GET 请求上时，接收拼接在 url 中的参数。除此之外，该注解还可以用于 POST 请求，接收前端表单提交的参数，假如前端通过表单提交 username 和 password 两个参数，那我们可以使用 <code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 来接收，用法和上面一样。</p>
<pre><code class="lang-java">@PostMapping(&quot;/form1&quot;)
    public String testForm(@RequestParam String username, @RequestParam String password) {
        System.out.println(&quot;获取到的username为：&quot; + username);
        System.out.println(&quot;获取到的password为：&quot; + password);
        return &quot;success&quot;;
    }
</code></pre>
<p>我们使用 postman 来模拟一下表单提交，测试一下接口：</p>
<p><img src="https://img-blog.csdnimg.cn/20200215043749282.png" alt="使用postman测试表单提交"></p>
<p>那么问题来了，如果表单数据很多，我们不可能在后台方法中写上很多参数，每个参数还要 <code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 注解。针对这种情况，我们需要封装一个实体类来接收这些参数，实体中的属性名和表单中的参数名一致即可。</p>
<pre><code class="lang-java">public class User {
    private String username;
    private String password;
    // set get
}
</code></pre>
<p>使用实体接收的话，我们不能在前面加 <code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 注解了，直接使用即可。</p>
<pre><code class="lang-java">@PostMapping(&quot;/form2&quot;)
    public String testForm(User user) {
        System.out.println(&quot;获取到的username为：&quot; + user.getUsername());
        System.out.println(&quot;获取到的password为：&quot; + user.getPassword());
        return &quot;success&quot;;
    }
</code></pre>
<p>使用 postman 再次测试一下表单提交，观察一下返回值和控制台打印出的日志即可。在实际项目中，一般都是封装一个实体类来接收表单数据，因为实际项目中表单数据一般都很多。</p>
<h2 id="h2-5-requestbody"><a name="5. @RequestBody" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5. <a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a></h2><p><code><a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a></code> 注解用于接收前端传来的实体，接收参数也是对应的实体，比如前端通过 json 提交传来两个参数 username 和 password，此时我们需要在后端封装一个实体来接收。在传递的参数比较多的情况下，使用 <code><a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a></code> 接收会非常方便。例如：</p>
<pre><code class="lang-java">public class User {
    private String username;
    private String password;
    // set get
}
</code></pre>
<pre><code class="lang-java">@PostMapping(&quot;/user&quot;)
public String testRequestBody(@RequestBody User user) {
    System.out.println(&quot;获取到的username为：&quot; + user.getUsername());
    System.out.println(&quot;获取到的password为：&quot; + user.getPassword());
    return &quot;success&quot;;
}
</code></pre>
<p>我们使用 postman 工具来测试一下效果，打开 postman，然后输入请求地址和参数，参数我们用 json 来模拟，如下图所有，调用之后返回 success。</p>
<p><img src="https://img-blog.csdnimg.cn/20200215043853532.png" alt="使用Postman测试requestBody"></p>
<p>同时看一下后台控制台输出的日志：</p>
<pre><code>获取到的username为：倪升武
获取到的password为：123456
</code></pre><p>可以看出，<code><a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a></code> 注解用于 POST 请求上，接收 json 实体参数。它和上面我们介绍的表单提交有点类似，只不过参数的格式不同，一个是 json 实体，一个是表单提交。在实际项目中根据具体场景和需要使用对应的注解即可。</p>
<h2 id="h2-6-"><a name="6. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6. 总结</h2><p>本节课主要讲解了 Spring Boot 中对 MVC 的支持，分析了 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code>、 <code><a href="https://github.com/RequestMapping" title="&#64;RequestMapping" class="at-link">@RequestMapping</a></code>、<code><a href="https://github.com/PathVariable" title="&#64;PathVariable" class="at-link">@PathVariable</a></code>、 <code><a href="https://github.com/RequestParam" title="&#64;RequestParam" class="at-link">@RequestParam</a></code> 和 <code><a href="https://github.com/RequestBody" title="&#64;RequestBody" class="at-link">@RequestBody</a></code> 四个注解的使用方式，由于 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 中集成了 <code><a href="https://github.com/ResponseBody" title="&#64;ResponseBody" class="at-link">@ResponseBody</a></code> 所以对返回 json 的注解不再赘述。以上四个注解是使用频率很高的注解，在所有的实际项目中基本都会遇到，要熟练掌握。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--06-spring-boot-swagger2-"><a name="第06课：Spring Boot集成 Swagger2 展现在线接口文档" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第06课：Spring Boot集成 Swagger2 展现在线接口文档</h1><h2 id="h2-1-swagger-"><a name="1. Swagger 简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. Swagger 简介</h2><h3 id="h3-1-1-"><a name="1.1 解决的问题" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.1 解决的问题</h3><p>随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了前后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。前端和后端的唯一联系，变成了 API 接口，所以 API 文档变成了前后端开发人员联系的纽带，变得越来越重要。</p>
<p>那么问题来了，随着代码的不断更新，开发人员在开发新的接口或者更新旧的接口后，由于开发任务的繁重，往往文档很难持续跟着更新，Swagger 就是用来解决该问题的一款重要的工具，对使用接口的人来说，开发人员不需要给他们提供文档，只要告诉他们一个 Swagger 地址，即可展示在线的 API 接口文档，除此之外，调用接口的人员还可以在线测试接口数据，同样地，开发人员在开发接口时，同样也可以利用 Swagger 在线接口文档测试接口数据，这给开发人员提供了便利。</p>
<h3 id="h3-1-2-swagger-"><a name="1.2 Swagger 官方" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.2 Swagger 官方</h3><p>我们打开 <a href="https://swagger.io/">Swagger 官网</a>，官方对 Swagger 的定义为：</p>
<blockquote>
<p>The Best APIs are Built with Swagger Tools </p>
</blockquote>
<p>翻译成中文是：“最好的 API 是使用 Swagger 工具构建的”。由此可见，Swagger 官方对其功能和所处的地位非常自信，由于其非常好用，所以官方对其定位也合情合理。如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200215043936444.png" alt="官方对swagger的定位"></p>
<p>本文主要讲解在 Spring Boot 中如何导入 Swagger2 工具来展现项目中的接口文档。本节课使用的 Swagger 版本为 2.2.2。下面开始进入 Swagger2 之旅。</p>
<h2 id="h2-2-swagger2-maven-"><a name="2. Swagger2 的 maven 依赖" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. Swagger2 的 maven 依赖</h2><p>使用 Swagger2 工具，必须要导入 maven 依赖，当前官方最高版本是 2.8.0，我尝试了一下，个人感觉页面展示的效果不太好，而且不够紧凑，不利于操作。另外，最新版本并不一定是最稳定版本，当前我们实际项目中使用的是 2.2.2 版本，该版本稳定，界面友好，所以本节课主要围绕着 2.2.2 版本来展开，依赖如下：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;
    &lt;version&gt;2.2.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;/groupId&gt;
    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;
    &lt;version&gt;2.2.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="h2-3-swagger2-"><a name="3. Swagger2 的配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. Swagger2 的配置</h2><p>使用 Swagger2 需要进行配置，Spring Boot 中对 Swagger2 的配置非常方便，新建一个配置类，Swagger2 的配置类上除了添加必要的 <code><a href="https://github.com/Configuration" title="&#64;Configuration" class="at-link">@Configuration</a></code> 注解外，还需要添加 <code><a href="https://github.com/EnableSwagger2" title="&#64;EnableSwagger2" class="at-link">@EnableSwagger2</a></code> 注解。</p>
<pre><code class="lang-java">import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

/**
 * @author shengwu ni
 */
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket createRestApi() {
        return new Docket(DocumentationType.SWAGGER_2)
                // 指定构建api文档的详细信息的方法：apiInfo()
                .apiInfo(apiInfo())
                .select()
                // 指定要生成api接口的包路径，这里把controller作为包路径，生成controller中的所有接口
                .apis(RequestHandlerSelectors.basePackage(&quot;com.itcodai.course06.controller&quot;))
                .paths(PathSelectors.any())
                .build();
    }

    /**
     * 构建api文档的详细信息
     * @return
     */
    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                // 设置页面标题
                .title(&quot;Spring Boot集成Swagger2接口总览&quot;)
                // 设置接口描述
                .description(&quot;跟武哥一起学Spring Boot第06课&quot;)
                // 设置联系方式
                .contact(&quot;倪升武，&quot; + &quot;CSDN：http://blog.csdn.net/eson_15&quot;)
                // 设置版本
                .version(&quot;1.0&quot;)
                // 构建
                .build();
    }
}
</code></pre>
<p>在该配置类中，已经使用注释详细解释了每个方法的作用了，在此不再赘述。到此为止，我们已经配置好了 Swagger2 了。现在我们可以测试一下配置有没有生效，启动项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code>，即可看到 swagger2 的接口页面，如下图所示，说明Swagger2 集成成功。</p>
<p><img src="https://img-blog.csdnimg.cn/20200215044013383.png" alt="swagger2页面"></p>
<p>结合该图，对照上面的 Swagger2 配置文件中的配置，可以很明确的知道配置类中每个方法的作用。这样就很容易理解和掌握 Swagger2 中的配置了，也可以看出，其实 Swagger2 配置很简单。</p>
<p>【友情提示】可能有很多朋友在配置 Swagger 的时候会遇到下面的情况，而且还关不掉的，这是因为浏览器缓存引起的，清空一下浏览器缓存即可解决问题。</p>
<p><img src="http://p99jlm9k5.bkt.clouddn.com/blog/images/1/error.png" alt="错误页面-倪升武的博客-图2"></p>
<h2 id="h2-4-swagger2-"><a name="4. Swagger2 的使用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. Swagger2 的使用</h2><p>上面我们已经配置好了 Swagger2，并且也启动测试了一下，功能正常，下面我们开始使用 Swagger2，主要来介绍 Swagger2 中的几个常用的注解，分别在实体类上、 Controller 类上以及 Controller 中的方法上，最后我们看一下 Swagger2 是如何在页面上呈现在线接口文档的，并且结合 Controller 中的方法在接口中测试一下数据。</p>
<h3 id="h3-4-1-"><a name="4.1 实体类注解" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1 实体类注解</h3><p>本节我们建一个 User 实体类，主要介绍一下 Swagger2 中的 <code><a href="https://github.com/ApiModel" title="&#64;ApiModel" class="at-link">@ApiModel</a></code> 和 <code><a href="https://github.com/ApiModelProperty" title="&#64;ApiModelProperty" class="at-link">@ApiModelProperty</a></code> 注解，同时为后面的测试做准备。</p>
<pre><code class="lang-java">import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

@ApiModel(value = &quot;用户实体类&quot;)
public class User {

    @ApiModelProperty(value = &quot;用户唯一标识&quot;)
    private Long id;

    @ApiModelProperty(value = &quot;用户姓名&quot;)
    private String username;

    @ApiModelProperty(value = &quot;用户密码&quot;)
    private String password;

    // 省略set和get方法
}
</code></pre>
<p>解释下 <code><a href="https://github.com/ApiModel" title="&#64;ApiModel" class="at-link">@ApiModel</a></code> 和 <code><a href="https://github.com/ApiModelProperty" title="&#64;ApiModelProperty" class="at-link">@ApiModelProperty</a></code> 注解：</p>
<blockquote>
<p><code><a href="https://github.com/ApiModel" title="&#64;ApiModel" class="at-link">@ApiModel</a></code> 注解用于实体类，表示对类进行说明，用于参数用实体类接收。<br><code><a href="https://github.com/ApiModelProperty" title="&#64;ApiModelProperty" class="at-link">@ApiModelProperty</a></code> 注解用于类中属性，表示对 model 属性的说明或者数据操作更改。</p>
</blockquote>
<p>该注解在在线 API 文档中的具体效果在下文说明。</p>
<h3 id="h3-4-2-controller-"><a name="4.2 Controller 类中相关注解" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2 Controller 类中相关注解</h3><p>我们写一个 TestController，再写几个接口，然后学习一下 Controller 中和 Swagger2 相关的注解。</p>
<pre><code class="lang-java">import com.itcodai.course06.entiy.JsonResult;
import com.itcodai.course06.entiy.User;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(&quot;/swagger&quot;)
@Api(value = &quot;Swagger2 在线接口文档&quot;)
public class TestController {

    @GetMapping(&quot;/get/{id}&quot;)
    @ApiOperation(value = &quot;根据用户唯一标识获取用户信息&quot;)
    public JsonResult&lt;User&gt; getUserInfo(@PathVariable @ApiParam(value = &quot;用户唯一标识&quot;) Long id) {
        // 模拟数据库中根据id获取User信息
        User user = new User(id, &quot;倪升武&quot;, &quot;123456&quot;);
        return new JsonResult(user);
    }
}
</code></pre>
<p>我们来学习一下 <code><a href="https://github.com/Api" title="&#64;Api" class="at-link">@Api</a></code> 、 <code><a href="https://github.com/ApiOperation" title="&#64;ApiOperation" class="at-link">@ApiOperation</a></code> 和 <code><a href="https://github.com/ApiParam" title="&#64;ApiParam" class="at-link">@ApiParam</a></code> 注解。</p>
<blockquote>
<p><code><a href="https://github.com/Api" title="&#64;Api" class="at-link">@Api</a></code> 注解用于类上，表示标识这个类是 swagger 的资源。<br><code><a href="https://github.com/ApiOperation" title="&#64;ApiOperation" class="at-link">@ApiOperation</a></code> 注解用于方法，表示一个 http 请求的操作。<br><code><a href="https://github.com/ApiParam" title="&#64;ApiParam" class="at-link">@ApiParam</a></code> 注解用于参数上，用来标明参数信息。</p>
</blockquote>
<p>这里返回的是 JsonResult，是第02课中学习返回 json 数据时封装的实体。以上是 Swagger 中最常用的 5 个注解，接下来运行一下项目工程，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 看一下 Swagger 页面的接口状态。</p>
<p><img src="https://img-blog.csdnimg.cn/20200215044156305.png" alt="swagger接口展示"></p>
<p>可以看出，Swagger 页面对该接口的信息展示的非常全面，每个注解的作用以及展示的地方在上图中已经标明，通过页面即可知道该接口的所有信息，那么我们直接在线测试一下该接口返回的信息，输入id为1，看一下返回数据：</p>
<p><img src="https://img-blog.csdnimg.cn/20200215044226292.png" alt="返回数据测试"></p>
<p>可以看出，直接在页面返回了 json 格式的数据，开发人员可以直接使用该在线接口来测试数据的正确与否，非常方便。上面是对于单个参数的输入，如果输入参数为某个对象这种情况，Swagger 是什么样子呢？我们再写一个接口。</p>
<pre><code class="lang-java">@PostMapping(&quot;/insert&quot;)
    @ApiOperation(value = &quot;添加用户信息&quot;)
    public JsonResult&lt;Void&gt; insertUser(@RequestBody @ApiParam(value = &quot;用户信息&quot;) User user) {
        // 处理添加逻辑
        return new JsonResult&lt;&gt;();
    }
</code></pre>
<p>重启项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 看一下效果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200215044256579.png" alt="swagger接口展示"></p>
<h2 id="h2-5-"><a name="5. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5. 总结</h2><p>OK，本节课详细分析了 Swagger 的优点，以及 Spring Boot 如何集成 Swagger2，包括配置，相关注解的讲解，涉及到了实体类和接口类，以及如何使用。最后通过页面测试，体验了 Swagger 的强大之处，基本上是每个项目组中必备的工具之一，所以要掌握该工具的使用，也不难。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--07-spring-boot-thymeleaf-"><a name="第07课：Spring Boot集成Thymeleaf模板引擎" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第07课：Spring Boot集成Thymeleaf模板引擎</h1><h2 id="h2-1-thymeleaf-"><a name="1. Thymeleaf 介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. Thymeleaf 介绍</h2><blockquote>
<p>Thymeleaf 是适用于 Web 和独立环境的现代服务器端 Java 模板引擎。<br>Thymeleaf 的主要目标是为您的开发工作流程带来优雅的自然模板 - 可以在浏览器中正确显示的HTML，也可以用作静态原型，从而在开发团队中实现更强大的协作。  </p>
</blockquote>
<p>以上翻译自 Thymeleaf 官方网站。传统的 JSP+JSTL 组合是已经过去了，Thymeleaf 是现代服务端的模板引擎，与传统的 JSP 不同，Thymeleaf 可以使用浏览器直接打开，因为可以忽略掉拓展属性，相当于打开原生页面，给前端人员也带来一定的便利。   </p>
<p>什么意思呢？就是说在本地环境或者有网络的环境下，Thymeleaf 均可运行。由于 thymeleaf 支持 html 原型，也支持在 html 标签里增加额外的属性来达到 “模板+数据” 的展示方式，所以美工可以直接在浏览器中查看页面效果，当服务启动后，也可以让后台开发人员查看带数据的动态页面效果。比如：</p>
<pre><code class="lang-html">&lt;div class=&quot;ui right aligned basic segment&quot;&gt;
      &lt;div class=&quot;ui orange basic label&quot; th:text=&quot;${blog.flag}&quot;&gt;静态原创信息&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&quot;ui center aligned header&quot; th:text=&quot;${blog.title}&quot;&gt;这是静态标题&lt;/h2&gt;
</code></pre>
<p>类似与上面这样，在静态页面时，会展示静态信息，当服务启动后，动态获取数据库中的数据后，就可以展示动态数据，<code>th:text</code> 标签是用来动态替换文本的，这会在下文说明。该例子说明浏览器解释 html 时会忽略 html 中未定义的标签属性（比如 <code>th:text</code>），所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示数据。 </p>
<h2 id="h2-2-"><a name="2. 依赖导入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. 依赖导入</h2><p>在 Spring Boot 中使用 thymeleaf 模板需要引入依赖，可以在创建项目工程时勾选 Thymeleaf，也可以创建之后再手动导入，如下：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>另外，在 html 页面上如果要使用 thymeleaf 模板，需要在页面标签中引入：</p>
<pre><code class="lang-html">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
</code></pre>
<h2 id="h2-3-thymeleaf-"><a name="3. Thymeleaf相关配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. Thymeleaf相关配置</h2><p>因为 Thymeleaf 中已经有默认的配置了，我们不需要再对其做过多的配置，有一个需要注意一下，Thymeleaf 默认是开启页面缓存的，所以在开发的时候，需要关闭这个页面缓存，配置如下。</p>
<pre><code class="lang-yml">spring:
  thymeleaf:
    cache: false #关闭缓存
</code></pre>
<p>否则会有缓存，导致页面没法及时看到更新后的效果。 比如你修改了一个文件，已经 update 到 tomcat 了，但刷新页面还是之前的页面，就是因为缓存引起的。</p>
<h2 id="h2-4-thymeleaf-"><a name="4. Thymeleaf 的使用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. Thymeleaf 的使用</h2><h3 id="h3-4-1-"><a name="4.1 访问静态页面" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.1 访问静态页面</h3><p>这个和 Thymeleaf 没啥关系，应该说是通用的，我把它一并写到这里的原因是一般我们做网站的时候，都会做一个 404 页面和 500 页面，为了出错时给用户一个友好的展示，而不至于一堆异常信息抛出来。Spring Boot 中会自动识别模板目录（templates/）下的 404.html 和 500.html 文件。我们在 templates/ 目录下新建一个 error 文件夹，专门放置错误的 html 页面，然后分别打印些信息。以 404.html 为例：</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    这是404页面
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>我们再写一个 controller 来测试一下 404 和 500 页面：</p>
<pre><code class="lang-java">@Controller
@RequestMapping(&quot;/thymeleaf&quot;)
public class ThymeleafController {

    @RequestMapping(&quot;/test404&quot;)
    public String test404() {
        return &quot;index&quot;;
    }

    @RequestMapping(&quot;/test500&quot;)
    public String test500() {
        int i = 1 / 0;
        return &quot;index&quot;;
    }
}
</code></pre>
<blockquote>
<p>当我们在浏览器中输入 <code>localhost:8080/thymeleaf/test400</code> 时，故意输入错误，找不到对应的方法，就会跳转到 404.html 显示。<br>当我们在浏览器中输入 <code>localhost:8088/thymeleaf/test505</code> 时，会抛出异常，然后会自动跳转到 500.html 显示。</p>
</blockquote>
<p>【注】这里有个问题需要注意一下，前面的课程中我们说了微服务中会走向前后端分离，我们在 Controller 层上都是使用的 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 注解，自动会把返回的数据转成 json 格式。但是在使用模板引擎时，Controller 层就不能用 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 注解了，因为在使用 thymeleaf 模板时，返回的是视图文件名，比如上面的 Controller 中是返回到 index.html 页面，如果使用 <code><a href="https://github.com/RestController" title="&#64;RestController" class="at-link">@RestController</a></code> 的话，会把 index 当作 String 解析了，直接返回到页面了，而不是去找 index.html 页面，大家可以试一下。所以在使用模板时要用 <code><a href="https://github.com/Controller" title="&#64;Controller" class="at-link">@Controller</a></code> 注解。</p>
<h3 id="h3-4-2-thymeleaf-"><a name="4.2 Thymeleaf 中处理对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.2 Thymeleaf 中处理对象</h3><p>我们来看一下 thymeleaf 模板中如何处理对象信息，假如我们在做个人博客的时候，需要给前端传博主相关信息来展示，那么我们会封装成一个博主对象，比如：</p>
<pre><code class="lang-java">public class Blogger {
    private Long id;
    private String name;
    private String pass;
    // 省去set和get
}
</code></pre>
<p>然后在controller层中初始化一下：</p>
<pre><code class="lang-java">@GetMapping(&quot;/getBlogger&quot;)
public String getBlogger(Model model) {
    Blogger blogger = new Blogger(1L, &quot;倪升武&quot;, &quot;123456&quot;);
    model.addAttribute(&quot;blogger&quot;, blogger);
    return &quot;blogger&quot;;
}
</code></pre>
<p>我们先初始化一个 Blogger 对象，然后将该对象放到 Model 中，然后返回到 blogger.html 页面去渲染。接下来我们再写一个 blogger.html 来渲染 blogger 信息：</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;博主信息&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action=&quot;&quot; th:object=&quot;${blogger}&quot; &gt;
    用户编号：&lt;input name=&quot;id&quot; th:value=&quot;${blogger.id}&quot;/&gt;&lt;br&gt;
    用户姓名：&lt;input type=&quot;text&quot; name=&quot;username&quot; th:value=&quot;${blogger.getName()}&quot; /&gt;&lt;br&gt;
    登陆密码：&lt;input type=&quot;text&quot; name=&quot;password&quot; th:value=&quot;*{pass}&quot; /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>可以看出，在 thymeleaf 模板中，使用 <code>th:object=&quot;${}&quot;</code> 来获取对象信息，然后在表单里面可以有三种方式来获取对象属性。如下：</p>
<blockquote>
<p>使用 <code>th:value=&quot;*{属性名}&quot;</code><br>使用 <code>th:value=&quot;${对象.属性名}&quot;</code>，对象指的是上面使用 <code>th:object</code> 获取的对象<br>使用 <code>th:value=&quot;${对象.get方法}&quot;</code>，对象指的是上面使用 <code>th:object</code> 获取的对象</p>
</blockquote>
<p>可以看出，在 Thymeleaf 中可以像写 java 一样写代码，很方便。我们在浏览器中输入 <code>localhost:8080/thymeleaf/getBlogger</code> 来测试一下数据：</p>
<p><img src="https://img-blog.csdnimg.cn/20200215044353803.jpg" alt="thymeleaf中处理对象"></p>
<h3 id="h3-4-3-thymeleaf-list"><a name="4.3 Thymeleaf 中处理 List" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.3 Thymeleaf 中处理 List</h3><p>处理 List 的话，和处理上面介绍的对象差不多，但是需要在 thymeleaf 中进行遍历。我们先在 Controller 中模拟一个 List。</p>
<pre><code class="lang-java">@GetMapping(&quot;/getList&quot;)
public String getList(Model model) {
    Blogger blogger1 = new Blogger(1L, &quot;倪升武&quot;, &quot;123456&quot;);
    Blogger blogger2 = new Blogger(2L, &quot;达人课&quot;, &quot;123456&quot;);
    List&lt;Blogger&gt; list = new ArrayList&lt;&gt;();
    list.add(blogger1);
    list.add(blogger2);
    model.addAttribute(&quot;list&quot;, list);
    return &quot;list&quot;;
}
</code></pre>
<p>接下来我们写一个 list.html 来获取该 list 信息，然后在 list.html 中遍历这个list。如下：</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;博主信息&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action=&quot;&quot; th:each=&quot;blogger : ${list}&quot; &gt;
    用户编号：&lt;input name=&quot;id&quot; th:value=&quot;${blogger.id}&quot;/&gt;&lt;br&gt;
    用户姓名：&lt;input type=&quot;text&quot; name=&quot;password&quot; th:value=&quot;${blogger.name}&quot;/&gt;&lt;br&gt;
    登录密码：&lt;input type=&quot;text&quot; name=&quot;username&quot; th:value=&quot;${blogger.getPass()}&quot;/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>可以看出，其实和处理单个对象信息差不多，Thymeleaf 使用 <code>th:each</code> 进行遍历，<code>${}</code> 取 model 中传过来的参数，然后自定义 list 中取出来的每个对象，这里定义为 blogger。表单里面可以直接使用 <code>${对象.属性名}</code> 来获取 list 中对象的属性值，也可以使用 <code>${对象.get方法}</code> 来获取，这点和上面处理对象信息是一样的，但是不能使用 <code>*{属性名}</code> 来获取对象中的属性，thymeleaf 模板获取不到。    </p>
<h3 id="h3-4-4-thymeleaf-"><a name="4.4 其他常用 thymeleaf 操作" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4.4 其他常用 thymeleaf 操作</h3><p>我们来总结一下 thymeleaf 中的一些常用的标签操作，如下：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>功能</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>th:value</code></td>
<td>给属性赋值</td>
<td><code>&lt;input th:value=&quot;${blog.name}&quot; /&gt;</code></td>
</tr>
<tr>
<td><code>th:style</code></td>
<td>设置样式</td>
<td><code>th:style=&quot;&#39;display:&#39;+@{(${sitrue}?&#39;none&#39;:&#39;inline-block&#39;)} + &#39;&#39;&quot;</code></td>
</tr>
<tr>
<td><code>th:onclick</code></td>
<td>点击事件</td>
<td><code>th:onclick=&quot;&#39;getInfo()&#39;&quot;</code></td>
</tr>
<tr>
<td><code>th:if</code></td>
<td>条件判断</td>
<td><code>&lt;a th:if=&quot;${userId == collect.userId}&quot; &gt;</code></td>
</tr>
<tr>
<td><code>th:href</code></td>
<td>超链接</td>
<td><code>&lt;a th:href=&quot;@{/blogger/login}&quot;&gt;Login&lt;/a&gt; /&gt;</code></td>
</tr>
<tr>
<td><code>th:unless</code></td>
<td>条件判断和<code>th:if</code>相反</td>
<td><code>&lt;a th:href=&quot;@{/blogger/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td>
</tr>
<tr>
<td><code>th:switch</code></td>
<td>配合<code>th:case</code></td>
<td><code>&lt;div th:switch=&quot;${user.role}&quot;&gt;</code></td>
</tr>
<tr>
<td><code>th:case</code></td>
<td>配合<code>th:switch</code></td>
<td><code>&lt;p th:case=&quot;&#39;admin&#39;&quot;&gt;administator&lt;/p&gt;</code></td>
</tr>
<tr>
<td><code>th:src</code></td>
<td>地址引入</td>
<td><code>&lt;img alt=&quot;csdn logo&quot; th:src=&quot;@{/img/logo.png}&quot; /&gt;</code></td>
</tr>
<tr>
<td><code>th:action</code></td>
<td>表单提交的地址</td>
<td><code>&lt;form th:action=&quot;@{/blogger/update}&quot;&gt;</code></td>
</tr>
</tbody>
</table>
<p>Thymeleaf 还有很多其他用法，这里就不总结了，具体的可以参考Thymeleaf的<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">官方文档（v3.0）</a>。主要要学会如何在 Spring Boot 中去使用 thymeleaf，遇到对应的标签或者方法，查阅官方文档即可。</p>
<h2 id="h2-5-"><a name="5. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5. 总结</h2><p>Thymeleaf 在 Spring Boot 中使用非常广泛，本节课主要分析了 thymeleaf 的优点，以及如何在 Spring Boot 中集成并使用 thymeleaf 模板，包括依赖、配置，相关数据的获取、以及一些注意事项等等。最后列举了一些 thymeleaf 中常用的标签，在实际项目中多使用，多查阅就能熟练掌握，thymeleaf 中的一些标签或者方法不用死记硬背，用到什么去查阅什么，关键是要会在 Spring Boot 中集成，用的多了就熟能生巧。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--08-spring-boot-"><a name="第08课：Spring Boot中的全局异常处理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第08课：Spring Boot中的全局异常处理</h1><p>在项目开发过程中，不管是对底层数据库的操作过程，还是业务层的处理过程，还是控制层的处理过程，都不可避免会遇到各种可预知的、不可预知的异常需要处理。如果对每个过程都单独作异常处理，那系统的代码耦合度会变得很高，此外，开发工作量也会加大而且不好统一，这也增加了代码的维护成本。<br>针对这种实际情况，我们需要将所有类型的异常处理从各处理过程解耦出来，这样既保证了相关处理过程的功能单一，也实现了异常信息的统一处理和维护。同时，我们也不希望直接把异常抛给用户，应该对异常进行处理，对错误信息进行封装，然后返回一个友好的信息给用户。这节主要总结一下项目中如何使用 Spring Boot 如何拦截并处理全局的异常。</p>
<h2 id="h2-1-json-"><a name="1. 定义返回的统一 json 结构" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. 定义返回的统一 json 结构</h2><p>前端或者其他服务请求本服务的接口时，该接口需要返回对应的 json 数据，一般该服务只需要返回请求着需要的参数即可，但是在实际项目中，我们需要封装更多的信息，比如状态码 code、相关信息 msg 等等，这一方面是在项目中可以有个统一的返回结构，整个项目组都适用，另一方面是方便结合全局异常处理信息，因为异常处理信息中一般我们需要把状态码和异常内容反馈给调用方。<br>这个统一的 json 结构这可以参考<a href="https://gitbook.cn/gitchat/column/5b3c9f35a3442272491a176a">第02课：Spring Boot 返回 JSON 数据及数据封装</a>中封装的统一 json 结构，本节内容我们简化一下，只保留状态码 code 和异常信息 msg即可。如下：</p>
<pre><code class="lang-java">public class JsonResult {
    /**
     * 异常码
     */
    protected String code;

    /**
     * 异常信息
     */
    protected String msg;

    public JsonResult() {
        this.code = &quot;200&quot;;
        this.msg = &quot;操作成功&quot;;
    }

    public JsonResult(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }
    // get set
}
</code></pre>
<h2 id="h2-2-"><a name="2. 处理系统异常" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. 处理系统异常</h2><p>新建一个 GlobalExceptionHandler 全局异常处理类，然后加上 <code><a href="https://github.com/ControllerAdvice" title="&#64;ControllerAdvice" class="at-link">@ControllerAdvice</a></code> 注解即可拦截项目中抛出的异常，如下：</p>
<pre><code class="lang-java">@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {
    // 打印log
    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    // ……
}
</code></pre>
<p>我们点开 <code><a href="https://github.com/ControllerAdvice" title="&#64;ControllerAdvice" class="at-link">@ControllerAdvice</a></code> 注解可以看到，<code><a href="https://github.com/ControllerAdvice" title="&#64;ControllerAdvice" class="at-link">@ControllerAdvice</a></code> 注解包含了 <code><a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a></code> 注解，说明在 Spring Boot 启动时，也会把该类作为组件交给 Spring 来管理。除此之外，该注解还有个 <code>basePackages</code> 属性，该属性是用来拦截哪个包中的异常信息，一般我们不指定这个属性，我们拦截项目工程中的所有异常。<code><a href="https://github.com/ResponseBody" title="&#64;ResponseBody" class="at-link">@ResponseBody</a></code> 注解是为了异常处理完之后给调用方输出一个 json 格式的封装数据。<br>在项目中如何使用呢？Spring Boot 中很简单，在方法上通过 <code><a href="https://github.com/ExceptionHandler" title="&#64;ExceptionHandler" class="at-link">@ExceptionHandler</a></code> 注解来指定具体的异常，然后在方法中处理该异常信息，最后将结果通过统一的 json 结构体返回给调用者。下面我们举几个例子来说明如何来使用。</p>
<h3 id="h3-2-1-"><a name="2.1 处理参数缺失异常" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 处理参数缺失异常</h3><p>在前后端分离的架构中，前端请求后台的接口都是通过 rest 风格来调用，有时候，比如 POST 请求 需要携带一些参数，但是往往有时候参数会漏掉。另外，在微服务架构中，涉及到多个微服务之间的接口调用时，也可能出现这种情况，此时我们需要定义一个处理参数缺失异常的方法，来给前端或者调用方提示一个友好信息。  </p>
<p>参数缺失的时候，会抛出 <code>HttpMessageNotReadableException</code>，我们可以拦截该异常，做一个友好处理，如下：</p>
<pre><code class="lang-java">/**
* 缺少请求参数异常
* @param ex HttpMessageNotReadableException
* @return
*/
@ExceptionHandler(MissingServletRequestParameterException.class)
@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public JsonResult handleHttpMessageNotReadableException(
    MissingServletRequestParameterException ex) {
    logger.error(&quot;缺少请求参数，{}&quot;, ex.getMessage());
    return new JsonResult(&quot;400&quot;, &quot;缺少必要的请求参数&quot;);
}
</code></pre>
<p>我们来写个简单的 Controller 测试一下该异常，通过 POST 请求方式接收两个参数：姓名和密码。</p>
<pre><code class="lang-java">@RestController
@RequestMapping(&quot;/exception&quot;)
public class ExceptionController {

    private static final Logger logger = LoggerFactory.getLogger(ExceptionController.class);

    @PostMapping(&quot;/test&quot;)
    public JsonResult test(@RequestParam(&quot;name&quot;) String name,
                           @RequestParam(&quot;pass&quot;) String pass) {
        logger.info(&quot;name：{}&quot;, name);
        logger.info(&quot;pass：{}&quot;, pass);
        return new JsonResult();
    }
}
</code></pre>
<p>然后使用 Postman 来调用一下该接口，调用的时候，只传姓名，不传密码，就会抛缺少参数异常，该异常被捕获之后，就会进入我们写好的逻辑，给调用方返回一个友好信息，如下：</p>
<p><img src="https://img-blog.csdnimg.cn/2020021504443480.png" alt="缺失参数异常"></p>
<h3 id="h3-2-2-"><a name="2.2 处理空指针异常" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 处理空指针异常</h3><p>空指针异常是开发中司空见惯的东西了，一般发生的地方有哪些呢？<br>先来聊一聊一些注意的地方，比如在微服务中，经常会调用其他服务获取数据，这个数据主要是 json 格式的，但是在解析 json 的过程中，可能会有空出现，所以我们在获取某个 jsonObject 时，再通过该 jsonObject 去获取相关信息时，应该要先做非空判断。<br>还有一个很常见的地方就是从数据库中查询的数据，不管是查询一条记录封装在某个对象中，还是查询多条记录封装在一个 List 中，我们接下来都要去处理数据，那么就有可能出现空指针异常，因为谁也不能保证从数据库中查出来的东西就一定不为空，所以在使用数据时一定要先做非空判断。<br>对空指针异常的处理很简单，和上面的逻辑一样，将异常信息换掉即可。如下：</p>
<pre><code class="lang-java">@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    /**
     * 空指针异常
     * @param ex NullPointerException
     * @return
     */
    @ExceptionHandler(NullPointerException.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleTypeMismatchException(NullPointerException ex) {
        logger.error(&quot;空指针异常，{}&quot;, ex.getMessage());
        return new JsonResult(&quot;500&quot;, &quot;空指针异常了&quot;);
    }
}
</code></pre>
<p>这个我就不测试了，代码中 ExceptionController 有个 <code>testNullPointException</code> 方法，模拟了一个空指针异常，我们在浏览器中请求一下对应的 url 即可看到返回的信息：</p>
<pre><code class="lang-json">{&quot;code&quot;:&quot;500&quot;,&quot;msg&quot;:&quot;空指针异常了&quot;}
</code></pre>
<h3 id="h3-2-3-"><a name="2.3 一劳永逸？" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3 一劳永逸？</h3><p>当然了，异常很多，比如还有 RuntimeException，数据库还有一些查询或者操作异常等等。由于 Exception 异常是父类，所有异常都会继承该异常，所以我们可以直接拦截 Exception 异常，一劳永逸：</p>
<pre><code class="lang-java">@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    /**
     * 系统异常 预期以外异常
     * @param ex
     * @return
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleUnexpectedServer(Exception ex) {
        logger.error(&quot;系统异常：&quot;, ex);
        return new JsonResult(&quot;500&quot;, &quot;系统发生异常，请联系管理员&quot;);
    }
}
</code></pre>
<p>但是项目中，我们一般都会比较详细的去拦截一些常见异常，拦截 Exception 虽然可以一劳永逸，但是不利于我们去排查或者定位问题。实际项目中，可以把拦截 Exception 异常写在 GlobalExceptionHandler 最下面，如果都没有找到，最后再拦截一下 Exception 异常，保证输出信息友好。</p>
<h2 id="h2-3-"><a name="3. 拦截自定义异常" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 拦截自定义异常</h2><p>在实际项目中，除了拦截一些系统异常外，在某些业务上，我们需要自定义一些业务异常，比如在微服务中，服务之间的相互调用很平凡，很常见。要处理一个服务的调用时，那么可能会调用失败或者调用超时等等，此时我们需要自定义一个异常，当调用失败时抛出该异常，给 GlobalExceptionHandler 去捕获。</p>
<h3 id="h3-3-1-"><a name="3.1 定义异常信息" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1 定义异常信息</h3><p>由于在业务中，有很多异常，针对不同的业务，可能给出的提示信息不同，所以为了方便项目异常信息管理，我们一般会定义一个异常信息枚举类。比如：</p>
<pre><code class="lang-java">/**
 * 业务异常提示信息枚举类
 * @author shengwu ni
 */
public enum BusinessMsgEnum {
    /** 参数异常 */
    PARMETER_EXCEPTION(&quot;102&quot;, &quot;参数异常!&quot;),
    /** 等待超时 */
    SERVICE_TIME_OUT(&quot;103&quot;, &quot;服务调用超时！&quot;),
    /** 参数过大 */
    PARMETER_BIG_EXCEPTION(&quot;102&quot;, &quot;输入的图片数量不能超过50张!&quot;),
    /** 500 : 一劳永逸的提示也可以在这定义 */
    UNEXPECTED_EXCEPTION(&quot;500&quot;, &quot;系统发生异常，请联系管理员！&quot;);
    // 还可以定义更多的业务异常

    /**
     * 消息码
     */
    private String code;
    /**
     * 消息内容
     */
    private String msg;

    private BusinessMsgEnum(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }
    // set get方法
}
</code></pre>
<h3 id="h3-3-2-"><a name="3.2 拦截自定义异常" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2 拦截自定义异常</h3><p>然后我们可以定义一个业务异常，当出现业务异常时，我们就抛这个自定义的业务异常即可。比如我们定义一个 BusinessErrorException 异常，如下：</p>
<pre><code class="lang-java">/**
 * 自定义业务异常
 * @author shengwu ni
 */
public class BusinessErrorException extends RuntimeException {

    private static final long serialVersionUID = -7480022450501760611L;

    /**
     * 异常码
     */
    private String code;
    /**
     * 异常提示信息
     */
    private String message;

    public BusinessErrorException(BusinessMsgEnum businessMsgEnum) {
        this.code = businessMsgEnum.code();
        this.message = businessMsgEnum.msg();
    }
    // get set方法
}
</code></pre>
<p>在构造方法中，传入我们上面自定义的异常枚举类，所以在项目中，如果有新的异常信息需要添加，我们直接在枚举类中添加即可，很方便，做到统一维护，然后再拦截该异常时获取即可。</p>
<pre><code class="lang-java">@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    /**
     * 拦截业务异常，返回业务异常信息
     * @param ex
     * @return
     */
    @ExceptionHandler(BusinessErrorException.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleBusinessError(BusinessErrorException ex) {
        String code = ex.getCode();
        String message = ex.getMessage();
        return new JsonResult(code, message);
    }
}
</code></pre>
<p>在业务代码中，我们可以直接模拟一下抛出业务异常，测试一下：</p>
<pre><code class="lang-java">@RestController
@RequestMapping(&quot;/exception&quot;)
public class ExceptionController {

    private static final Logger logger = LoggerFactory.getLogger(ExceptionController.class);

    @GetMapping(&quot;/business&quot;)
    public JsonResult testException() {
        try {
            int i = 1 / 0;
        } catch (Exception e) {
            throw new BusinessErrorException(BusinessMsgEnum.UNEXPECTED_EXCEPTION);
        }
        return new JsonResult();
    }
}
</code></pre>
<p>运行一下项目，测试一下，返回 json 如下，说明我们自定义的业务异常捕获成功：</p>
<pre><code class="lang-json">{&quot;code&quot;:&quot;500&quot;,&quot;msg&quot;:&quot;系统发生异常，请联系管理员！&quot;}
</code></pre>
<h2 id="h2-4-"><a name="4. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 总结</h2><p>本节课程主要讲解了Spring Boot 的全局异常处理，包括异常信息的封装、异常信息的捕获和处理，以及在实际项目中，我们用到的自定义异常枚举类和业务异常的捕获与处理，在项目中运用的非常广泛，基本上每个项目中都需要做全局异常处理。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--09-spring-boot-aop-"><a name="第09课：Spring Boot中的切面AOP处理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第09课：Spring Boot中的切面AOP处理</h1><h2 id="h2-1-aop"><a name="1. 什么是AOP" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. 什么是AOP</h2><p>AOP：Aspect Oriented Programming 的缩写，意为：面向切面编程。面向切面编程的目标就是分离关注点。什么是关注点呢？就是关注点，就是你要做的事情。假如你是一位公子哥，没啥人生目标，每天衣来伸手，饭来张口，整天只知道一件事：玩（这就是你的关注点，你只要做这一件事）！但是有个问题，你在玩之前，你还需要起床、穿衣服、穿鞋子、叠被子、做早饭等等等等，但是这些事情你不想关注，也不用关注，你只想想玩，那么怎么办呢？  </p>
<p>对！这些事情通通交给下人去干。你有一个专门的仆人 A 帮你穿衣服，仆人 B 帮你穿鞋子，仆人 C 帮你叠好被子，仆人 D 帮你做饭，然后你就开始吃饭、去玩（这就是你一天的正事），你干完你的正事之后，回来，然后一系列仆人又开始帮你干这个干那个，然后一天就结束了！  </p>
<p>这就是 AOP。AOP 的好处就是你只需要干你的正事，其它事情别人帮你干。也许有一天，你想裸奔，不想穿衣服，那么你把仆人 A 解雇就是了！也许有一天，出门之前你还想带点钱，那么你再雇一个仆人 E 专门帮你干取钱的活！这就是AOP。每个人各司其职，灵活组合，达到一种可配置的、可插拔的程序结构。</p>
<h2 id="h2-2-spring-boot-aop-"><a name="2. Spring Boot 中的 AOP 处理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. Spring Boot 中的 AOP 处理</h2><h3 id="h3-2-1-aop-"><a name="2.1 AOP 依赖" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 AOP 依赖</h3><p>使用AOP，首先需要引入AOP的依赖。</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="h3-2-2-aop-"><a name="2.2 实现 AOP 切面" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 实现 AOP 切面</h3><p>Spring Boot 中使用 AOP 非常简单，假如我们要在项目中打印一些 log，在引入了上面的依赖之后，我们新建一个类 LogAspectHandler，用来定义切面和处理方法。只要在类上加个<code><a href="https://github.com/Aspect" title="&#64;Aspect" class="at-link">@Aspect</a></code>注解即可。<code><a href="https://github.com/Aspect" title="&#64;Aspect" class="at-link">@Aspect</a></code> 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。<code><a href="https://github.com/Component" title="&#64;Component" class="at-link">@Component</a></code> 注解让该类交给 Spring 来管理。</p>
<pre><code class="lang-java">@Aspect
@Component
public class LogAspectHandler {

}
</code></pre>
<p>这里主要介绍几个常用的注解及使用：</p>
<blockquote>
<p>1.<a href="https://github.com/Pointcut" title="&#64;Pointcut" class="at-link">@Pointcut</a>：定义一个切面，即上面所描述的关注的某件事入口。<br>2.<a href="https://github.com/Before" title="&#64;Before" class="at-link">@Before</a>：在做某件事之前做的事。<br>3.<a href="https://github.com/After" title="&#64;After" class="at-link">@After</a>：在做某件事之后做的事。<br>4.<a href="https://github.com/AfterReturning" title="&#64;AfterReturning" class="at-link">@AfterReturning</a>：在做某件事之后，对其返回值做增强处理。<br>5.<a href="https://github.com/AfterThrowing" title="&#64;AfterThrowing" class="at-link">@AfterThrowing</a>：在做某件事抛出异常时，处理。</p>
</blockquote>
<h4 id="h4-2-2-1-pointcut-"><a name="2.2.1 @Pointcut 注解" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.1 <a href="https://github.com/Pointcut" title="&#64;Pointcut" class="at-link">@Pointcut</a> 注解</h4><p><code><a href="https://github.com/Pointcut" title="&#64;Pointcut" class="at-link">@Pointcut</a></code> 注解：用来定义一个切面（切入点），即上文中所关注的某件事情的入口。切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行。</p>
<pre><code class="lang-java">@Aspect
@Component
public class LogAspectHandler {

    /**
     * 定义一个切面，拦截com.itcodai.course09.controller包和子包下的所有方法
     */
    @Pointcut(&quot;execution(* com.itcodai.course09.controller..*.*(..))&quot;)
    public void pointCut() {}
}
</code></pre>
<p><code><a href="https://github.com/Pointcut" title="&#64;Pointcut" class="at-link">@Pointcut</a></code> 注解指定一个切面，定义需要拦截的东西，这里介绍两个常用的表达式：一个是使用 <code>execution()</code>，另一个是使用 <code>annotation()</code>。<br>以 <code>execution(* com.itcodai.course09.controller..*.*(..)))</code> 表达式为例，语法如下：</p>
<blockquote>
<p><code>execution()</code> 为表达式主体<br>第一个 <code>*</code> 号的位置：表示返回值类型，<code>*</code> 表示所有类型<br>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，<code>com.itcodai.course09.controller</code> 包、子包下所有类的方法<br>第二个 <code>*</code> 号的位置：表示类名，<code>*</code> 表示所有类<br><code>*(..)</code> ：这个星号表示方法名，<code>*</code> 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数</p>
</blockquote>
<p><code>annotation()</code> 方式是针对某个注解来定义切面，比如我们对具有<code><a href="https://github.com/GetMapping" title="&#64;GetMapping" class="at-link">@GetMapping</a></code>注解的方法做切面，可以如下定义切面：</p>
<pre><code class="lang-java">@Pointcut(&quot;@annotation(org.springframework.web.bind.annotation.GetMapping)&quot;)
public void annotationCut() {}
</code></pre>
<p>然后使用该切面的话，就会切入注解是 <code><a href="https://github.com/GetMapping" title="&#64;GetMapping" class="at-link">@GetMapping</a></code> 的方法。因为在实际项目中，可能对于不同的注解有不同的逻辑处理，比如 <code><a href="https://github.com/GetMapping" title="&#64;GetMapping" class="at-link">@GetMapping</a></code>、<code><a href="https://github.com/PostMapping" title="&#64;PostMapping" class="at-link">@PostMapping</a></code>、<code><a href="https://github.com/DeleteMapping" title="&#64;DeleteMapping" class="at-link">@DeleteMapping</a></code> 等。所以这种按照注解的切入方式在实际项目中也很常用。</p>
<h4 id="h4-2-2-2-before-"><a name="2.2.2 @Before 注解" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.2 <a href="https://github.com/Before" title="&#64;Before" class="at-link">@Before</a> 注解</h4><p><code><a href="https://github.com/Before" title="&#64;Before" class="at-link">@Before</a></code> 注解指定的方法在切面切入目标方法之前执行，可以做一些 log 处理，也可以做一些信息的统计，比如获取用户的请求 url 以及用户的 ip 地址等等，这个在做个人站点的时候都能用得到，都是常用的方法。例如：</p>
<pre><code class="lang-java">@Aspect
@Component
public class LogAspectHandler {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 在上面定义的切面方法之前执行该方法
     * @param joinPoint jointPoint
     */
    @Before(&quot;pointCut()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        logger.info(&quot;====doBefore方法进入了====&quot;);

        // 获取签名
        Signature signature = joinPoint.getSignature();
        // 获取切入的包名
        String declaringTypeName = signature.getDeclaringTypeName();
        // 获取即将执行的方法名
        String funcName = signature.getName();
        logger.info(&quot;即将执行方法为: {}，属于{}包&quot;, funcName, declaringTypeName);

        // 也可以用来记录一些信息，比如获取请求的url和ip
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        // 获取请求url
        String url = request.getRequestURL().toString();
        // 获取请求ip
        String ip = request.getRemoteAddr();
        logger.info(&quot;用户请求的url为：{}，ip地址为：{}&quot;, url, ip);
    }
}
</code></pre>
<p>JointPoint 对象很有用，可以用它来获取一个签名，然后利用签名可以获取请求的包名、方法名，包括参数（通过 <code>joinPoint.getArgs()</code> 获取）等等。</p>
<h4 id="h4-2-2-3-after-"><a name="2.2.3 @After 注解" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.3 <a href="https://github.com/After" title="&#64;After" class="at-link">@After</a> 注解</h4><p><code><a href="https://github.com/After" title="&#64;After" class="at-link">@After</a></code> 注解和 <code><a href="https://github.com/Before" title="&#64;Before" class="at-link">@Before</a></code>  注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 log 处理。</p>
<pre><code class="lang-java">@Aspect
@Component
public class LogAspectHandler {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义一个切面，拦截com.itcodai.course09.controller包下的所有方法
     */
    @Pointcut(&quot;execution(* com.itcodai.course09.controller..*.*(..))&quot;)
    public void pointCut() {}

    /**
     * 在上面定义的切面方法之后执行该方法
     * @param joinPoint jointPoint
     */
    @After(&quot;pointCut()&quot;)
    public void doAfter(JoinPoint joinPoint) {

        logger.info(&quot;====doAfter方法进入了====&quot;);
        Signature signature = joinPoint.getSignature();
        String method = signature.getName();
        logger.info(&quot;方法{}已经执行完&quot;, method);
    }
}
</code></pre>
<p>到这里，我们来写一个 Controller 来测试一下执行结果，新建一个 AopController 如下：</p>
<pre><code class="lang-java">@RestController
@RequestMapping(&quot;/aop&quot;)
public class AopController {

    @GetMapping(&quot;/{name}&quot;)
    public String testAop(@PathVariable String name) {
        return &quot;Hello &quot; + name;
    }
}
</code></pre>
<p>启动项目，在浏览器中输入 <code>localhost:8080/aop/CSDN</code>，观察一下控制台的输出信息：</p>
<pre><code>====doBefore方法进入了====  
即将执行方法为: testAop，属于com.itcodai.course09.controller.AopController包  
用户请求的url为：http://localhost:8080/aop/name，ip地址为：0:0:0:0:0:0:0:1  
====doAfter方法进入了====  
方法testAop已经执行完
</code></pre><p>从打印出来的 log 中可以看出程序执行的逻辑与顺序，可以很直观的掌握 <code><a href="https://github.com/Before" title="&#64;Before" class="at-link">@Before</a></code> 和 <code><a href="https://github.com/After" title="&#64;After" class="at-link">@After</a></code> 两个注解的实际作用。</p>
<h4 id="h4-2-2-4-afterreturning-"><a name="2.2.4 @AfterReturning 注解" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.4 <a href="https://github.com/AfterReturning" title="&#64;AfterReturning" class="at-link">@AfterReturning</a> 注解</h4><p><code><a href="https://github.com/AfterReturning" title="&#64;AfterReturning" class="at-link">@AfterReturning</a></code> 注解和 <code><a href="https://github.com/After" title="&#64;After" class="at-link">@After</a></code> 有些类似，区别在于 <code><a href="https://github.com/AfterReturning" title="&#64;AfterReturning" class="at-link">@AfterReturning</a></code> 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理，例如：</p>
<pre><code class="lang-java">@Aspect
@Component
public class LogAspectHandler {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 在上面定义的切面方法返回后执行该方法，可以捕获返回对象或者对返回对象进行增强
     * @param joinPoint joinPoint
     * @param result result
     */
    @AfterReturning(pointcut = &quot;pointCut()&quot;, returning = &quot;result&quot;)
    public void doAfterReturning(JoinPoint joinPoint, Object result) {

        Signature signature = joinPoint.getSignature();
        String classMethod = signature.getName();
        logger.info(&quot;方法{}执行完毕，返回参数为：{}&quot;, classMethod, result);
        // 实际项目中可以根据业务做具体的返回值增强
        logger.info(&quot;对返回参数进行业务上的增强：{}&quot;, result + &quot;增强版&quot;);
    }
}
</code></pre>
<p>需要注意的是：在 <code><a href="https://github.com/AfterReturning" title="&#64;AfterReturning" class="at-link">@AfterReturning</a></code>注解 中，属性 <code>returning</code> 的值必须要和参数保持一致，否则会检测不到。该方法中的第二个入参就是被切方法的返回值，在 <code>doAfterReturning</code> 方法中可以对返回值进行增强，可以根据业务需要做相应的封装。我们重启一下服务，再测试一下（多余的 log 我不贴出来了）：</p>
<pre><code>方法testAop执行完毕，返回参数为：Hello CSDN  
对返回参数进行业务上的增强：Hello CSDN增强版
</code></pre><h4 id="h4-2-2-5-afterthrowing-"><a name="2.2.5 @AfterThrowing 注解" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.5 <a href="https://github.com/AfterThrowing" title="&#64;AfterThrowing" class="at-link">@AfterThrowing</a> 注解</h4><p>顾名思义，<code><a href="https://github.com/AfterThrowing" title="&#64;AfterThrowing" class="at-link">@AfterThrowing</a></code> 注解是当被切方法执行时抛出异常时，会进入 <code><a href="https://github.com/AfterThrowing" title="&#64;AfterThrowing" class="at-link">@AfterThrowing</a></code> 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。要注意的是 <code>throwing</code> 属性的值必须要和参数一致，否则会报错。该方法中的第二个入参即为抛出的异常。</p>
<pre><code class="lang-java">/**
 * 使用AOP处理log
 * @author shengwu ni
 * @date 2018/05/04 20:24
 */
@Aspect
@Component
public class LogAspectHandler {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 在上面定义的切面方法执行抛异常时，执行该方法
     * @param joinPoint jointPoint
     * @param ex ex
     */
    @AfterThrowing(pointcut = &quot;pointCut()&quot;, throwing = &quot;ex&quot;)
    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {
        Signature signature = joinPoint.getSignature();
        String method = signature.getName();
        // 处理异常的逻辑
        logger.info(&quot;执行方法{}出错，异常为：{}&quot;, method, ex);
    }
}
</code></pre>
<p>该方法我就不测试了，大家可以自行测试一下。</p>
<h2 id="h2-3-"><a name="3. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 总结</h2><p>本节课针对 Spring Boot 中的切面 AOP 做了详细的讲解，主要介绍了 Spring Boot 中 AOP 的引入，常用注解的使用，参数的使用，以及常用 api 的介绍。AOP 在实际项目中很有用，对切面方法执行前后都可以根据具体的业务，做相应的预处理或者增强处理，同时也可以用作异常捕获处理，可以根据具体业务场景，合理去使用 AOP。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--10-spring-boot-mybatis"><a name="第10课：Spring Boot集成MyBatis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第10课：Spring Boot集成MyBatis</h1><h2 id="h2-1-mybatis-"><a name="1. MyBatis 介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. MyBatis 介绍</h2><p>大家都知道，MyBatis 框架是一个持久层框架，是 Apache 下的顶级项目。Mybatis 可以让开发者的主要精力放在 sql 上，通过 Mybatis 提供的映射方式，自由灵活的生成满足需要的 sql 语句。使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs 映射成数据库中的记录，在国内可谓是占据了半壁江山。本节课程主要通过两种方式来对 Spring Boot 集成 MyBatis 做一讲解。重点讲解一下基于注解的方式。因为实际项目中使用注解的方式更多一点，更简洁一点，省去了很多 xml 配置（这不是绝对的，有些项目组中可能也在使用 xml 的方式）。</p>
<h2 id="h2-2-mybatis-"><a name="2. MyBatis 的配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. MyBatis 的配置</h2><h2 id="h2-2-1-"><a name="2.1 依赖导入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 依赖导入</h2><p>Spring Boot 集成 MyBatis，需要导入 <code>mybatis-spring-boot-starter</code> 和 mysql 的依赖，这里我们使用的版本时 1.3.2，如下：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.3.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<p>我们点开 <code>mybatis-spring-boot-starter</code> 依赖，可以看到我们之前使用 Spring 时候熟悉的依赖，就像我在课程的一开始介绍的那样，Spring Boot 致力于简化编码，使用 starter 系列将相关依赖集成在一起，开发者不需要关注繁琐的配置，非常方便。</p>
<pre><code class="lang-xml">&lt;!-- 省去其他 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="h2-2-2-properties-yml-"><a name="2.2 properties.yml配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 properties.yml配置</h2><p>我们再来看一下，集成 MyBatis 时需要在 properties.yml 配置文件中做哪些基本配置呢？</p>
<pre><code class="lang-xml"># 服务端口号
server:
  port: 8080

# 数据库地址
datasource:
  url: localhost:3306/blog_test

spring:
  datasource: # 数据库配置
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://${datasource.url}?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;maxReconnects=10
    username: root
    password: 123456
    hikari:
      maximum-pool-size: 10 # 最大连接池数
      max-lifetime: 1770000

mybatis:
  # 指定别名设置的包为所有entity
  type-aliases-package: com.itcodai.course10.entity
  configuration:
    map-underscore-to-camel-case: true # 驼峰命名规范
  mapper-locations: # mapper映射文件位置
    - classpath:mapper/*.xml
</code></pre>
<p>我们来简单介绍一下上面的这些配置：关于数据库的相关配置，我就不详细的解说了，这点相信大家已经非常熟练了，配置一下用户名、密码、数据库连接等等，这里使用的连接池是 Spring Boot 自带的 hikari，感兴趣的朋友可以去百度或者谷歌搜一搜，了解一下。  </p>
<p>这里说明一下 <code>map-underscore-to-camel-case: true</code>， 用来开启驼峰命名规范，这个比较好用，比如数据库中字段名为：<code>user_name</code>， 那么在实体类中可以定义属性为 <code>userName</code> （甚至可以写成 <code>username</code>，也能映射上），会自动匹配到驼峰属性，如果不这样配置的话，针对字段名和属性名不同的情况，会映射不到。</p>
<h2 id="h2-3-xml-"><a name="3. 基于 xml 的整合" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 基于 xml 的整合</h2><p>使用原始的 xml 方式，需要新建 UserMapper.xml 文件，在上面的 application.yml 配置文件中，我们已经定义了 xml 文件的路径：<code>classpath:mapper/*.xml</code>，所以我们在 resources 目录下新建一个 mapper 文件夹，然后创建一个 UserMapper.xml 文件。</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.itcodai.course10.dao.UserMapper&quot;&gt;
  &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.itcodai.course10.entity.User&quot;&gt;

    &lt;id column=&quot;id&quot; jdbcType=&quot;BIGINT&quot; property=&quot;id&quot; /&gt;
    &lt;result column=&quot;user_name&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;username&quot; /&gt;
    &lt;result column=&quot;password&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;password&quot; /&gt;
  &lt;/resultMap&gt;

   &lt;select id=&quot;getUserByName&quot; resultType=&quot;User&quot; parameterType=&quot;String&quot;&gt;
       select * from user where user_name = #{username}
  &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>这和整合 Spring 一样的，namespace 中指定的是对应的 Mapper， <code>&lt;resultMap&gt;</code> 中指定对应的实体类，即 User。然后在内部指定表的字段和实体的属性相对应即可。这里我们写一个根据用户名查询用户的 sql。  </p>
<p>实体类中有 id，username 和 password，我不在这贴代码，大家可以下载源码查看。UserMapper.java 文件中写一个接口即可：</p>
<pre><code class="lang-java">User getUserByName(String username);
</code></pre>
<p>中间省略 service 的代码，我们写一个 Controller 来测试一下：</p>
<pre><code class="lang-java">@RestController
public class TestController {

    @Resource
    private UserService userService;

    @RequestMapping(&quot;/getUserByName/{name}&quot;)
    public User getUserByName(@PathVariable String name) {
        return userService.getUserByName(name);
    }
}
</code></pre>
<p>启动项目，在浏览器中输入：<code>http://localhost:8080/getUserByName/CSDN</code> 即可查询到数据库表中用户名为 CSDN 的用户信息（事先搞两个数据进去即可）：</p>
<pre><code class="lang-json">{&quot;id&quot;:2,&quot;username&quot;:&quot;CSDN&quot;,&quot;password&quot;:&quot;123456&quot;}
</code></pre>
<p>这里需要注意一下：Spring Boot 如何知道这个 Mapper 呢？一种方法是在上面的 mapper 层对应的类上面添加 <code><a href="https://github.com/Mapper" title="&#64;Mapper" class="at-link">@Mapper</a></code> 注解即可，但是这种方法有个弊端，当我们有很多个 mapper 时，那么每一个类上面都得添加 <code><a href="https://github.com/Mapper" title="&#64;Mapper" class="at-link">@Mapper</a></code> 注解。另一种比较简便的方法是在 Spring Boot 启动类上添加<code><a href="https://github.com/MaperScan" title="&#64;MaperScan" class="at-link">@MaperScan</a></code> 注解，来扫描一个包下的所有 mapper。如下：</p>
<pre><code class="lang-java">@SpringBootApplication
@MapperScan(&quot;com.itcodai.course10.dao&quot;)
public class Course10Application {

    public static void main(String[] args) {
        SpringApplication.run(Course10Application.class, args);
    }
}
</code></pre>
<p>这样的话，<code>com.itcodai.course10.dao</code> 包下的所有 mapper 都会被扫描到了。</p>
<h2 id="h2-4-"><a name="4. 基于注解的整合" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 基于注解的整合</h2><p>基于注解的整合就不需要 xml 配置文件了，MyBatis 主要提供了 <code><a href="https://github.com/Select" title="&#64;Select" class="at-link">@Select</a></code>， <code><a href="https://github.com/Insert" title="&#64;Insert" class="at-link">@Insert</a></code>， <code><a href="https://github.com/Update" title="&#64;Update" class="at-link">@Update</a></code>， <code>Delete</code> 四个注解。这四个注解是用的非常多的，也很简单，注解后面跟上对应的 sql 语句即可，我们举个例子：</p>
<pre><code class="lang-java">@Select(&quot;select * from user where id = #{id}&quot;)
User getUser(Long id);
</code></pre>
<p>这跟 xml 文件中写 sql 语句是一样的，这样就不需要 xml 文件了，但是有个问题，有人可能会问，如果是两个参数呢？如果是两个参数，我们需要使用 <code><a href="https://github.com/Param" title="&#64;Param" class="at-link">@Param</a></code> 注解来指定每一个参数的对应关系，如下：</p>
<pre><code class="lang-java">@Select(&quot;select * from user where id = #{id} and user_name=#{name}&quot;)
User getUserByIdAndName(@Param(&quot;id&quot;) Long id, @Param(&quot;name&quot;) String username);
</code></pre>
<p>可以看出，<code><a href="https://github.com/Param" title="&#64;Param" class="at-link">@Param</a></code> 指定的参数应该要和 sql 中 <code>#{}</code> 取的参数名相同，不同则取不到。可以在 controller 中自行测试一下，接口都在源码中，文章中我就不贴测试代码和结果了。  </p>
<p>有个问题需要注意一下，一般我们在设计表字段后，都会根据自动生成工具生成实体类，这样的话，基本上实体类是能和表字段对应上的，最起码也是驼峰对应的，由于在上面配置文件中开启了驼峰的配置，所以字段都是能对的上的。但是，万一有对不上的呢？我们也有解决办法，使用 <code><a href="https://github.com/Results" title="&#64;Results" class="at-link">@Results</a></code> 注解来解决。</p>
<pre><code class="lang-java">@Select(&quot;select * from user where id = #{id}&quot;)
@Results({
        @Result(property = &quot;username&quot;, column = &quot;user_name&quot;),
        @Result(property = &quot;password&quot;, column = &quot;password&quot;)
})
User getUser(Long id);
</code></pre>
<p><code><a href="https://github.com/Results" title="&#64;Results" class="at-link">@Results</a></code> 中的 <code><a href="https://github.com/Result" title="&#64;Result" class="at-link">@Result</a></code> 注解是用来指定每一个属性和字段的对应关系，这样的话就可以解决上面说的这个问题了。  </p>
<p>当然了，我们也可以 xml 和注解相结合使用，目前我们实际的项目中也是采用混用的方式，因为有时候 xml 方便，有时候注解方便，比如就上面这个问题来说，如果我们定义了上面的这个 UserMapper.xml，那么我们完全可以使用 <code><a href="https://github.com/ResultMap" title="&#64;ResultMap" class="at-link">@ResultMap</a></code> 注解来替代 <code><a href="https://github.com/Results" title="&#64;Results" class="at-link">@Results</a></code> 注解，如下：</p>
<pre><code class="lang-java">@Select(&quot;select * from user where id = #{id}&quot;)
@ResultMap(&quot;BaseResultMap&quot;)
User getUser(Long id);
</code></pre>
<p><code><a href="https://github.com/ResultMap" title="&#64;ResultMap" class="at-link">@ResultMap</a></code> 注解中的值从哪来呢？对应的是 UserMapper.xml 文件中定义的 <code>&lt;resultMap&gt;</code> 时对应的 id 值：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.itcodai.course10.entity.User&quot;&gt;
</code></pre>
<p>这种 xml 和注解结合着使用的情况也很常见，而且也减少了大量的代码，因为 xml 文件可以使用自动生成工具去生成，也不需要人为手动敲，所以这种使用方式也很常见。</p>
<h2 id="h2-5-"><a name="5. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5. 总结</h2><p>本节课主要系统的讲解了 Spring Boot 集成 MyBatis 的过程，分为基于 xml 形式和基于注解的形式来讲解，通过实际配置手把手讲解了 Spring Boot 中 MyBatis 的使用方式，并针对注解方式，讲解了常见的问题已经解决方式，有很强的实战意义。在实际项目中，建议根据实际情况来确定使用哪种方式，一般 xml 和注解都在用。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--11-spring-boot-"><a name="第11课：Spring Boot事务配置管理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第11课：Spring Boot事务配置管理</h1><h2 id="h2-1-"><a name="1. 事务相关" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. 事务相关</h2><p>场景：我们在开发企业应用时，由于数据操作在顺序执行的过程中，线上可能有各种无法预知的问题，任何一步操作都有可能发生异常，异常则会导致后续的操作无法完成。此时由于业务逻辑并未正确的完成，所以在之前操作过数据库的动作并不可靠，需要在这种情况下进行数据的回滚。  </p>
<p>事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。这很好理解，转账、购票等等，必须整个事件流程全部执行完才能人为该事件执行成功，不能转钱转到一半，系统死了，转账人钱没了，收款人钱还没到。</p>
<p>事务管理是 Spring Boot 框架中最为常用的功能之一，我们在实际应用开发时，基本上在 service 层处理业务逻辑的时候都要加上事务，当然了，有时候可能由于场景需要，也不用加事务（比如我们就要往一个表里插数据，相互没有影响，插多少是多少，不能因为某个数据挂了，把之前插的全部回滚）。</p>
<h2 id="h2-2-spring-boot-"><a name="2. Spring Boot 事务配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. Spring Boot 事务配置</h2><h3 id="h3-2-1-"><a name="2.1 依赖导入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 依赖导入</h3><p>在 Spring Boot 中使用事务，需要导入 mysql 依赖：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.3.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>导入了 mysql 依赖后，Spring Boot 会自动注入 DataSourceTransactionManager，我们不需要任何其他的配置就可以用 <code><a href="https://github.com/Transactional" title="&#64;Transactional" class="at-link">@Transactional</a></code> 注解进行事务的使用。关于 mybatis 的配置，在上一节课中已经说明了，这里还是使用上一节课中的 mybatis 配置即可。  </p>
<h3 id="h3-2-2-"><a name="2.2 事务的测试" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 事务的测试</h3><p>我们首先在数据库表中插入一条数据：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">user_name</th>
<th style="text-align:center">password</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">倪升武</td>
<td style="text-align:center">123456</td>
</tr>
</tbody>
</table>
<p>然后我们写一个插入的 mapper：</p>
<pre><code class="lang-java">public interface UserMapper {

    @Insert(&quot;insert into user (user_name, password) values (#{username}, #{password})&quot;)
    Integer insertUser(User user);
}
</code></pre>
<p>OK，接下来我们来测试一下 Spring Boot 中的事务处理，在 service 层，我们手动抛出个异常来模拟实际中出现的异常，然后观察一下事务有没有回滚，如果数据库中没有新的记录，则说明事务回滚成功。</p>
<pre><code class="lang-java">@Service
public class UserServiceImpl implements UserService {

    @Resource
    private UserMapper userMapper;

    @Override
    @Transactional
    public void isertUser(User user) {
        // 插入用户信息
        userMapper.insertUser(user);
        // 手动抛出异常
        throw new RuntimeException();
    }
}
</code></pre>
<p>我们来测试一下：</p>
<pre><code class="lang-java">@RestController
public class TestController {

    @Resource
    private UserService userService;

    @PostMapping(&quot;/adduser&quot;)
    public String addUser(@RequestBody User user) throws Exception {
        if (null != user) {
            userService.isertUser(user);
            return &quot;success&quot;;
        } else {
            return &quot;false&quot;;
        }
    }
}
</code></pre>
<p>我们使用 postman 调用一下该接口，因为在程序中抛出了个异常，会造成事务回滚，我们刷新一下数据库，并没有增加一条记录，说明事务生效了。事务很简单，我们平时在使用的时候，一般不会有多少问题，但是并不仅仅如此……</p>
<h2 id="h2-3-"><a name="3. 常见问题总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 常见问题总结</h2><p>从上面的内容中可以看出，Spring Boot 中使用事务非常简单，<code><a href="https://github.com/Transactional" title="&#64;Transactional" class="at-link">@Transactional</a></code> 注解即可解决问题，说是这么说，但是在实际项目中，是有很多小坑在等着我们，这些小坑是我们在写代码的时候没有注意到，而且正常情况下不容易发现这些小坑，等项目写大了，某一天突然出问题了，排查问题非常困难，到时候肯定是抓瞎，需要费很大的精力去排查问题。  </p>
<p>这一小节，我专门针对实际项目中经常出现的，和事务相关的细节做一下总结，希望读者在读完之后，能够落实到自己的项目中，能有所受益。</p>
<h3 id="h3-3-1-"><a name="3.1 异常并没有被 ”捕获“ 到" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1 异常并没有被 ”捕获“ 到</h3><p>首先要说的，就是异常并没有被 ”捕获“ 到，导致事务并没有回滚。我们在业务层代码中，也许已经考虑到了异常的存在，或者编辑器已经提示我们需要抛出异常，但是这里面有个需要注意的地方：并不是说我们把异常抛出来了，有异常了事务就会回滚，我们来看一个例子：</p>
<pre><code class="lang-java">@Service
public class UserServiceImpl implements UserService {

    @Resource
    private UserMapper userMapper;

    @Override
    @Transactional
    public void isertUser2(User user) throws Exception {
        // 插入用户信息
        userMapper.insertUser(user);
        // 手动抛出异常
        throw new SQLException(&quot;数据库异常&quot;);
    }
}
</code></pre>
<p>我们看上面这个代码，其实并没有什么问题，手动抛出一个 <code>SQLException</code> 来模拟实际中操作数据库发生的异常，在这个方法中，既然抛出了异常，那么事务应该回滚，实际却不如此，读者可以使用我源码中 controller 的接口，通过 postman 测试一下，就会发现，仍然是可以插入一条用户数据的。  </p>
<p>那么问题出在哪呢？因为 Spring Boot 默认的事务规则是遇到运行异常（RuntimeException）和程序错误（Error）才会回滚。比如上面我们的例子中抛出的 RuntimeException 就没有问题，但是抛出 SQLException 就无法回滚了。针对非运行时异常，如果要进行事务回滚的话，可以在 <code><a href="https://github.com/Transactional" title="&#64;Transactional" class="at-link">@Transactional</a></code> 注解中使用 <code>rollbackFor</code> 属性来指定异常，比如 <code><a href="https://github.com/Transactional" title="&#64;Transactional" class="at-link">@Transactional</a>(rollbackFor = Exception.class)</code>，这样就没有问题了，所以在实际项目中，一定要指定异常。</p>
<h3 id="h3-3-2-"><a name="3.2 异常被 ”吃“ 掉" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2 异常被 ”吃“ 掉</h3><p>这个标题很搞笑，异常怎么会被吃掉呢？还是回归到现实项目中去，我们在处理异常时，有两种方式，要么抛出去，让上一层来捕获处理；要么把异常 try catch 掉，在异常出现的地方给处理掉。就因为有这中 try…catch，所以导致异常被 ”吃“ 掉，事务无法回滚。我们还是看上面那个例子，只不过简单修改一下代码：</p>
<pre><code class="lang-java">@Service
public class UserServiceImpl implements UserService {

    @Resource
    private UserMapper userMapper;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void isertUser3(User user) {
        try {
            // 插入用户信息
            userMapper.insertUser(user);
            // 手动抛出异常
            throw new SQLException(&quot;数据库异常&quot;);
        } catch (Exception e) {
            // 异常处理逻辑
        }
    }
}
</code></pre>
<p>读者可以使用我源码中 controller 的接口，通过 postman 测试一下，就会发现，仍然是可以插入一条用户数据，说明事务并没有因为抛出异常而回滚。这个细节往往比上面那个坑更难以发现，因为我们的思维很容易导致 try…catch 代码的产生，一旦出现这种问题，往往排查起来比较费劲，所以我们平时在写代码时，一定要多思考，多注意这种细节，尽量避免给自己埋坑。  </p>
<p>那这种怎么解决呢？直接往上抛，给上一层来处理即可，千万不要在事务中把异常自己 ”吃“ 掉。</p>
<h3 id="h3-3-3-"><a name="3.3 事务的范围" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3 事务的范围</h3><p>事务范围这个东西比上面两个坑埋的更深！我之所以把这个也写上，是因为这是我之前在实际项目中遇到的，该场景在这个课程中我就不模拟了，我写一个 demo 让大家看一下，把这个坑记住即可，以后在写代码时，遇到并发问题，就会注意这个坑了，那么这节课也就有价值了。  </p>
<p>我来写个 demo：</p>
<pre><code class="lang-java">@Service
public class UserServiceImpl implements UserService {

    @Resource
    private UserMapper userMapper;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public synchronized void isertUser4(User user) {
        // 实际中的具体业务……
        userMapper.insertUser(user);
    }
}
</code></pre>
<p>可以看到，因为要考虑并发问题，我在业务层代码的方法上加了个 synchronized 关键字。我举个实际的场景，比如一个数据库中，针对某个用户，只有一条记录，下一个插入动作过来，会先判断该数据库中有没有相同的用户，如果有就不插入，就更新，没有才插入，所以理论上，数据库中永远就一条同一用户信息，不会出现同一数据库中插入了两条相同用户的信息。  </p>
<p>但是在压测时，就会出现上面的问题，数据库中确实有两条同一用户的信息，分析其原因，在于事务的范围和锁的范围问题。  </p>
<p>从上面方法中可以看到，方法上是加了事务的，那么也就是说，在执行该方法开始时，事务启动，执行完了后，事务关闭。但是 synchronized 没有起作用，其实根本原因是因为事务的范围比锁的范围大。也就是说，在加锁的那部分代码执行完之后，锁释放掉了，但是事务还没结束，此时另一个线程进来了，事务没结束的话，第二个线程进来时，数据库的状态和第一个线程刚进来是一样的。即由于mysql Innodb引擎的默认隔离级别是可重复读（在同一个事务里，SELECT的结果是事务开始时时间点的状态），线程二事务开始的时候，线程一还没提交完成，导致读取的数据还没更新。第二个线程也做了插入动作，导致了脏数据。  </p>
<p>这个问题可以避免，第一，把事务去掉即可（不推荐）；第二，在调用该 service 的地方加锁，保证锁的范围比事务的范围大即可。</p>
<h2 id="h2-4-"><a name="4. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 总结</h2><p>本章主要总结了 Spring Boot 中如何使用事务，只要使用 <code><a href="https://github.com/Transactional" title="&#64;Transactional" class="at-link">@Transactional</a></code> 注解即可使用，非常简单方便。除此之外，重点总结了三个在实际项目中可能遇到的坑点，这非常有意义，因为事务这东西不出问题还好，出了问题比较难以排查，所以总结的这三点注意事项，希望能帮助到开发中的朋友。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--12-spring-boot-"><a name="第12课：Spring Boot中使用监听器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第12课：Spring Boot中使用监听器</h1><h2 id="h2-1-"><a name="1. 监听器介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. 监听器介绍</h2><p>什么是 web 监听器？web 监听器是一种 Servlet 中特殊的类，它们能帮助开发者监听 web 中特定的事件，比如 ServletContext, HttpSession, ServletRequest 的创建和销毁；变量的创建、销毁和修改等。可以在某些动作前后增加处理，实现监控。</p>
<h2 id="h2-2-spring-boot-"><a name="2. Spring Boot中监听器的使用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. Spring Boot中监听器的使用</h2><p>web 监听器的使用场景很多，比如监听 servlet 上下文用来初始化一些数据、监听 http session 用来获取当前在线的人数、监听客户端请求的 servlet request 对象来获取用户的访问信息等等。这一节中，我们主要通过这三个实际的使用场景来学习一下 Spring Boot 中监听器的使用。</p>
<h3 id="h3-2-1-servlet-"><a name="2.1 监听Servlet上下文对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 监听Servlet上下文对象</h3><p>监听 servlet 上下文对象可以用来初始化数据，用于缓存。什么意思呢？我举一个很常见的场景，比如用户在点击某个站点的首页时，一般都会展现出首页的一些信息，而这些信息基本上或者大部分时间都保持不变的，但是这些信息都是来自数据库。如果用户的每次点击，都要从数据库中去获取数据的话，用户量少还可以接受，如果用户量非常大的话，这对数据库也是一笔很大的开销。  </p>
<p>针对这种首页数据，大部分都不常更新的话，我们完全可以把它们缓存起来，每次用户点击的时候，我们都直接从缓存中拿，这样既可以提高首页的访问速度，又可以降低服务器的压力。如果做的更加灵活一点，可以再加个定时器，定期的来更新这个首页缓存。就类似与 CSDN 个人博客首页中排名的变化一样。</p>
<p>下面我们针对这个功能，来写一个 demo，在实际中，读者可以完全套用该代码，来实现自己项目中的相关逻辑。首先写一个 Service，模拟一下从数据库查询数据：</p>
<pre><code class="lang-java">@Service
public class UserService {

    /**
     * 获取用户信息
     * @return
     */
    public User getUser() {
        // 实际中会根据具体的业务场景，从数据库中查询对应的信息
        return new User(1L, &quot;倪升武&quot;, &quot;123456&quot;);
    }
}
</code></pre>
<p>然后写一个监听器，实现 <code>ApplicationListener&lt;ContextRefreshedEvent&gt;</code> 接口，重写 <code>onApplicationEvent</code> 方法，将 ContextRefreshedEvent 对象传进去。如果我们想在加载或刷新应用上下文时，也重新刷新下我们预加载的资源，就可以通过监听 ContextRefreshedEvent 来做这样的事情。如下：</p>
<pre><code class="lang-java">/**
 * 使用ApplicationListener来初始化一些数据到application域中的监听器
 * @author shengni ni
 * @date 2018/07/05
 */
@Component
public class MyServletContextListener implements ApplicationListener&lt;ContextRefreshedEvent&gt; {

    @Override
    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
        // 先获取到application上下文
        ApplicationContext applicationContext = contextRefreshedEvent.getApplicationContext();
        // 获取对应的service
        UserService userService = applicationContext.getBean(UserService.class);
        User user = userService.getUser();
        // 获取application域对象，将查到的信息放到application域中
        ServletContext application = applicationContext.getBean(ServletContext.class);
        application.setAttribute(&quot;user&quot;, user);
    }
}
</code></pre>
<p>正如注释中描述的一样，首先通过 contextRefreshedEvent 来获取 application 上下文，再通过 application 上下文来获取 UserService 这个 bean，项目中可以根据实际业务场景，也可以获取其他的 bean，然后再调用自己的业务代码获取相应的数据，最后存储到 application 域中，这样前端在请求相应数据的时候，我们就可以直接从 application 域中获取信息，减少数据库的压力。下面写一个 Controller 直接从 application 域中获取 user 信息来测试一下。</p>
<pre><code class="lang-java">@RestController
@RequestMapping(&quot;/listener&quot;)
public class TestController {

    @GetMapping(&quot;/user&quot;)
    public User getUser(HttpServletRequest request) {
        ServletContext application = request.getServletContext();
        return (User) application.getAttribute(&quot;user&quot;);
    }
}
</code></pre>
<p>启动项目，在浏览器中输入 <code>http://localhost:8080/listener/user</code> 测试一下即可，如果正常返回 user 信息，那么说明数据已经缓存成功。不过 application 这种是缓存在内存中，对内存会有消耗，后面的课程中我会讲到 redis，到时候再给大家介绍一下 redis 的缓存。</p>
<h3 id="h3-2-2-http-session-"><a name="2.2 监听HTTP会话 Session对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 监听HTTP会话 Session对象</h3><p>监听器还有一个比较常用的地方就是用来监听 session 对象，来获取在线用户数量，现在有很多开发者都有自己的网站，监听 session 来获取当前在下用户数量是个很常见的使用场景，下面来介绍一下如何来使用。</p>
<pre><code class="lang-java">/**
 * 使用HttpSessionListener统计在线用户数的监听器
 * @author shengwu ni
 * @date 2018/07/05
 */
@Component
public class MyHttpSessionListener implements HttpSessionListener {

    private static final Logger logger = LoggerFactory.getLogger(MyHttpSessionListener.class);

    /**
     * 记录在线的用户数量
     */
    public Integer count = 0;

    @Override
    public synchronized void sessionCreated(HttpSessionEvent httpSessionEvent) {
        logger.info(&quot;新用户上线了&quot;);
        count++;
        httpSessionEvent.getSession().getServletContext().setAttribute(&quot;count&quot;, count);
    }

    @Override
    public synchronized void sessionDestroyed(HttpSessionEvent httpSessionEvent) {
        logger.info(&quot;用户下线了&quot;);
        count--;
        httpSessionEvent.getSession().getServletContext().setAttribute(&quot;count&quot;, count);
    }
}
</code></pre>
<p>可以看出，首先该监听器需要实现 HttpSessionListener 接口，然后重写 <code>sessionCreated</code> 和 <code>sessionDestroyed</code> 方法，在 <code>sessionCreated</code> 方法中传递一个 HttpSessionEvent 对象，然后将当前 session 中的用户数量加1，<code>sessionDestroyed</code> 方法刚好相反，不再赘述。然后我们写一个 Controller 来测试一下。</p>
<pre><code class="lang-java">@RestController
@RequestMapping(&quot;/listener&quot;)
public class TestController {

    /**
     * 获取当前在线人数，该方法有bug
     * @param request
     * @return
     */
    @GetMapping(&quot;/total&quot;)
    public String getTotalUser(HttpServletRequest request) {
        Integer count = (Integer) request.getSession().getServletContext().getAttribute(&quot;count&quot;);
        return &quot;当前在线人数：&quot; + count;
    }
}
</code></pre>
<p>该 Controller 中是直接获取当前 session 中的用户数量，启动服务器，在浏览器中输入 <code>localhost:8080/listener/total</code> 可以看到返回的结果是1，再打开一个浏览器，请求相同的地址可以看到 count 是 2 ，这没有问题。但是如果关闭一个浏览器再打开，理论上应该还是2，但是实际测试却是 3。原因是 session 销毁的方法没有执行（可以在后台控制台观察日志打印情况），当重新打开时，服务器找不到用户原来的 session，于是又重新创建了一个 session，那怎么解决该问题呢？我们可以将上面的 Controller 方法改造一下：</p>
<pre><code class="lang-java">@GetMapping(&quot;/total2&quot;)
public String getTotalUser(HttpServletRequest request, HttpServletResponse response) {
    Cookie cookie;
    try {
        // 把sessionId记录在浏览器中
        cookie = new Cookie(&quot;JSESSIONID&quot;, URLEncoder.encode(request.getSession().getId(), &quot;utf-8&quot;));
        cookie.setPath(&quot;/&quot;);
        //设置cookie有效期为2天，设置长一点
        cookie.setMaxAge( 48*60 * 60);
        response.addCookie(cookie);
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }
    Integer count = (Integer) request.getSession().getServletContext().getAttribute(&quot;count&quot;);
    return &quot;当前在线人数：&quot; + count;
}
</code></pre>
<p>可以看出，该处理逻辑是让服务器记得原来那个 session，即把原来的 sessionId 记录在浏览器中，下次再打开时，把这个 sessionId 传过去，这样服务器就不会重新再创建了。重启一下服务器，在浏览器中再次测试一下，即可避免上面的问题。</p>
<h3 id="h3-2-3-servlet-request-"><a name="2.3 监听客户端请求Servlet Request对象" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3 监听客户端请求Servlet Request对象</h3><p>使用监听器获取用户的访问信息比较简单，实现 ServletRequestListener 接口即可，然后通过 request 对象获取一些信息。如下：</p>
<pre><code class="lang-java">/**
 * 使用ServletRequestListener获取访问信息
 * @author shengwu ni
 * @date 2018/07/05
 */
@Component
public class MyServletRequestListener implements ServletRequestListener {

    private static final Logger logger = LoggerFactory.getLogger(MyServletRequestListener.class);

    @Override
    public void requestInitialized(ServletRequestEvent servletRequestEvent) {
        HttpServletRequest request = (HttpServletRequest) servletRequestEvent.getServletRequest();
        logger.info(&quot;session id为：{}&quot;, request.getRequestedSessionId());
        logger.info(&quot;request url为：{}&quot;, request.getRequestURL());

        request.setAttribute(&quot;name&quot;, &quot;倪升武&quot;);
    }

    @Override
    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {

        logger.info(&quot;request end&quot;);
        HttpServletRequest request = (HttpServletRequest) servletRequestEvent.getServletRequest();
        logger.info(&quot;request域中保存的name值为：{}&quot;, request.getAttribute(&quot;name&quot;));

    }

}
</code></pre>
<p>这个比较简单，不再赘述，接下来写一个 Controller 测试一下即可。</p>
<pre><code class="lang-java">@GetMapping(&quot;/request&quot;)
public String getRequestInfo(HttpServletRequest request) {
    System.out.println(&quot;requestListener中的初始化的name数据：&quot; + request.getAttribute(&quot;name&quot;));
    return &quot;success&quot;;
}
</code></pre>
<h2 id="h2-3-spring-boot-"><a name="3. Spring Boot中自定义事件监听" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. Spring Boot中自定义事件监听</h2><p>在实际项目中，我们往往需要自定义一些事件和监听器来满足业务场景，比如在微服务中会有这样的场景：微服务 A 在处理完某个逻辑之后，需要通知微服务 B 去处理另一个逻辑，或者微服务 A 处理完某个逻辑之后，需要将数据同步到微服务 B，这种场景非常普遍，这个时候，我们可以自定义事件以及监听器来监听，一旦监听到微服务 A 中的某事件发生，就去通知微服务 B 处理对应的逻辑。</p>
<h3 id="h3-3-1-"><a name="3.1 自定义事件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1 自定义事件</h3><p>自定义事件需要继承 ApplicationEvent 对象，在事件中定义一个 User 对象来模拟数据，构造方法中将 User 对象传进来初始化。如下：</p>
<pre><code class="lang-java">/**
 * 自定义事件
 * @author shengwu ni
 * @date 2018/07/05
 */
public class MyEvent extends ApplicationEvent {

    private User user;

    public MyEvent(Object source, User user) {
        super(source);
        this.user = user;
    }

    // 省去get、set方法
}
</code></pre>
<h3 id="h3-3-2-"><a name="3.2 自定义监听器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2 自定义监听器</h3><p>接下来，自定义一个监听器来监听上面定义的 MyEvent 事件，自定义监听器需要实现 <code>ApplicationListener</code> 接口即可。如下：</p>
<pre><code class="lang-java">/**
 * 自定义监听器，监听MyEvent事件
 * @author shengwu ni
 * @date 2018/07/05
 */
@Component
public class MyEventListener implements ApplicationListener&lt;MyEvent&gt; {
    @Override
    public void onApplicationEvent(MyEvent myEvent) {
        // 把事件中的信息获取到
        User user = myEvent.getUser();
        // 处理事件，实际项目中可以通知别的微服务或者处理其他逻辑等等
        System.out.println(&quot;用户名：&quot; + user.getUsername());
        System.out.println(&quot;密码：&quot; + user.getPassword());

    }
}
</code></pre>
<p>然后重写 <code>onApplicationEvent</code> 方法，将自定义的 MyEvent 事件传进来，因为该事件中，我们定义了 User 对象（该对象在实际中就是需要处理的数据，在下文来模拟），然后就可以使用该对象的信息了。</p>
<p>OK，定义好了事件和监听器之后，需要手动发布事件，这样监听器才能监听到，这需要根据实际业务场景来触发，针对本文的例子，我写个触发逻辑，如下：</p>
<pre><code class="lang-java">/**
 * UserService
 * @author shengwu ni
 */
@Service
public class UserService {

    @Resource
    private ApplicationContext applicationContext;

    /**
     * 发布事件
     * @return
     */
    public User getUser2() {
        User user = new User(1L, &quot;倪升武&quot;, &quot;123456&quot;);
        // 发布事件
        MyEvent event = new MyEvent(this, user);
        applicationContext.publishEvent(event);
        return user;
    }
}
</code></pre>
<p>在 service 中注入 ApplicationContext，在业务代码处理完之后，通过 ApplicationContext 对象手动发布 MyEvent 事件，这样我们自定义的监听器就能监听到，然后处理监听器中写好的业务逻辑。</p>
<p>最后，在 Controller 中写一个接口来测试一下：</p>
<pre><code class="lang-java">@GetMapping(&quot;/request&quot;)
public String getRequestInfo(HttpServletRequest request) {
    System.out.println(&quot;requestListener中的初始化的name数据：&quot; + request.getAttribute(&quot;name&quot;));
    return &quot;success&quot;;
}
</code></pre>
<p>在浏览器中输入 <code>http://localhost:8080/listener/publish</code>，然后观察一下控制台打印的用户名和密码，即可说明自定义监听器已经生效。</p>
<h2 id="h2-4-"><a name="4. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 总结</h2><p>本课系统的介绍了监听器原理，以及在 Spring Boot 中如何使用监听器，列举了监听器的三个常用的案例，有很好的实战意义。最后讲解了项目中如何自定义事件和监听器，并结合微服务中常见的场景，给出具体的代码模型，均能运用到实际项目中去，希望读者认真消化。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--13-spring-boot-"><a name="第13课：Spring Boot中使用拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第13课：Spring Boot中使用拦截器</h1><p>拦截器的原理很简单，是 AOP 的一种实现，专门拦截对动态资源的后台请求，即拦截对控制层的请求。使用场景比较多的是判断用户是否有权限请求后台，更拔高一层的使用场景也有，比如拦截器可以结合 websocket 一起使用，用来拦截 websocket 请求，然后做相应的处理等等。拦截器不会拦截静态资源，Spring Boot 的默认静态目录为 resources/static，该目录下的静态页面、js、css、图片等等，不会被拦截（也要看如何实现，有些情况也会拦截，我在下文会指出）。</p>
<h2 id="h2-1-"><a name="1. 拦截器的快速使用" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. 拦截器的快速使用</h2><p>使用拦截器很简单，只需要两步即可：定义拦截器和配置拦截器。在配置拦截器中，Spring Boot 2.0 以后的版本和之前的版本有所不同，我会重点讲解一下这里可能出现的坑。</p>
<h3 id="h3-1-1-"><a name="1.1 定义拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.1 定义拦截器</h3><p>定义拦截器，只需要实现 <code>HandlerInterceptor</code> 接口，<code>HandlerInterceptor</code> 接口是所有自定义拦截器或者 Spring Boot 提供的拦截器的鼻祖，所以，首先来了解下该接口。该接口中有三个方法： <code>preHandle(……)</code>、<code>postHandle(……)</code> 和 <code>afterCompletion(……)</code> 。</p>
<blockquote>
<p><code>preHandle(……)</code> 方法：该方法的执行时机是，当某个 url 已经匹配到对应的 Controller 中的某个方法，且在这个方法执行之前。所以 <code>preHandle(……)</code> 方法可以决定是否将请求放行，这是通过返回值来决定的，返回 true 则放行，返回 false 则不会向后执行。<br><code>postHandle(……)</code> 方法：该方法的执行时机是，当某个 url 已经匹配到对应的 Controller 中的某个方法，且在执行完了该方法，但是在 DispatcherServlet 视图渲染之前。所以在这个方法中有个 ModelAndView 参数，可以在此做一些修改动作。<br><code>afterCompletion(……)</code> 方法：顾名思义，该方法是在整个请求处理完成后（包括视图渲染）执行，这时做一些资源的清理工作，这个方法只有在 <code>preHandle(……)</code> 被成功执行后并且返回 true 才会被执行。  </p>
</blockquote>
<p>了解了该接口，接下来自定义一个拦截器。</p>
<pre><code class="lang-java">/**
 * 自定义拦截器
 * @author shengwu ni
 * @date 2018/08/03
 */
public class MyInterceptor implements HandlerInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(MyInterceptor.class);

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

        HandlerMethod handlerMethod = (HandlerMethod) handler;
        Method method = handlerMethod.getMethod();
        String methodName = method.getName();
        logger.info(&quot;====拦截到了方法：{}，在该方法执行之前执行====&quot;, methodName);
        // 返回true才会继续执行，返回false则取消当前请求
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        logger.info(&quot;执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        logger.info(&quot;整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了&quot;);
    }
}
</code></pre>
<p>OK，到此为止，拦截器已经定义完成，接下来就是对该拦截器进行拦截配置。</p>
<h3 id="h3-1-2-"><a name="1.2 配置拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.2 配置拦截器</h3><p>在 Spring Boot 2.0 之前，我们都是直接继承 WebMvcConfigurerAdapter 类，然后重写 <code>addInterceptors</code> 方法来实现拦截器的配置。但是在 Spring Boot 2.0 之后，该方法已经被废弃了（当然，也可以继续用），取而代之的是 WebMvcConfigurationSupport 方法，如下：</p>
<pre><code class="lang-java">@Configuration
public class MyInterceptorConfig extends WebMvcConfigurationSupport {

    @Override
    protected void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new MyInterceptor()).addPathPatterns(&quot;/**&quot;);
        super.addInterceptors(registry);
    }
}
</code></pre>
<p>在该配置中重写 <code>addInterceptors</code> 方法，将我们上面自定义的拦截器添加进去，<code>addPathPatterns</code> 方法是添加要拦截的请求，这里我们拦截所有的请求。这样就配置好拦截器了，接下来写一个 Controller 测试一下：</p>
<pre><code class="lang-java">@Controller
@RequestMapping(&quot;/interceptor&quot;)
public class InterceptorController {

    @RequestMapping(&quot;/test&quot;)
    public String test() {
        return &quot;hello&quot;;
    }
}
</code></pre>
<p>让其跳转到 hello.html 页面，直接在 hello.html 中输出 <code>hello interceptor</code> 即可。启动项目，在浏览器中输入 <code>localhost:8080/interceptor/test</code> 看一下控制台的日志：</p>
<pre><code>====拦截到了方法：test，在该方法执行之前执行====  
执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染  
整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
</code></pre><p>可以看出拦截器已经生效，并能看出其执行顺序。</p>
<h3 id="h3-1-3-"><a name="1.3 解决静态资源被拦截问题" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.3 解决静态资源被拦截问题</h3><p>上文中已经介绍了拦截器的定义和配置，但是这样是否就没问题了呢？其实不然，如果使用上面这种配置的话，我们会发现一个缺陷，那就是静态资源被拦截了。可以在 resources/static/ 目录下放置一个图片资源或者 html 文件，然后启动项目直接访问，即可看到无法访问的现象。</p>
<p>也就是说，虽然 Spring Boot 2.0 废弃了WebMvcConfigurerAdapter，但是 WebMvcConfigurationSupport 又会导致默认的静态资源被拦截，这就需要我们手动将静态资源放开。</p>
<p>如何放开呢？除了在 MyInterceptorConfig 配置类中重写 <code>addInterceptors</code> 方法外，还需要再重写一个方法：<code>addResourceHandlers</code>，将静态资源放开：</p>
<pre><code class="lang-java">/**
 * 用来指定静态资源不被拦截，否则继承WebMvcConfigurationSupport这种方式会导致静态资源无法直接访问
 * @param registry
 */
@Override
protected void addResourceHandlers(ResourceHandlerRegistry registry) {
    registry.addResourceHandler(&quot;/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;);
    super.addResourceHandlers(registry);
}
</code></pre>
<p>这样配置好之后，重启项目，静态资源也可以正常访问了。如果你是个善于学习或者研究的人，那肯定不会止步于此，没错，上面这种方式的确能解决静态资源无法访问的问题，但是，还有更方便的方式来配置。</p>
<p>我们不继承 WebMvcConfigurationSupport 类，直接实现 WebMvcConfigurer 接口，然后重写 <code>addInterceptors</code> 方法，将自定义的拦截器添加进去即可，如下：</p>
<pre><code class="lang-java">@Configuration
public class MyInterceptorConfig implements WebMvcConfigurer {
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        // 实现WebMvcConfigurer不会导致静态资源被拦截
        registry.addInterceptor(new MyInterceptor()).addPathPatterns(&quot;/**&quot;);
    }
}
</code></pre>
<p>这样就非常方便了，实现 WebMvcConfigure 接口的话，不会拦截 Spring Boot 默认的静态资源。</p>
<p>这两种方式都可以，具体他们之间的细节，感兴趣的读者可以做进一步的研究，由于这两种方式的不同，继承 WebMvcConfigurationSupport 类的方式可以用在前后端分离的项目中，后台不需要访问静态资源（就不需要放开静态资源了）；实现 WebMvcConfigure 接口的方式可以用在非前后端分离的项目中，因为需要读取一些图片、css、js文件等等。</p>
<h2 id="h2-2-"><a name="2. 拦截器使用实例" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. 拦截器使用实例</h2><h3 id="h3-2-1-"><a name="2.1 判断用户有没有登录" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 判断用户有没有登录</h3><p>一般用户登录功能我们可以这么做，要么往 session 中写一个 user，要么针对每个 user 生成一个 token，第二种要更好一点，那么针对第二种方式，如果用户登录成功了，每次请求的时候都会带上该用户的 token，如果未登录，则没有该 token，服务端可以检测这个 token 参数的有无来判断用户有没有登录，从而实现拦截功能。我们改造一下 <code>preHandle</code> 方法，如下：</p>
<pre><code class="lang-java">@Override
public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

    HandlerMethod handlerMethod = (HandlerMethod) handler;
    Method method = handlerMethod.getMethod();
    String methodName = method.getName();
    logger.info(&quot;====拦截到了方法：{}，在该方法执行之前执行====&quot;, methodName);

    // 判断用户有没有登陆，一般登陆之后的用户都有一个对应的token
    String token = request.getParameter(&quot;token&quot;);
    if (null == token || &quot;&quot;.equals(token)) {
        logger.info(&quot;用户未登录，没有权限执行……请登录&quot;);
        return false;
    }

    // 返回true才会继续执行，返回false则取消当前请求
    return true;
}
</code></pre>
<p>重启项目，在浏览器中输入 <code>localhost:8080/interceptor/test</code> 后查看控制台日志，发现被拦截，如果在浏览器中输入 <code>localhost:8080/interceptor/test?token=123</code> 即可正常往下走。</p>
<h3 id="h3-2-2-"><a name="2.2 取消拦截操作" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 取消拦截操作</h3><p>根据上文，如果我要拦截所有 <code>/admin</code> 开头的 url 请求的话，需要在拦截器配置中添加这个前缀，但是在实际项目中，可能会有这种场景出现：某个请求也是 <code>/admin</code> 开头的，但是不能拦截，比如 <code>/admin/login</code> 等等，这样的话又需要去配置。那么，可不可以做成一个类似于开关的东西，哪里不需要拦截，我就在哪里弄个开关上去，做成这种灵活的可插拔的效果呢？</p>
<p>是可以的，我们可以定义一个注解，该注解专门用来取消拦截操作，如果某个 Controller 中的方法我们不需要拦截掉，即可在该方法上加上我们自定义的注解即可，下面先定义一个注解：</p>
<pre><code class="lang-java">/**
 * 该注解用来指定某个方法不用拦截
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface UnInterception {
}
</code></pre>
<p>然后在 Controller 中的某个方法上添加该注解，在拦截器处理方法中添加该注解取消拦截的逻辑，如下：</p>
<pre><code class="lang-java">@Override
public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

    HandlerMethod handlerMethod = (HandlerMethod) handler;
    Method method = handlerMethod.getMethod();
    String methodName = method.getName();
    logger.info(&quot;====拦截到了方法：{}，在该方法执行之前执行====&quot;, methodName);

    // 通过方法，可以获取该方法上的自定义注解，然后通过注解来判断该方法是否要被拦截
    // @UnInterception 是我们自定义的注解
    UnInterception unInterception = method.getAnnotation(UnInterception.class);
    if (null != unInterception) {
        return true;
    }
    // 返回true才会继续执行，返回false则取消当前请求
    return true;
}
</code></pre>
<p>Controller 中的方法代码可以参见源码，重启项目在浏览器中输入 <code>http://localhost:8080/interceptor/test2?token=123</code> 测试一下，可以看出，加了该注解的方法不会被拦截。</p>
<h2 id="h2-3-"><a name="3. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 总结</h2><p>本节主要介绍了 Spring Boot 中拦截器的使用，从拦截器的创建、配置，到拦截器对静态资源的影响，都做了详细的分析。Spring Boot 2.0 之后拦截器的配置支持两种方式，可以根据实际情况选择不同的配置方式。最后结合实际中的使用，举了两个常用的场景，希望读者能够认真消化，掌握拦截器的使用。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--14-spring-boot-redis"><a name="第14课：Spring Boot 中集成Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第14课：Spring Boot 中集成Redis</h1><h2 id="h2-1-redis-"><a name="1. Redis 介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. Redis 介绍</h2><p>Redis 是一种非关系型数据库（NoSQL），NoSQL 是以 key-value 的形式存储的，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说 SQL 标准，ACID 属性，表结构等等，这类数据库主要有以下特点：非关系型的、分布式的、开源的、水平可扩展的。<br>NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。<br>Redis 的 key 可以是字符串、哈希、链表、集合和有序集合。value 类型很多，包括 String、list、set、zset。这些数据类型都支持 push/pop、add/remove、取交集和并集以及更多更丰富的操作，Redis 也支持各种不同方式的排序。为了保证效率，数据都是在缓存在内存中，它也可以周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中。 有了 redis 有哪些好处呢？举个比较简单的例子，看下图： </p>
<p><img src="https://images.gitbook.cn/4258b9c0-9f93-11e8-a34f-d93da92347ea" alt="Redis使用场景"></p>
<p>Redis 集群和 Mysql 是同步的，首先会从 redis 中获取数据，如果 redis 挂了，再从 mysql 中获取数据，这样网站就不会挂掉。更多关于 redis 的介绍以及使用场景，可以谷歌和百度，在这就不赘述了。</p>
<h2 id="h2-2-redis-"><a name="2. Redis 安装" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. Redis 安装</h2><p>本课程是在 vmvare 虚拟机中来安装的 redis （centos 7），学习的时候如果有自己的阿里云服务器，也可以在阿里云中来安装 redis，都可以。只要能 ping 的通云主机或者虚拟机的 ip，然后在虚拟机或者云主机中放行对应的端口（或者关掉防火墙）即可访问 redis。下面来介绍一下 redis 的安装过程：</p>
<ul>
<li>安装 gcc 编译</li></ul>
<p>因为后面安装redis的时候需要编译，所以事先得先安装gcc编译。阿里云主机已经默认安装了 gcc，如果是自己安装的虚拟机，那么需要先安装一下 gcc：</p>
<pre><code>yum install gcc-c++
</code></pre><ul>
<li>下载 redis</li></ul>
<p>有两种方式下载安装包，一种是去官网上下载（<a href="https://redis.io），然后将安装包考到">https://redis.io），然后将安装包考到</a> centos 中，另种方法是直接使用 wget 来下载：</p>
<pre><code>wget http://download.redis.io/releases/redis-3.2.8.tar.gz
</code></pre><p>如果没有安装过 wget，可以通过如下命令安装：</p>
<pre><code>yum install wget
</code></pre><ul>
<li>解压安装</li></ul>
<p>解压安装包：</p>
<pre><code>tar –vzxf redis-3.2.8.tar.gz
</code></pre><p>然后将解压的文件夹 redis-3.2.8 放到 <code>/usr/local/</code> 下，一般安装软件都放在 <code>/usr/local</code> 下。然后进入 <code>/usr/local/redis-3.2.8/</code> 文件夹下，执行 <code>make</code> 命令即可完成安装。<br>【注】如果 make 失败，可以尝试如下命令：</p>
<pre><code>make MALLOC=libc
make install
</code></pre><ul>
<li>修改配置文件</li></ul>
<p>安装成功之后，需要修改一下配置文件，包括允许接入的 ip，允许后台执行，设置密码等等。<br>打开 redis 配置文件：<code>vi redis.conf</code><br>在命令模式下输入 <code>/bind</code> 来查找 bind 配置，按 n 来查找下一个，找到配置后，将 bind 配置成 0.0.0.0，允许任意服务器来访问 redis，即：</p>
<pre><code>bind 0.0.0.0
</code></pre><p>使用同样的方法，将 daemonize 改成 yes （默认为 no），允许 redis 在后台执行。<br>将 requirepass 注释打开，并设置密码为 123456（密码自己设置）。</p>
<ul>
<li>启动 redis</li></ul>
<p>在 redis-3.2.8 目录下，指定刚刚修改好的配置文件 redis.conf 来启动 redis：</p>
<pre><code>redis-server ./redis.conf
</code></pre><p>再启动 redis 客户端：</p>
<pre><code>redis-cli
</code></pre><p>由于我们设置了密码，在启动客户端之后，输入 <code>auth 123456</code> 即可登录进入客户端。<br>然后我们来测试一下，往 redis 中插入一个数据：</p>
<pre><code>set name CSDN
</code></pre><p>然后来获取 name</p>
<pre><code>get name
</code></pre><p>如果正常获取到 CSDN，则说明没有问题。</p>
<h2 id="h2-3-spring-boot-redis"><a name="3. Spring Boot 集成 Redis" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. Spring Boot 集成 Redis</h2><h3 id="h3-3-1-"><a name="3.1 依赖导入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1 依赖导入</h3><p>Spring Boot 集成 redis 很方便，只需要导入一个 redis 的 starter 依赖即可。如下：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;!--阿里巴巴fastjson --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
    &lt;version&gt;1.2.35&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>这里也导入阿里巴巴的 fastjson 是为了在后面我们要存一个实体，为了方便把实体转换成 json 字符串存进去。</p>
<h3 id="h3-3-2-redis-"><a name="3.2 Redis 配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2 Redis 配置</h3><p>导入了依赖之后，我们在 application.yml 文件里配置 redis：</p>
<pre><code class="lang-yml">server:
  port: 8080
spring:
  #redis相关配置
  redis:
    database: 5
    # 配置redis的主机地址，需要修改成自己的
    host: 192.168.48.190
    port: 6379
    password: 123456
    timeout: 5000
    jedis:
      pool:
        # 连接池中的最大空闲连接，默认值也是8。
        max-idle: 500
        # 连接池中的最小空闲连接，默认值也是0。
        min-idle: 50
        # 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)
        max-active: 1000
        # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
        max-wait: 2000
</code></pre>
<h3 id="h3-3-3-api-"><a name="3.3 常用 api 介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3 常用 api 介绍</h3><p>Spring Boot 对 redis 的支持已经非常完善了，丰富的 api 已经足够我们日常的开发，这里我介绍几个最常用的供大家学习，其他 api 希望大家自己多学习，多研究。用到会去查即可。</p>
<p>有两个 redis 模板：RedisTemplate 和 StringRedisTemplate。我们不使用 RedisTemplate，RedisTemplate 提供给我们操作对象，操作对象的时候，我们通常是以 json 格式存储，但在存储的时候，会使用 Redis 默认的内部序列化器；导致我们存进里面的是乱码之类的东西。当然了，我们可以自己定义序列化，但是比较麻烦，所以使用 StringRedisTemplate 模板。StringRedisTemplate 主要给我们提供字符串操作，我们可以将实体类等转成 json 字符串即可，在取出来后，也可以转成相应的对象，这就是上面我导入了阿里 fastjson 的原因。</p>
<h4 id="h4-3-3-1-redis-string-"><a name="3.3.1 redis:string 类型" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3.1 redis:string 类型</h4><p>新建一个 RedisService，注入 StringRedisTemplate，使用 <code>stringRedisTemplate.opsForValue()</code> 可以获取 <code>ValueOperations&lt;String, String&gt;</code> 对象，通过该对象即可读写 redis 数据库了。如下：</p>
<pre><code class="lang-java">public class RedisService {

    @Resource
    private StringRedisTemplate stringRedisTemplate;

    /**
     * set redis: string类型
     * @param key key
     * @param value value
     */
    public void setString(String key, String value){
        ValueOperations&lt;String, String&gt; valueOperations = stringRedisTemplate.opsForValue();
        valueOperations.set(key, value);
    }

    /**
     * get redis: string类型
     * @param key key
     * @return
     */
    public String getString(String key){
        return stringRedisTemplate.opsForValue().get(key);
    }
</code></pre>
<p>该对象操作的是 string，我们也可以存实体类，只需要将实体类转换成 json 字符串即可。下面来测试一下：</p>
<pre><code class="lang-java">@RunWith(SpringRunner.class)
@SpringBootTest
public class Course14ApplicationTests {

    private static final Logger logger = LoggerFactory.getLogger(Course14ApplicationTests.class);

    @Resource
    private RedisService redisService;

    @Test
    public void contextLoads() {
        //测试redis的string类型
        redisService.setString(&quot;weichat&quot;,&quot;程序员私房菜&quot;);
        logger.info(&quot;我的微信公众号为：{}&quot;, redisService.getString(&quot;weichat&quot;));

        // 如果是个实体，我们可以使用json工具转成json字符串，
        User user = new User(&quot;CSDN&quot;, &quot;123456&quot;);
        redisService.setString(&quot;userInfo&quot;, JSON.toJSONString(user));
        logger.info(&quot;用户信息：{}&quot;, redisService.getString(&quot;userInfo&quot;));
    }
}
</code></pre>
<p>先启动 redis，然后运行这个测试用例，观察控制台打印的日志如下：</p>
<pre><code>我的微信公众号为：程序员私房菜
用户信息：{&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;CSDN&quot;}
</code></pre><h4 id="h4-3-3-2-redis-hash-"><a name="3.3.2 redis:hash 类型" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3.2 redis:hash 类型</h4><p>hash 类型其实原理和 string 一样的，但是有两个 key，使用 <code>stringRedisTemplate.opsForHash()</code> 可以获取 <code>HashOperations&lt;String, Object, Object&gt;</code> 对象。比如我们要存储订单信息，所有订单信息都放在 order 下，针对不同用户的订单实体，可以通过用户的 id 来区分，这就相当于两个 key 了。</p>
<pre><code class="lang-java">@Service
public class RedisService {

    @Resource
    private StringRedisTemplate stringRedisTemplate;

    /**
     * set redis: hash类型
     * @param key key
     * @param filedKey filedkey
     * @param value value
     */
    public void setHash(String key, String filedKey, String value){
        HashOperations&lt;String, Object, Object&gt; hashOperations = stringRedisTemplate.opsForHash();
        hashOperations.put(key,filedKey, value);
    }

    /**
     * get redis: hash类型
     * @param key key
     * @param filedkey filedkey
     * @return
     */
    public String getHash(String key, String filedkey){
        return (String) stringRedisTemplate.opsForHash().get(key, filedkey);
    }
}
</code></pre>
<p>可以看出，hash 和 string 没啥两样，只不过多了个参数，Spring Boot 中操作 redis 非常简单方便。来测试一下：</p>
<pre><code class="lang-java">@SpringBootTest
public class Course14ApplicationTests {

    private static final Logger logger = LoggerFactory.getLogger(Course14ApplicationTests.class);

    @Resource
    private RedisService redisService;

    @Test
    public void contextLoads() {
        //测试redis的hash类型
        redisService.setHash(&quot;user&quot;, &quot;name&quot;, JSON.toJSONString(user));
        logger.info(&quot;用户姓名：{}&quot;, redisService.getHash(&quot;user&quot;,&quot;name&quot;));
    }
}
</code></pre>
<h4 id="h4-3-3-3-redis-list-"><a name="3.3.3 redis:list 类型" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3.3 redis:list 类型</h4><p>使用 <code>stringRedisTemplate.opsForList()</code> 可以获取 <code>ListOperations&lt;String, String&gt; listOperations</code>  redis 列表对象，该列表是个简单的字符串列表，可以支持从左侧添加，也可以支持从右侧添加，一个列表最多包含 2 ^ 32 -1 个元素。</p>
<pre><code class="lang-java">@Service
public class RedisService {

    @Resource
    private StringRedisTemplate stringRedisTemplate;

    /**
     * set redis:list类型
     * @param key key
     * @param value value
     * @return
     */
    public long setList(String key, String value){
        ListOperations&lt;String, String&gt; listOperations = stringRedisTemplate.opsForList();
        return listOperations.leftPush(key, value);
    }

    /**
     * get redis:list类型
     * @param key key
     * @param start start
     * @param end end
     * @return
     */
    public List&lt;String&gt; getList(String key, long start, long end){
        return stringRedisTemplate.opsForList().range(key, start, end);
    }
}
</code></pre>
<p>可以看出，这些 api 都是一样的形式，方便记忆也方便使用。具体的 api 细节我就不展开了，大家可以自己看 api 文档。其实，这些 api 根据参数和返回值也能知道它们是做什么用的。来测试一下：</p>
<pre><code class="lang-java">@RunWith(SpringRunner.class)
@SpringBootTest
public class Course14ApplicationTests {

    private static final Logger logger = LoggerFactory.getLogger(Course14ApplicationTests.class);

    @Resource
    private RedisService redisService;

    @Test
    public void contextLoads() {
        //测试redis的list类型
        redisService.setList(&quot;list&quot;, &quot;football&quot;);
        redisService.setList(&quot;list&quot;, &quot;basketball&quot;);
        List&lt;String&gt; valList = redisService.getList(&quot;list&quot;,0,-1);
        for(String value :valList){
            logger.info(&quot;list中有：{}&quot;, value);
        }
    }
}
</code></pre>
<h2 id="h2-4-"><a name="4. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 总结</h2><p>本节主要介绍了 redis 的使用场景、安装过程，以及 Spring Boot 中集成 redis 的详细步骤。在实际项目中，通常都用 redis 作为缓存，在查询数据库的时候，会先从 redis 中查找，如果有信息，则从 redis 中取；如果没有，则从数据库中查，并且同步到 redis 中，下次 redis 中就有了。更新和删除也是如此，都需要同步到 redis。redis 在高并发场景下运用的很多。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--15-spring-boot-activemq"><a name="第15课： Spring Boot中集成ActiveMQ" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第15课： Spring Boot中集成ActiveMQ</h1><h2 id="h2-1-jms-activemq-"><a name="1. JMS 和 ActiveMQ 介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. JMS 和 ActiveMQ 介绍</h2><h3 id="h3-1-1-jms-"><a name="1.1 JMS 是啥" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.1 JMS 是啥</h3><p>百度百科的解释：</p>
<blockquote>
<p>JMS 即 Java 消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的 API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java 消息服务是一个与具体平台无关的 API，绝大多数 MOM 提供商都对 JMS 提供支持。</p>
</blockquote>
<p>JMS 只是接口，不同的提供商或者开源组织对其有不同的实现，ActiveMQ 就是其中之一，它支持JMS，是 Apache 推出的。JMS 中有几个对象模型：</p>
<blockquote>
<p>连接工厂：ConnectionFactory<br>JMS连接：Connection<br>JMS会话：Session<br>JMS目的：Destination<br>JMS生产者：Producer<br>JMS消费者：Consumer<br>JMS消息两种类型：点对点和发布/订阅。  </p>
</blockquote>
<p>可以看出 JMS 实际上和 JDBC 有点类似，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。本文主要使用 ActiveMQ。</p>
<h3 id="h3-1-2-activemq"><a name="1.2 ActiveMQ" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.2 ActiveMQ</h3><p>ActiveMQ 是 Apache 的一个能力强劲的开源消息总线。ActiveMQ 完全支持JMS1.1和J2EE 1.4规范，尽管 JMS 规范出台已经是很久的事情了，但是 JMS 在当今的 Java EE 应用中间仍然扮演着特殊的地位。ActiveMQ 用在异步消息的处理上，所谓异步消息即消息发送者无需等待消息接收者的处理以及返回，甚至无需关心消息是否发送成功。   </p>
<p>异步消息主要有两种目的地形式，队列（queue）和主题（topic），队列用于点对点形式的消息通信，主题用于发布/订阅式的消息通信。本章节主要来学习一下在 Spring Boot 中如何使用这两种形式的消息。</p>
<h2 id="h2-2-activemq-"><a name="2. ActiveMQ安装" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. ActiveMQ安装</h2><p>使用 ActiveMQ 首先需要去官网下载，官网地址为：<a href="http://activemq.apache.org/">http://activemq.apache.org/</a><br>本课程使用的版本是 apache-activemq-5.15.3，下载后解压缩会有一个名为 apache-activemq-5.15.3 的文件夹，没错，这就安装好了，非常简单，开箱即用。打开文件夹会看到里面有个 <code>activemq-all-5.15.3.jar</code>，这个 jar 我们是可以加进工程里的，但是使用 maven 的话，这个 jar 我们不需要。</p>
<p>在使用 ActiveMQ 之前，首先得先启动，刚才解压后的目录中有个 bin 目录，里面有 win32 和 win64 两个目录，根据自己电脑选择其中一个打开运行里面的 activemq.bat 即可启动 ActiveMQ。<br>消息生产者生产消息发布到queue中，然后消息消费者从queue中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费<br>启动完成后，在浏览器中输入 <code>http://127.0.0.1:8161/admin/</code> 来访问 ActiveMQ 的服务器，用户名和密码是 admin/admin。如下：</p>
<p><img src="https://images.gitbook.cn/cfb9c460-aa94-11e8-888f-df33be8ed191" alt="activemq"></p>
<p>我们可以看到有 Queues 和 Topics 这两个选项，这两个选项分别是点对点消息和发布/订阅消息的查看窗口。何为点对点消息和发布/订阅消息呢？</p>
<p>点对点消息：消息生产者生产消息发布到 queue 中，然后消息消费者从 queue 中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue 中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue 支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费。</p>
<p>发布/订阅消息：消息生产者（发布）将消息发布到 topic 中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。下面分析具体的实现方式。</p>
<h2 id="h2-3-activemq-"><a name="3. ActiveMQ集成" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. ActiveMQ集成</h2><h3 id="h3-3-1-"><a name="3.1 依赖导入和配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.1 依赖导入和配置</h3><p>在 Spring Boot 中集成 ActiveMQ 需要导入如下 starter 依赖：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>然后在 application.yml 配置文件中，对 activemq 做一下配置：</p>
<pre><code class="lang-yml">spring:
  activemq:
      # activemq url
    broker-url: tcp://localhost:61616
    in-memory: true
    pool:
      # 如果此处设置为true，需要添加activemq-pool的依赖包，否则会自动配置失败，无法注入JmsMessagingTemplate
      enabled: false
</code></pre>
<h3 id="h3-3-2-queue-topic-"><a name="3.2 Queue 和 Topic 的创建" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.2 Queue 和 Topic 的创建</h3><p>首先我们需要创建两种消息 Queue 和 Topic，这两种消息的创建，我们放到 ActiveMqConfig 中来创建，如下：</p>
<pre><code class="lang-java">/**
 * activemq的配置
 * @author  shengwu ni
 */
@Configuration
public class ActiveMqConfig {
    /**
     * 发布/订阅模式队列名称
     */
    public static final String TOPIC_NAME = &quot;activemq.topic&quot;;
    /**
     * 点对点模式队列名称
     */
    public static final String QUEUE_NAME = &quot;activemq.queue&quot;;

    @Bean
    public Destination topic() {
        return new ActiveMQTopic(TOPIC_NAME);
    }

    @Bean
    public Destination queue() {
        return new ActiveMQQueue(QUEUE_NAME);
    }
}
</code></pre>
<p>可以看出创建 Queue 和 Topic 两种消息，分别使用 <code>new ActiveMQQueue</code> 和 <code>new ActiveMQTopic</code> 来创建，分别跟上对应消息的名称即可。这样在其他地方就可以直接将这两种消息作为组件注入进来了。</p>
<h3 id="h3-3-3-"><a name="3.3 消息的发送接口" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.3 消息的发送接口</h3><p>在 Spring Boot 中，我们只要注入 JmsMessagingTemplate 模板即可快速发送消息，如下：</p>
<pre><code class="lang-java">/**
 * 消息发送者
 * @author shengwu ni
 */
@Service
public class MsgProducer {

    @Resource
    private JmsMessagingTemplate jmsMessagingTemplate;

    public void sendMessage(Destination destination, String msg) {
        jmsMessagingTemplate.convertAndSend(destination, msg);
    }
}
</code></pre>
<p><code>convertAndSend</code> 方法中第一个参数是消息发送的目的地，第二个参数是具体的消息内容。</p>
<h3 id="h3-3-4-"><a name="3.4 点对点消息生产与消费" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4 点对点消息生产与消费</h3><h4 id="h4-3-4-1-"><a name="3.4.1 点对点消息的生产" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4.1 点对点消息的生产</h4><p>消息的生产，我们放到 Controller 中来做，由于上面已经生成了 Queue 消息的组件，所以在 Controller 中我们直接注入进来即可。然后调用上文的消息发送方法 <code>sendMessage</code> 即可成功生产一条消息。</p>
<pre><code class="lang-java">/**
 * ActiveMQ controller
 * @author shengwu ni
 */
@RestController
@RequestMapping(&quot;/activemq&quot;)
public class ActiveMqController {

    private static final Logger logger = LoggerFactory.getLogger(ActiveMqController.class);

    @Resource
    private MsgProducer producer;
    @Resource
    private Destination queue;

    @GetMapping(&quot;/send/queue&quot;)
    public String sendQueueMessage() {

        logger.info(&quot;===开始发送点对点消息===&quot;);
        producer.sendMessage(queue, &quot;Queue: hello activemq!&quot;);
        return &quot;success&quot;;
    }
}
</code></pre>
<h4 id="h4-3-4-2-"><a name="3.4.2 点对点消息的消费" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4.2 点对点消息的消费</h4><p>点对点消息的消费很简单，只要我们指定目的地即可，jms 监听器一直在监听是否有消息过来，如果有，则消费。</p>
<pre><code class="lang-java">/**
 * 消息消费者
 * @author shengwu ni
 */
@Service
public class QueueConsumer {

    /**
     * 接收点对点消息
     * @param msg
     */
    @JmsListener(destination = ActiveMqConfig.QUEUE_NAME)
    public void receiveQueueMsg(String msg) {
        System.out.println(&quot;收到的消息为：&quot; + msg);
    }
}
</code></pre>
<p>可以看出，使用 <code><a href="https://github.com/JmsListener" title="&#64;JmsListener" class="at-link">@JmsListener</a></code> 注解来指定要监听的目的地，在消息接收方法内部，我们可以根据具体的业务需求做相应的逻辑处理即可。</p>
<h4 id="h4-3-4-3-"><a name="3.4.3 测试一下" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.4.3 测试一下</h4><p>启动项目，在浏览器中输入：<code>http://localhost:8081/activemq/send/queue</code>，观察控制台的输出日志，出现下面的日志说明消息发送和消费成功。</p>
<pre><code>收到的消息为：Queue: hello activemq!
</code></pre><h3 id="h3-3-5-"><a name="3.5 发布/订阅消息的生产和消费" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.5 发布/订阅消息的生产和消费</h3><h4 id="h4-3-5-1-"><a name="3.5.1 发布/订阅消息的生产" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.5.1 发布/订阅消息的生产</h4><p>和点对点消息一样，我们注入 topic 并调用 producer 的 <code>sendMessage</code> 方法即可发送订阅消息，如下，不再赘述：</p>
<pre><code class="lang-java">@RestController
@RequestMapping(&quot;/activemq&quot;)
public class ActiveMqController {

    private static final Logger logger = LoggerFactory.getLogger(ActiveMqController.class);

    @Resource
    private MsgProducer producer;
    @Resource
    private Destination topic;

    @GetMapping(&quot;/send/topic&quot;)
    public String sendTopicMessage() {

        logger.info(&quot;===开始发送订阅消息===&quot;);
        producer.sendMessage(topic, &quot;Topic: hello activemq!&quot;);
        return &quot;success&quot;;
    }
}
</code></pre>
<h4 id="h4-3-5-2-"><a name="3.5.2 发布/订阅消息的消费" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.5.2 发布/订阅消息的消费</h4><p>发布/订阅消息的消费和点对点不同，订阅消息支持多个消费者一起消费。其次，Spring Boot 中默认的时点对点消息，所以在使用 topic 时，会不起作用，我们需要在配置文件 application.yml 中添加一个配置：</p>
<pre><code class="lang-yml">spring:
  jms:
    pub-sub-domain: true
</code></pre>
<p>该配置是 false 的话，则为点对点消息，也是 Spring Boot 默认的。这样是可以解决问题，但是如果这样配置的话，上面提到的点对点消息又不能正常消费了。所以二者不可兼得，这并非一个好的解决办法。</p>
<p>比较好的解决办法是，我们定义一个工厂，<code><a href="https://github.com/JmsListener" title="&#64;JmsListener" class="at-link">@JmsListener</a></code> 注解默认只接收 queue 消息，如果要接收 topic 消息，需要设置一下 containerFactory。我们还在上面的那个 ActiveMqConfig 配置类中添加：</p>
<pre><code class="lang-java">/**
 * activemq的配置
 *
 * @author shengwu ni
 */
@Configuration
public class ActiveMqConfig {
    // 省略其他内容

    /**
     * JmsListener注解默认只接收queue消息,如果要接收topic消息,需要设置containerFactory
     */
    @Bean
    public JmsListenerContainerFactory topicListenerContainer(ConnectionFactory connectionFactory) {
        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
        // 相当于在application.yml中配置：spring.jms.pub-sub-domain=true
        factory.setPubSubDomain(true);
        return factory;
    }
}
</code></pre>
<p>经过这样的配置之后，我们在消费的时候，在 <code><a href="https://github.com/JmsListener" title="&#64;JmsListener" class="at-link">@JmsListener</a></code> 注解中指定这个容器工厂即可消费 topic 消息。如下：</p>
<pre><code class="lang-java">/**
 * Topic消息消费者
 * @author shengwu ni
 */
@Service
public class TopicConsumer1 {

    /**
     * 接收订阅消息
     * @param msg
     */
    @JmsListener(destination = ActiveMqConfig.TOPIC_NAME, containerFactory = &quot;topicListenerContainer&quot;)
    public void receiveTopicMsg(String msg) {
        System.out.println(&quot;收到的消息为：&quot; + msg);
    }

}
</code></pre>
<p>指定 containerFactory 属性为上面我们自己配置的 topicListenerContainer 即可。由于 topic 消息可以多个消费，所以该消费的类可以拷贝几个一起测试一下，这里我就不贴代码了，可以参考我的源码测试。</p>
<h4 id="h4-3-5-3-"><a name="3.5.3 测试一下" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.5.3 测试一下</h4><p>启动项目，在浏览器中输入：<code>http://localhost:8081/activemq/send/topic</code>，观察控制台的输出日志，出现下面的日志说明消息发送和消费成功。</p>
<pre><code>收到的消息为：Topic: hello activemq!
收到的消息为：Topic: hello activemq!
</code></pre><h2 id="h2-4-"><a name="4. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 总结</h2><p>本章主要介绍了 jms 和 activemq 的相关概念、activemq 的安装与启动。详细分析了 Spring Boot 中点对点消息和发布/订阅消息两种方式的配置、消息生产和消费方式。ActiveMQ 是能力强劲的开源消息总线，在异步消息的处理上很有用，希望大家好好消化一下。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--16-spring-boot-shiro"><a name="第16课：Spring Boot中集成 Shiro" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第16课：Spring Boot中集成 Shiro</h1><p>Shiro 是一个强大、简单易用的 Java 安全框架，主要用来更便捷的认证，授权，加密，会话管等等，可为任何应用提供安全保障。本课程主要来介绍 Shiro 的认证和授权功能。</p>
<h2 id="h2-1-shiro-"><a name="1. Shiro 三大核心组件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. Shiro 三大核心组件</h2><p>Shiro 有三大核心的组件：<code>Subject</code>、<code>SecurityManager</code> 和 <code>Realm</code>。先来看一下它们之间的关系。</p>
<p><img src="https://images.gitbook.cn/2dd0f5f0-af4a-11e8-a51c-93c39f2785b1" alt="三大核心组件的关系"></p>
<ol>
<li>Subject：认证主体。它包含两个信息：Principals 和 Credentials。看一下这两个信息具体是什么。</li></ol>
<blockquote>
<p>Principals：身份。可以是用户名，邮件，手机号码等等，用来标识一个登录主体身份；<br>Credentials：凭证。常见有密码，数字证书等等。</p>
</blockquote>
<p>说白了，就是需要认证的东西，最常见的就是用户名密码了，比如用户在登录的时候，Shiro 需要去进行身份认证，就需要 Subject 认证主体。</p>
<ol>
<li><p>SecurityManager：安全管理员。这是 Shiro 架构的核心，它就像 Shiro 内部所有原件的保护伞一样。我们在项目中一般都会配置 SecurityManager，开发人员大部分精力主要是在 Subject 认证主体上面。我们在与 Subject 进行交互的时候，实际上是 SecurityManager 在背后做一些安全操作。</p>
</li><li><p>Realms：Realms 是一个域，它是连接 Shiro 和具体应用的桥梁，当需要与安全数据交互的时候，比如用户账户、访问控制等，Shiro 就会从一个或多个 Realms 中去查找。我们一般会自己定制 Realm，这在下文会详细说明。</p>
</li></ol>
<h2 id="h2-1-shiro-"><a name="1. Shiro 身份和权限认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. Shiro 身份和权限认证</h2><h3 id="h3-1-2-shiro-"><a name="1.2 Shiro 身份认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.2 Shiro 身份认证</h3><p>我们来分析一下 Shiro 身份认证的过程，看一下官方的一个认证图：</p>
<p><img src="https://images.gitbook.cn/f21c53a0-af4f-11e8-a51c-93c39f2785b1" alt="认证过程"></p>
<p>Step1：应用程序代码在调用 <code>Subject.login(token)</code> 方法后，传入代表最终用户的身份和凭证的 AuthenticationToken 实例 token。 </p>
<p>Step2：将 Subject 实例委托给应用程序的 SecurityManager（Shiro的安全管理）来开始实际的认证工作。这里开始真正的认证工作了。 </p>
<p>Step3，4，5：然后 SecurityManager 就会根据具体的 realm 去进行安全认证了。 从图中可以看出，realm 可以自定义（Custom Realm）。</p>
<h3 id="h3-1-3-shiro-"><a name="1.3 Shiro 权限认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.3 Shiro 权限认证</h3><p>权限认证，也就是访问控制，即在应用中控制谁能访问哪些资源。在权限认证中，最核心的三个要素是：权限，角色和用户。</p>
<blockquote>
<p>权限（permission）：即操作资源的权利，比如访问某个页面，以及对某个模块的数据的添加，修改，删除，查看的权利；<br>角色（role）：指的是用户担任的的角色，一个角色可以有多个权限；<br>用户（user）：在 Shiro 中，代表访问系统的用户，即上面提到的 Subject 认证主体。</p>
</blockquote>
<p>它们之间的的关系可以用下图来表示： </p>
<p><img src="https://images.gitbook.cn/44a68bc0-af75-11e8-85ef-dd986da3511e" alt="用户、角色和权限的关系"></p>
<p>一个用户可以有多个角色，而不同的角色可以有不同的权限，也可由有相同的权限。比如说现在有三个角色，1是普通角色，2也是普通角色，3是管理员，角色1只能查看信息，角色2只能添加信息，管理员都可以，而且还可以删除信息，类似于这样。</p>
<h2 id="h2-2-spring-boot-shiro-"><a name="2. Spring Boot 集成 Shiro 过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. Spring Boot 集成 Shiro 过程</h2><h3 id="h3-2-1-"><a name="2.1 依赖导入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 依赖导入</h3><p>Spring Boot 2.0.3 集成 Shiro 需要导入如下 starter 依赖：</p>
<pre><code class="lang-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;
    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;
    &lt;version&gt;1.4.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="h3-2-2-"><a name="2.2 数据库表数据初始化" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 数据库表数据初始化</h3><p>这里主要涉及到三张表：用户表、角色表和权限表，其实在 demo 中，我们完全可以自己模拟一下，不用建表，但是为了更加接近实际情况，我们还是加入 mybatis，来操作数据库。下面是数据库表的脚本。</p>
<pre><code class="lang-sql">CREATE TABLE `t_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,
  `rolename` varchar(20) DEFAULT NULL COMMENT &#39;角色名称&#39;,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8

CREATE TABLE `t_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;用户主键&#39;,
  `username` varchar(20) NOT NULL COMMENT &#39;用户名&#39;,
  `password` varchar(20) NOT NULL COMMENT &#39;密码&#39;,
  `role_id` int(11) DEFAULT NULL COMMENT &#39;外键关联role表&#39;,
  PRIMARY KEY (`id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `t_user_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `t_role` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8

CREATE TABLE `t_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,
  `permissionname` varchar(50) NOT NULL COMMENT &#39;权限名&#39;,
  `role_id` int(11) DEFAULT NULL COMMENT &#39;外键关联role&#39;,
  PRIMARY KEY (`id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `t_permission_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `t_role` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8
</code></pre>
<p>其中，t_user，t_role 和 t_permission，分别存储用户信息，角色信息和权限信息，表建立好了之后，我们往表里插入一些测试数据。<br>t_user 表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">username</th>
<th style="text-align:center">password</th>
<th style="text-align:center">role_id</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">csdn1</td>
<td style="text-align:center">123456</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">csdn2</td>
<td style="text-align:center">123456</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">csdn3</td>
<td style="text-align:center">123456</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
<p>t_role 表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">rolename</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">admin</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">teacher</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">student</td>
</tr>
</tbody>
</table>
<p>t_permission 表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">permissionname</th>
<th style="text-align:center">role_id</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><code>user:*</code></td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><code>student:*</code></td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<p>解释一下这里的权限：<code>user:*</code>表示权限可以是 <code>user:create</code> 或者其他，<code>*</code> 处表示一个占位符，我们可以自己定义，具体的会在下文 Shiro 配置那里说明。</p>
<h3 id="h3-2-2-realm"><a name="2.2 自定义 Realm" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 自定义 Realm</h3><p>有了数据库表和数据之后，我们开始自定义 realm，自定义 realm 需要继承 AuthorizingRealm 类，因为该类封装了很多方法，它也是一步步继承自 Realm 类的，继承了 AuthorizingRealm 类后，需要重写两个方法：</p>
<blockquote>
<p><code>doGetAuthenticationInfo()</code> 方法：用来验证当前登录的用户，获取认证信息<br><code>doGetAuthorizationInfo()</code> 方法：用来为当前登陆成功的用户授予权限和角色</p>
</blockquote>
<p>具体实现如下，相关的解释我放在代码的注释中，这样更加方便直观：</p>
<pre><code class="lang-java">/**
 * 自定义realm
 * @author shengwu ni
 */
public class MyRealm extends AuthorizingRealm {

    @Resource
    private UserService userService;

    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        // 获取用户名
        String username = (String) principalCollection.getPrimaryPrincipal();
        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();
        // 给该用户设置角色，角色信息存在t_role表中取
        authorizationInfo.setRoles(userService.getRoles(username));
        // 给该用户设置权限，权限信息存在t_permission表中取
        authorizationInfo.setStringPermissions(userService.getPermissions(username));
        return authorizationInfo;
    }

    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        // 根据token获取用户名，如果您不知道该该token怎么来的，先可以不管，下文会解释
        String username = (String) authenticationToken.getPrincipal();
        // 根据用户名从数据库中查询该用户
        User user = userService.getByUsername(username);
        if(user != null) {
            // 把当前用户存到session中
            SecurityUtils.getSubject().getSession().setAttribute(&quot;user&quot;, user);
            // 传入用户名和密码进行身份认证，并返回认证信息
            AuthenticationInfo authcInfo = new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), &quot;myRealm&quot;);
            return authcInfo;
        } else {
            return null;
        }
    }
}
</code></pre>
<p>从上面两个方法中可以看出：验证身份的时候是根据用户输入的用户名先从数据库中查出该用户名对应的用户，这时候并没有涉及到密码，也就是说到这一步的时候，即使用户输入的密码不对，也是可以查出来该用户的，然后将该用户的正确信息封装到 authcInfo 中返回给 Shiro，接下来就是Shiro的事了，它会根据这里面的真实信息与用户前台输入的用户名和密码进行校验， 这个时候也要校验密码了，如果校验通过就让用户登录，否则跳转到指定页面。同理，权限验证的时候也是先根据用户名从数据库中获取与该用户名有关的角色和权限，然后封装到 authorizationInfo 中返回给 Shiro。</p>
<h3 id="h3-2-3-shiro-"><a name="2.3 Shiro 配置" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3 Shiro 配置</h3><p>自定义的 realm 写好了，接下来需要对 Shiro 进行配置了。我们主要配置三个东西：自定义 realm、安全管理器 SecurityManager 和 Shiro 过滤器。如下：</p>
<p>配置自定义 realm：</p>
<pre><code class="lang-java">@Configuration
public class ShiroConfig {

    private static final Logger logger = LoggerFactory.getLogger(ShiroConfig.class);

    /**
     * 注入自定义的realm
     * @return MyRealm
     */
    @Bean
    public MyRealm myAuthRealm() {
        MyRealm myRealm = new MyRealm();
        logger.info(&quot;====myRealm注册完成=====&quot;);
        return myRealm;
    }
}
</code></pre>
<p>配置安全管理器 SecurityManager：</p>
<pre><code class="lang-java">@Configuration
public class ShiroConfig {

    private static final Logger logger = LoggerFactory.getLogger(ShiroConfig.class);

    /**
     * 注入安全管理器
     * @return SecurityManager
     */
    @Bean
    public SecurityManager securityManager() {
        // 将自定义realm加进来
        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(myAuthRealm());
        logger.info(&quot;====securityManager注册完成====&quot;);
        return securityManager;
    }
}
</code></pre>
<p>配置 SecurityManager 时，需要将上面的自定义 realm 添加进来，这样的话 Shiro 才会走到自定义的 realm 中。</p>
<p>配置 Shiro 过滤器：</p>
<pre><code class="lang-java">@Configuration
public class ShiroConfig {

    private static final Logger logger = LoggerFactory.getLogger(ShiroConfig.class);

    /**
     * 注入Shiro过滤器
     * @param securityManager 安全管理器
     * @return ShiroFilterFactoryBean
     */
    @Bean
    public ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager) {
        // 定义shiroFactoryBean
        ShiroFilterFactoryBean shiroFilterFactoryBean=new ShiroFilterFactoryBean();

        // 设置自定义的securityManager
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        // 设置默认登录的url，身份认证失败会访问该url
        shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);
        // 设置成功之后要跳转的链接
        shiroFilterFactoryBean.setSuccessUrl(&quot;/success&quot;);
        // 设置未授权界面，权限认证失败会访问该url
        shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/unauthorized&quot;);

        // LinkedHashMap是有序的，进行顺序拦截器配置
        Map&lt;String,String&gt; filterChainMap = new LinkedHashMap&lt;&gt;();

        // 配置可以匿名访问的地址，可以根据实际情况自己添加，放行一些静态资源等，anon表示放行
        filterChainMap.put(&quot;/css/**&quot;, &quot;anon&quot;);
        filterChainMap.put(&quot;/imgs/**&quot;, &quot;anon&quot;);
        filterChainMap.put(&quot;/js/**&quot;, &quot;anon&quot;);
        filterChainMap.put(&quot;/swagger-*/**&quot;, &quot;anon&quot;);
        filterChainMap.put(&quot;/swagger-ui.html/**&quot;, &quot;anon&quot;);
        // 登录url 放行
        filterChainMap.put(&quot;/login&quot;, &quot;anon&quot;);

        // “/user/admin” 开头的需要身份认证，authc表示要身份认证
        filterChainMap.put(&quot;/user/admin*&quot;, &quot;authc&quot;);
        // “/user/student” 开头的需要角色认证，是“admin”才允许
        filterChainMap.put(&quot;/user/student*/**&quot;, &quot;roles[admin]&quot;);
        // “/user/teacher” 开头的需要权限认证，是“user:create”才允许
        filterChainMap.put(&quot;/user/teacher*/**&quot;, &quot;perms[\&quot;user:create\&quot;]&quot;);

        // 配置logout过滤器
        filterChainMap.put(&quot;/logout&quot;, &quot;logout&quot;);

        // 设置shiroFilterFactoryBean的FilterChainDefinitionMap
        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainMap);
        logger.info(&quot;====shiroFilterFactoryBean注册完成====&quot;);
        return shiroFilterFactoryBean;
    }
}
</code></pre>
<p>配置 Shiro 过滤器时会传入一个安全管理器，可以看出，这是一环套一环，reaml -&gt; SecurityManager -&gt; filter。在过滤器中，我们需要定义一个 shiroFactoryBean，然后将 SecurityManager 添加进来，结合上面代码可以看出，要配置的东西主要有：</p>
<blockquote>
<p>默认登录的 url：身份认证失败会访问该 url<br>认证成功之后要跳转的 url<br>权限认证失败会访问该 url<br>需要拦截或者放行的 url：这些都放在一个 map 中</p>
</blockquote>
<p>从上述代码中可以看出，在 map 中，针对不同的 url，有不同的权限要求，这里总结一下常用的几个权限。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Filter</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">anon</td>
<td style="text-align:center">开放权限，可以理解为匿名用户或游客，可以直接访问的</td>
</tr>
<tr>
<td style="text-align:center">authc</td>
<td style="text-align:center">需要身份认证的</td>
</tr>
<tr>
<td style="text-align:center">logout</td>
<td style="text-align:center">注销，执行后会直接跳转到 <code>shiroFilterFactoryBean.setLoginUrl();</code> 设置的 url，即登录页面</td>
</tr>
<tr>
<td style="text-align:center">roles[admin]</td>
<td style="text-align:center">参数可写多个，表示是某个或某些角色才能通过，多个参数时写 roles[“admin，user”]，当有多个参数时必须每个参数都通过才算通过</td>
</tr>
<tr>
<td style="text-align:center">perms[user]</td>
<td style="text-align:center">参数可写多个，表示需要某个或某些权限才能通过，多个参数时写 perms[“user, admin”]，当有多个参数时必须每个参数都通过才算通过</td>
</tr>
</tbody>
</table>
<h3 id="h3-2-4-shiro-"><a name="2.4 使用 Shiro 进行认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.4 使用 Shiro 进行认证</h3><p>到这里，我们对 Shiro 的准备工作都做完了，接下来开始使用 Shiro 进行认证工作。我们首先来设计几个接口：</p>
<blockquote>
<p>接口一： 使用 <code>http://localhost:8080/user/admin</code> 来验证身份认证<br>接口二： 使用 <code>http://localhost:8080/user/student</code> 来验证角色认证<br>接口三： 使用 <code>http://localhost:8080/user/teacher</code> 来验证权限认证<br>接口四： 使用 <code>http://localhost:8080/user/login</code> 来实现用户登录</p>
</blockquote>
<p>然后来一下认证的流程：</p>
<blockquote>
<p>流程一： 直接访问接口一（此时还未登录），认证失败，跳转到 login.html 页面让用户登录，登录会请求接口四，实现用户登录功能，此时 Shiro 已经保存了用户信息了。<br>流程二： 再次访问接口一（此时用户已经登录），认证成功，跳转到 success.html 页面，展示用户信息。<br>流程三： 访问接口二，测试角色认证是否成功。<br>流程四： 访问接口三，测试权限认证是否成功。</p>
</blockquote>
<h4 id="h4-2-4-1-"><a name="2.4.1 身份、角色、权限认证接口" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.4.1 身份、角色、权限认证接口</h4><pre><code class="lang-java">@Controller
@RequestMapping(&quot;/user&quot;)
public class UserController {

    /**
     * 身份认证测试接口
     * @param request
     * @return
     */
    @RequestMapping(&quot;/admin&quot;)
    public String admin(HttpServletRequest request) {
        Object user = request.getSession().getAttribute(&quot;user&quot;);
        return &quot;success&quot;;
    }

    /**
     * 角色认证测试接口
     * @param request
     * @return
     */
    @RequestMapping(&quot;/student&quot;)
    public String student(HttpServletRequest request) {
        return &quot;success&quot;;
    }

    /**
     * 权限认证测试接口
     * @param request
     * @return
     */
    @RequestMapping(&quot;/teacher&quot;)
    public String teacher(HttpServletRequest request) {
        return &quot;success&quot;;
    }
}
</code></pre>
<p>这三个接口很简单，直接返回到指定页面展示即可，只要认证成功就会正常跳转，如果认证失败，就会跳转到上文 ShrioConfig 中配置的页面进行展示。</p>
<h4 id="h4-2-4-2-"><a name="2.4.2 用户登录接口" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.4.2 用户登录接口</h4><pre><code class="lang-java">@Controller
@RequestMapping(&quot;/user&quot;)
public class UserController {

    /**
     * 用户登录接口
     * @param user user
     * @param request request
     * @return string
     */
    @PostMapping(&quot;/login&quot;)
    public String login(User user, HttpServletRequest request) {

        // 根据用户名和密码创建token
        UsernamePasswordToken token = new UsernamePasswordToken(user.getUsername(), user.getPassword());
        // 获取subject认证主体
        Subject subject = SecurityUtils.getSubject();
        try{
            // 开始认证，这一步会跳到我们自定义的realm中
            subject.login(token);
            request.getSession().setAttribute(&quot;user&quot;, user);
            return &quot;success&quot;;
        }catch(Exception e){
            e.printStackTrace();
            request.getSession().setAttribute(&quot;user&quot;, user);
            request.setAttribute(&quot;error&quot;, &quot;用户名或密码错误！&quot;);
            return &quot;login&quot;;
        }
    }
}
</code></pre>
<p>我们重点分析一下这个登录接口，首先会根据前端传过来的用户名和密码，创建一个 token，然后使用 SecurityUtils 来创建一个认证主体，接下来开始调用 <code>subject.login(token)</code> 开始进行身份认证了，注意这里传了刚刚创建的 token，就如注释中所述，这一步会跳转到我们自定义的 realm 中，进入 <code>doGetAuthenticationInfo</code> 方法，所以到这里，您就会明白该方法中那个参数 token 了。然后就是上文分析的那样，开始进行身份认证。</p>
<h4 id="h4-2-4-3-"><a name="2.4.3 测试一下" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.4.3 测试一下</h4><p>最后，启动项目，测试一下：<br>浏览器请求 <code>http://localhost:8080/user/admin</code> 会进行身份认证，因为此时未登录，所以会跳转到 IndexController 中的 <code>/login</code> 接口，然后跳转到 <code>login.html</code> 页面让我们登录，使用用户名密码为 csdn/123456 登录之后，我们在浏览器中请求 <code>http://localhost:8080/user/student</code> 接口，会进行角色认证，因为数据库中 csdn1 的用户角色是 admin，所以和配置中的吻合，认证通过；我们再请求 <code>http://localhost:8080/user/teacher</code> 接口，会进行权限认证，因为数据库中 csdn1 的用户权限为 <code>user:*</code>，满足配置中的 <code>user:create</code>，所以认证通过。</p>
<p>接下来，我们点退出，系统会注销重新让我们登录，我们使用 csdn2 这个用户来登录，重复上述操作，当在进行角色认证和权限认证这两步时，就认证不通过了，因为数据库中 csdn2 这个用户存的角色和权限与配置中的不同，所以认证不通过。</p>
<h2 id="h2-3-"><a name="3. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 总结</h2><p>本节主要介绍了 Shiro 安全框架与 Spring Boot 的整合。先介绍了 Shiro 的三大核心组件已经它们的作用；然后介绍了 Shiro 的身份认证、角色认证和权限认证；最后结合代码，详细介绍了 Spring Boot 中是如何整合 Shiro 的，并设计了一套测试流程，逐步分析 Shiro 的工作流程和原理，让读者更直观地体会出 Shiro 的整套工作流程。Shiro 使用的很广泛，希望读者将其掌握，并能运用到实际项目中。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--17-spring-boot-lucence"><a name="第17课：Spring Boot中集成Lucence" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第17课：Spring Boot中集成Lucence</h1><h2 id="h2-1-lucence-"><a name="1. Lucence 和全文检索" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. Lucence 和全文检索</h2><p>Lucene 是什么？看一下百度百科：</p>
<blockquote>
<p>Lucene是一套用于全文检索和搜寻的开源程式库，由 Apache 软件基金会支持和提供。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。——《百度百科》</p>
</blockquote>
<h3 id="h3-1-1-"><a name="1.1 全文检索" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.1 全文检索</h3><p>这里提到了全文检索的概念，我们先来分析一下什么是全文检索，理解了全文检索之后，再理解 Lucene 的原理就非常简单了。  </p>
<p>何为全文检索？举个例子，比如现在要在一个文件中查找某个字符串，最直接的想法就是从头开始检索，查到了就OK，这种对于小数据量的文件来说，很实用，但是对于大数据量的文件来说，就有点吃力了。或者说找包含某个字符串的文件，也是这样，如果在一个拥有几十个 G 的硬盘中找那效率可想而知，是很低的。   </p>
<p>文件中的数据是属于非结构化数据，也就是说它没有什么结构可言，要解决上面提到的效率问题，首先我们得将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对这些有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这就叫全文搜索。即先建立索引，再对索引进行搜索的过程。 </p>
<h3 id="h3-1-2-lucene-"><a name="1.2 Lucene 建立索引的方式" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.2 Lucene 建立索引的方式</h3><p>那么 Lucene 中是如何建立索引的呢？假设现在有两篇文章，内容如下：</p>
<blockquote>
<p>文章1的内容为：Tom lives in Guangzhou, I live in Guangzhou too.<br>文章2的内容为：He once lived in Shanghai.</p>
</blockquote>
<p>首先第一步是将文档传给分词组件（Tokenizer），分词组件会将文档分成一个个单词，并去除标点符号和停词。所谓的停词指的是没有特别意义的词，比如英文中的 a，the，too 等。经过分词后，得到词元（Token） 。如下：</p>
<blockquote>
<p>文章1经过分词后的结果：<code>[Tom]</code> <code>[lives]</code> <code>[Guangzhou]</code> <code>[I]</code> <code>[live]</code> <code>[Guangzhou]</code><br>文章2经过分词后的结果：<code>[He]</code> <code>[lives]</code> <code>[Shanghai]</code></p>
</blockquote>
<p>然后将词元传给语言处理组件（Linguistic Processor），对于英语，语言处理组件一般会将字母变为小写，将单词缩减为词根形式，如 ”lives” 到 ”live” 等，将单词转变为词根形式，如 ”drove” 到 ”drive” 等。然后得到词（Term）。如下：</p>
<blockquote>
<p>文章1经过处理后的结果：<code>[tom]</code> <code>[live]</code> <code>[guangzhou]</code> <code>[i]</code> <code>[live]</code> <code>[guangzhou]</code><br>文章2经过处理后的结果：<code>[he]</code> <code>[live]</code> <code>[shanghai]</code></p>
</blockquote>
<p>最后将得到的词传给索引组件（Indexer），索引组件经过处理，得到下面的索引结构：</p>
<table>
<thead>
<tr>
<th style="text-align:center">关键词</th>
<th style="text-align:center">文章号[出现频率]</th>
<th style="text-align:center">出现位置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">guangzhou</td>
<td style="text-align:center">1[2]</td>
<td style="text-align:center">3,6</td>
</tr>
<tr>
<td style="text-align:center">he</td>
<td style="text-align:center">2[1]</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:center">1[1]</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">live</td>
<td style="text-align:center">1[2],2[1]</td>
<td style="text-align:center">2,5,2</td>
</tr>
<tr>
<td style="text-align:center">shanghai</td>
<td style="text-align:center">2[1]</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">tom</td>
<td style="text-align:center">1[1]</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>以上就是Lucene 索引结构中最核心的部分。它的关键字是按字符顺序排列的，因此 Lucene 可以用二元搜索算法快速定位关键词。实现时 Lucene 将上面三列分别作为词典文件（Term Dictionary）、频率文件（frequencies）和位置文件（positions）保存。其中词典文件不仅保存有每个关键词，还保留了指向频率文件和位置文件的指针，通过指针可以找到该关键字的频率信息和位置信息。<br>搜索的过程是先对词典二元查找、找到该词，通过指向频率文件的指针读出所有文章号，然后返回结果，然后就可以在具体的文章中根据出现位置找到该词了。所以 Lucene 在第一次建立索引的时候可能会比较慢，但是以后就不需要每次都建立索引了，就快了。</p>
<p>理解了 Lucene 的分词原理，接下来我们在 Spring Boot 中集成 Lucene 并实现索引和搜索的功能。</p>
<h2 id="h2-2-spring-boot-lucence"><a name="2. Spring Boot 中集成 Lucence" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. Spring Boot 中集成 Lucence</h2><h3 id="h3-2-1-"><a name="2.1 依赖导入" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.1 依赖导入</h3><p>首先需要导入 Lucene 的依赖，它的依赖有好几个，如下：</p>
<pre><code class="lang-xml">&lt;!-- Lucence核心包 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;
    &lt;artifactId&gt;lucene-core&lt;/artifactId&gt;
    &lt;version&gt;5.3.1&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- Lucene查询解析包 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;
    &lt;artifactId&gt;lucene-queryparser&lt;/artifactId&gt;
    &lt;version&gt;5.3.1&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- 常规的分词（英文） --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;
    &lt;artifactId&gt;lucene-analyzers-common&lt;/artifactId&gt;
    &lt;version&gt;5.3.1&lt;/version&gt;
&lt;/dependency&gt;

&lt;!--支持分词高亮  --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;
    &lt;artifactId&gt;lucene-highlighter&lt;/artifactId&gt;
    &lt;version&gt;5.3.1&lt;/version&gt;
&lt;/dependency&gt;

&lt;!--支持中文分词  --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;
    &lt;artifactId&gt;lucene-analyzers-smartcn&lt;/artifactId&gt;
    &lt;version&gt;5.3.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>最后一个依赖是用来支持中文分词的，因为默认是支持英文的。那个高亮的分词依赖是最后我要做一个搜索，然后将搜到的内容高亮显示，模拟当前互联网上的做法，大家可以运用到实际项目中去。</p>
<h3 id="h3-2-2-"><a name="2.2 快速入门" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2 快速入门</h3><p>根据上文的分析，全文检索有两个步骤，先建立索引，再检索。所以为了测试这个过程，我新建两个 java 类，一个用来建立索引的，另一个用来检索。</p>
<h4 id="h4-2-2-1-"><a name="2.2.1 建立索引" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.1 建立索引</h4><p>我们自己弄几个文件，放到 <code>D:\lucene\data</code> 目录下，新建一个 Indexer 类来实现建立索引功能。首先在构造方法中初始化标准分词器和写索引实例。</p>
<pre><code class="lang-java">public class Indexer {

    /**
     * 写索引实例
     */
    private IndexWriter writer;

    /**
     * 构造方法，实例化IndexWriter
     * @param indexDir
     * @throws Exception
     */
    public Indexer(String indexDir) throws Exception {
        Directory dir = FSDirectory.open(Paths.get(indexDir));
        //标准分词器，会自动去掉空格啊，is a the等单词
        Analyzer analyzer = new StandardAnalyzer();
        //将标准分词器配到写索引的配置中
        IndexWriterConfig config = new IndexWriterConfig(analyzer);
        //实例化写索引对象
        writer = new IndexWriter(dir, config);
    }
}
</code></pre>
<p>在构造放发中传一个存放索引的文件夹路径，然后构建标准分词器（这是英文的），再使用标准分词器来实例化写索引对象。接下来就开始建立索引了，我将解释放到代码注释里，方便大家跟进。</p>
<pre><code class="lang-java">/**
 * 索引指定目录下的所有文件
 * @param dataDir
 * @return
 * @throws Exception
 */
public int indexAll(String dataDir) throws Exception {
    // 获取该路径下的所有文件
    File[] files = new File(dataDir).listFiles();
    if (null != files) {
        for (File file : files) {
            //调用下面的indexFile方法，对每个文件进行索引
            indexFile(file);
        }
    }
    //返回索引的文件数
    return writer.numDocs();
}

/**
 * 索引指定的文件
 * @param file
 * @throws Exception
 */
private void indexFile(File file) throws Exception {
    System.out.println(&quot;索引文件的路径：&quot; + file.getCanonicalPath());
    //调用下面的getDocument方法，获取该文件的document
    Document doc = getDocument(file);
    //将doc添加到索引中
    writer.addDocument(doc);
}

/**
 * 获取文档，文档里再设置每个字段，就类似于数据库中的一行记录
 * @param file
 * @return
 * @throws Exception
 */
private Document getDocument(File file) throws Exception {
    Document doc = new Document();
    //开始添加字段
    //添加内容
    doc.add(new TextField(&quot;contents&quot;, new FileReader(file)));
    //添加文件名，并把这个字段存到索引文件里
    doc.add(new TextField(&quot;fileName&quot;, file.getName(), Field.Store.YES));
    //添加文件路径
    doc.add(new TextField(&quot;fullPath&quot;, file.getCanonicalPath(), Field.Store.YES));
    return doc;
}
</code></pre>
<p>这样就建立好索引了，我们在该类中写一个 main 方法测试一下：</p>
<pre><code class="lang-java">public static void main(String[] args) {
        //索引保存到的路径
        String indexDir = &quot;D:\\lucene&quot;;
        //需要索引的文件数据存放的目录
        String dataDir = &quot;D:\\lucene\\data&quot;;
        Indexer indexer = null;
        int indexedNum = 0;
        //记录索引开始时间
        long startTime = System.currentTimeMillis();
        try {
            // 开始构建索引
            indexer = new Indexer(indexDir);
            indexedNum = indexer.indexAll(dataDir);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != indexer) {
                    indexer.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        //记录索引结束时间
        long endTime = System.currentTimeMillis();
        System.out.println(&quot;索引耗时&quot; + (endTime - startTime) + &quot;毫秒&quot;);
        System.out.println(&quot;共索引了&quot; + indexedNum + &quot;个文件&quot;);
    }
</code></pre>
<p>我搞了两个 tomcat 相关的文件放到 <code>D:\lucene\data</code> 下了，执行完之后，看到控制台输出：</p>
<pre><code>索引文件的路径：D:\lucene\data\catalina.properties
索引文件的路径：D:\lucene\data\logging.properties
索引耗时882毫秒
共索引了2个文件
</code></pre><p>然后我们去 <code>D:\lucene\</code> 目录下可以看到一些索引文件，这些文件不能删除，删除了就需要重新构建索引，否则没了索引，就无法去检索内容了。</p>
<h4 id="h4-2-2-2-"><a name="2.2.2 检索内容" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.2.2 检索内容</h4><p>上面把这两个文件的索引建立好了，接下来我们就可以写检索程序了，在这两个文件中查找特定的词。</p>
<pre><code class="lang-java">public class Searcher {

    public static void search(String indexDir, String q) throws Exception {

        //获取要查询的路径，也就是索引所在的位置
        Directory dir = FSDirectory.open(Paths.get(indexDir));
        IndexReader reader = DirectoryReader.open(dir);
        //构建IndexSearcher
        IndexSearcher searcher = new IndexSearcher(reader);
        //标准分词器，会自动去掉空格啊，is a the等单词
        Analyzer analyzer = new StandardAnalyzer();
        //查询解析器
        QueryParser parser = new QueryParser(&quot;contents&quot;, analyzer);
        //通过解析要查询的String，获取查询对象，q为传进来的待查的字符串
        Query query = parser.parse(q);

        //记录索引开始时间
        long startTime = System.currentTimeMillis();
        //开始查询，查询前10条数据，将记录保存在docs中
        TopDocs docs = searcher.search(query, 10);
        //记录索引结束时间
        long endTime = System.currentTimeMillis();
        System.out.println(&quot;匹配&quot; + q + &quot;共耗时&quot; + (endTime-startTime) + &quot;毫秒&quot;);
        System.out.println(&quot;查询到&quot; + docs.totalHits + &quot;条记录&quot;);

        //取出每条查询结果
        for(ScoreDoc scoreDoc : docs.scoreDocs) {
            //scoreDoc.doc相当于docID,根据这个docID来获取文档
            Document doc = searcher.doc(scoreDoc.doc);
            //fullPath是刚刚建立索引的时候我们定义的一个字段，表示路径。也可以取其他的内容，只要我们在建立索引时有定义即可。
            System.out.println(doc.get(&quot;fullPath&quot;));
        }
        reader.close();
    }
}
</code></pre>
<p>ok，这样我们检索的代码就写完了，每一步解释我写在代码中的注释上了，下面写个 main 方法来测试一下：</p>
<pre><code class="lang-java">public static void main(String[] args) {
    String indexDir = &quot;D:\\lucene&quot;;
    //查询这个字符串
    String q = &quot;security&quot;;
    try {
        search(indexDir, q);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>
<p>查一下 <code>security</code> 这个字符串，执行一下看控制台打印的结果：</p>
<pre><code>匹配security共耗时23毫秒
查询到1条记录
D:\lucene\data\catalina.properties
</code></pre><p>可以看出，耗时了23毫秒在两个文件中找到了 security 这个字符串，并输出了文件的名称。上面的代码我写的很详细，这个代码已经比较全了，可以用在生产环境上。</p>
<h3 id="h3-2-3-"><a name="2.3 中文分词检索高亮实战" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3 中文分词检索高亮实战</h3><p>上文已经写了建立索引和检索的代码，但是在实际项目中，我们往往是结合页面做一些查询结果的展示，比如我要查某个关键字，查到了之后，将相关的信息点展示出来，并将查询的关键字高亮等等。这种需求在实际项目中非常常见，而且大多数网站中都会有这种效果。所以这一小节我们就使用 Lucene 来实现这种效果。</p>
<h4 id="h4-2-3-1-"><a name="2.3.1 中文分词" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3.1 中文分词</h4><p>我们新建一个 ChineseIndexer 类来建立中文索引，建立过程和英文索引一样的，不同的地方在于使用的是中文分词器。除此之外，这里我们不用通过读取文件去建立索引，我们模拟一下用字符串来建立，因为在实际项目中，绝大部分情况是获取到一些文本字符串，然后根据一些关键字去查询相关内容等等。代码如下：</p>
<pre><code class="lang-java">public class ChineseIndexer {

    /**
     * 存放索引的位置
     */
    private Directory dir;

    //准备一下用来测试的数据
    //用来标识文档
    private Integer ids[] = {1, 2, 3};
    private String citys[] = {&quot;上海&quot;, &quot;南京&quot;, &quot;青岛&quot;};
    private String descs[] = {
            &quot;上海是个繁华的城市。&quot;,
            &quot;南京是一个文化的城市南京，简称宁，是江苏省会，地处中国东部地区，长江下游，濒江近海。全市下辖11个区，总面积6597平方公里，2013年建成区面积752.83平方公里，常住人口818.78万，其中城镇人口659.1万人。[1-4] “江南佳丽地，金陵帝王州”，南京拥有着6000多年文明史、近2600年建城史和近500年的建都史，是中国四大古都之一，有“六朝古都”、“十朝都会”之称，是中华文明的重要发祥地，历史上曾数次庇佑华夏之正朔，长期是中国南方的政治、经济、文化中心，拥有厚重的文化底蕴和丰富的历史遗存。[5-7] 南京是国家重要的科教中心，自古以来就是一座崇文重教的城市，有“天下文枢”、“东南第一学”的美誉。截至2013年，南京有高等院校75所，其中211高校8所，仅次于北京上海；国家重点实验室25所、国家重点学科169个、两院院士83人，均居中国第三。[8-10] 。&quot;,
            &quot;青岛是一个美丽的城市。&quot;
    };

    /**
     * 生成索引
     * @param indexDir
     * @throws Exception
     */
    public void index(String indexDir) throws Exception {
        dir = FSDirectory.open(Paths.get(indexDir));
        // 先调用 getWriter 获取IndexWriter对象
        IndexWriter writer = getWriter();
        for(int i = 0; i &lt; ids.length; i++) {
            Document doc = new Document();
            // 把上面的数据都生成索引，分别用id、city和desc来标识
            doc.add(new IntField(&quot;id&quot;, ids[i], Field.Store.YES));
            doc.add(new StringField(&quot;city&quot;, citys[i], Field.Store.YES));
            doc.add(new TextField(&quot;desc&quot;, descs[i], Field.Store.YES));
            //添加文档
            writer.addDocument(doc);
        }
        //close了才真正写到文档中
        writer.close();
    }

    /**
     * 获取IndexWriter实例
     * @return
     * @throws Exception
     */
    private IndexWriter getWriter() throws Exception {
        //使用中文分词器
        SmartChineseAnalyzer analyzer = new SmartChineseAnalyzer();
        //将中文分词器配到写索引的配置中
        IndexWriterConfig config = new IndexWriterConfig(analyzer);
        //实例化写索引对象
        IndexWriter writer = new IndexWriter(dir, config);
        return writer;
    }

    public static void main(String[] args) throws Exception {
        new ChineseIndexer().index(&quot;D:\\lucene2&quot;);
    }
}
</code></pre>
<p>这里我们用 id、city、desc 分别代表 id、城市名称和城市描述，用他们作为关键字来建立索引，后面我们获取内容的时候，主要来获取城市描述。南京的描述我故意写的长一点，因为下文检索的时候，根据不同的关键字会检索到不同部分的信息，有个权重的概念在里面。<br>然后执行一下 main 方法，将索引保存到 <code>D:\lucene2\</code> 中。 </p>
<h4 id="h4-2-3-2-"><a name="2.3.2 中文分词查询" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3.2 中文分词查询</h4><p>中文分词查询代码逻辑和默认的查询差不多，有一些区别在于，我们需要将查询出来的关键字标红加粗等需要处理，需要计算出一个得分片段，这是什么意思呢？比如我搜索 “南京文化” 跟搜索 “南京文明”，这两个搜索结果应该根据关键字出现的位置，返回的结果不一样才对，这在下文会测试。我们先看一下代码和注释：</p>
<pre><code class="lang-java">public class ChineseSearch {

    private static final Logger logger = LoggerFactory.getLogger(ChineseSearch.class);

    public static List&lt;String&gt; search(String indexDir, String q) throws Exception {

        //获取要查询的路径，也就是索引所在的位置
        Directory dir = FSDirectory.open(Paths.get(indexDir));
        IndexReader reader = DirectoryReader.open(dir);
        IndexSearcher searcher = new IndexSearcher(reader);
        //使用中文分词器
        SmartChineseAnalyzer analyzer = new SmartChineseAnalyzer();
        //由中文分词器初始化查询解析器
        QueryParser parser = new QueryParser(&quot;desc&quot;, analyzer);
        //通过解析要查询的String，获取查询对象
        Query query = parser.parse(q);

        //记录索引开始时间
        long startTime = System.currentTimeMillis();
        //开始查询，查询前10条数据，将记录保存在docs中
        TopDocs docs = searcher.search(query, 10);
        //记录索引结束时间
        long endTime = System.currentTimeMillis();
        logger.info(&quot;匹配{}共耗时{}毫秒&quot;, q, (endTime - startTime));
        logger.info(&quot;查询到{}条记录&quot;, docs.totalHits);

        //如果不指定参数的话，默认是加粗，即&lt;b&gt;&lt;b/&gt;
        SimpleHTMLFormatter simpleHTMLFormatter = new SimpleHTMLFormatter(&quot;&lt;b&gt;&lt;font color=red&gt;&quot;,&quot;&lt;/font&gt;&lt;/b&gt;&quot;);
        //根据查询对象计算得分，会初始化一个查询结果最高的得分
        QueryScorer scorer = new QueryScorer(query);
        //根据这个得分计算出一个片段
        Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);
        //将这个片段中的关键字用上面初始化好的高亮格式高亮
        Highlighter highlighter = new Highlighter(simpleHTMLFormatter, scorer);
        //设置一下要显示的片段
        highlighter.setTextFragmenter(fragmenter);

        //取出每条查询结果
        List&lt;String&gt; list = new ArrayList&lt;&gt;();
        for(ScoreDoc scoreDoc : docs.scoreDocs) {
            //scoreDoc.doc相当于docID,根据这个docID来获取文档
            Document doc = searcher.doc(scoreDoc.doc);
            logger.info(&quot;city:{}&quot;, doc.get(&quot;city&quot;));
            logger.info(&quot;desc:{}&quot;, doc.get(&quot;desc&quot;));
            String desc = doc.get(&quot;desc&quot;);

            //显示高亮
            if(desc != null) {
                TokenStream tokenStream = analyzer.tokenStream(&quot;desc&quot;, new StringReader(desc));
                String summary = highlighter.getBestFragment(tokenStream, desc);
                logger.info(&quot;高亮后的desc:{}&quot;, summary);
                list.add(summary);
            }
        }
        reader.close();
        return list;
    }
}
</code></pre>
<p>每一步的注释我写的很详细，在这就不赘述了。接下来我们来测试一下效果。</p>
<h4 id="h4-2-3-3-"><a name="2.3.3 测试一下" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.3.3 测试一下</h4><p>这里我们使用 thymeleaf 来写个简单的页面来展示获取到的数据，并高亮展示。在 controller 中我们指定索引的目录和需要查询的字符串，如下：</p>
<pre><code class="lang-java">@Controller
@RequestMapping(&quot;/lucene&quot;)
public class IndexController {

    @GetMapping(&quot;/test&quot;)
    public String test(Model model) {
        // 索引所在的目录
        String indexDir = &quot;D:\\lucene2&quot;;
        // 要查询的字符
//        String q = &quot;南京文明&quot;;
        String q = &quot;南京文化&quot;;
        try {
            List&lt;String&gt; list = ChineseSearch.search(indexDir, q);
            model.addAttribute(&quot;list&quot;, list);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return &quot;result&quot;;
    }
}
</code></pre>
<p>直接返回到 result.html 页面，该页面主要来展示一下 model 中的数据即可。</p>
<pre><code class="lang-xml">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div th:each=&quot;desc : ${list}&quot;&gt;
    &lt;div th:utext=&quot;${desc}&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>这里注意一下，不能使用 <code>th:test</code>，否则字符串中的 html 标签都会被转义，不会被渲染到页面。下面启动服务，在浏览器中输入 <code>http://localhost:8080/lucene/test</code>，测试一下效果，我们搜索的是 “南京文化”。</p>
<p><img src="https://images.gitbook.cn/83b3f810-b377-11e8-88bf-23cb78d1fb4f" alt="南京文化"></p>
<p>再将 controller 中的搜索关键字改成 “南京文明”，看下命中的效果。</p>
<p><img src="https://images.gitbook.cn/8ef8a4a0-b377-11e8-911d-27cc5f059829" alt="南京文明"></p>
<p>可以看出，不同的关键词，它会计算一个得分片段，也就是说不同的关键字会命中不同位置的内容，然后将关键字根据我们自己设定的形式高亮显示。从结果中可以看出，Lucene 也可以很智能的将关键字拆分命中，这在实际项目中会很好用。</p>
<h2 id="h2-3-"><a name="3. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. 总结</h2><p>本节课首先详细的分析了全文检索的理论规则，然后结合 Lucene，系统的讲述了在 Spring Boot 的集成步骤，首先快速带领大家从直观上感受 Lucene 如何建立索引已经如果检索，其次通过中文检索的具体实例，展示了 Lucene 在全文检索中的广泛应用。Lucene 不难，主要就是步骤比较多，代码不用死记硬背，拿到项目中根据实际情况做对应的修改即可。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--18-spring-boot-"><a name="第18课：Spring Boot搭建实际项目开发中的架构" class="reference-link"></a><span class="header-link octicon octicon-link"></span>第18课：Spring Boot搭建实际项目开发中的架构</h1><p>前面的课程中，我主要给大家讲解了 Spring Boot 中常用的一些技术点，这些技术点在实际项目中可能不会全部用得到，因为不同的项目可能使用的技术不同，但是希望大家都能掌握如何使用，并能自己根据实际项目中的需求进行相应的扩展。</p>
<p>不知道大家了不了解单片机，单片机里有个最小系统，这个最小系统搭建好了之后，就可以在此基础上进行人为的扩展。这节课我们要做的就是搭建一个 “Spring Boot 最小系统架构” 。拿着这个架构，可以在此基础上根据实际需求做相应的扩展。</p>
<p>从零开始搭建一个环境，主要要考虑几点：统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（本文不写该项，因为现在大部分项目都前后端分离了，但是考虑到也还有非前后端分离的项目，所以我在源代码里也加上了 thymeleaf）、持久层的集成、拦截器（这个也是可选的）和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。</p>
<p>结合前面的课程和以上的这些点，本节课手把手带领大家搭建一个实际项目开发中可用的 Spring Boot 架构。整个项目工程如下图所示，学习的时候，可以结合我的源码，这样效果会更好。</p>
<p><img src="https://images.gitbook.cn/6f23c980-b89e-11e8-87f1-559c9b456754" alt="工程架构"></p>
<h2 id="h2-1-"><a name="1. 统一的数据封装" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. 统一的数据封装</h2><p>由于封装的 json 数据的类型不确定，所以在定义统一的 json 结构时，我们需要用到泛型。统一的 json 结构中属性包括数据、状态码、提示信息即可，构造方法可以根据实际业务需求做相应的添加即可，一般来说，应该有默认的返回结构，也应该有用户指定的返回结构。如下：</p>
<pre><code class="lang-java">/**
 * 统一返回对象
 * @author shengwu ni
 * @param &lt;T&gt;
 */
public class JsonResult&lt;T&gt; {

    private T data;
    private String code;
    private String msg;

    /**
     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！
     */
    public JsonResult() {
        this.code = &quot;0&quot;;
        this.msg = &quot;操作成功！&quot;;
    }

    /**
     * 若没有数据返回，可以人为指定状态码和提示信息
     * @param code
     * @param msg
     */
    public JsonResult(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }

    /**
     * 有数据返回时，状态码为0，默认提示信息为：操作成功！
     * @param data
     */
    public JsonResult(T data) {
        this.data = data;
        this.code = &quot;0&quot;;
        this.msg = &quot;操作成功！&quot;;
    }

    /**
     * 有数据返回，状态码为0，人为指定提示信息
     * @param data
     * @param msg
     */
    public JsonResult(T data, String msg) {
        this.data = data;
        this.code = &quot;0&quot;;
        this.msg = msg;
    }

    /**
     * 使用自定义异常作为参数传递状态码和提示信息
     * @param msgEnum
     */
    public JsonResult(BusinessMsgEnum msgEnum) {
        this.code = msgEnum.code();
        this.msg = msgEnum.msg();
    }

    // 省去get和set方法
}
</code></pre>
<p>大家可以根据自己项目中所需要的一些东西，合理的修改统一结构中的字段信息。</p>
<h2 id="h2-2-json-"><a name="2. json的处理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. json的处理</h2><p>Json 处理工具很多，比如阿里巴巴的 fastjson，不过 fastjson 对有些未知类型的 null 无法转成空字符串，这可能是 fastjson 自身的缺陷，可扩展性也不是太好，但是使用起来方便，使用的人也蛮多的。这节课里面我们主要集成 Spring Boot 自带的 jackson。主要是对 jackson 做一下对 null 的配置即可，然后就可以在项目中使用了。</p>
<pre><code class="lang-java">/**
 * jacksonConfig
 * @author shengwu ni
 */
@Configuration
public class JacksonConfig {
    @Bean
    @Primary
    @ConditionalOnMissingBean(ObjectMapper.class)
    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {
        ObjectMapper objectMapper = builder.createXmlMapper(false).build();
        objectMapper.getSerializerProvider().setNullValueSerializer(new JsonSerializer&lt;Object&gt;() {
            @Override
            public void serialize(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                jsonGenerator.writeString(&quot;&quot;);
            }
        });
        return objectMapper;
    }
}
</code></pre>
<p>这里先不测试，等下面 swagger2 配置好了之后，我们一起来测试一下。</p>
<h2 id="h2-3-swagger2-"><a name="3. swagger2在线可调式接口" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. swagger2在线可调式接口</h2><p>有了 swagger，开发人员不需要给其他人员提供接口文档，只要告诉他们一个 Swagger 地址，即可展示在线的 API 接口文档，除此之外，调用接口的人员还可以在线测试接口数据，同样地，开发人员在开发接口时，同样也可以利用 Swagger 在线接口文档测试接口数据，这给开发人员提供了便利。使用 swagger 需要对其进行配置：</p>
<pre><code class="lang-java">/**
 * swagger配置
 * @author shengwu ni
 */
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket createRestApi() {
        return new Docket(DocumentationType.SWAGGER_2)
                // 指定构建api文档的详细信息的方法：apiInfo()
                .apiInfo(apiInfo())
                .select()
                // 指定要生成api接口的包路径，这里把controller作为包路径，生成controller中的所有接口
                .apis(RequestHandlerSelectors.basePackage(&quot;com.itcodai.course18.controller&quot;))
                .paths(PathSelectors.any())
                .build();
    }

    /**
     * 构建api文档的详细信息
     * @return
     */
    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                // 设置页面标题
                .title(&quot;Spring Boot搭建实际项目中开发的架构&quot;)
                // 设置接口描述
                .description(&quot;跟武哥一起学Spring Boot第18课&quot;)
                // 设置联系方式
                .contact(&quot;倪升武，&quot; + &quot;微信公众号：程序员私房菜&quot;)
                // 设置版本
                .version(&quot;1.0&quot;)
                // 构建
                .build();
    }
}
</code></pre>
<p>到这里，可以先测试一下，写一个 Controller，弄一个静态的接口测试一下上面集成的内容。</p>
<pre><code class="lang-java">@RestController
@Api(value = &quot;用户信息接口&quot;)
public class UserController {

    @Resource
    private UserService userService;

    @GetMapping(&quot;/getUser/{id}&quot;)
    @ApiOperation(value = &quot;根据用户唯一标识获取用户信息&quot;)
    public JsonResult&lt;User&gt; getUserInfo(@PathVariable @ApiParam(value = &quot;用户唯一标识&quot;) Long id) {
        User user = new User(id, &quot;倪升武&quot;, &quot;123456&quot;);
        return new JsonResult&lt;&gt;(user);
    }
}
</code></pre>
<p>然后启动项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 即可看到 swagger 接口文档页面，调用一下上面这个接口，即可看到返回的 json 数据。</p>
<h2 id="h2-4-"><a name="4. 持久层集成" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. 持久层集成</h2><p>每个项目中是必须要有持久层的，与数据库交互，这里我们主要来集成 mybatis，集成 mybatis 首先要在 application.yml 中进行配置。</p>
<pre><code class="lang-yml"># 服务端口号
server:
  port: 8080

# 数据库地址
datasource:
  url: localhost:3306/blog_test

spring:
  datasource: # 数据库配置
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://${datasource.url}?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;maxReconnects=10
    username: root
    password: 123456
    hikari:
      maximum-pool-size: 10 # 最大连接池数
      max-lifetime: 1770000

mybatis:
  # 指定别名设置的包为所有entity
  type-aliases-package: com.itcodai.course18.entity
  configuration:
    map-underscore-to-camel-case: true # 驼峰命名规范
  mapper-locations: # mapper映射文件位置
    - classpath:mapper/*.xml
</code></pre>
<p>配置好了之后，接下来我们来写一下 dao 层，实际中我们使用注解比较多，因为比较方便，当然也可以使用 xml 的方式，甚至两种同时使用都行，这里我们主要使用注解的方式来集成，关于 xml 的方式，大家可以查看前面课程，实际中根据项目情况来定。</p>
<pre><code class="lang-java">public interface UserMapper {

    @Select(&quot;select * from user where id = #{id}&quot;)
    @Results({
            @Result(property = &quot;username&quot;, column = &quot;user_name&quot;),
            @Result(property = &quot;password&quot;, column = &quot;password&quot;)
    })
    User getUser(Long id);

    @Select(&quot;select * from user where id = #{id} and user_name=#{name}&quot;)
    User getUserByIdAndName(@Param(&quot;id&quot;) Long id, @Param(&quot;name&quot;) String username);

    @Select(&quot;select * from user&quot;)
    List&lt;User&gt; getAll();
}
</code></pre>
<p>关于 service 层我就不在文章中写代码了，大家可以结合我的源代码学习，这一节主要带领大家来搭建一个 Spring Boot 空架构。最后别忘了在启动类上添加注解扫描 <code><a href="https://github.com/MapperScan" title="&#64;MapperScan" class="at-link">@MapperScan</a>(&quot;com.itcodai.course18.dao&quot;)</code></p>
<h2 id="h2-5-"><a name="5. 拦截器" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5. 拦截器</h2><p>拦截器在项目中使用的是非常多的（但不是绝对的），比如拦截一些置顶的 url，做一些判断和处理等等。除此之外，还需要将常用的静态页面或者 swagger 页面放行，不能将这些静态资源给拦截了。首先先自定义一个拦截器。</p>
<pre><code class="lang-java">public class MyInterceptor implements HandlerInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(MyInterceptor.class);

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

        logger.info(&quot;执行方法之前执行(Controller方法调用之前)&quot;);
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        logger.info(&quot;执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染&quot;);
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        logger.info(&quot;整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了&quot;);
    }
}
</code></pre>
<p>然后将自定义的拦截器加入到拦截器配置中。</p>
<pre><code class="lang-java">@Configuration
public class MyInterceptorConfig implements WebMvcConfigurer {
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        // 实现WebMvcConfigurer不会导致静态资源被拦截
        registry.addInterceptor(new MyInterceptor())
                // 拦截所有url
                .addPathPatterns(&quot;/**&quot;)
                // 放行swagger
                .excludePathPatterns(&quot;/swagger-resources/**&quot;);
    }
}
</code></pre>
<p>在 Spring Boot 中，我们通常会在如下目录里存放一些静态资源：</p>
<blockquote>
<p>classpath:/static<br>classpath:/public<br>classpath:/resources<br>classpath:/META-INF/resources  </p>
</blockquote>
<p>上面代码中配置的 <code>/**</code> 是对所有 url 都进行了拦截，但我们实现了 WebMvcConfigurer 接口，不会导致 Spring Boot 对上面这些目录下的静态资源实施拦截。但是我们平时访问的 swagger 会被拦截，所以要将其放行。swagger 页面在 swagger-resources 目录下，放行该目录下所有文件即可。</p>
<p>然后在浏览器中输入一下 swagger 页面，若能正常显示 swagger，说明放行成功。同时可以根据后台打印的日志判断代码执行的顺序。</p>
<h2 id="h2-6-"><a name="6. 全局异常处理" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6. 全局异常处理</h2><p>全局异常处理是每个项目中必须用到的东西，在具体的异常中，我们可能会做具体的处理，但是对于没有处理的异常，一般会有一个统一的全局异常处理。在异常处理之前，最好维护一个异常提示信息枚举类，专门用来保存异常提示信息的。如下：</p>
<pre><code class="lang-java">public enum BusinessMsgEnum {
    /** 参数异常 */
    PARMETER_EXCEPTION(&quot;102&quot;, &quot;参数异常!&quot;),
    /** 等待超时 */
    SERVICE_TIME_OUT(&quot;103&quot;, &quot;服务调用超时！&quot;),
    /** 参数过大 */
    PARMETER_BIG_EXCEPTION(&quot;102&quot;, &quot;输入的图片数量不能超过50张!&quot;),
    /** 500 : 发生异常 */
    UNEXPECTED_EXCEPTION(&quot;500&quot;, &quot;系统发生异常，请联系管理员！&quot;);

    /**
     * 消息码
     */
    private String code;
    /**
     * 消息内容
     */
    private String msg;

    private BusinessMsgEnum(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }

    public String code() {
        return code;
    }

    public String msg() {
        return msg;
    }

}
</code></pre>
<p>在全局统一异常处理类中，我们一般会对自定义的业务异常最先处理，然后去处理一些常见的系统异常，最后会来一个一劳永逸（Exception 异常）。</p>
<pre><code class="lang-java">@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    /**
     * 拦截业务异常，返回业务异常信息
     * @param ex
     * @return
     */
    @ExceptionHandler(BusinessErrorException.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleBusinessError(BusinessErrorException ex) {
        String code = ex.getCode();
        String message = ex.getMessage();
        return new JsonResult(code, message);
    }

    /**
     * 空指针异常
     * @param ex NullPointerException
     * @return
     */
    @ExceptionHandler(NullPointerException.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleTypeMismatchException(NullPointerException ex) {
        logger.error(&quot;空指针异常，{}&quot;, ex.getMessage());
        return new JsonResult(&quot;500&quot;, &quot;空指针异常了&quot;);
    }

    /**
     * 系统异常 预期以外异常
     * @param ex
     * @return
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleUnexpectedServer(Exception ex) {
        logger.error(&quot;系统异常：&quot;, ex);
        return new JsonResult(BusinessMsgEnum.UNEXPECTED_EXCEPTION);
    }

}
</code></pre>
<p>其中，BusinessErrorException 是自定义的业务异常，继承一下 RuntimeException 即可，具体可以看我的源代码，文章中就不贴代码了。<br>在 UserController 中有个 testException 方法，用来测试全局异常的，打开 swagger 页面，调用一下该接口，可以看出返回用户提示信息：”系统发生异常，请联系管理员！“。当然了，实际情况中，需要根据不同的业务提示不同的信息。</p>
<h2 id="h2-7-"><a name="7. 总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7. 总结</h2><p>本文主要手把手带领大家快速搭建一个项目中可以使用的 Spring Boot 空架构，主要从统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（代码中体现）、持久层的集成、拦截器和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。</p>
<p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study">戳我下载</a></p>
<blockquote>
<p>欢迎关注我的为微信公众号：武哥聊编程</p>
</blockquote>
<h1 id="h1--"><a name="附：作者信息" class="reference-link"></a><span class="header-link octicon octicon-link"></span>附：作者信息</h1><p>本课程首发于 CSDN GitChat 达人课，该文档为课程详细笔记<br>作者：倪升武（武哥）<br>微信公众号：武哥聊编程<br>二维码：</p>
<p><img src="https://img-blog.csdnimg.cn/202002150421550.jpg" alt="武哥聊编程"></p>
<blockquote>
<p>版权申明：本课程已经免费，但版权属于 CSDN 和作者，未经允许，不得将该笔记用于商业用途，否则追究法律责任。</p>
</blockquote>
(String), # 跟武哥一起学习Spring Boot

# 作者信息

本课程首发于 CSDN GitChat 达人课《跟武哥一起学Spring Boot》，该文档为课程详细笔记。
作者：倪升武（武哥）
微信公众号：武哥聊编程
![武哥聊编程](https://img-blog.csdnimg.cn/202002150421550.jpg)

>版权申明：本课程已经免费，但版权属于 CSDN 和作者，未经允许，不得将该笔记用于商业用途和其他不正当用途，否则追究法律责任。



# 导读：课程概览

## 1. Spring Boot是什么

我们知道，从 2002 年开始，Spring 一直在飞速的发展，如今已经成为了在Java EE（Java Enterprise Edition）开发中真正意义上的标准，但是随着技术的发展，Java EE使用 Spring 逐渐变得笨重起来，大量的 XML 文件存在于项目之中。**繁琐的配置，整合第三方框架的配置问题，导致了开发和部署效率的降低**。  

2012 年 10 月，Mike Youngstrom 在 Spring jira 中创建了一个功能请求，要求**在 Spring 框架中支持无容器 Web 应用程序体系结构**。他谈到了在主容器引导 spring 容器内配置 Web 容器服务。这是 jira 请求的摘录：

> 我认为 Spring 的 Web 应用体系结构可以大大简化，如果它提供了从上到下利用 Spring 组件和配置模型的工具和参考体系结构。在简单的 `main()`方法引导的 Spring 容器内嵌入和统一这些常用Web 容器服务的配置。 

这一要求促使了 2013 年初开始的 Spring Boot 项目的研发，到今天，Spring Boot 的版本已经到了 2.0.3 RELEASE。Spring Boot 并不是用来替代 Spring 的解决方案，而**是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具**。

它集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是零配置的开箱即用（out-of-the-box），大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。   

## 2. 为什么学习Spring Boot

### 2.1 从Spring官方来看

我们打开 Spring 的[官方网站](http://spring.io/)，可以看到下图：  

![Spring官网首图](https://images.gitbook.cn/98fda7f0-8656-11e8-8675-5537a701ae7d)

我们可以看到图中官方对 Spring Boot 的定位：*Build Anything*， Build任何东西。Spring Boot旨在尽可能快地启动和运行，并且只需最少的 Spring 前期配置。  同时我们也来看一下官方对后面两个的定位：  

SpringCloud：*Coordinate Anything*，协调任何事情；
SpringCloud Data Flow：*Connect everything*，连接任何东西。

仔细品味一下，Spring 官网对 Spring Boot、SpringCloud 和 SpringCloud Data Flow三者定位的措辞非常有味道，同时也可以看出，Spring 官方对这三个技术非常重视，是现在以及今后学习的重点（SpringCloud 相关达人课课程届时也会上线）。

### 2.2 从Spring Boot的优点来看

Spring Boot 有哪些优点？主要给我们解决了哪些问题呢？我们以下图来说明：

![Spring Boot的优点](https://images.gitbook.cn/e17b8c40-8656-11e8-8a91-d70bc2d847c5)

#### 2.2.1 良好的基因

Spring Boot 是伴随着 Spring 4.0 诞生的，从字面理解，Boot是引导的意思，因此 Spring Boot 旨在帮助开发者快速搭建 Spring 框架。Spring Boot 继承了原有 Spring 框架的优秀基因，使 Spring 在使用中更加方便快捷。

![Spring Boot与Spring](https://images.gitbook.cn/00078650-8657-11e8-87de-d910a3ee087e)

#### 2.2.2 简化编码

举个例子，比如我们要创建一个 web 项目，使用 Spring 的朋友都知道，在使用 Spring 的时候，需要在 pom 文件中添加多个依赖，而 Spring Boot 则会帮助开发着快速启动一个 web 容器，在 Spring Boot 中，我们只需要在 pom 文件中添加如下一个 starter-web 依赖即可。

```xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
</dependency>
```

我们点击进入该依赖后可以看到，Spring Boot 这个 starter-web 已经包含了多个依赖，包括之前在 Spring 工程中需要导入的依赖，我们看一下其中的一部分，如下：

```xml
<!-- .....省略其他依赖 -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-web</artifactId>
    <version>5.0.7.RELEASE</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.0.7.RELEASE</version>
    <scope>compile</scope>
</dependency>
```

由此可以看出，Spring Boot 大大简化了我们的编码，我们不用一个个导入依赖，直接一个依赖即可。

#### 2.2.3 简化配置

Spring 虽然使Java EE轻量级框架，但由于其繁琐的配置，一度被人认为是“配置地狱”。各种XML、Annotation配置会让人眼花缭乱，而且配置多的话，如果出错了也很难找出原因。Spring Boot更多的是采用 Java Config 的方式，对 Spring 进行配置。举个例子：

我新建一个类，但是我不用 `@Service`注解，也就是说，它是个普通的类，那么我们如何使它也成为一个 Bean 让 Spring 去管理呢？只需要`@Configuration` 和`@Bean`两个注解即可，如下：

```java
public class TestService {
    public String sayHello () {
        return "Hello Spring Boot!";
    }
}
```

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class JavaConfig {
    @Bean
    public TestService getTestService() {
        return new TestService();
    }
}
```

`@Configuration`表示该类是个配置类，`@Bean`表示该方法返回一个 Bean。这样就把`TestService`作为 Bean 让 Spring 去管理了，在其他地方，我们如果需要使用该 Bean，和原来一样，直接使用`@Resource`注解注入进来即可使用，非常方便。

```java
@Resource
private TestService testService;
```

另外，部署配置方面，原来 Spring 有多个 xml 和 properties配置，在 Spring Boot 中只需要个 application.yml即可。

#### 2.2.4 简化部署

在使用 Spring 时，项目部署时需要我们在服务器上部署 tomcat，然后把项目打成 war 包扔到 tomcat里，在使用 Spring Boot 后，我们不需要在服务器上去部署 tomcat，因为 Spring Boot 内嵌了 tomcat，我们只需要将项目打成 jar 包，使用 `java -jar xxx.jar`一键式启动项目。

另外，也降低对运行环境的基本要求，环境变量中有JDK即可。

#### 2.2.5 简化监控

我们可以引入 spring-boot-start-actuator 依赖，直接使用 REST 方式来获取进程的运行期性能参数，从而达到监控的目的，比较方便。但是 Spring Boot 只是个微框架，没有提供相应的服务发现与注册的配套功能，没有外围监控集成方案，没有外围安全管理方案，所以在微服务架构中，还需要 Spring Cloud 来配合一起使用。

### 2.3 从未来发展的趋势来看

微服务是未来发展的趋势，项目会从传统架构慢慢转向微服务架构，因为微服务可以使不同的团队专注于更小范围的工作职责、使用独立的技术、更安全更频繁地部署。而 继承了 Spring 的优良特性，与 Spring 一脉相承，而且 支持各种REST API 的实现方式。Spring Boot 也是官方大力推荐的技术，可以看出，Spring Boot 是未来发展的一个大趋势。

## 3. 本课程能学到什么

本课程使用目前 Spring Boot 最新版本2.0.3 RELEASE，课程文章均为作者在实际项目中剥离出来的场景和demo，目标是带领学习者快速上手 Spring Boot，将 Spring Boot 相关技术点快速运用在微服务项目中。全篇分为两部分：基础篇和进阶篇。  

基础篇（01—10课）主要介绍 Spring Boot 在项目中最常使用的一些功能点，旨在带领学习者快速掌握 Spring Boot 在开发时需要的知识点，能够把 Spring Boot 相关技术运用到实际项目架构中去。该部分以 Spring Boot 框架为主线，内容包括Json数据封装、日志记录、属性配置、MVC支持、在线文档、模板引擎、异常处理、AOP 处理、持久层集成等等。  

进阶篇（11—17课）主要是介绍 Spring Boot 在项目中拔高一些的技术点，包括集成的一些组件，旨在带领学习者在项目中遇到具体的场景时能够快速集成，完成对应的功能。该部分以 Spring Boot 框架为主线，内容包括拦截器、监听器、缓存、安全认证、分词插件、消息队列等等。  

认真读完该系列文章之后，学习者会快速了解并掌握 Spring Boot 在项目中最常用的技术点，作者课程的最后，会基于课程内容搭建一个 Spring Boot 项目的空架构，该架构也是从实际项目中剥离出来，学习者可以运用该架构于实际项目中，具备使用 Spring Boot 进行实际项目开发的能力。  

课程所有源码提供免费下载：[下载地址](https://gitee.com/eson15/springboot_study)。

> 欢迎关注我的为微信公众号：武哥聊编程



## 4. 适合阅读的人群

本课程适合以下人群阅读：

* 有一定的Java语言基础，了解Spring、Maven的在校学生或自学者
* 有传统项目经验，想往微服务方向发展的工作人员
* 热衷于新技术并对 Spring Boot 感兴趣的人员
* 希望了解 Spring Boot 2.0.3 的研究人员

## 5. 本课程开发环境和插件

本课程的开发环境：

* 开发工具：IDEA 2017
* JDK版本： JDK 1.8
* Spring Boot版本：2.0.3 RELEASE
* Maven版本：3.5.2

涉及到的插件：

* FastJson
* Swagger2
* Thymeleaf
* MyBatis
* Redis
* ActiveMQ
* Shiro
* Lucence


## 6. 课程目录

* 导读：课程概览
* 第01课：Spring Boot开发环境搭建和项目启动
* 第02课：Spring Boot返回Json数据及数据封装
* 第03课：Spring Boot使用slf4j进行日志记录
* 第04课：Spring Boot中的项目属性配置
* 第05课：Spring Boot中的MVC支持
* 第06课：Spring Boot集成Swagger2展现在线接口文档
* 第07课：Spring Boot集成Thymeleaf模板引擎
* 第08课：Spring Boot中的全局异常处理
* 第09课：Spring Boot中的切面AOP处理
* 第10课：Spring Boot中集成MyBatis
* 第11课：Spring Boot事务配置管理
* 第12课：Spring Boot中使用监听器
* 第13课：Spring Boot中使用拦截器
* 第14课：Spring Boot中集成Redis
* 第15课：Spring Boot中集成ActiveMQ
* 第16课：Spring Boot中集成Shiro
* 第17课：Spring Boot中结成Lucence
* 第18课：Spring Boot搭建实际项目开发中的架构

>欢迎关注我的为微信公众号：武哥聊编程



# 第01课：Spring Boot开发环境搭建和项目启动

上一节对 SpringBoot 的特性做了一个介绍，本节主要对 **jdk 的配置、Spring Boot工程的构建和项目的启动、Spring Boot 项目工程的结构做一下讲解和分析**。

## 1. jdk 的配置

本课程是使用 IDEA 进行开发，在IDEA 中配置 jdk 的方式很简单，打开`File->Project Structure`，如下图所：

![IDEA中配置jdk](https://images.gitbook.cn/9befde80-8659-11e8-9b0d-95de449dc107)

1. 选择 SDKs
2. 在 JDK home path 中选择本地 jdk 的安装目录
3. 在 Name 中为 jdk 自定义名字

通过以上三步骤，即可导入本地安装的 jdk。如果是使用 STS 或者 eclipse 的朋友，可以通过两步骤添加：

* `window->preference->java->Instralled JRES`来添加本地 jdk。
* `window-->preference-->java-->Compiler`选择 jre，和 jdk 保持一致。

## 2. Spring Boot 工程的构建

### 2.1 IDEA 快速构建

IDEA 中可以通过`File->New->Project`来快速构建 Spring Boot 工程。如下，选择 Spring Initializr，在 Project SDK 中选择刚刚我们导入的 jdk，点击 Next，到了项目的配置信息。

* Group：填企业域名，本课程使用com.itcodai
* Artifact：填项目名称，本课程中每一课的工程名以`course+课号`命令，这里使用 course01
* Dependencies：可以添加我们项目中所需要的依赖信息，根据实际情况来添加，本课程只需要选择 Web 即可。

### 2.2 官方构建

第二种方式可以通过官方构建，步骤如下：

* 访问 http://start.spring.io/。
* 在页面上输入相应的 Spring Boot 版本、Group 和 Artifact 信息以及项目依赖，然后创建项目。
* ![创建Spring Boot工程](https://images.gitbook.cn/014a1ba0-865b-11e8-956e-f528114b28bd)
* 解压后，使用 IDEA 导入该 maven 工程：`File->New->Model from Existing Source`，然后选择解压后的项目文件夹即可。如果是使用 eclipse 的朋友，可以通过`Import->Existing Maven Projects->Next`，然后选择解压后的项目文件夹即可。

### 2.3 maven配置

创建了 Spring Boot 项目之后，需要进行 maven 配置。打开`File->settings`，搜索 maven，配置一下本地的 maven 信息。如下：

![maven配置](https://images.gitbook.cn/2ff7b930-865b-11e8-8675-5537a701ae7d)

在 Maven home directory 中选择本地 Maven 的安装路径；在 User settings file 中选择本地 Maven 的配置文件所在路径。在配置文件中，我们配置一下国内阿里的镜像，这样在下载 maven 依赖时，速度很快。

```xml
<mirror>
	<id>nexus-aliyun</id>
	<mirrorOf>*</mirrorOf>
	<name>Nexus aliyun</name>
	<url>http://maven.aliyun.com/nexus/content/groups/public</url>
</mirror>
```

如果是使用 eclipse 的朋友，可以通过`window-->preference-->Maven-->User Settings`来配置，配置方式和上面一致。

### 2.4 编码配置

同样地，新建项目后，我们一般都需要配置编码，这点非常重要，很多初学者都会忘记这一步，所以要养成良好的习惯。

IDEA 中，仍然是打开`File->settings`，搜索 encoding，配置一下本地的编码信息。如下：

![编码配置](https://images.gitbook.cn/57564e60-865b-11e8-8a91-d70bc2d847c5)

如果是使用 eclipse 的朋友，有两个地方需要设置一下编码：

* window--> perferences-->General-->Workspace，将Text file encoding改成utf-8
* window-->perferences-->General-->content types，选中Text，将Default encoding填入utf-8

OK，编码设置完成即可启动项目工程了。

## 3. Spring Boot 项目工程结构

Spring Boot 项目总共有三个模块，如下图所示：

![Spring Boot项目工程结构](https://images.gitbook.cn/8b32fa80-865b-11e8-9d13-03ea4b4d8504)

* src/main/java路径：主要编写业务程序
* src/main/resources路径：存放静态文件和配置文件
* src/test/java路径：主要编写测试程序

默认情况下，如上图所示会创建一个启动类 Course01Application，该类上面有个`@SpringBootApplication`注解，该启动类中有个 main 方法，没错，Spring Boot 启动只要运行该 main 方法即可，非常方便。另外，Spring Boot 内部集成了 tomcat，不需要我们人为手动去配置 tomcat，开发者只需要关注具体的业务逻辑即可。

到此为止，Spring Boot 就启动成功了，为了比较清楚的看到效果，我们写一个 Controller 来测试一下，如下：

```java
package com.itcodai.course01.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/start")
public class StartController {

    @RequestMapping("/springboot")
    public String startSpringBoot() {
        return "Welcome to the world of Spring Boot!";
    }
}
```

重新运行 main 方法启动项目，在浏览器中输入 `localhost:8080/start/springboot`，如果看到 `“Welcome to the world of Spring Boot!”`，那么恭喜你项目启动成功！Spring Boot 就是这么简单方便！端口号默认是8080，如果想要修改，可以在 application.yml 文件中使用 `server.port` 来人为指定端口，如8001端口：

```xml
server:
  port: 8001
```

## 4. 总结

本节我们快速学习了如何在 IDEA 中导入 jdk，以及使用 IDEA 如何配置 maven 和编码，如何快速的创建和启动 Spring Boot 工程。IDEA 对 Spring Boot 的支持非常友好，建议大家使用 IDEA 进行 Spring Boot 的开发，从下一课开始，我们真正进入 Spring Boot 的学习中。
课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第02课：Spring Boot返回Json数据及数据封装

在项目开发中，接口与接口之间，前后端之间数据的传输都使用 Json 格式，在 Spring Boot 中，接口返回 Json 格式的数据很简单，在 Controller 中使用`@RestController`注解即可返回 Json 格式的数据，`@RestController`也是 Spring Boot 新增的一个注解，我们点进去看一下该注解都包含了哪些东西。

```java
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Controller
@ResponseBody
public @interface RestController {
    String value() default "";
}
```

可以看出， `@RestController` 注解包含了原来的 `@Controller` 和 `@ResponseBody` 注解，使用过 Spring 的朋友对 `@Controller` 注解已经非常了解了，这里不再赘述， `@ResponseBody` 注解是将返回的数据结构转换为 Json 格式。所以在默认情况下，使用了 `@RestController` 注解即可将返回的数据结构转换成 Json 格式，Spring Boot 中默认使用的 Json 解析技术框架是 jackson。我们点开 pom.xml 中的 `spring-boot-starter-web` 依赖，可以看到一个 `spring-boot-starter-json` 依赖：

```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-json</artifactId>
    <version>2.0.3.RELEASE</version>
    <scope>compile</scope>
</dependency>
```

Spring Boot 中对依赖都做了很好的封装，可以看到很多 `spring-boot-starter-xxx` 系列的依赖，这是 Spring Boot 的特点之一，不需要人为去引入很多相关的依赖了，starter-xxx 系列直接都包含了所必要的依赖，所以我们再次点进去上面这个 `spring-boot-starter-json` 依赖，可以看到：

```xml
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.9.6</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.datatype</groupId>
    <artifactId>jackson-datatype-jdk8</artifactId>
    <version>2.9.6</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.datatype</groupId>
    <artifactId>jackson-datatype-jsr310</artifactId>
    <version>2.9.6</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.module</groupId>
    <artifactId>jackson-module-parameter-names</artifactId>
    <version>2.9.6</version>
    <scope>compile</scope>
</dependency>
```

到此为止，我们知道了 Spring Boot 中默认使用的 json 解析框架是 jackson。下面我们看一下默认的 jackson 框架对常用数据类型的转 Json 处理。

## 1. Spring Boot 默认对Json的处理

在实际项目中，常用的数据结构无非有类对象、List对象、Map对象，我们看一下默认的 jackson 框架对这三个常用的数据结构转成 json 后的格式如何。

### 1.1 创建 User 实体类

为了测试，我们需要创建一个实体类，这里我们就用 User 来演示。

```java
public class User {
    private Long id;
    private String username;
    private String password;
	/* 省略get、set和带参构造方法 */
}
```

### 1.2 创建Controller类

然后我们创建一个 Controller，分别返回 `User`对象、`List<User>` 和 `Map<String, Object>`。

```java
import com.itcodai.course02.entity.User;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/json")
public class JsonController {

    @RequestMapping("/user")
    public User getUser() {
        return new User(1, "倪升武", "123456");
    }

    @RequestMapping("/list")
    public List<User> getUserList() {
        List<User> userList = new ArrayList<>();
        User user1 = new User(1, "倪升武", "123456");
        User user2 = new User(2, "达人课", "123456");
        userList.add(user1);
        userList.add(user2);
        return userList;
    }

    @RequestMapping("/map")
    public Map<String, Object> getMap() {
        Map<String, Object> map = new HashMap<>(3);
        User user = new User(1, "倪升武", "123456");
        map.put("作者信息", user);
        map.put("博客地址", "http://blog.itcodai.com");
        map.put("CSDN地址", "http://blog.csdn.net/eson_15");
        map.put("粉丝数量", 4153);
        return map;
    }
}
```

### 1.3 测试不同数据类型返回的json

OK，写好了接口，分别返回了一个 User 对象、一个 List 集合和一个 Map 集合，其中 Map 集合中的 value 存的是不同的数据类型。接下来我们依次来测试一下效果。

在浏览器中输入：`localhost:8080/json/user` 返回 json 如下：

```json
{"id":1,"username":"倪升武","password":"123456"}
```

在浏览器中输入：`localhost:8080/json/list` 返回 json 如下：

```json
[{"id":1,"username":"倪升武","password":"123456"},{"id":2,"username":"达人课","password":"123456"}]
```

在浏览器中输入：`localhost:8080/json/map` 返回 json 如下：

```json
{"作者信息":{"id":1,"username":"倪升武","password":"123456"},"CSDN地址":"http://blog.csdn.net/eson_15","粉丝数量":4153,"博客地址":"http://blog.itcodai.com"}
```

可以看出，map 中不管是什么数据类型，都可以转成相应的 json 格式，这样就非常方便。

### 1.4 jackson 中对null的处理

在实际项目中，我们难免会遇到一些 null 值出现，我们转 json 时，是不希望有这些 null 出现的，比如我们期望所有的 null 在转 json 时都变成 "" 这种空字符串，那怎么做呢？在 Spring Boot 中，我们做一下配置即可，新建一个 jackson 的配置类：

```java
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;

import java.io.IOException;

@Configuration
public class JacksonConfig {
    @Bean
    @Primary
    @ConditionalOnMissingBean(ObjectMapper.class)
    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {
        ObjectMapper objectMapper = builder.createXmlMapper(false).build();
        objectMapper.getSerializerProvider().setNullValueSerializer(new JsonSerializer<Object>() {
            @Override
            public void serialize(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                jsonGenerator.writeString("");
            }
        });
        return objectMapper;
    }
}
```

然后我们修改一下上面返回 map 的接口，将几个值改成 null 测试一下：

```java
@RequestMapping("/map")
public Map<String, Object> getMap() {
    Map<String, Object> map = new HashMap<>(3);
    User user = new User(1, "倪升武", null);
    map.put("作者信息", user);
    map.put("博客地址", "http://blog.itcodai.com");
    map.put("CSDN地址", null);
    map.put("粉丝数量", 4153);
    return map;
}
```

重启项目，再次输入：`localhost:8080/json/map`，可以看到 jackson 已经将所有 null 字段转成了空字符串了。

```json
{"作者信息":{"id":1,"username":"倪升武","password":""},"CSDN地址":"","粉丝数量":4153,"博客地址":"http://blog.itcodai.com"}
```


## 2. 使用阿里巴巴FastJson的设置

### 2.1 jackson 和 fastJson 的对比

有很多朋友习惯于使用阿里巴巴的 fastJson 来做项目中 json 转换的相关工作，目前我们项目中使用的就是阿里的 fastJson，那么 jackson 和 fastJson 有哪些区别呢？根据网上公开的资料比较得到下表。

|         选项          | fastJson | jackson |
| :-------------------: | :------: | :-----: |
|     上手难易程度      |   容易   |  中等   |
|     高级特性支持      |   中等   |  丰富   |
| 官方文档、Example支持 |   中文   |  英文   |
|     处理json速度      |   略快   |   快    |

关于 fastJson 和 jackson 的对比，网上有很多资料可以查看，主要是根据自己实际项目情况来选择合适的框架。从扩展上来看，fastJson 没有 jackson 灵活，从速度或者上手难度来看，fastJson 可以考虑，我们项目中目前使用的是阿里的 fastJson，挺方便的。

### 2.2 fastJson依赖导入

使用 fastJson 需要导入依赖，本课程使用 1.2.35 版本，依赖如下：

```xml
<dependency>
	<groupId>com.alibaba</groupId>
	<artifactId>fastjson</artifactId>
	<version>1.2.35</version>
</dependency>
```

### 2.2 使用 fastJson 处理 null

使用 fastJson 时，对 null 的处理和 jackson 有些不同，需要继承  `WebMvcConfigurationSupport` 类，然后覆盖 `configureMessageConverters` 方法，在方法中，我们可以选择对要实现 null 转换的场景，配置好即可。如下：


```java
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.support.config.FastJsonConfig;
import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

@Configuration
public class fastJsonConfig extends WebMvcConfigurationSupport {

    /**
     * 使用阿里 FastJson 作为JSON MessageConverter
     * @param converters
     */
    @Override
    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();
        FastJsonConfig config = new FastJsonConfig();
        config.setSerializerFeatures(
                // 保留map空的字段
                SerializerFeature.WriteMapNullValue,
                // 将String类型的null转成""
                SerializerFeature.WriteNullStringAsEmpty,
                // 将Number类型的null转成0
                SerializerFeature.WriteNullNumberAsZero,
                // 将List类型的null转成[]
                SerializerFeature.WriteNullListAsEmpty,
                // 将Boolean类型的null转成false
                SerializerFeature.WriteNullBooleanAsFalse,
                // 避免循环引用
                SerializerFeature.DisableCircularReferenceDetect);

        converter.setFastJsonConfig(config);
        converter.setDefaultCharset(Charset.forName("UTF-8"));
        List<MediaType> mediaTypeList = new ArrayList<>();
        // 解决中文乱码问题，相当于在Controller上的@RequestMapping中加了个属性produces = "application/json"
        mediaTypeList.add(MediaType.APPLICATION_JSON);
        converter.setSupportedMediaTypes(mediaTypeList);
        converters.add(converter);
    }
}
```

## 3. 封装统一返回的数据结构

以上是 Spring Boot 返回 json 的几个代表的例子，但是在实际项目中，除了要封装数据之外，我们往往需要在返回的 json 中添加一些其他信息，比如返回一些状态码 code ，返回一些 msg 给调用者，这样调用者可以根据 code 或者 msg 做一些逻辑判断。所以在实际项目中，我们需要封装一个统一的 json 返回结构存储返回信息。 

### 3.1 定义统一的 json 结构

由于封装的 json 数据的类型不确定，所以在定义统一的 json 结构时，我们需要用到泛型。统一的 json 结构中属性包括数据、状态码、提示信息即可，构造方法可以根据实际业务需求做相应的添加即可，一般来说，应该有默认的返回结构，也应该有用户指定的返回结构。如下：

```java
public class JsonResult<T> {

    private T data;
    private String code;
    private String msg;

    /**
     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！
     */
    public JsonResult() {
        this.code = "0";
        this.msg = "操作成功！";
    }

    /**
     * 若没有数据返回，可以人为指定状态码和提示信息
     * @param code
     * @param msg
     */
    public JsonResult(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }

    /**
     * 有数据返回时，状态码为0，默认提示信息为：操作成功！
     * @param data
     */
    public JsonResult(T data) {
        this.data = data;
        this.code = "0";
        this.msg = "操作成功！";
    }

    /**
     * 有数据返回，状态码为0，人为指定提示信息
     * @param data
     * @param msg
     */
    public JsonResult(T data, String msg) {
        this.data = data;
        this.code = "0";
        this.msg = msg;
    }
    // 省略get和set方法
}
```

### 3.2 修改 Controller 中的返回值类型及测试

由于 JsonResult 使用了泛型，所以所有的返回值类型都可以使用该统一结构，在具体的场景将泛型替换成具体的数据类型即可，非常方便，也便于维护。在实际项目中，还可以继续封装，比如状态码和提示信息可以定义一个枚举类型，以后我们只需要维护这个枚举类型中的数据即可（在本课程中就不展开了）。根据以上的 JsonResult，我们改写一下 Controller，如下：

```java
@RestController
@RequestMapping("/jsonresult")
public class JsonResultController {

    @RequestMapping("/user")
    public JsonResult<User> getUser() {
        User user = new User(1, "倪升武", "123456");
        return new JsonResult<>(user);
    }

    @RequestMapping("/list")
    public JsonResult<List> getUserList() {
        List<User> userList = new ArrayList<>();
        User user1 = new User(1, "倪升武", "123456");
        User user2 = new User(2, "达人课", "123456");
        userList.add(user1);
        userList.add(user2);
        return new JsonResult<>(userList, "获取用户列表成功");
    }

    @RequestMapping("/map")
    public JsonResult<Map> getMap() {
        Map<String, Object> map = new HashMap<>(3);
        User user = new User(1, "倪升武", null);
        map.put("作者信息", user);
        map.put("博客地址", "http://blog.itcodai.com");
        map.put("CSDN地址", null);
        map.put("粉丝数量", 4153);
        return new JsonResult<>(map);
    }
}
```

我们重新在浏览器中输入：`localhost:8080/jsonresult/user` 返回 json 如下：

```json
{"code":"0","data":{"id":1,"password":"123456","username":"倪升武"},"msg":"操作成功！"}
```

输入：`localhost:8080/jsonresult/list`，返回 json 如下：

```json
{"code":"0","data":[{"id":1,"password":"123456","username":"倪升武"},{"id":2,"password":"123456","username":"达人课"}],"msg":"获取用户列表成功"}
```

输入：`localhost:8080/jsonresult/map`，返回 json 如下：

```json
{"code":"0","data":{"作者信息":{"id":1,"password":"","username":"倪升武"},"CSDN地址":null,"粉丝数量":4153,"博客地址":"http://blog.itcodai.com"},"msg":"操作成功！"}
```

通过封装，我们不但将数据通过 json 传给前端或者其他接口，还带上了状态码和提示信息，这在实际项目场景中应用非常广泛。

## 4. 总结

本节主要对 Spring Boot 中 json 数据的返回做了详细的分析，从 Spring Boot 默认的 jackson 框架到阿里巴巴的 fastJson 框架，分别对它们的配置做了相应的讲解。另外，结合实际项目情况，总结了实际项目中使用的 json 封装结构体，加入了状态码和提示信息，使得返回的 json 数据信息更加完整。
课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第03课：Spring Boot使用slf4j进行日志记录

在开发中，我们经常使用 `System.out.println()` 来打印一些信息，但是这样不好，因为大量的使用 `System.out` 会增加资源的消耗。我们实际项目中使用的是 slf4j 的 logback 来输出日志，效率挺高的，Spring Boot 提供了一套日志系统，logback 是最优的选择。

## 1. slf4j 介绍

引用百度百科里的一段话：

> SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。

这段的大概意思是：你只需要按统一的方式写记录日志的代码，而无需关心日志是通过哪个日志系统，以什么风格输出的。因为它们取决于部署项目时绑定的日志系统。例如，在项目中使用了 slf4j 记录日志，并且绑定了 log4j（即导入相应的依赖），则日志会以 log4j 的风格输出；后期需要改为以 logback 的风格输出日志，只需要将 log4j 替换成 logback 即可，不用修改项目中的代码。这对于第三方组件的引入的不同日志系统来说几乎零学习成本，况且它的优点不仅仅这一个而已，还有简洁的占位符的使用和日志级别的判断。

正因为 sfl4j 有如此多的优点，阿里巴巴已经将 slf4j 作为他们的日志框架了。在《阿里巴巴Java开发手册(正式版)》中，日志规约一项第一条就强制要求使用 slf4j：

> 1.【强制】应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架SLF4J中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。

“强制”两个字体现出了 slf4j 的优势，所以建议在实际项目中，使用 slf4j 作为自己的日志框架。使用 slf4j 记录日志非常简单，直接使用  LoggerFactory 创建即可。

```java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Test {
    private static final Logger logger = LoggerFactory.getLogger(Test.class);
    // ……
}
```

## 2. application.yml 中对日志的配置

Spring Boot 对 slf4j 支持的很好，内部已经集成了 slf4j，一般我们在使用的时候，会对slf4j 做一下配置。`application.yml` 文件是 Spring Boot 中唯一一个需要配置的文件，一开始创建工程的时候是 `application.properties` 文件，个人比较细化用 yml 文件，因为 yml 文件的层次感特别好，看起来更直观，但是 yml 文件对格式要求比较高，比如英文冒号后面必须要有个空格，否则项目估计无法启动，而且也不报错。用 properties 还是 yml 视个人习惯而定，都可以。本课程使用 yml。

我们看一下 application.yml 文件中对日志的配置：

```xml
logging:
  config: logback.xml
  level:
    com.itcodai.course03.dao: trace
```

`logging.config` 是用来指定项目启动的时候，读取哪个配置文件，这里指定的是日志配置文件是根路径下的 `logback.xml` 文件，关于日志的相关配置信息，都放在 `logback.xml` 文件中了。`logging.level` 是用来指定具体的 mapper 中日志的输出级别，上面的配置表示 `com.itcodai.course03.dao` 包下的所有 mapper 日志输出级别为 trace，会将操作数据库的 sql 打印出来，开发时设置成 trace 方便定位问题，在生产环境上，将这个日志级别再设置成 error 级别即可（本节课不讨论 mapper 层，在后面 Spring Boot 集成 MyBatis 时再详细讨论）。

常用的日志级别按照从高到低依次为：ERROR、WARN、INFO、DEBUG。

## 3. logback.xml 配置文件解析

在上面 `application.yml` 文件中，我们指定了日志配置文件 `logback.xml`，`logback.xml` 文件中主要用来做日志的相关配置。在 `logback.xml` 中，我们可以定义日志输出的格式、路径、控制台输出格式、文件大小、保存时长等等。下面来分析一下：

### 3.1 定义日志输出格式和存储路径

```xml
<configuration>
	<property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n" />
	<property name="FILE_PATH" value="D:/logs/course03/demo.%d{yyyy-MM-dd}.%i.log" />
</configuration>
```

我们来看一下这个定义的含义：首先定义一个格式，命名为 “LOG_PATTERN”，该格式中 `%date` 表示日期，`%thread` 表示线程名，`%-5level` 表示级别从左显示5个字符宽度，`%logger{36}`  表示 logger 名字最长36个字符，`%msg` 表示日志消息，`%n` 是换行符。

然后再定义一下名为 “FILE_PATH” 文件路径，日志都会存储在该路径下。`%i` 表示第 i 个文件，当日志文件达到指定大小时，会将日志生成到新的文件里，这里的 i 就是文件索引，日志文件允许的大小可以设置，下面会讲解。这里需要注意的是，不管是 windows 系统还是 Linux 系统，日志存储的路径必须要是绝对路径。

### 3.2 定义控制台输出

```xml
<configuration>
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
            <!-- 按照上面配置的LOG_PATTERN来打印日志 -->
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender>
</configuration>
```

使用 `<appender>` 节点设置个控制台输出（`class="ch.qos.logback.core.ConsoleAppender"`）的配置，定义为 “CONSOLE”。使用上面定义好的输出格式（LOG_PATTERN）来输出，使用 `${}` 引用进来即可。

### 3.3 定义日志文件的相关参数

```xml
<configuration>
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按照上面配置的FILE_PATH路径来保存日志 -->
			<fileNamePattern>${FILE_PATH}</fileNamePattern>
			<!-- 日志保存15天 -->
			<maxHistory>15</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 单个日志文件的最大，超过则新建日志文件存储 -->
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<encoder>
			<!-- 按照上面配置的LOG_PATTERN来打印日志 -->
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender>
</configuration>
```

使用 `<appender>` 定义一个名为 “FILE” 的文件配置，主要是配置日志文件保存的时间、单个日志文件存储的大小、以及文件保存的路径和日志的输出格式。

### 3.4 定义日志输出级别

```xml
<configuration>
	<logger name="com.itcodai.course03" level="INFO" />
	<root level="INFO">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="FILE" />
	</root>
</configuration>
```

有了上面那些定义后，最后我们使用 `<logger>` 来定义一下项目中默认的日志输出级别，这里定义级别为 INFO，然后针对 INFO 级别的日志，使用 `<root>` 引用上面定义好的控制台日志输出和日志文件的参数。这样 logback.xml 文件中的配置就设置完了。

## 4. 使用Logger在项目中打印日志

在代码中，我们一般使用 Logger 对象来打印出一些 log 信息，可以指定打印出的日志级别，也支持占位符，很方便。

```java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/test")
public class TestController {

    private final static Logger logger = LoggerFactory.getLogger(TestController.class);

    @RequestMapping("/log")
    public String testLog() {
        logger.debug("=====测试日志debug级别打印====");
        logger.info("======测试日志info级别打印=====");
        logger.error("=====测试日志error级别打印====");
        logger.warn("======测试日志warn级别打印=====");

        // 可以使用占位符打印出一些参数信息
        String str1 = "blog.itcodai.com";
        String str2 = "blog.csdn.net/eson_15";
        logger.info("======倪升武的个人博客：{}；倪升武的CSDN博客：{}", str1, str2);

        return "success";
    }
}
```

启动该项目，在浏览器中输入 `localhost:8080/test/log` 后可以看到控制台的日志记录：

> ======测试日志info级别打印=====
> =====测试日志error级别打印====
> ======测试日志warn级别打印=====
> ======倪升武的个人博客：blog.itcodai.com；倪升武的CSDN博客：blog.csdn.net/eson_15

因为 INFO 级别比 DEBUG 级别高，所以 debug 这条没有打印出来，如果将 logback.xml 中的日志级别设置成 DEBUG，那么四条语句都会打印出来，这个大家自己去测试了。同时可以打开 D:\logs\course03\ 目录，里面有刚刚项目启动，以后后面生成的所有日志记录。在项目部署后，我们大部分都是通过查看日志文件来定位问题。

## 5. 总结

本节课主要对 slf4j 做了一个简单的介绍，并且对 Spring Boot 中如何使用 slf4j 输出日志做了详细的说明，着重分析了 `logback.xml` 文件中对日志相关信息的配置，包括日志的不同级别。最后针对这些配置，在代码中使用 Logger 打印出一些进行测试。在实际项目中，这些日志都是排查问题的过程中非常重要的资料。
课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第04课：Spring Boot中的项目属性配置

我们知道，在项目中，很多时候需要用到一些配置的信息，这些信息可能在测试环境和生产环境下会有不同的配置，后面根据实际业务情况有可能还会做修改，针对这种情况，我们不能将这些配置在代码中写死，最好就是写到配置文件中。比如可以把这些信息写到 `application.yml` 文件中。   

## 1. 少量配置信息的情形

举个例子，在微服务架构中，最常见的就是某个服务需要调用其他服务来获取其提供的相关信息，那么在该服务的配置文件中需要配置被调用的服务地址，比如在当前服务里，我们需要调用订单微服务获取订单相关的信息，假设 订单服务的端口号是 8002，那我们可以做如下配置：

```xml
server:
  port: 8001

# 配置微服务的地址
url:
  # 订单微服务的地址
  orderUrl: http://localhost:8002
```

然后在业务代码中如何获取到这个配置的订单服务地址呢？我们可以使用 `@Value` 注解来解决。在对应的类中加上一个属性，在属性上使用 `@Value` 注解即可获取到配置文件中的配置信息，如下：

```java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/test")
public class ConfigController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigController.class);

    @Value("${url.orderUrl}")
    private String orderUrl;
    
    @RequestMapping("/config")
    public String testConfig() {
        LOGGER.info("=====获取的订单服务地址为：{}", orderUrl);
        return "success";
    }
}
```

`@Value` 注解上通过 `${key}` 即可获取配置文件中和 key 对应的 value 值。我们启动一下项目，在浏览器中输入 `localhost:8080/test/config` 请求服务后，可以看到控制台会打印出订单服务的地址：

```
=====获取的订单服务地址为：http://localhost:8002
```

说明我们成功获取到了配置文件中的订单微服务地址，在实际项目中也是这么用的，后面如果因为服务器部署的原因，需要修改某个服务的地址，那么只要在配置文件中修改即可。  

## 2. 多个配置信息的情形

这里再引申一个问题，随着业务复杂度的增加，一个项目中可能会有越来越多的微服务，某个模块可能需要调用多个微服务获取不同的信息，那么就需要在配置文件中配置多个微服务的地址。可是，在需要调用这些微服务的代码中，如果这样一个个去使用 `@Value` 注解引入相应的微服务地址的话，太过于繁琐，也不科学。

所以，在实际项目中，业务繁琐，逻辑复杂的情况下，需要考虑封装一个或多个配置类。举个例子：假如在当前服务中，某个业务需要同时调用订单微服务、用户微服务和购物车微服务，分别获取订单、用户和购物车相关信息，然后对这些信息做一定的逻辑处理。那么在配置文件中，我们需要将这些微服务的地址都配置好：

```xml
# 配置多个微服务的地址
url:
  # 订单微服务的地址
  orderUrl: http://localhost:8002
  # 用户微服务的地址
  userUrl: http://localhost:8003
  # 购物车微服务的地址
  shoppingUrl: http://localhost:8004
```

也许实际业务中，远远不止这三个微服务，甚至十几个都有可能。对于这种情况，我们可以先定义一个 `MicroServiceUrl` 类来专门保存微服务的 url，如下：

```java
@Component
@ConfigurationProperties(prefix = "url")
public class MicroServiceUrl {

    private String orderUrl;
    private String userUrl;
    private String shoppingUrl;
    // 省去get和set方法
}
```

细心的朋友应该可以看到，使用 `@ConfigurationProperties` 注解并且使用 prefix 来指定一个前缀，然后该类中的属性名就是配置中去掉前缀后的名字，一一对应即可。即：前缀名 + 属性名就是配置文件中定义的 key。同时，该类上面需要加上 `@Component` 注解，把该类作为组件放到Spring容器中，让 Spring 去管理，我们使用的时候直接注入即可。

需要注意的是，使用 `@ConfigurationProperties` 注解需要导入它的依赖：

```xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-configuration-processor</artifactId>
	<optional>true</optional>
</dependency>
```

OK，到此为止，我们将配置写好了，接下来写个 Controller 来测试一下。此时，不需要在代码中一个个引入这些微服务的 url 了，直接通过 `@Resource` 注解将刚刚写好配置类注入进来即可使用了，非常方便。如下：

```java
@RestController
@RequestMapping("/test")
public class TestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);

    @Resource
    private MicroServiceUrl microServiceUrl;
    
    @RequestMapping("/config")
    public String testConfig() {
        LOGGER.info("=====获取的订单服务地址为：{}", microServiceUrl.getOrderUrl());
        LOGGER.info("=====获取的用户服务地址为：{}", microServiceUrl.getUserUrl());
        LOGGER.info("=====获取的购物车服务地址为：{}", microServiceUrl.getShoppingUrl());

        return "success";
    }
}
```

再次启动项目，请求一下可以看到，控制台打印出如下信息，说明配置文件生效，同时正确获取配置文件内容：

```
=====获取的订单服务地址为：http://localhost:8002
=====获取的订单服务地址为：http://localhost:8002
=====获取的用户服务地址为：http://localhost:8003
=====获取的购物车服务地址为：http://localhost:8004
```

## 3. 指定项目配置文件

我们知道，在实际项目中，一般有两个环境：开发环境和生产环境。开发环境中的配置和生产环境中的配置往往不同，比如：环境、端口、数据库、相关地址等等。我们不可能在开发环境调试好之后，部署到生产环境后，又要将配置信息全部修改成生产环境上的配置，这样太麻烦，也不科学。

最好的解决方法就是开发环境和生产环境都有一套对用的配置信息，然后当我们在开发时，指定读取开发环境的配置，当我们将项目部署到服务器上之后，再指定去读取生产环境的配置。

我们新建两个配置文件： `application-dev.yml` 和 `application-pro.yml`，分别用来对开发环境和生产环境进行相关配置。这里为了方便，我们分别设置两个访问端口号，开发环境用 8001，生产环境用 8002.

```xml
# 开发环境配置文件
server:
  port: 8001
```

```xml
# 开发环境配置文件
server:
  port: 8002
```

然后在 `application.yml` 文件中指定读取哪个配置文件即可。比如我们在开发环境下，指定读取 `applicationn-dev.yml` 文件，如下：

```xml
spring:
  profiles:
    active:
    - dev
```

这样就可以在开发的时候，指定读取  `application-dev.yml` 文件，访问的时候使用 8001 端口，部署到服务器后，只需要将 `application.yml` 中指定的文件改成 `application-pro.yml` 即可，然后使用 8002 端口访问，非常方便。

## 4. 总结

本节课主要讲解了 Spring Boot 中如何在业务代码中读取相关配置，包括单一配置和多个配置项，在微服务中，这种情况非常常见，往往会有很多其他微服务需要调用，所以封装一个配置类来接收这些配置是个很好的处理方式。除此之外，例如数据库相关的连接参数等等，也可以放到一个配置类中，其他遇到类似的场景，都可以这么处理。最后介绍了开发环境和生产环境配置的快速切换方式，省去了项目部署时，诸多配置信息的修改。
课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第05课：Spring Boot中的MVC支持

Spring Boot 的 MVC 支持主要来介绍实际项目中最常用的几个注解，包括 `@RestController`、 `@RequestMapping`、`@PathVariable`、`@RequestParam` 以及 `@RequestBody`。主要介绍这几个注解常用的使用方式和特点。  

## 1. @RestController

`@RestController` 是 Spring Boot 新增的一个注解，我们看一下该注解都包含了哪些东西。

```java
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Controller
@ResponseBody
public @interface RestController {
    String value() default "";
}
```

可以看出， `@RestController` 注解包含了原来的 `@Controller` 和 `@ResponseBody` 注解，使用过 Spring 的朋友对 `@Controller` 注解已经非常了解了，这里不再赘述， `@ResponseBody` 注解是将返回的数据结构转换为 Json 格式。所以 `@RestController` 可以看作是 `@Controller` 和 `@ResponseBody` 的结合体，相当于偷个懒，我们使用 `@RestController` 之后就不用再使用 `@Controller` 了。但是需要注意一个问题：如果是前后端分离，不用模板渲染的话，比如 Thymeleaf，这种情况下是可以直接使用`@RestController` 将数据以 json 格式传给前端，前端拿到之后解析；但如果不是前后端分离，需要使用模板来渲染的话，一般 Controller 中都会返回到具体的页面，那么此时就不能使用`@RestController`了，比如：

```java
public String getUser() {
	return "user";
}
```

其实是需要返回到 user.html 页面的，如果使用 `@RestController` 的话，会将 user 作为字符串返回的，所以这时候我们需要使用 `@Controller` 注解。这在下一节 Spring Boot 集成 Thymeleaf 模板引擎中会再说明。


## 2. @RequestMapping

`@RequestMapping` 是一个用来处理请求地址映射的注解，它可以用于类上，也可以用于方法上。在类的级别上的注解会将一个特定请求或者请求模式映射到一个控制器之上，表示类中的所有响应请求的方法都是以该地址作为父路径；在方法的级别表示进一步指定到处理方法的映射关系。

该注解有6个属性，一般在项目中比较常用的有三个属性：value、method 和 produces。

* value 属性：指定请求的实际地址，value 可以省略不写
* method 属性：指定请求的类型，主要有 GET、PUT、POST、DELETE，默认为 GET
* produces属性：指定返回内容类型，如 produces = "application/json; charset=UTF-8"

`@RequestMapping` 注解比较简单，举个例子：

```java
@RestController
@RequestMapping(value = "/test", produces = "application/json; charset=UTF-8")
public class TestController {

    @RequestMapping(value = "/get", method = RequestMethod.GET)
    public String testGet() {
        return "success";
    }
}
```

这个很简单，启动项目在浏览器中输入 `localhost:8080/test/get` 测试一下即可。

针对四种不同的请求方式，是有相应注解的，不用每次在 `@RequestMapping` 注解中加 method 属性来指定，上面的 GET 方式请求可以直接使用 `@GetMapping("/get")` 注解，效果一样。相应地，PUT 方式、POST 方式和 DELETE 方式对应的注解分别为 `@PutMapping`、`@PostMapping` 和 `DeleteMapping`。

## 3. @PathVariable

`@PathVariable` 注解主要是用来获取 url 参数，Spring Boot 支持 restfull 风格的 url，比如一个 GET 请求携带一个参数 id 过来，我们将 id 作为参数接收，可以使用 `@PathVariable` 注解。如下：

```java
@GetMapping("/user/{id}")
public String testPathVariable(@PathVariable Integer id) {
	System.out.println("获取到的id为：" + id);
	return "success";
}
```

这里需要注意一个问题，如果想要 url 中占位符中的 id 值直接赋值到参数 id 中，需要保证 url 中的参数和方法接收参数一致，否则就无法接收。如果不一致的话，其实也可以解决，需要用 `@PathVariable` 中的 value 属性来指定对应关系。如下：

```java
@RequestMapping("/user/{idd}")
public String testPathVariable(@PathVariable(value = "idd") Integer id) {
	System.out.println("获取到的id为：" + id);
	return "success";
}
```

对于访问的 url，占位符的位置可以在任何位置，不一定非要在最后，比如这样也行：`/xxx/{id}/user`。另外，url 也支持多个占位符，方法参数使用同样数量的参数来接收，原理和一个参数是一样的，例如：

```java
@GetMapping("/user/{idd}/{name}")
    public String testPathVariable(@PathVariable(value = "idd") Integer id, @PathVariable String name) {
        System.out.println("获取到的id为：" + id);
        System.out.println("获取到的name为：" + name);
        return "success";
    }
```

运行项目，在浏览器中请求 `localhost:8080/test/user/2/zhangsan` 可以看到控制台输出如下信息：

```
获取到的id为：2
获取到的name为：zhangsan
```

所以支持多个参数的接收。同样地，如果 url 中的参数和方法中的参数名称不同的话，也需要使用 value 属性来绑定两个参数。


## 4. @RequestParam

`@RequestParam` 注解顾名思义，也是获取请求参数的，上面我们介绍了 `@PathValiable` 注解也是获取请求参数的，那么 `@RequestParam` 和 `@PathVariable` 有什么不同呢？主要区别在于： `@PathValiable` 是从 url 模板中获取参数值， 即这种风格的 url：`http://localhost:8080/user/{id}` ；而 `@RequestParam` 是从 request 里面获取参数值，即这种风格的 url：`http://localhost:8080/user?id=1`  。我们使用该 url 带上参数 id 来测试一下如下代码：

```java
@GetMapping("/user")
public String testRequestParam(@RequestParam Integer id) {
	System.out.println("获取到的id为：" + id);
	return "success";
}
```

可以正常从控制台打印出 id 信息。同样地，url 上面的参数和方法的参数需要一致，如果不一致，也需要使用 value 属性来说明，比如 url 为：`http://localhost:8080/user?idd=1`

```java
@RequestMapping("/user")
public String testRequestParam(@RequestParam(value = "idd", required = false) Integer id) {
	System.out.println("获取到的id为：" + id);
	return "success";
}
```

除了 value 属性外，还有个两个属性比较常用：

* required 属性：true 表示该参数必须要传，否则就会报 404 错误，false 表示可有可无。
* defaultValue 属性：默认值，表示如果请求中没有同名参数时的默认值。

从 url 中可以看出，`@RequestParam` 注解用于 GET 请求上时，接收拼接在 url 中的参数。除此之外，该注解还可以用于 POST 请求，接收前端表单提交的参数，假如前端通过表单提交 username 和 password 两个参数，那我们可以使用 `@RequestParam` 来接收，用法和上面一样。

```java
@PostMapping("/form1")
    public String testForm(@RequestParam String username, @RequestParam String password) {
        System.out.println("获取到的username为：" + username);
        System.out.println("获取到的password为：" + password);
        return "success";
    }
```

我们使用 postman 来模拟一下表单提交，测试一下接口：

![使用postman测试表单提交](https://img-blog.csdnimg.cn/20200215043749282.png)

那么问题来了，如果表单数据很多，我们不可能在后台方法中写上很多参数，每个参数还要 `@RequestParam` 注解。针对这种情况，我们需要封装一个实体类来接收这些参数，实体中的属性名和表单中的参数名一致即可。

```java
public class User {
	private String username;
	private String password;
	// set get
}
```

使用实体接收的话，我们不能在前面加 `@RequestParam` 注解了，直接使用即可。

```java
@PostMapping("/form2")
    public String testForm(User user) {
        System.out.println("获取到的username为：" + user.getUsername());
        System.out.println("获取到的password为：" + user.getPassword());
        return "success";
    }
```

使用 postman 再次测试一下表单提交，观察一下返回值和控制台打印出的日志即可。在实际项目中，一般都是封装一个实体类来接收表单数据，因为实际项目中表单数据一般都很多。


## 5. @RequestBody

`@RequestBody` 注解用于接收前端传来的实体，接收参数也是对应的实体，比如前端通过 json 提交传来两个参数 username 和 password，此时我们需要在后端封装一个实体来接收。在传递的参数比较多的情况下，使用 `@RequestBody` 接收会非常方便。例如：

```java
public class User {
	private String username;
	private String password;
	// set get
}
```

```java
@PostMapping("/user")
public String testRequestBody(@RequestBody User user) {
	System.out.println("获取到的username为：" + user.getUsername());
	System.out.println("获取到的password为：" + user.getPassword());
	return "success";
}
```

我们使用 postman 工具来测试一下效果，打开 postman，然后输入请求地址和参数，参数我们用 json 来模拟，如下图所有，调用之后返回 success。

![使用Postman测试requestBody](https://img-blog.csdnimg.cn/20200215043853532.png)

同时看一下后台控制台输出的日志：

```
获取到的username为：倪升武
获取到的password为：123456
```

可以看出，`@RequestBody` 注解用于 POST 请求上，接收 json 实体参数。它和上面我们介绍的表单提交有点类似，只不过参数的格式不同，一个是 json 实体，一个是表单提交。在实际项目中根据具体场景和需要使用对应的注解即可。

## 6. 总结

本节课主要讲解了 Spring Boot 中对 MVC 的支持，分析了 `@RestController`、 `@RequestMapping`、`@PathVariable`、 `@RequestParam` 和 `@RequestBody` 四个注解的使用方式，由于 `@RestController` 中集成了 `@ResponseBody` 所以对返回 json 的注解不再赘述。以上四个注解是使用频率很高的注解，在所有的实际项目中基本都会遇到，要熟练掌握。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第06课：Spring Boot集成 Swagger2 展现在线接口文档

## 1. Swagger 简介

### 1.1 解决的问题

随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了前后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。前端和后端的唯一联系，变成了 API 接口，所以 API 文档变成了前后端开发人员联系的纽带，变得越来越重要。

那么问题来了，随着代码的不断更新，开发人员在开发新的接口或者更新旧的接口后，由于开发任务的繁重，往往文档很难持续跟着更新，Swagger 就是用来解决该问题的一款重要的工具，对使用接口的人来说，开发人员不需要给他们提供文档，只要告诉他们一个 Swagger 地址，即可展示在线的 API 接口文档，除此之外，调用接口的人员还可以在线测试接口数据，同样地，开发人员在开发接口时，同样也可以利用 Swagger 在线接口文档测试接口数据，这给开发人员提供了便利。

### 1.2 Swagger 官方

我们打开 [Swagger 官网](https://swagger.io/)，官方对 Swagger 的定义为：

> The Best APIs are Built with Swagger Tools 

翻译成中文是：“最好的 API 是使用 Swagger 工具构建的”。由此可见，Swagger 官方对其功能和所处的地位非常自信，由于其非常好用，所以官方对其定位也合情合理。如下图所示：

![官方对swagger的定位](https://img-blog.csdnimg.cn/20200215043936444.png)

本文主要讲解在 Spring Boot 中如何导入 Swagger2 工具来展现项目中的接口文档。本节课使用的 Swagger 版本为 2.2.2。下面开始进入 Swagger2 之旅。


## 2. Swagger2 的 maven 依赖

使用 Swagger2 工具，必须要导入 maven 依赖，当前官方最高版本是 2.8.0，我尝试了一下，个人感觉页面展示的效果不太好，而且不够紧凑，不利于操作。另外，最新版本并不一定是最稳定版本，当前我们实际项目中使用的是 2.2.2 版本，该版本稳定，界面友好，所以本节课主要围绕着 2.2.2 版本来展开，依赖如下：

```xml
<dependency>
	<groupId>io.springfox</groupId>
	<artifactId>springfox-swagger2</artifactId>
	<version>2.2.2</version>
</dependency>
<dependency>
	<groupId>io.springfox</groupId>
	<artifactId>springfox-swagger-ui</artifactId>
	<version>2.2.2</version>
</dependency>
```

## 3. Swagger2 的配置

使用 Swagger2 需要进行配置，Spring Boot 中对 Swagger2 的配置非常方便，新建一个配置类，Swagger2 的配置类上除了添加必要的 `@Configuration` 注解外，还需要添加 `@EnableSwagger2` 注解。

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

/**
 * @author shengwu ni
 */
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket createRestApi() {
        return new Docket(DocumentationType.SWAGGER_2)
                // 指定构建api文档的详细信息的方法：apiInfo()
                .apiInfo(apiInfo())
                .select()
                // 指定要生成api接口的包路径，这里把controller作为包路径，生成controller中的所有接口
                .apis(RequestHandlerSelectors.basePackage("com.itcodai.course06.controller"))
                .paths(PathSelectors.any())
                .build();
    }

    /**
     * 构建api文档的详细信息
     * @return
     */
    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                // 设置页面标题
                .title("Spring Boot集成Swagger2接口总览")
                // 设置接口描述
                .description("跟武哥一起学Spring Boot第06课")
                // 设置联系方式
                .contact("倪升武，" + "CSDN：http://blog.csdn.net/eson_15")
                // 设置版本
                .version("1.0")
                // 构建
                .build();
    }
}
```

在该配置类中，已经使用注释详细解释了每个方法的作用了，在此不再赘述。到此为止，我们已经配置好了 Swagger2 了。现在我们可以测试一下配置有没有生效，启动项目，在浏览器中输入 `localhost:8080/swagger-ui.html`，即可看到 swagger2 的接口页面，如下图所示，说明Swagger2 集成成功。

![swagger2页面](https://img-blog.csdnimg.cn/20200215044013383.png)

结合该图，对照上面的 Swagger2 配置文件中的配置，可以很明确的知道配置类中每个方法的作用。这样就很容易理解和掌握 Swagger2 中的配置了，也可以看出，其实 Swagger2 配置很简单。

【友情提示】可能有很多朋友在配置 Swagger 的时候会遇到下面的情况，而且还关不掉的，这是因为浏览器缓存引起的，清空一下浏览器缓存即可解决问题。

![错误页面-倪升武的博客-图2](http://p99jlm9k5.bkt.clouddn.com/blog/images/1/error.png)

## 4. Swagger2 的使用

上面我们已经配置好了 Swagger2，并且也启动测试了一下，功能正常，下面我们开始使用 Swagger2，主要来介绍 Swagger2 中的几个常用的注解，分别在实体类上、 Controller 类上以及 Controller 中的方法上，最后我们看一下 Swagger2 是如何在页面上呈现在线接口文档的，并且结合 Controller 中的方法在接口中测试一下数据。

### 4.1 实体类注解

本节我们建一个 User 实体类，主要介绍一下 Swagger2 中的 `@ApiModel` 和 `@ApiModelProperty` 注解，同时为后面的测试做准备。

```java
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

@ApiModel(value = "用户实体类")
public class User {

    @ApiModelProperty(value = "用户唯一标识")
    private Long id;

    @ApiModelProperty(value = "用户姓名")
    private String username;

    @ApiModelProperty(value = "用户密码")
    private String password;

	// 省略set和get方法
}
```

解释下 `@ApiModel` 和 `@ApiModelProperty` 注解：

> `@ApiModel` 注解用于实体类，表示对类进行说明，用于参数用实体类接收。
> `@ApiModelProperty` 注解用于类中属性，表示对 model 属性的说明或者数据操作更改。

该注解在在线 API 文档中的具体效果在下文说明。

### 4.2 Controller 类中相关注解

我们写一个 TestController，再写几个接口，然后学习一下 Controller 中和 Swagger2 相关的注解。

```java
import com.itcodai.course06.entiy.JsonResult;
import com.itcodai.course06.entiy.User;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/swagger")
@Api(value = "Swagger2 在线接口文档")
public class TestController {

    @GetMapping("/get/{id}")
    @ApiOperation(value = "根据用户唯一标识获取用户信息")
    public JsonResult<User> getUserInfo(@PathVariable @ApiParam(value = "用户唯一标识") Long id) {
        // 模拟数据库中根据id获取User信息
        User user = new User(id, "倪升武", "123456");
        return new JsonResult(user);
    }
}
```

我们来学习一下 `@Api` 、 `@ApiOperation` 和 `@ApiParam` 注解。

> `@Api` 注解用于类上，表示标识这个类是 swagger 的资源。
> `@ApiOperation` 注解用于方法，表示一个 http 请求的操作。
> `@ApiParam` 注解用于参数上，用来标明参数信息。

这里返回的是 JsonResult，是第02课中学习返回 json 数据时封装的实体。以上是 Swagger 中最常用的 5 个注解，接下来运行一下项目工程，在浏览器中输入 `localhost:8080/swagger-ui.html` 看一下 Swagger 页面的接口状态。

![swagger接口展示](https://img-blog.csdnimg.cn/20200215044156305.png)

可以看出，Swagger 页面对该接口的信息展示的非常全面，每个注解的作用以及展示的地方在上图中已经标明，通过页面即可知道该接口的所有信息，那么我们直接在线测试一下该接口返回的信息，输入id为1，看一下返回数据：

![返回数据测试](https://img-blog.csdnimg.cn/20200215044226292.png)

可以看出，直接在页面返回了 json 格式的数据，开发人员可以直接使用该在线接口来测试数据的正确与否，非常方便。上面是对于单个参数的输入，如果输入参数为某个对象这种情况，Swagger 是什么样子呢？我们再写一个接口。

```java
@PostMapping("/insert")
    @ApiOperation(value = "添加用户信息")
    public JsonResult<Void> insertUser(@RequestBody @ApiParam(value = "用户信息") User user) {
        // 处理添加逻辑
        return new JsonResult<>();
    }
```

重启项目，在浏览器中输入 `localhost:8080/swagger-ui.html` 看一下效果：

![swagger接口展示](https://img-blog.csdnimg.cn/20200215044256579.png)

## 5. 总结

OK，本节课详细分析了 Swagger 的优点，以及 Spring Boot 如何集成 Swagger2，包括配置，相关注解的讲解，涉及到了实体类和接口类，以及如何使用。最后通过页面测试，体验了 Swagger 的强大之处，基本上是每个项目组中必备的工具之一，所以要掌握该工具的使用，也不难。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第07课：Spring Boot集成Thymeleaf模板引擎

## 1. Thymeleaf 介绍

> Thymeleaf 是适用于 Web 和独立环境的现代服务器端 Java 模板引擎。  
> Thymeleaf 的主要目标是为您的开发工作流程带来优雅的自然模板 - 可以在浏览器中正确显示的HTML，也可以用作静态原型，从而在开发团队中实现更强大的协作。  

以上翻译自 Thymeleaf 官方网站。传统的 JSP+JSTL 组合是已经过去了，Thymeleaf 是现代服务端的模板引擎，与传统的 JSP 不同，Thymeleaf 可以使用浏览器直接打开，因为可以忽略掉拓展属性，相当于打开原生页面，给前端人员也带来一定的便利。   

什么意思呢？就是说在本地环境或者有网络的环境下，Thymeleaf 均可运行。由于 thymeleaf 支持 html 原型，也支持在 html 标签里增加额外的属性来达到 “模板+数据” 的展示方式，所以美工可以直接在浏览器中查看页面效果，当服务启动后，也可以让后台开发人员查看带数据的动态页面效果。比如：

```html
<div class="ui right aligned basic segment">
      <div class="ui orange basic label" th:text="${blog.flag}">静态原创信息</div>
</div>
<h2 class="ui center aligned header" th:text="${blog.title}">这是静态标题</h2>
```

类似与上面这样，在静态页面时，会展示静态信息，当服务启动后，动态获取数据库中的数据后，就可以展示动态数据，`th:text` 标签是用来动态替换文本的，这会在下文说明。该例子说明浏览器解释 html 时会忽略 html 中未定义的标签属性（比如 `th:text`），所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示数据。 

## 2. 依赖导入

在 Spring Boot 中使用 thymeleaf 模板需要引入依赖，可以在创建项目工程时勾选 Thymeleaf，也可以创建之后再手动导入，如下：

```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
```

另外，在 html 页面上如果要使用 thymeleaf 模板，需要在页面标签中引入：

```html
<html xmlns:th="http://www.thymeleaf.org">
```

## 3. Thymeleaf相关配置

因为 Thymeleaf 中已经有默认的配置了，我们不需要再对其做过多的配置，有一个需要注意一下，Thymeleaf 默认是开启页面缓存的，所以在开发的时候，需要关闭这个页面缓存，配置如下。

```yml
spring:
  thymeleaf:
    cache: false #关闭缓存
```

否则会有缓存，导致页面没法及时看到更新后的效果。 比如你修改了一个文件，已经 update 到 tomcat 了，但刷新页面还是之前的页面，就是因为缓存引起的。

## 4. Thymeleaf 的使用

### 4.1 访问静态页面

这个和 Thymeleaf 没啥关系，应该说是通用的，我把它一并写到这里的原因是一般我们做网站的时候，都会做一个 404 页面和 500 页面，为了出错时给用户一个友好的展示，而不至于一堆异常信息抛出来。Spring Boot 中会自动识别模板目录（templates/）下的 404.html 和 500.html 文件。我们在 templates/ 目录下新建一个 error 文件夹，专门放置错误的 html 页面，然后分别打印些信息。以 404.html 为例：

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    这是404页面
</body>
</html>
```

我们再写一个 controller 来测试一下 404 和 500 页面：

```java
@Controller
@RequestMapping("/thymeleaf")
public class ThymeleafController {

    @RequestMapping("/test404")
    public String test404() {
        return "index";
    }

    @RequestMapping("/test500")
    public String test500() {
        int i = 1 / 0;
        return "index";
    }
}
```

> 当我们在浏览器中输入 `localhost:8080/thymeleaf/test400` 时，故意输入错误，找不到对应的方法，就会跳转到 404.html 显示。   
> 当我们在浏览器中输入 `localhost:8088/thymeleaf/test505` 时，会抛出异常，然后会自动跳转到 500.html 显示。

【注】这里有个问题需要注意一下，前面的课程中我们说了微服务中会走向前后端分离，我们在 Controller 层上都是使用的 `@RestController` 注解，自动会把返回的数据转成 json 格式。但是在使用模板引擎时，Controller 层就不能用 `@RestController` 注解了，因为在使用 thymeleaf 模板时，返回的是视图文件名，比如上面的 Controller 中是返回到 index.html 页面，如果使用 `@RestController` 的话，会把 index 当作 String 解析了，直接返回到页面了，而不是去找 index.html 页面，大家可以试一下。所以在使用模板时要用 `@Controller` 注解。

### 4.2 Thymeleaf 中处理对象

我们来看一下 thymeleaf 模板中如何处理对象信息，假如我们在做个人博客的时候，需要给前端传博主相关信息来展示，那么我们会封装成一个博主对象，比如：

```java
public class Blogger {
    private Long id;
    private String name;
    private String pass;
	// 省去set和get
}
```

然后在controller层中初始化一下：

```java
@GetMapping("/getBlogger")
public String getBlogger(Model model) {
	Blogger blogger = new Blogger(1L, "倪升武", "123456");
	model.addAttribute("blogger", blogger);
	return "blogger";
}
```

我们先初始化一个 Blogger 对象，然后将该对象放到 Model 中，然后返回到 blogger.html 页面去渲染。接下来我们再写一个 blogger.html 来渲染 blogger 信息：

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>博主信息</title>
</head>
<body>
<form action="" th:object="${blogger}" >
    用户编号：<input name="id" th:value="${blogger.id}"/><br>
    用户姓名：<input type="text" name="username" th:value="${blogger.getName()}" /><br>
    登陆密码：<input type="text" name="password" th:value="*{pass}" />
</form>
</body>
</html>
```

可以看出，在 thymeleaf 模板中，使用 `th:object="${}"` 来获取对象信息，然后在表单里面可以有三种方式来获取对象属性。如下：

> 使用 `th:value="*{属性名}"`
> 使用 `th:value="${对象.属性名}"`，对象指的是上面使用 `th:object` 获取的对象
> 使用 `th:value="${对象.get方法}"`，对象指的是上面使用 `th:object` 获取的对象

可以看出，在 Thymeleaf 中可以像写 java 一样写代码，很方便。我们在浏览器中输入 `localhost:8080/thymeleaf/getBlogger` 来测试一下数据：

![thymeleaf中处理对象](https://img-blog.csdnimg.cn/20200215044353803.jpg)

### 4.3 Thymeleaf 中处理 List

处理 List 的话，和处理上面介绍的对象差不多，但是需要在 thymeleaf 中进行遍历。我们先在 Controller 中模拟一个 List。

```java
@GetMapping("/getList")
public String getList(Model model) {
    Blogger blogger1 = new Blogger(1L, "倪升武", "123456");
    Blogger blogger2 = new Blogger(2L, "达人课", "123456");
    List<Blogger> list = new ArrayList<>();
    list.add(blogger1);
    list.add(blogger2);
    model.addAttribute("list", list);
    return "list";
}
```

接下来我们写一个 list.html 来获取该 list 信息，然后在 list.html 中遍历这个list。如下：

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>博主信息</title>
</head>
<body>
<form action="" th:each="blogger : ${list}" >
    用户编号：<input name="id" th:value="${blogger.id}"/><br>
    用户姓名：<input type="text" name="password" th:value="${blogger.name}"/><br>
    登录密码：<input type="text" name="username" th:value="${blogger.getPass()}"/>
</form>
</body>
</html>
```

可以看出，其实和处理单个对象信息差不多，Thymeleaf 使用 `th:each` 进行遍历，`${}` 取 model 中传过来的参数，然后自定义 list 中取出来的每个对象，这里定义为 blogger。表单里面可以直接使用 `${对象.属性名}` 来获取 list 中对象的属性值，也可以使用 `${对象.get方法}` 来获取，这点和上面处理对象信息是一样的，但是不能使用 `*{属性名}` 来获取对象中的属性，thymeleaf 模板获取不到。    

### 4.4 其他常用 thymeleaf 操作

我们来总结一下 thymeleaf 中的一些常用的标签操作，如下：

| 标签         | 功能                  | 例子                                                         |
| ------------ | --------------------- | ------------------------------------------------------------ |
| `th:value`   | 给属性赋值            | `<input th:value="${blog.name}" /> `                         |
| `th:style`   | 设置样式              | `th:style="'display:'+@{(${sitrue}?'none':'inline-block')} + ''"` |
| `th:onclick` | 点击事件              | `th:onclick="'getInfo()'"`                                   |
| `th:if`      | 条件判断              | `<a th:if="${userId == collect.userId}" >`                   |
| `th:href`    | 超链接                | `<a th:href="@{/blogger/login}">Login</a> />`                |
| `th:unless`  | 条件判断和`th:if`相反 | `<a th:href="@{/blogger/login}" th:unless=${session.user != null}>Login</a>` |
| `th:switch`  | 配合`th:case`         | `<div th:switch="${user.role}">`                             |
| `th:case`    | 配合`th:switch`       | `<p th:case="'admin'">administator</p>`                      |
| `th:src`     | 地址引入              | `<img alt="csdn logo" th:src="@{/img/logo.png}" />`          |
| `th:action`  | 表单提交的地址        | `<form th:action="@{/blogger/update}">`                      |

Thymeleaf 还有很多其他用法，这里就不总结了，具体的可以参考Thymeleaf的[官方文档（v3.0）](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html)。主要要学会如何在 Spring Boot 中去使用 thymeleaf，遇到对应的标签或者方法，查阅官方文档即可。

## 5. 总结

Thymeleaf 在 Spring Boot 中使用非常广泛，本节课主要分析了 thymeleaf 的优点，以及如何在 Spring Boot 中集成并使用 thymeleaf 模板，包括依赖、配置，相关数据的获取、以及一些注意事项等等。最后列举了一些 thymeleaf 中常用的标签，在实际项目中多使用，多查阅就能熟练掌握，thymeleaf 中的一些标签或者方法不用死记硬背，用到什么去查阅什么，关键是要会在 Spring Boot 中集成，用的多了就熟能生巧。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第08课：Spring Boot中的全局异常处理


在项目开发过程中，不管是对底层数据库的操作过程，还是业务层的处理过程，还是控制层的处理过程，都不可避免会遇到各种可预知的、不可预知的异常需要处理。如果对每个过程都单独作异常处理，那系统的代码耦合度会变得很高，此外，开发工作量也会加大而且不好统一，这也增加了代码的维护成本。   
针对这种实际情况，我们需要将所有类型的异常处理从各处理过程解耦出来，这样既保证了相关处理过程的功能单一，也实现了异常信息的统一处理和维护。同时，我们也不希望直接把异常抛给用户，应该对异常进行处理，对错误信息进行封装，然后返回一个友好的信息给用户。这节主要总结一下项目中如何使用 Spring Boot 如何拦截并处理全局的异常。

## 1. 定义返回的统一 json 结构

前端或者其他服务请求本服务的接口时，该接口需要返回对应的 json 数据，一般该服务只需要返回请求着需要的参数即可，但是在实际项目中，我们需要封装更多的信息，比如状态码 code、相关信息 msg 等等，这一方面是在项目中可以有个统一的返回结构，整个项目组都适用，另一方面是方便结合全局异常处理信息，因为异常处理信息中一般我们需要把状态码和异常内容反馈给调用方。   
这个统一的 json 结构这可以参考[第02课：Spring Boot 返回 JSON 数据及数据封装](https://gitbook.cn/gitchat/column/5b3c9f35a3442272491a176a)中封装的统一 json 结构，本节内容我们简化一下，只保留状态码 code 和异常信息 msg即可。如下：

```java
public class JsonResult {
    /**
     * 异常码
     */
    protected String code;

    /**
     * 异常信息
     */
    protected String msg;
	
    public JsonResult() {
        this.code = "200";
        this.msg = "操作成功";
    }
    
    public JsonResult(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }
	// get set
}
```

## 2. 处理系统异常

新建一个 GlobalExceptionHandler 全局异常处理类，然后加上 `@ControllerAdvice` 注解即可拦截项目中抛出的异常，如下：

```java
@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {
	// 打印log
    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    // ……
}
```

我们点开 `@ControllerAdvice` 注解可以看到，`@ControllerAdvice` 注解包含了 `@Component` 注解，说明在 Spring Boot 启动时，也会把该类作为组件交给 Spring 来管理。除此之外，该注解还有个 `basePackages` 属性，该属性是用来拦截哪个包中的异常信息，一般我们不指定这个属性，我们拦截项目工程中的所有异常。`@ResponseBody` 注解是为了异常处理完之后给调用方输出一个 json 格式的封装数据。  
在项目中如何使用呢？Spring Boot 中很简单，在方法上通过 `@ExceptionHandler` 注解来指定具体的异常，然后在方法中处理该异常信息，最后将结果通过统一的 json 结构体返回给调用者。下面我们举几个例子来说明如何来使用。

### 2.1 处理参数缺失异常

在前后端分离的架构中，前端请求后台的接口都是通过 rest 风格来调用，有时候，比如 POST 请求 需要携带一些参数，但是往往有时候参数会漏掉。另外，在微服务架构中，涉及到多个微服务之间的接口调用时，也可能出现这种情况，此时我们需要定义一个处理参数缺失异常的方法，来给前端或者调用方提示一个友好信息。  

参数缺失的时候，会抛出 `HttpMessageNotReadableException`，我们可以拦截该异常，做一个友好处理，如下：

```java
/**
* 缺少请求参数异常
* @param ex HttpMessageNotReadableException
* @return
*/
@ExceptionHandler(MissingServletRequestParameterException.class)
@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public JsonResult handleHttpMessageNotReadableException(
    MissingServletRequestParameterException ex) {
    logger.error("缺少请求参数，{}", ex.getMessage());
    return new JsonResult("400", "缺少必要的请求参数");
}
```

我们来写个简单的 Controller 测试一下该异常，通过 POST 请求方式接收两个参数：姓名和密码。

```java
@RestController
@RequestMapping("/exception")
public class ExceptionController {

    private static final Logger logger = LoggerFactory.getLogger(ExceptionController.class);

    @PostMapping("/test")
    public JsonResult test(@RequestParam("name") String name,
                           @RequestParam("pass") String pass) {
        logger.info("name：{}", name);
        logger.info("pass：{}", pass);
        return new JsonResult();
    }
}
```

然后使用 Postman 来调用一下该接口，调用的时候，只传姓名，不传密码，就会抛缺少参数异常，该异常被捕获之后，就会进入我们写好的逻辑，给调用方返回一个友好信息，如下：

![缺失参数异常](https://img-blog.csdnimg.cn/2020021504443480.png)


### 2.2 处理空指针异常

空指针异常是开发中司空见惯的东西了，一般发生的地方有哪些呢？  
先来聊一聊一些注意的地方，比如在微服务中，经常会调用其他服务获取数据，这个数据主要是 json 格式的，但是在解析 json 的过程中，可能会有空出现，所以我们在获取某个 jsonObject 时，再通过该 jsonObject 去获取相关信息时，应该要先做非空判断。  
还有一个很常见的地方就是从数据库中查询的数据，不管是查询一条记录封装在某个对象中，还是查询多条记录封装在一个 List 中，我们接下来都要去处理数据，那么就有可能出现空指针异常，因为谁也不能保证从数据库中查出来的东西就一定不为空，所以在使用数据时一定要先做非空判断。  
对空指针异常的处理很简单，和上面的逻辑一样，将异常信息换掉即可。如下：

```java
@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    /**
     * 空指针异常
     * @param ex NullPointerException
     * @return
     */
    @ExceptionHandler(NullPointerException.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleTypeMismatchException(NullPointerException ex) {
        logger.error("空指针异常，{}", ex.getMessage());
        return new JsonResult("500", "空指针异常了");
    }
}
```

这个我就不测试了，代码中 ExceptionController 有个 `testNullPointException` 方法，模拟了一个空指针异常，我们在浏览器中请求一下对应的 url 即可看到返回的信息：

```json
{"code":"500","msg":"空指针异常了"}
```

### 2.3 一劳永逸？

当然了，异常很多，比如还有 RuntimeException，数据库还有一些查询或者操作异常等等。由于 Exception 异常是父类，所有异常都会继承该异常，所以我们可以直接拦截 Exception 异常，一劳永逸：

```java
@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    /**
     * 系统异常 预期以外异常
     * @param ex
     * @return
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleUnexpectedServer(Exception ex) {
        logger.error("系统异常：", ex);
        return new JsonResult("500", "系统发生异常，请联系管理员");
    }
}
```

但是项目中，我们一般都会比较详细的去拦截一些常见异常，拦截 Exception 虽然可以一劳永逸，但是不利于我们去排查或者定位问题。实际项目中，可以把拦截 Exception 异常写在 GlobalExceptionHandler 最下面，如果都没有找到，最后再拦截一下 Exception 异常，保证输出信息友好。

## 3. 拦截自定义异常

在实际项目中，除了拦截一些系统异常外，在某些业务上，我们需要自定义一些业务异常，比如在微服务中，服务之间的相互调用很平凡，很常见。要处理一个服务的调用时，那么可能会调用失败或者调用超时等等，此时我们需要自定义一个异常，当调用失败时抛出该异常，给 GlobalExceptionHandler 去捕获。

### 3.1 定义异常信息

由于在业务中，有很多异常，针对不同的业务，可能给出的提示信息不同，所以为了方便项目异常信息管理，我们一般会定义一个异常信息枚举类。比如：

```java
/**
 * 业务异常提示信息枚举类
 * @author shengwu ni
 */
public enum BusinessMsgEnum {
    /** 参数异常 */
    PARMETER_EXCEPTION("102", "参数异常!"),
    /** 等待超时 */
    SERVICE_TIME_OUT("103", "服务调用超时！"),
    /** 参数过大 */
    PARMETER_BIG_EXCEPTION("102", "输入的图片数量不能超过50张!"),
    /** 500 : 一劳永逸的提示也可以在这定义 */
    UNEXPECTED_EXCEPTION("500", "系统发生异常，请联系管理员！");
    // 还可以定义更多的业务异常

    /**
     * 消息码
     */
    private String code;
    /**
     * 消息内容
     */
    private String msg;

    private BusinessMsgEnum(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }
	// set get方法
}
```

### 3.2 拦截自定义异常

然后我们可以定义一个业务异常，当出现业务异常时，我们就抛这个自定义的业务异常即可。比如我们定义一个 BusinessErrorException 异常，如下：

```java
/**
 * 自定义业务异常
 * @author shengwu ni
 */
public class BusinessErrorException extends RuntimeException {
    
    private static final long serialVersionUID = -7480022450501760611L;

    /**
     * 异常码
     */
    private String code;
    /**
     * 异常提示信息
     */
    private String message;

    public BusinessErrorException(BusinessMsgEnum businessMsgEnum) {
        this.code = businessMsgEnum.code();
        this.message = businessMsgEnum.msg();
    }
	// get set方法
}
```

在构造方法中，传入我们上面自定义的异常枚举类，所以在项目中，如果有新的异常信息需要添加，我们直接在枚举类中添加即可，很方便，做到统一维护，然后再拦截该异常时获取即可。

```java
@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    /**
     * 拦截业务异常，返回业务异常信息
     * @param ex
     * @return
     */
    @ExceptionHandler(BusinessErrorException.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleBusinessError(BusinessErrorException ex) {
        String code = ex.getCode();
        String message = ex.getMessage();
        return new JsonResult(code, message);
    }
}
```

在业务代码中，我们可以直接模拟一下抛出业务异常，测试一下：

```java
@RestController
@RequestMapping("/exception")
public class ExceptionController {

    private static final Logger logger = LoggerFactory.getLogger(ExceptionController.class);

    @GetMapping("/business")
    public JsonResult testException() {
        try {
            int i = 1 / 0;
        } catch (Exception e) {
            throw new BusinessErrorException(BusinessMsgEnum.UNEXPECTED_EXCEPTION);
        }
        return new JsonResult();
    }
}
```

运行一下项目，测试一下，返回 json 如下，说明我们自定义的业务异常捕获成功：

```json
{"code":"500","msg":"系统发生异常，请联系管理员！"}
```

## 4. 总结

本节课程主要讲解了Spring Boot 的全局异常处理，包括异常信息的封装、异常信息的捕获和处理，以及在实际项目中，我们用到的自定义异常枚举类和业务异常的捕获与处理，在项目中运用的非常广泛，基本上每个项目中都需要做全局异常处理。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第09课：Spring Boot中的切面AOP处理

## 1. 什么是AOP

AOP：Aspect Oriented Programming 的缩写，意为：面向切面编程。面向切面编程的目标就是分离关注点。什么是关注点呢？就是关注点，就是你要做的事情。假如你是一位公子哥，没啥人生目标，每天衣来伸手，饭来张口，整天只知道一件事：玩（这就是你的关注点，你只要做这一件事）！但是有个问题，你在玩之前，你还需要起床、穿衣服、穿鞋子、叠被子、做早饭等等等等，但是这些事情你不想关注，也不用关注，你只想想玩，那么怎么办呢？  

对！这些事情通通交给下人去干。你有一个专门的仆人 A 帮你穿衣服，仆人 B 帮你穿鞋子，仆人 C 帮你叠好被子，仆人 D 帮你做饭，然后你就开始吃饭、去玩（这就是你一天的正事），你干完你的正事之后，回来，然后一系列仆人又开始帮你干这个干那个，然后一天就结束了！  

这就是 AOP。AOP 的好处就是你只需要干你的正事，其它事情别人帮你干。也许有一天，你想裸奔，不想穿衣服，那么你把仆人 A 解雇就是了！也许有一天，出门之前你还想带点钱，那么你再雇一个仆人 E 专门帮你干取钱的活！这就是AOP。每个人各司其职，灵活组合，达到一种可配置的、可插拔的程序结构。

## 2. Spring Boot 中的 AOP 处理

### 2.1 AOP 依赖

使用AOP，首先需要引入AOP的依赖。

```xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-aop</artifactId>
</dependency>
```

### 2.2 实现 AOP 切面

Spring Boot 中使用 AOP 非常简单，假如我们要在项目中打印一些 log，在引入了上面的依赖之后，我们新建一个类 LogAspectHandler，用来定义切面和处理方法。只要在类上加个`@Aspect`注解即可。`@Aspect` 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。`@Component` 注解让该类交给 Spring 来管理。

```java
@Aspect
@Component
public class LogAspectHandler {

}
```

这里主要介绍几个常用的注解及使用：

> 1.@Pointcut：定义一个切面，即上面所描述的关注的某件事入口。  
> 2.@Before：在做某件事之前做的事。  
> 3.@After：在做某件事之后做的事。  
> 4.@AfterReturning：在做某件事之后，对其返回值做增强处理。  
> 5.@AfterThrowing：在做某件事抛出异常时，处理。

#### 2.2.1 @Pointcut 注解

`@Pointcut` 注解：用来定义一个切面（切入点），即上文中所关注的某件事情的入口。切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行。

```java
@Aspect
@Component
public class LogAspectHandler {

    /**
     * 定义一个切面，拦截com.itcodai.course09.controller包和子包下的所有方法
     */
    @Pointcut("execution(* com.itcodai.course09.controller..*.*(..))")
    public void pointCut() {}
}
```

`@Pointcut` 注解指定一个切面，定义需要拦截的东西，这里介绍两个常用的表达式：一个是使用 `execution()`，另一个是使用 `annotation()`。  
以 `execution(* com.itcodai.course09.controller..*.*(..)))` 表达式为例，语法如下：

> `execution()` 为表达式主体  
> 第一个 `*` 号的位置：表示返回值类型，`*` 表示所有类型  
> 包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，`com.itcodai.course09.controller` 包、子包下所有类的方法  
> 第二个 `*` 号的位置：表示类名，`*` 表示所有类  
> `*(..)` ：这个星号表示方法名，`*` 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数

`annotation()` 方式是针对某个注解来定义切面，比如我们对具有`@GetMapping`注解的方法做切面，可以如下定义切面：

```java
@Pointcut("@annotation(org.springframework.web.bind.annotation.GetMapping)")
public void annotationCut() {}
```

然后使用该切面的话，就会切入注解是 `@GetMapping` 的方法。因为在实际项目中，可能对于不同的注解有不同的逻辑处理，比如 `@GetMapping`、`@PostMapping`、`@DeleteMapping` 等。所以这种按照注解的切入方式在实际项目中也很常用。

#### 2.2.2 @Before 注解

`@Before` 注解指定的方法在切面切入目标方法之前执行，可以做一些 log 处理，也可以做一些信息的统计，比如获取用户的请求 url 以及用户的 ip 地址等等，这个在做个人站点的时候都能用得到，都是常用的方法。例如：

```java
@Aspect
@Component
public class LogAspectHandler {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 在上面定义的切面方法之前执行该方法
     * @param joinPoint jointPoint
     */
    @Before("pointCut()")
    public void doBefore(JoinPoint joinPoint) {
        logger.info("====doBefore方法进入了====");

        // 获取签名
        Signature signature = joinPoint.getSignature();
        // 获取切入的包名
        String declaringTypeName = signature.getDeclaringTypeName();
        // 获取即将执行的方法名
        String funcName = signature.getName();
        logger.info("即将执行方法为: {}，属于{}包", funcName, declaringTypeName);
        
        // 也可以用来记录一些信息，比如获取请求的url和ip
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        // 获取请求url
        String url = request.getRequestURL().toString();
        // 获取请求ip
        String ip = request.getRemoteAddr();
        logger.info("用户请求的url为：{}，ip地址为：{}", url, ip);
    }
}
```

JointPoint 对象很有用，可以用它来获取一个签名，然后利用签名可以获取请求的包名、方法名，包括参数（通过 `joinPoint.getArgs()` 获取）等等。

#### 2.2.3 @After 注解

`@After` 注解和 `@Before`  注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 log 处理。

```java
@Aspect
@Component
public class LogAspectHandler {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义一个切面，拦截com.itcodai.course09.controller包下的所有方法
     */
    @Pointcut("execution(* com.itcodai.course09.controller..*.*(..))")
    public void pointCut() {}

    /**
     * 在上面定义的切面方法之后执行该方法
     * @param joinPoint jointPoint
     */
    @After("pointCut()")
    public void doAfter(JoinPoint joinPoint) {

        logger.info("====doAfter方法进入了====");
        Signature signature = joinPoint.getSignature();
        String method = signature.getName();
        logger.info("方法{}已经执行完", method);
    }
}
```

到这里，我们来写一个 Controller 来测试一下执行结果，新建一个 AopController 如下：

```java
@RestController
@RequestMapping("/aop")
public class AopController {

    @GetMapping("/{name}")
    public String testAop(@PathVariable String name) {
        return "Hello " + name;
    }
}
```

启动项目，在浏览器中输入 `localhost:8080/aop/CSDN`，观察一下控制台的输出信息：

```
====doBefore方法进入了====  
即将执行方法为: testAop，属于com.itcodai.course09.controller.AopController包  
用户请求的url为：http://localhost:8080/aop/name，ip地址为：0:0:0:0:0:0:0:1  
====doAfter方法进入了====  
方法testAop已经执行完
```

从打印出来的 log 中可以看出程序执行的逻辑与顺序，可以很直观的掌握 `@Before` 和 `@After` 两个注解的实际作用。

#### 2.2.4 @AfterReturning 注解

`@AfterReturning` 注解和 `@After` 有些类似，区别在于 `@AfterReturning` 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理，例如：

```java
@Aspect
@Component
public class LogAspectHandler {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 在上面定义的切面方法返回后执行该方法，可以捕获返回对象或者对返回对象进行增强
     * @param joinPoint joinPoint
     * @param result result
     */
    @AfterReturning(pointcut = "pointCut()", returning = "result")
    public void doAfterReturning(JoinPoint joinPoint, Object result) {

        Signature signature = joinPoint.getSignature();
        String classMethod = signature.getName();
        logger.info("方法{}执行完毕，返回参数为：{}", classMethod, result);
        // 实际项目中可以根据业务做具体的返回值增强
        logger.info("对返回参数进行业务上的增强：{}", result + "增强版");
    }
}
```

需要注意的是：在 `@AfterReturning`注解 中，属性 `returning` 的值必须要和参数保持一致，否则会检测不到。该方法中的第二个入参就是被切方法的返回值，在 `doAfterReturning` 方法中可以对返回值进行增强，可以根据业务需要做相应的封装。我们重启一下服务，再测试一下（多余的 log 我不贴出来了）：

```
方法testAop执行完毕，返回参数为：Hello CSDN  
对返回参数进行业务上的增强：Hello CSDN增强版
```

#### 2.2.5 @AfterThrowing 注解

顾名思义，`@AfterThrowing` 注解是当被切方法执行时抛出异常时，会进入 `@AfterThrowing` 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。要注意的是 `throwing` 属性的值必须要和参数一致，否则会报错。该方法中的第二个入参即为抛出的异常。

```java
/**
 * 使用AOP处理log
 * @author shengwu ni
 * @date 2018/05/04 20:24
 */
@Aspect
@Component
public class LogAspectHandler {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 在上面定义的切面方法执行抛异常时，执行该方法
     * @param joinPoint jointPoint
     * @param ex ex
     */
    @AfterThrowing(pointcut = "pointCut()", throwing = "ex")
    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {
        Signature signature = joinPoint.getSignature();
        String method = signature.getName();
        // 处理异常的逻辑
        logger.info("执行方法{}出错，异常为：{}", method, ex);
    }
}
```

该方法我就不测试了，大家可以自行测试一下。

## 3. 总结

本节课针对 Spring Boot 中的切面 AOP 做了详细的讲解，主要介绍了 Spring Boot 中 AOP 的引入，常用注解的使用，参数的使用，以及常用 api 的介绍。AOP 在实际项目中很有用，对切面方法执行前后都可以根据具体的业务，做相应的预处理或者增强处理，同时也可以用作异常捕获处理，可以根据具体业务场景，合理去使用 AOP。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第10课：Spring Boot集成MyBatis

## 1. MyBatis 介绍

大家都知道，MyBatis 框架是一个持久层框架，是 Apache 下的顶级项目。Mybatis 可以让开发者的主要精力放在 sql 上，通过 Mybatis 提供的映射方式，自由灵活的生成满足需要的 sql 语句。使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs 映射成数据库中的记录，在国内可谓是占据了半壁江山。本节课程主要通过两种方式来对 Spring Boot 集成 MyBatis 做一讲解。重点讲解一下基于注解的方式。因为实际项目中使用注解的方式更多一点，更简洁一点，省去了很多 xml 配置（这不是绝对的，有些项目组中可能也在使用 xml 的方式）。

## 2. MyBatis 的配置

## 2.1 依赖导入

Spring Boot 集成 MyBatis，需要导入 `mybatis-spring-boot-starter` 和 mysql 的依赖，这里我们使用的版本时 1.3.2，如下：

```xml
<dependency>
	<groupId>org.mybatis.spring.boot</groupId>
	<artifactId>mybatis-spring-boot-starter</artifactId>
	<version>1.3.2</version>
</dependency>
<dependency>
	<groupId>mysql</groupId>
	<artifactId>mysql-connector-java</artifactId>
	<scope>runtime</scope>
</dependency>
```

我们点开 `mybatis-spring-boot-starter` 依赖，可以看到我们之前使用 Spring 时候熟悉的依赖，就像我在课程的一开始介绍的那样，Spring Boot 致力于简化编码，使用 starter 系列将相关依赖集成在一起，开发者不需要关注繁琐的配置，非常方便。

```xml
<!-- 省去其他 -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
</dependency>
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
</dependency>
```

## 2.2 properties.yml配置

我们再来看一下，集成 MyBatis 时需要在 properties.yml 配置文件中做哪些基本配置呢？

```xml
# 服务端口号
server:
  port: 8080

# 数据库地址
datasource:
  url: localhost:3306/blog_test

spring:
  datasource: # 数据库配置
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://${datasource.url}?useSSL=false&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&autoReconnect=true&failOverReadOnly=false&maxReconnects=10
    username: root
    password: 123456
    hikari:
      maximum-pool-size: 10 # 最大连接池数
      max-lifetime: 1770000

mybatis:
  # 指定别名设置的包为所有entity
  type-aliases-package: com.itcodai.course10.entity
  configuration:
    map-underscore-to-camel-case: true # 驼峰命名规范
  mapper-locations: # mapper映射文件位置
    - classpath:mapper/*.xml
```

我们来简单介绍一下上面的这些配置：关于数据库的相关配置，我就不详细的解说了，这点相信大家已经非常熟练了，配置一下用户名、密码、数据库连接等等，这里使用的连接池是 Spring Boot 自带的 hikari，感兴趣的朋友可以去百度或者谷歌搜一搜，了解一下。  

这里说明一下 `map-underscore-to-camel-case: true`， 用来开启驼峰命名规范，这个比较好用，比如数据库中字段名为：`user_name`， 那么在实体类中可以定义属性为 `userName` （甚至可以写成 `username`，也能映射上），会自动匹配到驼峰属性，如果不这样配置的话，针对字段名和属性名不同的情况，会映射不到。

## 3. 基于 xml 的整合

使用原始的 xml 方式，需要新建 UserMapper.xml 文件，在上面的 application.yml 配置文件中，我们已经定义了 xml 文件的路径：`classpath:mapper/*.xml`，所以我们在 resources 目录下新建一个 mapper 文件夹，然后创建一个 UserMapper.xml 文件。

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itcodai.course10.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.itcodai.course10.entity.User">

    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_name" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
  </resultMap>
  
   <select id="getUserByName" resultType="User" parameterType="String">
       select * from user where user_name = #{username}
  </select>
</mapper>
```

这和整合 Spring 一样的，namespace 中指定的是对应的 Mapper， `<resultMap>` 中指定对应的实体类，即 User。然后在内部指定表的字段和实体的属性相对应即可。这里我们写一个根据用户名查询用户的 sql。  

实体类中有 id，username 和 password，我不在这贴代码，大家可以下载源码查看。UserMapper.java 文件中写一个接口即可：

```java
User getUserByName(String username);
```

中间省略 service 的代码，我们写一个 Controller 来测试一下：

```java
@RestController
public class TestController {

    @Resource
    private UserService userService;
    
    @RequestMapping("/getUserByName/{name}")
    public User getUserByName(@PathVariable String name) {
        return userService.getUserByName(name);
    }
}
```

启动项目，在浏览器中输入：`http://localhost:8080/getUserByName/CSDN` 即可查询到数据库表中用户名为 CSDN 的用户信息（事先搞两个数据进去即可）：

```json
{"id":2,"username":"CSDN","password":"123456"}
```

这里需要注意一下：Spring Boot 如何知道这个 Mapper 呢？一种方法是在上面的 mapper 层对应的类上面添加 `@Mapper` 注解即可，但是这种方法有个弊端，当我们有很多个 mapper 时，那么每一个类上面都得添加 `@Mapper` 注解。另一种比较简便的方法是在 Spring Boot 启动类上添加`@MaperScan` 注解，来扫描一个包下的所有 mapper。如下：

```java
@SpringBootApplication
@MapperScan("com.itcodai.course10.dao")
public class Course10Application {

	public static void main(String[] args) {
		SpringApplication.run(Course10Application.class, args);
	}
}
```

这样的话，`com.itcodai.course10.dao` 包下的所有 mapper 都会被扫描到了。

## 4. 基于注解的整合

基于注解的整合就不需要 xml 配置文件了，MyBatis 主要提供了 `@Select`， `@Insert`， `@Update`， `Delete` 四个注解。这四个注解是用的非常多的，也很简单，注解后面跟上对应的 sql 语句即可，我们举个例子：

```java
@Select("select * from user where id = #{id}")
User getUser(Long id);
```

这跟 xml 文件中写 sql 语句是一样的，这样就不需要 xml 文件了，但是有个问题，有人可能会问，如果是两个参数呢？如果是两个参数，我们需要使用 `@Param` 注解来指定每一个参数的对应关系，如下：

```java
@Select("select * from user where id = #{id} and user_name=#{name}")
User getUserByIdAndName(@Param("id") Long id, @Param("name") String username);
```

可以看出，`@Param` 指定的参数应该要和 sql 中 `#{}` 取的参数名相同，不同则取不到。可以在 controller 中自行测试一下，接口都在源码中，文章中我就不贴测试代码和结果了。  

有个问题需要注意一下，一般我们在设计表字段后，都会根据自动生成工具生成实体类，这样的话，基本上实体类是能和表字段对应上的，最起码也是驼峰对应的，由于在上面配置文件中开启了驼峰的配置，所以字段都是能对的上的。但是，万一有对不上的呢？我们也有解决办法，使用 `@Results` 注解来解决。

```java
@Select("select * from user where id = #{id}")
@Results({
        @Result(property = "username", column = "user_name"),
        @Result(property = "password", column = "password")
})
User getUser(Long id);
```

`@Results` 中的 `@Result` 注解是用来指定每一个属性和字段的对应关系，这样的话就可以解决上面说的这个问题了。  

当然了，我们也可以 xml 和注解相结合使用，目前我们实际的项目中也是采用混用的方式，因为有时候 xml 方便，有时候注解方便，比如就上面这个问题来说，如果我们定义了上面的这个 UserMapper.xml，那么我们完全可以使用 `@ResultMap` 注解来替代 `@Results` 注解，如下：

```java
@Select("select * from user where id = #{id}")
@ResultMap("BaseResultMap")
User getUser(Long id);
```

`@ResultMap` 注解中的值从哪来呢？对应的是 UserMapper.xml 文件中定义的 `<resultMap>` 时对应的 id 值：

```xml
<resultMap id="BaseResultMap" type="com.itcodai.course10.entity.User">
```

这种 xml 和注解结合着使用的情况也很常见，而且也减少了大量的代码，因为 xml 文件可以使用自动生成工具去生成，也不需要人为手动敲，所以这种使用方式也很常见。

## 5. 总结

本节课主要系统的讲解了 Spring Boot 集成 MyBatis 的过程，分为基于 xml 形式和基于注解的形式来讲解，通过实际配置手把手讲解了 Spring Boot 中 MyBatis 的使用方式，并针对注解方式，讲解了常见的问题已经解决方式，有很强的实战意义。在实际项目中，建议根据实际情况来确定使用哪种方式，一般 xml 和注解都在用。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第11课：Spring Boot事务配置管理

## 1. 事务相关

场景：我们在开发企业应用时，由于数据操作在顺序执行的过程中，线上可能有各种无法预知的问题，任何一步操作都有可能发生异常，异常则会导致后续的操作无法完成。此时由于业务逻辑并未正确的完成，所以在之前操作过数据库的动作并不可靠，需要在这种情况下进行数据的回滚。  

事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。这很好理解，转账、购票等等，必须整个事件流程全部执行完才能人为该事件执行成功，不能转钱转到一半，系统死了，转账人钱没了，收款人钱还没到。

事务管理是 Spring Boot 框架中最为常用的功能之一，我们在实际应用开发时，基本上在 service 层处理业务逻辑的时候都要加上事务，当然了，有时候可能由于场景需要，也不用加事务（比如我们就要往一个表里插数据，相互没有影响，插多少是多少，不能因为某个数据挂了，把之前插的全部回滚）。

## 2. Spring Boot 事务配置

### 2.1 依赖导入

在 Spring Boot 中使用事务，需要导入 mysql 依赖：

```xml
<dependency>
	<groupId>org.mybatis.spring.boot</groupId>
	<artifactId>mybatis-spring-boot-starter</artifactId>
	<version>1.3.2</version>
</dependency>
```

导入了 mysql 依赖后，Spring Boot 会自动注入 DataSourceTransactionManager，我们不需要任何其他的配置就可以用 `@Transactional` 注解进行事务的使用。关于 mybatis 的配置，在上一节课中已经说明了，这里还是使用上一节课中的 mybatis 配置即可。  

### 2.2 事务的测试

我们首先在数据库表中插入一条数据：

|  id  | user_name | password |
| :--: | :-------: | :------: |
|  1   |  倪升武   |  123456  |

然后我们写一个插入的 mapper：

```java
public interface UserMapper {

    @Insert("insert into user (user_name, password) values (#{username}, #{password})")
    Integer insertUser(User user);
}
```

OK，接下来我们来测试一下 Spring Boot 中的事务处理，在 service 层，我们手动抛出个异常来模拟实际中出现的异常，然后观察一下事务有没有回滚，如果数据库中没有新的记录，则说明事务回滚成功。

```java
@Service
public class UserServiceImpl implements UserService {

    @Resource
    private UserMapper userMapper;

    @Override
    @Transactional
    public void isertUser(User user) {
        // 插入用户信息
        userMapper.insertUser(user);
        // 手动抛出异常
        throw new RuntimeException();
    }
}
```

我们来测试一下：

```java
@RestController
public class TestController {

    @Resource
    private UserService userService;

    @PostMapping("/adduser")
    public String addUser(@RequestBody User user) throws Exception {
        if (null != user) {
            userService.isertUser(user);
            return "success";
        } else {
            return "false";
        }
    }
}
```

我们使用 postman 调用一下该接口，因为在程序中抛出了个异常，会造成事务回滚，我们刷新一下数据库，并没有增加一条记录，说明事务生效了。事务很简单，我们平时在使用的时候，一般不会有多少问题，但是并不仅仅如此……


## 3. 常见问题总结

从上面的内容中可以看出，Spring Boot 中使用事务非常简单，`@Transactional` 注解即可解决问题，说是这么说，但是在实际项目中，是有很多小坑在等着我们，这些小坑是我们在写代码的时候没有注意到，而且正常情况下不容易发现这些小坑，等项目写大了，某一天突然出问题了，排查问题非常困难，到时候肯定是抓瞎，需要费很大的精力去排查问题。  

这一小节，我专门针对实际项目中经常出现的，和事务相关的细节做一下总结，希望读者在读完之后，能够落实到自己的项目中，能有所受益。

### 3.1 异常并没有被 ”捕获“ 到

首先要说的，就是异常并没有被 ”捕获“ 到，导致事务并没有回滚。我们在业务层代码中，也许已经考虑到了异常的存在，或者编辑器已经提示我们需要抛出异常，但是这里面有个需要注意的地方：并不是说我们把异常抛出来了，有异常了事务就会回滚，我们来看一个例子：

```java
@Service
public class UserServiceImpl implements UserService {

    @Resource
    private UserMapper userMapper;
    
    @Override
    @Transactional
    public void isertUser2(User user) throws Exception {
        // 插入用户信息
        userMapper.insertUser(user);
        // 手动抛出异常
        throw new SQLException("数据库异常");
    }
}
```

我们看上面这个代码，其实并没有什么问题，手动抛出一个 `SQLException` 来模拟实际中操作数据库发生的异常，在这个方法中，既然抛出了异常，那么事务应该回滚，实际却不如此，读者可以使用我源码中 controller 的接口，通过 postman 测试一下，就会发现，仍然是可以插入一条用户数据的。  

那么问题出在哪呢？因为 Spring Boot 默认的事务规则是遇到运行异常（RuntimeException）和程序错误（Error）才会回滚。比如上面我们的例子中抛出的 RuntimeException 就没有问题，但是抛出 SQLException 就无法回滚了。针对非运行时异常，如果要进行事务回滚的话，可以在 `@Transactional` 注解中使用 `rollbackFor` 属性来指定异常，比如 `@Transactional(rollbackFor = Exception.class)`，这样就没有问题了，所以在实际项目中，一定要指定异常。

### 3.2 异常被 ”吃“ 掉

这个标题很搞笑，异常怎么会被吃掉呢？还是回归到现实项目中去，我们在处理异常时，有两种方式，要么抛出去，让上一层来捕获处理；要么把异常 try catch 掉，在异常出现的地方给处理掉。就因为有这中 try...catch，所以导致异常被 ”吃“ 掉，事务无法回滚。我们还是看上面那个例子，只不过简单修改一下代码：

```java
@Service
public class UserServiceImpl implements UserService {

    @Resource
    private UserMapper userMapper;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void isertUser3(User user) {
        try {
            // 插入用户信息
            userMapper.insertUser(user);
            // 手动抛出异常
            throw new SQLException("数据库异常");
        } catch (Exception e) {
			// 异常处理逻辑
        }
    }
}
```

读者可以使用我源码中 controller 的接口，通过 postman 测试一下，就会发现，仍然是可以插入一条用户数据，说明事务并没有因为抛出异常而回滚。这个细节往往比上面那个坑更难以发现，因为我们的思维很容易导致 try...catch 代码的产生，一旦出现这种问题，往往排查起来比较费劲，所以我们平时在写代码时，一定要多思考，多注意这种细节，尽量避免给自己埋坑。  

那这种怎么解决呢？直接往上抛，给上一层来处理即可，千万不要在事务中把异常自己 ”吃“ 掉。

### 3.3 事务的范围

事务范围这个东西比上面两个坑埋的更深！我之所以把这个也写上，是因为这是我之前在实际项目中遇到的，该场景在这个课程中我就不模拟了，我写一个 demo 让大家看一下，把这个坑记住即可，以后在写代码时，遇到并发问题，就会注意这个坑了，那么这节课也就有价值了。  

我来写个 demo：

```java
@Service
public class UserServiceImpl implements UserService {

    @Resource
    private UserMapper userMapper;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public synchronized void isertUser4(User user) {
        // 实际中的具体业务……
        userMapper.insertUser(user);
    }
}
```

可以看到，因为要考虑并发问题，我在业务层代码的方法上加了个 synchronized 关键字。我举个实际的场景，比如一个数据库中，针对某个用户，只有一条记录，下一个插入动作过来，会先判断该数据库中有没有相同的用户，如果有就不插入，就更新，没有才插入，所以理论上，数据库中永远就一条同一用户信息，不会出现同一数据库中插入了两条相同用户的信息。  

但是在压测时，就会出现上面的问题，数据库中确实有两条同一用户的信息，分析其原因，在于事务的范围和锁的范围问题。  

从上面方法中可以看到，方法上是加了事务的，那么也就是说，在执行该方法开始时，事务启动，执行完了后，事务关闭。但是 synchronized 没有起作用，其实根本原因是因为事务的范围比锁的范围大。也就是说，在加锁的那部分代码执行完之后，锁释放掉了，但是事务还没结束，此时另一个线程进来了，事务没结束的话，第二个线程进来时，数据库的状态和第一个线程刚进来是一样的。即由于mysql Innodb引擎的默认隔离级别是可重复读（在同一个事务里，SELECT的结果是事务开始时时间点的状态），线程二事务开始的时候，线程一还没提交完成，导致读取的数据还没更新。第二个线程也做了插入动作，导致了脏数据。  

这个问题可以避免，第一，把事务去掉即可（不推荐）；第二，在调用该 service 的地方加锁，保证锁的范围比事务的范围大即可。

## 4. 总结

本章主要总结了 Spring Boot 中如何使用事务，只要使用 `@Transactional` 注解即可使用，非常简单方便。除此之外，重点总结了三个在实际项目中可能遇到的坑点，这非常有意义，因为事务这东西不出问题还好，出了问题比较难以排查，所以总结的这三点注意事项，希望能帮助到开发中的朋友。


课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第12课：Spring Boot中使用监听器

## 1. 监听器介绍

什么是 web 监听器？web 监听器是一种 Servlet 中特殊的类，它们能帮助开发者监听 web 中特定的事件，比如 ServletContext, HttpSession, ServletRequest 的创建和销毁；变量的创建、销毁和修改等。可以在某些动作前后增加处理，实现监控。

## 2. Spring Boot中监听器的使用

web 监听器的使用场景很多，比如监听 servlet 上下文用来初始化一些数据、监听 http session 用来获取当前在线的人数、监听客户端请求的 servlet request 对象来获取用户的访问信息等等。这一节中，我们主要通过这三个实际的使用场景来学习一下 Spring Boot 中监听器的使用。

### 2.1 监听Servlet上下文对象

监听 servlet 上下文对象可以用来初始化数据，用于缓存。什么意思呢？我举一个很常见的场景，比如用户在点击某个站点的首页时，一般都会展现出首页的一些信息，而这些信息基本上或者大部分时间都保持不变的，但是这些信息都是来自数据库。如果用户的每次点击，都要从数据库中去获取数据的话，用户量少还可以接受，如果用户量非常大的话，这对数据库也是一笔很大的开销。  

针对这种首页数据，大部分都不常更新的话，我们完全可以把它们缓存起来，每次用户点击的时候，我们都直接从缓存中拿，这样既可以提高首页的访问速度，又可以降低服务器的压力。如果做的更加灵活一点，可以再加个定时器，定期的来更新这个首页缓存。就类似与 CSDN 个人博客首页中排名的变化一样。

下面我们针对这个功能，来写一个 demo，在实际中，读者可以完全套用该代码，来实现自己项目中的相关逻辑。首先写一个 Service，模拟一下从数据库查询数据：

```java
@Service
public class UserService {

    /**
     * 获取用户信息
     * @return
     */
    public User getUser() {
        // 实际中会根据具体的业务场景，从数据库中查询对应的信息
        return new User(1L, "倪升武", "123456");
    }
}
```

然后写一个监听器，实现 `ApplicationListener<ContextRefreshedEvent>` 接口，重写 `onApplicationEvent` 方法，将 ContextRefreshedEvent 对象传进去。如果我们想在加载或刷新应用上下文时，也重新刷新下我们预加载的资源，就可以通过监听 ContextRefreshedEvent 来做这样的事情。如下：

```java
/**
 * 使用ApplicationListener来初始化一些数据到application域中的监听器
 * @author shengni ni
 * @date 2018/07/05
 */
@Component
public class MyServletContextListener implements ApplicationListener<ContextRefreshedEvent> {

    @Override
    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
        // 先获取到application上下文
        ApplicationContext applicationContext = contextRefreshedEvent.getApplicationContext();
        // 获取对应的service
        UserService userService = applicationContext.getBean(UserService.class);
        User user = userService.getUser();
        // 获取application域对象，将查到的信息放到application域中
        ServletContext application = applicationContext.getBean(ServletContext.class);
        application.setAttribute("user", user);
    }
}
```

正如注释中描述的一样，首先通过 contextRefreshedEvent 来获取 application 上下文，再通过 application 上下文来获取 UserService 这个 bean，项目中可以根据实际业务场景，也可以获取其他的 bean，然后再调用自己的业务代码获取相应的数据，最后存储到 application 域中，这样前端在请求相应数据的时候，我们就可以直接从 application 域中获取信息，减少数据库的压力。下面写一个 Controller 直接从 application 域中获取 user 信息来测试一下。

```java
@RestController
@RequestMapping("/listener")
public class TestController {

    @GetMapping("/user")
    public User getUser(HttpServletRequest request) {
        ServletContext application = request.getServletContext();
        return (User) application.getAttribute("user");
    }
}
```

启动项目，在浏览器中输入 `http://localhost:8080/listener/user` 测试一下即可，如果正常返回 user 信息，那么说明数据已经缓存成功。不过 application 这种是缓存在内存中，对内存会有消耗，后面的课程中我会讲到 redis，到时候再给大家介绍一下 redis 的缓存。

### 2.2 监听HTTP会话 Session对象

监听器还有一个比较常用的地方就是用来监听 session 对象，来获取在线用户数量，现在有很多开发者都有自己的网站，监听 session 来获取当前在下用户数量是个很常见的使用场景，下面来介绍一下如何来使用。

```java
/**
 * 使用HttpSessionListener统计在线用户数的监听器
 * @author shengwu ni
 * @date 2018/07/05
 */
@Component
public class MyHttpSessionListener implements HttpSessionListener {

    private static final Logger logger = LoggerFactory.getLogger(MyHttpSessionListener.class);

    /**
     * 记录在线的用户数量
     */
    public Integer count = 0;

    @Override
    public synchronized void sessionCreated(HttpSessionEvent httpSessionEvent) {
        logger.info("新用户上线了");
        count++;
        httpSessionEvent.getSession().getServletContext().setAttribute("count", count);
    }

    @Override
    public synchronized void sessionDestroyed(HttpSessionEvent httpSessionEvent) {
        logger.info("用户下线了");
        count--;
        httpSessionEvent.getSession().getServletContext().setAttribute("count", count);
    }
}
```

可以看出，首先该监听器需要实现 HttpSessionListener 接口，然后重写 `sessionCreated` 和 `sessionDestroyed` 方法，在 `sessionCreated` 方法中传递一个 HttpSessionEvent 对象，然后将当前 session 中的用户数量加1，`sessionDestroyed` 方法刚好相反，不再赘述。然后我们写一个 Controller 来测试一下。

```java
@RestController
@RequestMapping("/listener")
public class TestController {

    /**
     * 获取当前在线人数，该方法有bug
     * @param request
     * @return
     */
    @GetMapping("/total")
    public String getTotalUser(HttpServletRequest request) {
        Integer count = (Integer) request.getSession().getServletContext().getAttribute("count");
        return "当前在线人数：" + count;
    }
}
```

该 Controller 中是直接获取当前 session 中的用户数量，启动服务器，在浏览器中输入 `localhost:8080/listener/total` 可以看到返回的结果是1，再打开一个浏览器，请求相同的地址可以看到 count 是 2 ，这没有问题。但是如果关闭一个浏览器再打开，理论上应该还是2，但是实际测试却是 3。原因是 session 销毁的方法没有执行（可以在后台控制台观察日志打印情况），当重新打开时，服务器找不到用户原来的 session，于是又重新创建了一个 session，那怎么解决该问题呢？我们可以将上面的 Controller 方法改造一下：

```java
@GetMapping("/total2")
public String getTotalUser(HttpServletRequest request, HttpServletResponse response) {
    Cookie cookie;
    try {
        // 把sessionId记录在浏览器中
        cookie = new Cookie("JSESSIONID", URLEncoder.encode(request.getSession().getId(), "utf-8"));
        cookie.setPath("/");
        //设置cookie有效期为2天，设置长一点
        cookie.setMaxAge( 48*60 * 60);
        response.addCookie(cookie);
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }
    Integer count = (Integer) request.getSession().getServletContext().getAttribute("count");
    return "当前在线人数：" + count;
}
```

可以看出，该处理逻辑是让服务器记得原来那个 session，即把原来的 sessionId 记录在浏览器中，下次再打开时，把这个 sessionId 传过去，这样服务器就不会重新再创建了。重启一下服务器，在浏览器中再次测试一下，即可避免上面的问题。

### 2.3 监听客户端请求Servlet Request对象

使用监听器获取用户的访问信息比较简单，实现 ServletRequestListener 接口即可，然后通过 request 对象获取一些信息。如下：

```java
/**
 * 使用ServletRequestListener获取访问信息
 * @author shengwu ni
 * @date 2018/07/05
 */
@Component
public class MyServletRequestListener implements ServletRequestListener {

    private static final Logger logger = LoggerFactory.getLogger(MyServletRequestListener.class);

    @Override
    public void requestInitialized(ServletRequestEvent servletRequestEvent) {
        HttpServletRequest request = (HttpServletRequest) servletRequestEvent.getServletRequest();
        logger.info("session id为：{}", request.getRequestedSessionId());
        logger.info("request url为：{}", request.getRequestURL());

        request.setAttribute("name", "倪升武");
    }

    @Override
    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {

        logger.info("request end");
        HttpServletRequest request = (HttpServletRequest) servletRequestEvent.getServletRequest();
        logger.info("request域中保存的name值为：{}", request.getAttribute("name"));

    }

}
```

这个比较简单，不再赘述，接下来写一个 Controller 测试一下即可。

```java
@GetMapping("/request")
public String getRequestInfo(HttpServletRequest request) {
    System.out.println("requestListener中的初始化的name数据：" + request.getAttribute("name"));
    return "success";
}
```

## 3. Spring Boot中自定义事件监听

在实际项目中，我们往往需要自定义一些事件和监听器来满足业务场景，比如在微服务中会有这样的场景：微服务 A 在处理完某个逻辑之后，需要通知微服务 B 去处理另一个逻辑，或者微服务 A 处理完某个逻辑之后，需要将数据同步到微服务 B，这种场景非常普遍，这个时候，我们可以自定义事件以及监听器来监听，一旦监听到微服务 A 中的某事件发生，就去通知微服务 B 处理对应的逻辑。

### 3.1 自定义事件

自定义事件需要继承 ApplicationEvent 对象，在事件中定义一个 User 对象来模拟数据，构造方法中将 User 对象传进来初始化。如下：

```java
/**
 * 自定义事件
 * @author shengwu ni
 * @date 2018/07/05
 */
public class MyEvent extends ApplicationEvent {

    private User user;

    public MyEvent(Object source, User user) {
        super(source);
        this.user = user;
    }

    // 省去get、set方法
}
```

### 3.2 自定义监听器

接下来，自定义一个监听器来监听上面定义的 MyEvent 事件，自定义监听器需要实现 `ApplicationListener` 接口即可。如下：

```java
/**
 * 自定义监听器，监听MyEvent事件
 * @author shengwu ni
 * @date 2018/07/05
 */
@Component
public class MyEventListener implements ApplicationListener<MyEvent> {
    @Override
    public void onApplicationEvent(MyEvent myEvent) {
        // 把事件中的信息获取到
        User user = myEvent.getUser();
        // 处理事件，实际项目中可以通知别的微服务或者处理其他逻辑等等
        System.out.println("用户名：" + user.getUsername());
        System.out.println("密码：" + user.getPassword());

    }
}
```

然后重写 `onApplicationEvent` 方法，将自定义的 MyEvent 事件传进来，因为该事件中，我们定义了 User 对象（该对象在实际中就是需要处理的数据，在下文来模拟），然后就可以使用该对象的信息了。

OK，定义好了事件和监听器之后，需要手动发布事件，这样监听器才能监听到，这需要根据实际业务场景来触发，针对本文的例子，我写个触发逻辑，如下：

```java
/**
 * UserService
 * @author shengwu ni
 */
@Service
public class UserService {

    @Resource
    private ApplicationContext applicationContext;

    /**
     * 发布事件
     * @return
     */
    public User getUser2() {
        User user = new User(1L, "倪升武", "123456");
        // 发布事件
        MyEvent event = new MyEvent(this, user);
        applicationContext.publishEvent(event);
        return user;
    }
}
```

在 service 中注入 ApplicationContext，在业务代码处理完之后，通过 ApplicationContext 对象手动发布 MyEvent 事件，这样我们自定义的监听器就能监听到，然后处理监听器中写好的业务逻辑。

最后，在 Controller 中写一个接口来测试一下：

```java
@GetMapping("/request")
public String getRequestInfo(HttpServletRequest request) {
    System.out.println("requestListener中的初始化的name数据：" + request.getAttribute("name"));
    return "success";
}
```

在浏览器中输入 `http://localhost:8080/listener/publish`，然后观察一下控制台打印的用户名和密码，即可说明自定义监听器已经生效。

## 4. 总结

本课系统的介绍了监听器原理，以及在 Spring Boot 中如何使用监听器，列举了监听器的三个常用的案例，有很好的实战意义。最后讲解了项目中如何自定义事件和监听器，并结合微服务中常见的场景，给出具体的代码模型，均能运用到实际项目中去，希望读者认真消化。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第13课：Spring Boot中使用拦截器

拦截器的原理很简单，是 AOP 的一种实现，专门拦截对动态资源的后台请求，即拦截对控制层的请求。使用场景比较多的是判断用户是否有权限请求后台，更拔高一层的使用场景也有，比如拦截器可以结合 websocket 一起使用，用来拦截 websocket 请求，然后做相应的处理等等。拦截器不会拦截静态资源，Spring Boot 的默认静态目录为 resources/static，该目录下的静态页面、js、css、图片等等，不会被拦截（也要看如何实现，有些情况也会拦截，我在下文会指出）。

## 1. 拦截器的快速使用

使用拦截器很简单，只需要两步即可：定义拦截器和配置拦截器。在配置拦截器中，Spring Boot 2.0 以后的版本和之前的版本有所不同，我会重点讲解一下这里可能出现的坑。

### 1.1 定义拦截器

定义拦截器，只需要实现 `HandlerInterceptor` 接口，`HandlerInterceptor` 接口是所有自定义拦截器或者 Spring Boot 提供的拦截器的鼻祖，所以，首先来了解下该接口。该接口中有三个方法： `preHandle(……)`、`postHandle(……)` 和 `afterCompletion(……)` 。

> `preHandle(……)` 方法：该方法的执行时机是，当某个 url 已经匹配到对应的 Controller 中的某个方法，且在这个方法执行之前。所以 `preHandle(……)` 方法可以决定是否将请求放行，这是通过返回值来决定的，返回 true 则放行，返回 false 则不会向后执行。  
> `postHandle(……)` 方法：该方法的执行时机是，当某个 url 已经匹配到对应的 Controller 中的某个方法，且在执行完了该方法，但是在 DispatcherServlet 视图渲染之前。所以在这个方法中有个 ModelAndView 参数，可以在此做一些修改动作。  
> `afterCompletion(……)` 方法：顾名思义，该方法是在整个请求处理完成后（包括视图渲染）执行，这时做一些资源的清理工作，这个方法只有在 `preHandle(……)` 被成功执行后并且返回 true 才会被执行。  

了解了该接口，接下来自定义一个拦截器。

```java
/**
 * 自定义拦截器
 * @author shengwu ni
 * @date 2018/08/03
 */
public class MyInterceptor implements HandlerInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(MyInterceptor.class);

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

        HandlerMethod handlerMethod = (HandlerMethod) handler;
        Method method = handlerMethod.getMethod();
        String methodName = method.getName();
        logger.info("====拦截到了方法：{}，在该方法执行之前执行====", methodName);
        // 返回true才会继续执行，返回false则取消当前请求
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        logger.info("执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染");
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        logger.info("整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了");
    }
}
```

OK，到此为止，拦截器已经定义完成，接下来就是对该拦截器进行拦截配置。

### 1.2 配置拦截器

在 Spring Boot 2.0 之前，我们都是直接继承 WebMvcConfigurerAdapter 类，然后重写 `addInterceptors` 方法来实现拦截器的配置。但是在 Spring Boot 2.0 之后，该方法已经被废弃了（当然，也可以继续用），取而代之的是 WebMvcConfigurationSupport 方法，如下：

```java
@Configuration
public class MyInterceptorConfig extends WebMvcConfigurationSupport {

    @Override
    protected void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new MyInterceptor()).addPathPatterns("/**");
        super.addInterceptors(registry);
    }
}
```

在该配置中重写 `addInterceptors` 方法，将我们上面自定义的拦截器添加进去，`addPathPatterns` 方法是添加要拦截的请求，这里我们拦截所有的请求。这样就配置好拦截器了，接下来写一个 Controller 测试一下：

```java
@Controller
@RequestMapping("/interceptor")
public class InterceptorController {

    @RequestMapping("/test")
    public String test() {
        return "hello";
    }
}
```

让其跳转到 hello.html 页面，直接在 hello.html 中输出 `hello interceptor` 即可。启动项目，在浏览器中输入 `localhost:8080/interceptor/test` 看一下控制台的日志：

```
====拦截到了方法：test，在该方法执行之前执行====  
执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染  
整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了
```

可以看出拦截器已经生效，并能看出其执行顺序。

### 1.3 解决静态资源被拦截问题

上文中已经介绍了拦截器的定义和配置，但是这样是否就没问题了呢？其实不然，如果使用上面这种配置的话，我们会发现一个缺陷，那就是静态资源被拦截了。可以在 resources/static/ 目录下放置一个图片资源或者 html 文件，然后启动项目直接访问，即可看到无法访问的现象。

也就是说，虽然 Spring Boot 2.0 废弃了WebMvcConfigurerAdapter，但是 WebMvcConfigurationSupport 又会导致默认的静态资源被拦截，这就需要我们手动将静态资源放开。

如何放开呢？除了在 MyInterceptorConfig 配置类中重写 `addInterceptors` 方法外，还需要再重写一个方法：`addResourceHandlers`，将静态资源放开：

```java
/**
 * 用来指定静态资源不被拦截，否则继承WebMvcConfigurationSupport这种方式会导致静态资源无法直接访问
 * @param registry
 */
@Override
protected void addResourceHandlers(ResourceHandlerRegistry registry) {
    registry.addResourceHandler("/**").addResourceLocations("classpath:/static/");
    super.addResourceHandlers(registry);
}
```

这样配置好之后，重启项目，静态资源也可以正常访问了。如果你是个善于学习或者研究的人，那肯定不会止步于此，没错，上面这种方式的确能解决静态资源无法访问的问题，但是，还有更方便的方式来配置。

我们不继承 WebMvcConfigurationSupport 类，直接实现 WebMvcConfigurer 接口，然后重写 `addInterceptors` 方法，将自定义的拦截器添加进去即可，如下：

```java
@Configuration
public class MyInterceptorConfig implements WebMvcConfigurer {
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        // 实现WebMvcConfigurer不会导致静态资源被拦截
        registry.addInterceptor(new MyInterceptor()).addPathPatterns("/**");
    }
}
```

这样就非常方便了，实现 WebMvcConfigure 接口的话，不会拦截 Spring Boot 默认的静态资源。

这两种方式都可以，具体他们之间的细节，感兴趣的读者可以做进一步的研究，由于这两种方式的不同，继承 WebMvcConfigurationSupport 类的方式可以用在前后端分离的项目中，后台不需要访问静态资源（就不需要放开静态资源了）；实现 WebMvcConfigure 接口的方式可以用在非前后端分离的项目中，因为需要读取一些图片、css、js文件等等。

## 2. 拦截器使用实例

### 2.1 判断用户有没有登录

一般用户登录功能我们可以这么做，要么往 session 中写一个 user，要么针对每个 user 生成一个 token，第二种要更好一点，那么针对第二种方式，如果用户登录成功了，每次请求的时候都会带上该用户的 token，如果未登录，则没有该 token，服务端可以检测这个 token 参数的有无来判断用户有没有登录，从而实现拦截功能。我们改造一下 `preHandle` 方法，如下：

```java
@Override
public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

    HandlerMethod handlerMethod = (HandlerMethod) handler;
    Method method = handlerMethod.getMethod();
    String methodName = method.getName();
    logger.info("====拦截到了方法：{}，在该方法执行之前执行====", methodName);

    // 判断用户有没有登陆，一般登陆之后的用户都有一个对应的token
    String token = request.getParameter("token");
    if (null == token || "".equals(token)) {
        logger.info("用户未登录，没有权限执行……请登录");
        return false;
    }

    // 返回true才会继续执行，返回false则取消当前请求
    return true;
}
```

重启项目，在浏览器中输入 `localhost:8080/interceptor/test` 后查看控制台日志，发现被拦截，如果在浏览器中输入 `localhost:8080/interceptor/test?token=123` 即可正常往下走。

### 2.2 取消拦截操作

根据上文，如果我要拦截所有 `/admin` 开头的 url 请求的话，需要在拦截器配置中添加这个前缀，但是在实际项目中，可能会有这种场景出现：某个请求也是 `/admin` 开头的，但是不能拦截，比如 `/admin/login` 等等，这样的话又需要去配置。那么，可不可以做成一个类似于开关的东西，哪里不需要拦截，我就在哪里弄个开关上去，做成这种灵活的可插拔的效果呢？

是可以的，我们可以定义一个注解，该注解专门用来取消拦截操作，如果某个 Controller 中的方法我们不需要拦截掉，即可在该方法上加上我们自定义的注解即可，下面先定义一个注解：

```java
/**
 * 该注解用来指定某个方法不用拦截
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface UnInterception {
}
```

然后在 Controller 中的某个方法上添加该注解，在拦截器处理方法中添加该注解取消拦截的逻辑，如下：

```java
@Override
public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

    HandlerMethod handlerMethod = (HandlerMethod) handler;
    Method method = handlerMethod.getMethod();
    String methodName = method.getName();
    logger.info("====拦截到了方法：{}，在该方法执行之前执行====", methodName);

    // 通过方法，可以获取该方法上的自定义注解，然后通过注解来判断该方法是否要被拦截
    // @UnInterception 是我们自定义的注解
    UnInterception unInterception = method.getAnnotation(UnInterception.class);
    if (null != unInterception) {
        return true;
    }
    // 返回true才会继续执行，返回false则取消当前请求
    return true;
}
```

Controller 中的方法代码可以参见源码，重启项目在浏览器中输入 `http://localhost:8080/interceptor/test2?token=123` 测试一下，可以看出，加了该注解的方法不会被拦截。

## 3. 总结

本节主要介绍了 Spring Boot 中拦截器的使用，从拦截器的创建、配置，到拦截器对静态资源的影响，都做了详细的分析。Spring Boot 2.0 之后拦截器的配置支持两种方式，可以根据实际情况选择不同的配置方式。最后结合实际中的使用，举了两个常用的场景，希望读者能够认真消化，掌握拦截器的使用。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第14课：Spring Boot 中集成Redis

## 1. Redis 介绍

Redis 是一种非关系型数据库（NoSQL），NoSQL 是以 key-value 的形式存储的，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说 SQL 标准，ACID 属性，表结构等等，这类数据库主要有以下特点：非关系型的、分布式的、开源的、水平可扩展的。 
NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。 
Redis 的 key 可以是字符串、哈希、链表、集合和有序集合。value 类型很多，包括 String、list、set、zset。这些数据类型都支持 push/pop、add/remove、取交集和并集以及更多更丰富的操作，Redis 也支持各种不同方式的排序。为了保证效率，数据都是在缓存在内存中，它也可以周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中。 有了 redis 有哪些好处呢？举个比较简单的例子，看下图： 

![Redis使用场景](https://images.gitbook.cn/4258b9c0-9f93-11e8-a34f-d93da92347ea)

Redis 集群和 Mysql 是同步的，首先会从 redis 中获取数据，如果 redis 挂了，再从 mysql 中获取数据，这样网站就不会挂掉。更多关于 redis 的介绍以及使用场景，可以谷歌和百度，在这就不赘述了。

## 2. Redis 安装

本课程是在 vmvare 虚拟机中来安装的 redis （centos 7），学习的时候如果有自己的阿里云服务器，也可以在阿里云中来安装 redis，都可以。只要能 ping 的通云主机或者虚拟机的 ip，然后在虚拟机或者云主机中放行对应的端口（或者关掉防火墙）即可访问 redis。下面来介绍一下 redis 的安装过程：

* 安装 gcc 编译

因为后面安装redis的时候需要编译，所以事先得先安装gcc编译。阿里云主机已经默认安装了 gcc，如果是自己安装的虚拟机，那么需要先安装一下 gcc：

```
yum install gcc-c++
```

* 下载 redis

有两种方式下载安装包，一种是去官网上下载（https://redis.io），然后将安装包考到 centos 中，另种方法是直接使用 wget 来下载：

```
wget http://download.redis.io/releases/redis-3.2.8.tar.gz
```

如果没有安装过 wget，可以通过如下命令安装：

```
yum install wget
```

* 解压安装

解压安装包：

```
tar –vzxf redis-3.2.8.tar.gz
```

然后将解压的文件夹 redis-3.2.8 放到 `/usr/local/` 下，一般安装软件都放在 `/usr/local` 下。然后进入 `/usr/local/redis-3.2.8/` 文件夹下，执行 `make` 命令即可完成安装。
【注】如果 make 失败，可以尝试如下命令：

```
make MALLOC=libc
make install
```

* 修改配置文件

安装成功之后，需要修改一下配置文件，包括允许接入的 ip，允许后台执行，设置密码等等。
打开 redis 配置文件：`vi redis.conf`
在命令模式下输入 `/bind` 来查找 bind 配置，按 n 来查找下一个，找到配置后，将 bind 配置成 0.0.0.0，允许任意服务器来访问 redis，即：

```
bind 0.0.0.0
```

使用同样的方法，将 daemonize 改成 yes （默认为 no），允许 redis 在后台执行。
将 requirepass 注释打开，并设置密码为 123456（密码自己设置）。

* 启动 redis

在 redis-3.2.8 目录下，指定刚刚修改好的配置文件 redis.conf 来启动 redis：

```
redis-server ./redis.conf
```

再启动 redis 客户端：

```
redis-cli
```

由于我们设置了密码，在启动客户端之后，输入 `auth 123456` 即可登录进入客户端。
然后我们来测试一下，往 redis 中插入一个数据：

```
set name CSDN
```

然后来获取 name

```
get name
```

如果正常获取到 CSDN，则说明没有问题。

## 3. Spring Boot 集成 Redis

### 3.1 依赖导入

Spring Boot 集成 redis 很方便，只需要导入一个 redis 的 starter 依赖即可。如下：

```xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
<!--阿里巴巴fastjson -->
<dependency>
    <groupId>com.alibaba</groupId>
    <artifactId>fastjson</artifactId>
    <version>1.2.35</version>
</dependency>
```

这里也导入阿里巴巴的 fastjson 是为了在后面我们要存一个实体，为了方便把实体转换成 json 字符串存进去。

### 3.2 Redis 配置

导入了依赖之后，我们在 application.yml 文件里配置 redis：

```yml
server:
  port: 8080
spring:
  #redis相关配置
  redis:
    database: 5
    # 配置redis的主机地址，需要修改成自己的
    host: 192.168.48.190
    port: 6379
    password: 123456
    timeout: 5000
    jedis:
      pool:
        # 连接池中的最大空闲连接，默认值也是8。
        max-idle: 500
        # 连接池中的最小空闲连接，默认值也是0。
        min-idle: 50
        # 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)
        max-active: 1000
        # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
        max-wait: 2000
```

### 3.3 常用 api 介绍

Spring Boot 对 redis 的支持已经非常完善了，丰富的 api 已经足够我们日常的开发，这里我介绍几个最常用的供大家学习，其他 api 希望大家自己多学习，多研究。用到会去查即可。

有两个 redis 模板：RedisTemplate 和 StringRedisTemplate。我们不使用 RedisTemplate，RedisTemplate 提供给我们操作对象，操作对象的时候，我们通常是以 json 格式存储，但在存储的时候，会使用 Redis 默认的内部序列化器；导致我们存进里面的是乱码之类的东西。当然了，我们可以自己定义序列化，但是比较麻烦，所以使用 StringRedisTemplate 模板。StringRedisTemplate 主要给我们提供字符串操作，我们可以将实体类等转成 json 字符串即可，在取出来后，也可以转成相应的对象，这就是上面我导入了阿里 fastjson 的原因。

#### 3.3.1 redis:string 类型

新建一个 RedisService，注入 StringRedisTemplate，使用 `stringRedisTemplate.opsForValue()` 可以获取 `ValueOperations<String, String>` 对象，通过该对象即可读写 redis 数据库了。如下：

```java
public class RedisService {

    @Resource
    private StringRedisTemplate stringRedisTemplate;

    /**
     * set redis: string类型
     * @param key key
     * @param value value
     */
    public void setString(String key, String value){
        ValueOperations<String, String> valueOperations = stringRedisTemplate.opsForValue();
        valueOperations.set(key, value);
    }

    /**
     * get redis: string类型
     * @param key key
     * @return
     */
    public String getString(String key){
        return stringRedisTemplate.opsForValue().get(key);
    }
```

该对象操作的是 string，我们也可以存实体类，只需要将实体类转换成 json 字符串即可。下面来测试一下：

```java
@RunWith(SpringRunner.class)
@SpringBootTest
public class Course14ApplicationTests {

    private static final Logger logger = LoggerFactory.getLogger(Course14ApplicationTests.class);

	@Resource
	private RedisService redisService;

	@Test
	public void contextLoads() {
        //测试redis的string类型
        redisService.setString("weichat","程序员私房菜");
        logger.info("我的微信公众号为：{}", redisService.getString("weichat"));

        // 如果是个实体，我们可以使用json工具转成json字符串，
        User user = new User("CSDN", "123456");
        redisService.setString("userInfo", JSON.toJSONString(user));
        logger.info("用户信息：{}", redisService.getString("userInfo"));
    }
}
```

先启动 redis，然后运行这个测试用例，观察控制台打印的日志如下：

```
我的微信公众号为：程序员私房菜
用户信息：{"password":"123456","username":"CSDN"}
```

#### 3.3.2 redis:hash 类型

hash 类型其实原理和 string 一样的，但是有两个 key，使用 `stringRedisTemplate.opsForHash()` 可以获取 `HashOperations<String, Object, Object>` 对象。比如我们要存储订单信息，所有订单信息都放在 order 下，针对不同用户的订单实体，可以通过用户的 id 来区分，这就相当于两个 key 了。

```java
@Service
public class RedisService {

    @Resource
    private StringRedisTemplate stringRedisTemplate;

    /**
     * set redis: hash类型
     * @param key key
     * @param filedKey filedkey
     * @param value value
     */
    public void setHash(String key, String filedKey, String value){
        HashOperations<String, Object, Object> hashOperations = stringRedisTemplate.opsForHash();
        hashOperations.put(key,filedKey, value);
    }

    /**
     * get redis: hash类型
     * @param key key
     * @param filedkey filedkey
     * @return
     */
    public String getHash(String key, String filedkey){
        return (String) stringRedisTemplate.opsForHash().get(key, filedkey);
    }
}
```

可以看出，hash 和 string 没啥两样，只不过多了个参数，Spring Boot 中操作 redis 非常简单方便。来测试一下：

```java
@SpringBootTest
public class Course14ApplicationTests {

    private static final Logger logger = LoggerFactory.getLogger(Course14ApplicationTests.class);

	@Resource
	private RedisService redisService;

	@Test
	public void contextLoads() {
        //测试redis的hash类型
        redisService.setHash("user", "name", JSON.toJSONString(user));
        logger.info("用户姓名：{}", redisService.getHash("user","name"));
    }
}
```

#### 3.3.3 redis:list 类型

使用 `stringRedisTemplate.opsForList()` 可以获取 `ListOperations<String, String> listOperations`  redis 列表对象，该列表是个简单的字符串列表，可以支持从左侧添加，也可以支持从右侧添加，一个列表最多包含 2 ^ 32 -1 个元素。

```java
@Service
public class RedisService {

    @Resource
    private StringRedisTemplate stringRedisTemplate;

    /**
     * set redis:list类型
     * @param key key
     * @param value value
     * @return
     */
    public long setList(String key, String value){
        ListOperations<String, String> listOperations = stringRedisTemplate.opsForList();
        return listOperations.leftPush(key, value);
    }

    /**
     * get redis:list类型
     * @param key key
     * @param start start
     * @param end end
     * @return
     */
    public List<String> getList(String key, long start, long end){
        return stringRedisTemplate.opsForList().range(key, start, end);
    }
}
```

可以看出，这些 api 都是一样的形式，方便记忆也方便使用。具体的 api 细节我就不展开了，大家可以自己看 api 文档。其实，这些 api 根据参数和返回值也能知道它们是做什么用的。来测试一下：

```java
@RunWith(SpringRunner.class)
@SpringBootTest
public class Course14ApplicationTests {

    private static final Logger logger = LoggerFactory.getLogger(Course14ApplicationTests.class);

	@Resource
	private RedisService redisService;

	@Test
	public void contextLoads() {
        //测试redis的list类型
        redisService.setList("list", "football");
        redisService.setList("list", "basketball");
        List<String> valList = redisService.getList("list",0,-1);
        for(String value :valList){
            logger.info("list中有：{}", value);
        }
    }
}
```

## 4. 总结

本节主要介绍了 redis 的使用场景、安装过程，以及 Spring Boot 中集成 redis 的详细步骤。在实际项目中，通常都用 redis 作为缓存，在查询数据库的时候，会先从 redis 中查找，如果有信息，则从 redis 中取；如果没有，则从数据库中查，并且同步到 redis 中，下次 redis 中就有了。更新和删除也是如此，都需要同步到 redis。redis 在高并发场景下运用的很多。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第15课： Spring Boot中集成ActiveMQ

## 1. JMS 和 ActiveMQ 介绍

### 1.1 JMS 是啥

百度百科的解释：

> JMS 即 Java 消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的 API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java 消息服务是一个与具体平台无关的 API，绝大多数 MOM 提供商都对 JMS 提供支持。

JMS 只是接口，不同的提供商或者开源组织对其有不同的实现，ActiveMQ 就是其中之一，它支持JMS，是 Apache 推出的。JMS 中有几个对象模型：

> 连接工厂：ConnectionFactory  
> JMS连接：Connection  
> JMS会话：Session  
> JMS目的：Destination  
> JMS生产者：Producer  
> JMS消费者：Consumer  
> JMS消息两种类型：点对点和发布/订阅。  

可以看出 JMS 实际上和 JDBC 有点类似，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。本文主要使用 ActiveMQ。

### 1.2 ActiveMQ 

ActiveMQ 是 Apache 的一个能力强劲的开源消息总线。ActiveMQ 完全支持JMS1.1和J2EE 1.4规范，尽管 JMS 规范出台已经是很久的事情了，但是 JMS 在当今的 Java EE 应用中间仍然扮演着特殊的地位。ActiveMQ 用在异步消息的处理上，所谓异步消息即消息发送者无需等待消息接收者的处理以及返回，甚至无需关心消息是否发送成功。   

异步消息主要有两种目的地形式，队列（queue）和主题（topic），队列用于点对点形式的消息通信，主题用于发布/订阅式的消息通信。本章节主要来学习一下在 Spring Boot 中如何使用这两种形式的消息。

## 2. ActiveMQ安装

使用 ActiveMQ 首先需要去官网下载，官网地址为：http://activemq.apache.org/  
本课程使用的版本是 apache-activemq-5.15.3，下载后解压缩会有一个名为 apache-activemq-5.15.3 的文件夹，没错，这就安装好了，非常简单，开箱即用。打开文件夹会看到里面有个 `activemq-all-5.15.3.jar`，这个 jar 我们是可以加进工程里的，但是使用 maven 的话，这个 jar 我们不需要。

在使用 ActiveMQ 之前，首先得先启动，刚才解压后的目录中有个 bin 目录，里面有 win32 和 win64 两个目录，根据自己电脑选择其中一个打开运行里面的 activemq.bat 即可启动 ActiveMQ。  
消息生产者生产消息发布到queue中，然后消息消费者从queue中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费
启动完成后，在浏览器中输入 `http://127.0.0.1:8161/admin/` 来访问 ActiveMQ 的服务器，用户名和密码是 admin/admin。如下：

![activemq](https://images.gitbook.cn/cfb9c460-aa94-11e8-888f-df33be8ed191)

我们可以看到有 Queues 和 Topics 这两个选项，这两个选项分别是点对点消息和发布/订阅消息的查看窗口。何为点对点消息和发布/订阅消息呢？

点对点消息：消息生产者生产消息发布到 queue 中，然后消息消费者从 queue 中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue 中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue 支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费。

发布/订阅消息：消息生产者（发布）将消息发布到 topic 中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。下面分析具体的实现方式。

## 3. ActiveMQ集成

### 3.1 依赖导入和配置

在 Spring Boot 中集成 ActiveMQ 需要导入如下 starter 依赖：

```xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-activemq</artifactId>
</dependency>
```

然后在 application.yml 配置文件中，对 activemq 做一下配置：

```yml
spring:
  activemq:
  	# activemq url
    broker-url: tcp://localhost:61616
    in-memory: true
    pool:
      # 如果此处设置为true，需要添加activemq-pool的依赖包，否则会自动配置失败，无法注入JmsMessagingTemplate
      enabled: false
```

### 3.2 Queue 和 Topic 的创建

首先我们需要创建两种消息 Queue 和 Topic，这两种消息的创建，我们放到 ActiveMqConfig 中来创建，如下：

```java
/**
 * activemq的配置
 * @author  shengwu ni
 */
@Configuration
public class ActiveMqConfig {
    /**
     * 发布/订阅模式队列名称
     */
    public static final String TOPIC_NAME = "activemq.topic";
    /**
     * 点对点模式队列名称
     */
    public static final String QUEUE_NAME = "activemq.queue";

    @Bean
    public Destination topic() {
        return new ActiveMQTopic(TOPIC_NAME);
    }

    @Bean
    public Destination queue() {
        return new ActiveMQQueue(QUEUE_NAME);
    }
}
```

可以看出创建 Queue 和 Topic 两种消息，分别使用 `new ActiveMQQueue` 和 `new ActiveMQTopic` 来创建，分别跟上对应消息的名称即可。这样在其他地方就可以直接将这两种消息作为组件注入进来了。

### 3.3 消息的发送接口

在 Spring Boot 中，我们只要注入 JmsMessagingTemplate 模板即可快速发送消息，如下：

```java
/**
 * 消息发送者
 * @author shengwu ni
 */
@Service
public class MsgProducer {

    @Resource
    private JmsMessagingTemplate jmsMessagingTemplate;

    public void sendMessage(Destination destination, String msg) {
        jmsMessagingTemplate.convertAndSend(destination, msg);
    }
}
```

`convertAndSend` 方法中第一个参数是消息发送的目的地，第二个参数是具体的消息内容。


### 3.4 点对点消息生产与消费

#### 3.4.1 点对点消息的生产

消息的生产，我们放到 Controller 中来做，由于上面已经生成了 Queue 消息的组件，所以在 Controller 中我们直接注入进来即可。然后调用上文的消息发送方法 `sendMessage` 即可成功生产一条消息。

```java
/**
 * ActiveMQ controller
 * @author shengwu ni
 */
@RestController
@RequestMapping("/activemq")
public class ActiveMqController {

    private static final Logger logger = LoggerFactory.getLogger(ActiveMqController.class);

    @Resource
    private MsgProducer producer;
    @Resource
    private Destination queue;

    @GetMapping("/send/queue")
    public String sendQueueMessage() {

        logger.info("===开始发送点对点消息===");
        producer.sendMessage(queue, "Queue: hello activemq!");
        return "success";
    }
}
```

#### 3.4.2 点对点消息的消费

点对点消息的消费很简单，只要我们指定目的地即可，jms 监听器一直在监听是否有消息过来，如果有，则消费。

```java
/**
 * 消息消费者
 * @author shengwu ni
 */
@Service
public class QueueConsumer {

    /**
     * 接收点对点消息
     * @param msg
     */
    @JmsListener(destination = ActiveMqConfig.QUEUE_NAME)
    public void receiveQueueMsg(String msg) {
        System.out.println("收到的消息为：" + msg);
    }
}
```

可以看出，使用 `@JmsListener` 注解来指定要监听的目的地，在消息接收方法内部，我们可以根据具体的业务需求做相应的逻辑处理即可。

#### 3.4.3 测试一下

启动项目，在浏览器中输入：`http://localhost:8081/activemq/send/queue`，观察控制台的输出日志，出现下面的日志说明消息发送和消费成功。

```
收到的消息为：Queue: hello activemq!
```

### 3.5 发布/订阅消息的生产和消费

#### 3.5.1 发布/订阅消息的生产

和点对点消息一样，我们注入 topic 并调用 producer 的 `sendMessage` 方法即可发送订阅消息，如下，不再赘述：

```java
@RestController
@RequestMapping("/activemq")
public class ActiveMqController {

    private static final Logger logger = LoggerFactory.getLogger(ActiveMqController.class);

    @Resource
    private MsgProducer producer;
    @Resource
    private Destination topic;

    @GetMapping("/send/topic")
    public String sendTopicMessage() {

        logger.info("===开始发送订阅消息===");
        producer.sendMessage(topic, "Topic: hello activemq!");
        return "success";
    }
}
```

#### 3.5.2 发布/订阅消息的消费

发布/订阅消息的消费和点对点不同，订阅消息支持多个消费者一起消费。其次，Spring Boot 中默认的时点对点消息，所以在使用 topic 时，会不起作用，我们需要在配置文件 application.yml 中添加一个配置：

```yml
spring:
  jms:
    pub-sub-domain: true
```

该配置是 false 的话，则为点对点消息，也是 Spring Boot 默认的。这样是可以解决问题，但是如果这样配置的话，上面提到的点对点消息又不能正常消费了。所以二者不可兼得，这并非一个好的解决办法。

比较好的解决办法是，我们定义一个工厂，`@JmsListener` 注解默认只接收 queue 消息，如果要接收 topic 消息，需要设置一下 containerFactory。我们还在上面的那个 ActiveMqConfig 配置类中添加：

```java
/**
 * activemq的配置
 *
 * @author shengwu ni
 */
@Configuration
public class ActiveMqConfig {
    // 省略其他内容

    /**
     * JmsListener注解默认只接收queue消息,如果要接收topic消息,需要设置containerFactory
     */
    @Bean
    public JmsListenerContainerFactory topicListenerContainer(ConnectionFactory connectionFactory) {
        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
        // 相当于在application.yml中配置：spring.jms.pub-sub-domain=true
        factory.setPubSubDomain(true);
        return factory;
    }
}
```

经过这样的配置之后，我们在消费的时候，在 `@JmsListener` 注解中指定这个容器工厂即可消费 topic 消息。如下：

```java
/**
 * Topic消息消费者
 * @author shengwu ni
 */
@Service
public class TopicConsumer1 {

    /**
     * 接收订阅消息
     * @param msg
     */
    @JmsListener(destination = ActiveMqConfig.TOPIC_NAME, containerFactory = "topicListenerContainer")
    public void receiveTopicMsg(String msg) {
        System.out.println("收到的消息为：" + msg);
    }

}
```

指定 containerFactory 属性为上面我们自己配置的 topicListenerContainer 即可。由于 topic 消息可以多个消费，所以该消费的类可以拷贝几个一起测试一下，这里我就不贴代码了，可以参考我的源码测试。

#### 3.5.3 测试一下

启动项目，在浏览器中输入：`http://localhost:8081/activemq/send/topic`，观察控制台的输出日志，出现下面的日志说明消息发送和消费成功。

```
收到的消息为：Topic: hello activemq!
收到的消息为：Topic: hello activemq!
```

## 4. 总结

本章主要介绍了 jms 和 activemq 的相关概念、activemq 的安装与启动。详细分析了 Spring Boot 中点对点消息和发布/订阅消息两种方式的配置、消息生产和消费方式。ActiveMQ 是能力强劲的开源消息总线，在异步消息的处理上很有用，希望大家好好消化一下。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第16课：Spring Boot中集成 Shiro

Shiro 是一个强大、简单易用的 Java 安全框架，主要用来更便捷的认证，授权，加密，会话管等等，可为任何应用提供安全保障。本课程主要来介绍 Shiro 的认证和授权功能。

## 1. Shiro 三大核心组件

Shiro 有三大核心的组件：`Subject`、`SecurityManager` 和 `Realm`。先来看一下它们之间的关系。

![三大核心组件的关系](https://images.gitbook.cn/2dd0f5f0-af4a-11e8-a51c-93c39f2785b1)

1. Subject：认证主体。它包含两个信息：Principals 和 Credentials。看一下这两个信息具体是什么。

> Principals：身份。可以是用户名，邮件，手机号码等等，用来标识一个登录主体身份；   
> Credentials：凭证。常见有密码，数字证书等等。

说白了，就是需要认证的东西，最常见的就是用户名密码了，比如用户在登录的时候，Shiro 需要去进行身份认证，就需要 Subject 认证主体。

2. SecurityManager：安全管理员。这是 Shiro 架构的核心，它就像 Shiro 内部所有原件的保护伞一样。我们在项目中一般都会配置 SecurityManager，开发人员大部分精力主要是在 Subject 认证主体上面。我们在与 Subject 进行交互的时候，实际上是 SecurityManager 在背后做一些安全操作。

3. Realms：Realms 是一个域，它是连接 Shiro 和具体应用的桥梁，当需要与安全数据交互的时候，比如用户账户、访问控制等，Shiro 就会从一个或多个 Realms 中去查找。我们一般会自己定制 Realm，这在下文会详细说明。

## 1. Shiro 身份和权限认证

### 1.2 Shiro 身份认证

我们来分析一下 Shiro 身份认证的过程，看一下官方的一个认证图：

![认证过程](https://images.gitbook.cn/f21c53a0-af4f-11e8-a51c-93c39f2785b1)

Step1：应用程序代码在调用 `Subject.login(token)` 方法后，传入代表最终用户的身份和凭证的 AuthenticationToken 实例 token。 

Step2：将 Subject 实例委托给应用程序的 SecurityManager（Shiro的安全管理）来开始实际的认证工作。这里开始真正的认证工作了。 

Step3，4，5：然后 SecurityManager 就会根据具体的 realm 去进行安全认证了。 从图中可以看出，realm 可以自定义（Custom Realm）。

### 1.3 Shiro 权限认证

权限认证，也就是访问控制，即在应用中控制谁能访问哪些资源。在权限认证中，最核心的三个要素是：权限，角色和用户。

> 权限（permission）：即操作资源的权利，比如访问某个页面，以及对某个模块的数据的添加，修改，删除，查看的权利； 
> 角色（role）：指的是用户担任的的角色，一个角色可以有多个权限； 
> 用户（user）：在 Shiro 中，代表访问系统的用户，即上面提到的 Subject 认证主体。

它们之间的的关系可以用下图来表示： 

![用户、角色和权限的关系](https://images.gitbook.cn/44a68bc0-af75-11e8-85ef-dd986da3511e)

一个用户可以有多个角色，而不同的角色可以有不同的权限，也可由有相同的权限。比如说现在有三个角色，1是普通角色，2也是普通角色，3是管理员，角色1只能查看信息，角色2只能添加信息，管理员都可以，而且还可以删除信息，类似于这样。

## 2. Spring Boot 集成 Shiro 过程

### 2.1 依赖导入

Spring Boot 2.0.3 集成 Shiro 需要导入如下 starter 依赖：

```xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>1.4.0</version>
</dependency>
```

### 2.2 数据库表数据初始化

这里主要涉及到三张表：用户表、角色表和权限表，其实在 demo 中，我们完全可以自己模拟一下，不用建表，但是为了更加接近实际情况，我们还是加入 mybatis，来操作数据库。下面是数据库表的脚本。

```sql
CREATE TABLE `t_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `rolename` varchar(20) DEFAULT NULL COMMENT '角色名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8

CREATE TABLE `t_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户主键',
  `username` varchar(20) NOT NULL COMMENT '用户名',
  `password` varchar(20) NOT NULL COMMENT '密码',
  `role_id` int(11) DEFAULT NULL COMMENT '外键关联role表',
  PRIMARY KEY (`id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `t_user_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `t_role` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8

CREATE TABLE `t_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `permissionname` varchar(50) NOT NULL COMMENT '权限名',
  `role_id` int(11) DEFAULT NULL COMMENT '外键关联role',
  PRIMARY KEY (`id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `t_permission_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `t_role` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8
```

其中，t_user，t_role 和 t_permission，分别存储用户信息，角色信息和权限信息，表建立好了之后，我们往表里插入一些测试数据。
t_user 表：

|  id  | username | password | role_id |
| :--: | :------: | :------: | :-----: |
|  1   |  csdn1   |  123456  |    1    |
|  2   |  csdn2   |  123456  |    2    |
|  3   |  csdn3   |  123456  |    3    |

t_role 表：

|  id  | rolename |
| :--: | :------: |
|  1   |  admin   |
|  2   | teacher  |
|  3   | student  |

t_permission 表：

|  id  | permissionname | role_id |
| :--: | :------------: | :-----: |
|  1   |    `user:*`    |    1    |
|  2   |  `student:*`   |    2    |

解释一下这里的权限：`user:*`表示权限可以是 `user:create` 或者其他，`*` 处表示一个占位符，我们可以自己定义，具体的会在下文 Shiro 配置那里说明。

### 2.2 自定义 Realm

有了数据库表和数据之后，我们开始自定义 realm，自定义 realm 需要继承 AuthorizingRealm 类，因为该类封装了很多方法，它也是一步步继承自 Realm 类的，继承了 AuthorizingRealm 类后，需要重写两个方法：

> `doGetAuthenticationInfo()` 方法：用来验证当前登录的用户，获取认证信息   
> `doGetAuthorizationInfo()` 方法：用来为当前登陆成功的用户授予权限和角色

具体实现如下，相关的解释我放在代码的注释中，这样更加方便直观：

```java
/**
 * 自定义realm
 * @author shengwu ni
 */
public class MyRealm extends AuthorizingRealm {

    @Resource
    private UserService userService;

    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        // 获取用户名
        String username = (String) principalCollection.getPrimaryPrincipal();
        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();
        // 给该用户设置角色，角色信息存在t_role表中取
        authorizationInfo.setRoles(userService.getRoles(username));
        // 给该用户设置权限，权限信息存在t_permission表中取
        authorizationInfo.setStringPermissions(userService.getPermissions(username));
        return authorizationInfo;
    }

    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        // 根据token获取用户名，如果您不知道该该token怎么来的，先可以不管，下文会解释
        String username = (String) authenticationToken.getPrincipal();
        // 根据用户名从数据库中查询该用户
        User user = userService.getByUsername(username);
        if(user != null) {
            // 把当前用户存到session中
            SecurityUtils.getSubject().getSession().setAttribute("user", user);
            // 传入用户名和密码进行身份认证，并返回认证信息
            AuthenticationInfo authcInfo = new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), "myRealm");
            return authcInfo;
        } else {
            return null;
        }
    }
}
```

从上面两个方法中可以看出：验证身份的时候是根据用户输入的用户名先从数据库中查出该用户名对应的用户，这时候并没有涉及到密码，也就是说到这一步的时候，即使用户输入的密码不对，也是可以查出来该用户的，然后将该用户的正确信息封装到 authcInfo 中返回给 Shiro，接下来就是Shiro的事了，它会根据这里面的真实信息与用户前台输入的用户名和密码进行校验， 这个时候也要校验密码了，如果校验通过就让用户登录，否则跳转到指定页面。同理，权限验证的时候也是先根据用户名从数据库中获取与该用户名有关的角色和权限，然后封装到 authorizationInfo 中返回给 Shiro。

### 2.3 Shiro 配置

自定义的 realm 写好了，接下来需要对 Shiro 进行配置了。我们主要配置三个东西：自定义 realm、安全管理器 SecurityManager 和 Shiro 过滤器。如下：

配置自定义 realm：

```java
@Configuration
public class ShiroConfig {

    private static final Logger logger = LoggerFactory.getLogger(ShiroConfig.class);

    /**
     * 注入自定义的realm
     * @return MyRealm
     */
    @Bean
    public MyRealm myAuthRealm() {
        MyRealm myRealm = new MyRealm();
        logger.info("====myRealm注册完成=====");
        return myRealm;
    }
}
```

配置安全管理器 SecurityManager：

```java
@Configuration
public class ShiroConfig {

    private static final Logger logger = LoggerFactory.getLogger(ShiroConfig.class);

    /**
     * 注入安全管理器
     * @return SecurityManager
     */
    @Bean
    public SecurityManager securityManager() {
        // 将自定义realm加进来
        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(myAuthRealm());
        logger.info("====securityManager注册完成====");
        return securityManager;
    }
}
```

配置 SecurityManager 时，需要将上面的自定义 realm 添加进来，这样的话 Shiro 才会走到自定义的 realm 中。

配置 Shiro 过滤器：

```java
@Configuration
public class ShiroConfig {

    private static final Logger logger = LoggerFactory.getLogger(ShiroConfig.class);
    
    /**
     * 注入Shiro过滤器
     * @param securityManager 安全管理器
     * @return ShiroFilterFactoryBean
     */
    @Bean
    public ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager) {
        // 定义shiroFactoryBean
        ShiroFilterFactoryBean shiroFilterFactoryBean=new ShiroFilterFactoryBean();

        // 设置自定义的securityManager
        shiroFilterFactoryBean.setSecurityManager(securityManager);

        // 设置默认登录的url，身份认证失败会访问该url
        shiroFilterFactoryBean.setLoginUrl("/login");
        // 设置成功之后要跳转的链接
        shiroFilterFactoryBean.setSuccessUrl("/success");
        // 设置未授权界面，权限认证失败会访问该url
        shiroFilterFactoryBean.setUnauthorizedUrl("/unauthorized");

        // LinkedHashMap是有序的，进行顺序拦截器配置
        Map<String,String> filterChainMap = new LinkedHashMap<>();

        // 配置可以匿名访问的地址，可以根据实际情况自己添加，放行一些静态资源等，anon表示放行
        filterChainMap.put("/css/**", "anon");
        filterChainMap.put("/imgs/**", "anon");
        filterChainMap.put("/js/**", "anon");
        filterChainMap.put("/swagger-*/**", "anon");
        filterChainMap.put("/swagger-ui.html/**", "anon");
        // 登录url 放行
        filterChainMap.put("/login", "anon");

        // “/user/admin” 开头的需要身份认证，authc表示要身份认证
        filterChainMap.put("/user/admin*", "authc");
        // “/user/student” 开头的需要角色认证，是“admin”才允许
        filterChainMap.put("/user/student*/**", "roles[admin]");
        // “/user/teacher” 开头的需要权限认证，是“user:create”才允许
        filterChainMap.put("/user/teacher*/**", "perms[\"user:create\"]");

        // 配置logout过滤器
        filterChainMap.put("/logout", "logout");

        // 设置shiroFilterFactoryBean的FilterChainDefinitionMap
        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainMap);
        logger.info("====shiroFilterFactoryBean注册完成====");
        return shiroFilterFactoryBean;
    }
}
```

配置 Shiro 过滤器时会传入一个安全管理器，可以看出，这是一环套一环，reaml -> SecurityManager -> filter。在过滤器中，我们需要定义一个 shiroFactoryBean，然后将 SecurityManager 添加进来，结合上面代码可以看出，要配置的东西主要有：

> 默认登录的 url：身份认证失败会访问该 url
> 认证成功之后要跳转的 url
> 权限认证失败会访问该 url
> 需要拦截或者放行的 url：这些都放在一个 map 中

从上述代码中可以看出，在 map 中，针对不同的 url，有不同的权限要求，这里总结一下常用的几个权限。

|    Filter    |                             说明                             |
| :----------: | :----------------------------------------------------------: |
|     anon     |      开放权限，可以理解为匿名用户或游客，可以直接访问的      |
|    authc     |                        需要身份认证的                        |
|    logout    | 注销，执行后会直接跳转到 `shiroFilterFactoryBean.setLoginUrl();` 设置的 url，即登录页面 |
| roles[admin] | 参数可写多个，表示是某个或某些角色才能通过，多个参数时写 roles["admin，user"]，当有多个参数时必须每个参数都通过才算通过 |
| perms[user]  | 参数可写多个，表示需要某个或某些权限才能通过，多个参数时写 perms[“user, admin”]，当有多个参数时必须每个参数都通过才算通过 |

### 2.4 使用 Shiro 进行认证

到这里，我们对 Shiro 的准备工作都做完了，接下来开始使用 Shiro 进行认证工作。我们首先来设计几个接口：

> 接口一： 使用 `http://localhost:8080/user/admin` 来验证身份认证
> 接口二： 使用 `http://localhost:8080/user/student` 来验证角色认证
> 接口三： 使用 `http://localhost:8080/user/teacher` 来验证权限认证
> 接口四： 使用 `http://localhost:8080/user/login` 来实现用户登录

然后来一下认证的流程：

> 流程一： 直接访问接口一（此时还未登录），认证失败，跳转到 login.html 页面让用户登录，登录会请求接口四，实现用户登录功能，此时 Shiro 已经保存了用户信息了。
> 流程二： 再次访问接口一（此时用户已经登录），认证成功，跳转到 success.html 页面，展示用户信息。
> 流程三： 访问接口二，测试角色认证是否成功。
> 流程四： 访问接口三，测试权限认证是否成功。

#### 2.4.1 身份、角色、权限认证接口

```java
@Controller
@RequestMapping("/user")
public class UserController {

    /**
     * 身份认证测试接口
     * @param request
     * @return
     */
    @RequestMapping("/admin")
    public String admin(HttpServletRequest request) {
        Object user = request.getSession().getAttribute("user");
        return "success";
    }

    /**
     * 角色认证测试接口
     * @param request
     * @return
     */
    @RequestMapping("/student")
    public String student(HttpServletRequest request) {
        return "success";
    }

    /**
     * 权限认证测试接口
     * @param request
     * @return
     */
    @RequestMapping("/teacher")
    public String teacher(HttpServletRequest request) {
        return "success";
    }
}
```

这三个接口很简单，直接返回到指定页面展示即可，只要认证成功就会正常跳转，如果认证失败，就会跳转到上文 ShrioConfig 中配置的页面进行展示。

#### 2.4.2 用户登录接口

```java
@Controller
@RequestMapping("/user")
public class UserController {

    /**
     * 用户登录接口
     * @param user user
     * @param request request
     * @return string
     */
    @PostMapping("/login")
    public String login(User user, HttpServletRequest request) {

        // 根据用户名和密码创建token
        UsernamePasswordToken token = new UsernamePasswordToken(user.getUsername(), user.getPassword());
        // 获取subject认证主体
        Subject subject = SecurityUtils.getSubject();
        try{
            // 开始认证，这一步会跳到我们自定义的realm中
            subject.login(token);
            request.getSession().setAttribute("user", user);
            return "success";
        }catch(Exception e){
            e.printStackTrace();
            request.getSession().setAttribute("user", user);
            request.setAttribute("error", "用户名或密码错误！");
            return "login";
        }
    }
}
```

我们重点分析一下这个登录接口，首先会根据前端传过来的用户名和密码，创建一个 token，然后使用 SecurityUtils 来创建一个认证主体，接下来开始调用 `subject.login(token)` 开始进行身份认证了，注意这里传了刚刚创建的 token，就如注释中所述，这一步会跳转到我们自定义的 realm 中，进入 `doGetAuthenticationInfo` 方法，所以到这里，您就会明白该方法中那个参数 token 了。然后就是上文分析的那样，开始进行身份认证。

#### 2.4.3 测试一下

最后，启动项目，测试一下：
浏览器请求 `http://localhost:8080/user/admin` 会进行身份认证，因为此时未登录，所以会跳转到 IndexController 中的 `/login` 接口，然后跳转到 `login.html` 页面让我们登录，使用用户名密码为 csdn/123456 登录之后，我们在浏览器中请求 `http://localhost:8080/user/student` 接口，会进行角色认证，因为数据库中 csdn1 的用户角色是 admin，所以和配置中的吻合，认证通过；我们再请求 `http://localhost:8080/user/teacher` 接口，会进行权限认证，因为数据库中 csdn1 的用户权限为 `user:*`，满足配置中的 `user:create`，所以认证通过。

接下来，我们点退出，系统会注销重新让我们登录，我们使用 csdn2 这个用户来登录，重复上述操作，当在进行角色认证和权限认证这两步时，就认证不通过了，因为数据库中 csdn2 这个用户存的角色和权限与配置中的不同，所以认证不通过。


## 3. 总结

本节主要介绍了 Shiro 安全框架与 Spring Boot 的整合。先介绍了 Shiro 的三大核心组件已经它们的作用；然后介绍了 Shiro 的身份认证、角色认证和权限认证；最后结合代码，详细介绍了 Spring Boot 中是如何整合 Shiro 的，并设计了一套测试流程，逐步分析 Shiro 的工作流程和原理，让读者更直观地体会出 Shiro 的整套工作流程。Shiro 使用的很广泛，希望读者将其掌握，并能运用到实际项目中。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第17课：Spring Boot中集成Lucence

## 1. Lucence 和全文检索

Lucene 是什么？看一下百度百科：

> Lucene是一套用于全文检索和搜寻的开源程式库，由 Apache 软件基金会支持和提供。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。——《百度百科》

### 1.1 全文检索

这里提到了全文检索的概念，我们先来分析一下什么是全文检索，理解了全文检索之后，再理解 Lucene 的原理就非常简单了。  

何为全文检索？举个例子，比如现在要在一个文件中查找某个字符串，最直接的想法就是从头开始检索，查到了就OK，这种对于小数据量的文件来说，很实用，但是对于大数据量的文件来说，就有点吃力了。或者说找包含某个字符串的文件，也是这样，如果在一个拥有几十个 G 的硬盘中找那效率可想而知，是很低的。   

文件中的数据是属于非结构化数据，也就是说它没有什么结构可言，要解决上面提到的效率问题，首先我们得将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对这些有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这就叫全文搜索。即先建立索引，再对索引进行搜索的过程。 

### 1.2 Lucene 建立索引的方式

那么 Lucene 中是如何建立索引的呢？假设现在有两篇文章，内容如下：

> 文章1的内容为：Tom lives in Guangzhou, I live in Guangzhou too.   
> 文章2的内容为：He once lived in Shanghai.

首先第一步是将文档传给分词组件（Tokenizer），分词组件会将文档分成一个个单词，并去除标点符号和停词。所谓的停词指的是没有特别意义的词，比如英文中的 a，the，too 等。经过分词后，得到词元（Token） 。如下：

> 文章1经过分词后的结果：`[Tom]` `[lives]` `[Guangzhou]` `[I]` `[live]` `[Guangzhou]`   
> 文章2经过分词后的结果：`[He]` `[lives]` `[Shanghai]`

然后将词元传给语言处理组件（Linguistic Processor），对于英语，语言处理组件一般会将字母变为小写，将单词缩减为词根形式，如 ”lives” 到 ”live” 等，将单词转变为词根形式，如 ”drove” 到 ”drive” 等。然后得到词（Term）。如下：

> 文章1经过处理后的结果：`[tom]` `[live]` `[guangzhou]` `[i]` `[live]` `[guangzhou]` 
> 文章2经过处理后的结果：`[he]` `[live]` `[shanghai]`

最后将得到的词传给索引组件（Indexer），索引组件经过处理，得到下面的索引结构：

|  关键词   | 文章号[出现频率] | 出现位置 |
| :-------: | :--------------: | :------: |
| guangzhou |       1[2]       |   3,6    |
|    he     |       2[1]       |    1     |
|     i     |       1[1]       |    4     |
|   live    |    1[2],2[1]     |  2,5,2   |
| shanghai  |       2[1]       |    3     |
|    tom    |       1[1]       |    1     |

以上就是Lucene 索引结构中最核心的部分。它的关键字是按字符顺序排列的，因此 Lucene 可以用二元搜索算法快速定位关键词。实现时 Lucene 将上面三列分别作为词典文件（Term Dictionary）、频率文件（frequencies）和位置文件（positions）保存。其中词典文件不仅保存有每个关键词，还保留了指向频率文件和位置文件的指针，通过指针可以找到该关键字的频率信息和位置信息。 
搜索的过程是先对词典二元查找、找到该词，通过指向频率文件的指针读出所有文章号，然后返回结果，然后就可以在具体的文章中根据出现位置找到该词了。所以 Lucene 在第一次建立索引的时候可能会比较慢，但是以后就不需要每次都建立索引了，就快了。

理解了 Lucene 的分词原理，接下来我们在 Spring Boot 中集成 Lucene 并实现索引和搜索的功能。

## 2. Spring Boot 中集成 Lucence

### 2.1 依赖导入

首先需要导入 Lucene 的依赖，它的依赖有好几个，如下：

```xml
<!-- Lucence核心包 -->
<dependency>
	<groupId>org.apache.lucene</groupId>
	<artifactId>lucene-core</artifactId>
	<version>5.3.1</version>
</dependency>

<!-- Lucene查询解析包 -->
<dependency>
	<groupId>org.apache.lucene</groupId>
	<artifactId>lucene-queryparser</artifactId>
	<version>5.3.1</version>
</dependency>

<!-- 常规的分词（英文） -->
<dependency>
	<groupId>org.apache.lucene</groupId>
	<artifactId>lucene-analyzers-common</artifactId>
	<version>5.3.1</version>
</dependency>

<!--支持分词高亮  -->
<dependency>
	<groupId>org.apache.lucene</groupId>
	<artifactId>lucene-highlighter</artifactId>
	<version>5.3.1</version>
</dependency>

<!--支持中文分词  -->
<dependency>
	<groupId>org.apache.lucene</groupId>
	<artifactId>lucene-analyzers-smartcn</artifactId>
	<version>5.3.1</version>
</dependency>
```

最后一个依赖是用来支持中文分词的，因为默认是支持英文的。那个高亮的分词依赖是最后我要做一个搜索，然后将搜到的内容高亮显示，模拟当前互联网上的做法，大家可以运用到实际项目中去。

### 2.2 快速入门

根据上文的分析，全文检索有两个步骤，先建立索引，再检索。所以为了测试这个过程，我新建两个 java 类，一个用来建立索引的，另一个用来检索。

#### 2.2.1 建立索引

我们自己弄几个文件，放到 `D:\lucene\data` 目录下，新建一个 Indexer 类来实现建立索引功能。首先在构造方法中初始化标准分词器和写索引实例。

```java
public class Indexer {

    /**
     * 写索引实例
     */
    private IndexWriter writer;

    /**
     * 构造方法，实例化IndexWriter
     * @param indexDir
     * @throws Exception
     */
    public Indexer(String indexDir) throws Exception {
        Directory dir = FSDirectory.open(Paths.get(indexDir));
        //标准分词器，会自动去掉空格啊，is a the等单词
        Analyzer analyzer = new StandardAnalyzer();
        //将标准分词器配到写索引的配置中
        IndexWriterConfig config = new IndexWriterConfig(analyzer);
        //实例化写索引对象
        writer = new IndexWriter(dir, config);
    }
}
```

在构造放发中传一个存放索引的文件夹路径，然后构建标准分词器（这是英文的），再使用标准分词器来实例化写索引对象。接下来就开始建立索引了，我将解释放到代码注释里，方便大家跟进。

```java
/**
 * 索引指定目录下的所有文件
 * @param dataDir
 * @return
 * @throws Exception
 */
public int indexAll(String dataDir) throws Exception {
    // 获取该路径下的所有文件
    File[] files = new File(dataDir).listFiles();
    if (null != files) {
        for (File file : files) {
            //调用下面的indexFile方法，对每个文件进行索引
            indexFile(file);
        }
    }
    //返回索引的文件数
    return writer.numDocs();
}

/**
 * 索引指定的文件
 * @param file
 * @throws Exception
 */
private void indexFile(File file) throws Exception {
    System.out.println("索引文件的路径：" + file.getCanonicalPath());
    //调用下面的getDocument方法，获取该文件的document
    Document doc = getDocument(file);
    //将doc添加到索引中
    writer.addDocument(doc);
}

/**
 * 获取文档，文档里再设置每个字段，就类似于数据库中的一行记录
 * @param file
 * @return
 * @throws Exception
 */
private Document getDocument(File file) throws Exception {
    Document doc = new Document();
    //开始添加字段
    //添加内容
    doc.add(new TextField("contents", new FileReader(file)));
    //添加文件名，并把这个字段存到索引文件里
    doc.add(new TextField("fileName", file.getName(), Field.Store.YES));
    //添加文件路径
    doc.add(new TextField("fullPath", file.getCanonicalPath(), Field.Store.YES));
    return doc;
}
```

这样就建立好索引了，我们在该类中写一个 main 方法测试一下：

```java
public static void main(String[] args) {
        //索引保存到的路径
        String indexDir = "D:\\lucene";
        //需要索引的文件数据存放的目录
        String dataDir = "D:\\lucene\\data";
        Indexer indexer = null;
        int indexedNum = 0;
        //记录索引开始时间
        long startTime = System.currentTimeMillis();
        try {
            // 开始构建索引
            indexer = new Indexer(indexDir);
            indexedNum = indexer.indexAll(dataDir);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != indexer) {
                    indexer.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        //记录索引结束时间
        long endTime = System.currentTimeMillis();
        System.out.println("索引耗时" + (endTime - startTime) + "毫秒");
        System.out.println("共索引了" + indexedNum + "个文件");
    }
```

我搞了两个 tomcat 相关的文件放到 `D:\lucene\data` 下了，执行完之后，看到控制台输出：

```
索引文件的路径：D:\lucene\data\catalina.properties
索引文件的路径：D:\lucene\data\logging.properties
索引耗时882毫秒
共索引了2个文件
```

然后我们去 `D:\lucene\` 目录下可以看到一些索引文件，这些文件不能删除，删除了就需要重新构建索引，否则没了索引，就无法去检索内容了。

####2.2.2 检索内容

上面把这两个文件的索引建立好了，接下来我们就可以写检索程序了，在这两个文件中查找特定的词。

```java
public class Searcher {

    public static void search(String indexDir, String q) throws Exception {

        //获取要查询的路径，也就是索引所在的位置
        Directory dir = FSDirectory.open(Paths.get(indexDir));
        IndexReader reader = DirectoryReader.open(dir);
        //构建IndexSearcher
        IndexSearcher searcher = new IndexSearcher(reader);
        //标准分词器，会自动去掉空格啊，is a the等单词
        Analyzer analyzer = new StandardAnalyzer();
        //查询解析器
        QueryParser parser = new QueryParser("contents", analyzer);
        //通过解析要查询的String，获取查询对象，q为传进来的待查的字符串
        Query query = parser.parse(q);

        //记录索引开始时间
        long startTime = System.currentTimeMillis();
        //开始查询，查询前10条数据，将记录保存在docs中
        TopDocs docs = searcher.search(query, 10);
        //记录索引结束时间
        long endTime = System.currentTimeMillis();
        System.out.println("匹配" + q + "共耗时" + (endTime-startTime) + "毫秒");
        System.out.println("查询到" + docs.totalHits + "条记录");

        //取出每条查询结果
        for(ScoreDoc scoreDoc : docs.scoreDocs) {
            //scoreDoc.doc相当于docID,根据这个docID来获取文档
            Document doc = searcher.doc(scoreDoc.doc);
            //fullPath是刚刚建立索引的时候我们定义的一个字段，表示路径。也可以取其他的内容，只要我们在建立索引时有定义即可。
            System.out.println(doc.get("fullPath"));
        }
        reader.close();
    }
}
```

ok，这样我们检索的代码就写完了，每一步解释我写在代码中的注释上了，下面写个 main 方法来测试一下：

```java
public static void main(String[] args) {
    String indexDir = "D:\\lucene";
    //查询这个字符串
    String q = "security";
    try {
        search(indexDir, q);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
```

查一下 `security` 这个字符串，执行一下看控制台打印的结果：

```
匹配security共耗时23毫秒
查询到1条记录
D:\lucene\data\catalina.properties
```

可以看出，耗时了23毫秒在两个文件中找到了 security 这个字符串，并输出了文件的名称。上面的代码我写的很详细，这个代码已经比较全了，可以用在生产环境上。

### 2.3 中文分词检索高亮实战

上文已经写了建立索引和检索的代码，但是在实际项目中，我们往往是结合页面做一些查询结果的展示，比如我要查某个关键字，查到了之后，将相关的信息点展示出来，并将查询的关键字高亮等等。这种需求在实际项目中非常常见，而且大多数网站中都会有这种效果。所以这一小节我们就使用 Lucene 来实现这种效果。

#### 2.3.1 中文分词

我们新建一个 ChineseIndexer 类来建立中文索引，建立过程和英文索引一样的，不同的地方在于使用的是中文分词器。除此之外，这里我们不用通过读取文件去建立索引，我们模拟一下用字符串来建立，因为在实际项目中，绝大部分情况是获取到一些文本字符串，然后根据一些关键字去查询相关内容等等。代码如下：

```java
public class ChineseIndexer {

    /**
     * 存放索引的位置
     */
    private Directory dir;

    //准备一下用来测试的数据
    //用来标识文档
    private Integer ids[] = {1, 2, 3};
    private String citys[] = {"上海", "南京", "青岛"};
    private String descs[] = {
            "上海是个繁华的城市。",
            "南京是一个文化的城市南京，简称宁，是江苏省会，地处中国东部地区，长江下游，濒江近海。全市下辖11个区，总面积6597平方公里，2013年建成区面积752.83平方公里，常住人口818.78万，其中城镇人口659.1万人。[1-4] “江南佳丽地，金陵帝王州”，南京拥有着6000多年文明史、近2600年建城史和近500年的建都史，是中国四大古都之一，有“六朝古都”、“十朝都会”之称，是中华文明的重要发祥地，历史上曾数次庇佑华夏之正朔，长期是中国南方的政治、经济、文化中心，拥有厚重的文化底蕴和丰富的历史遗存。[5-7] 南京是国家重要的科教中心，自古以来就是一座崇文重教的城市，有“天下文枢”、“东南第一学”的美誉。截至2013年，南京有高等院校75所，其中211高校8所，仅次于北京上海；国家重点实验室25所、国家重点学科169个、两院院士83人，均居中国第三。[8-10] 。",
            "青岛是一个美丽的城市。"
    };

    /**
     * 生成索引
     * @param indexDir
     * @throws Exception
     */
    public void index(String indexDir) throws Exception {
        dir = FSDirectory.open(Paths.get(indexDir));
        // 先调用 getWriter 获取IndexWriter对象
        IndexWriter writer = getWriter();
        for(int i = 0; i < ids.length; i++) {
            Document doc = new Document();
            // 把上面的数据都生成索引，分别用id、city和desc来标识
            doc.add(new IntField("id", ids[i], Field.Store.YES));
            doc.add(new StringField("city", citys[i], Field.Store.YES));
            doc.add(new TextField("desc", descs[i], Field.Store.YES));
            //添加文档
            writer.addDocument(doc);
        }
        //close了才真正写到文档中
        writer.close();
    }

    /**
     * 获取IndexWriter实例
     * @return
     * @throws Exception
     */
    private IndexWriter getWriter() throws Exception {
        //使用中文分词器
        SmartChineseAnalyzer analyzer = new SmartChineseAnalyzer();
        //将中文分词器配到写索引的配置中
        IndexWriterConfig config = new IndexWriterConfig(analyzer);
        //实例化写索引对象
        IndexWriter writer = new IndexWriter(dir, config);
        return writer;
    }

    public static void main(String[] args) throws Exception {
        new ChineseIndexer().index("D:\\lucene2");
    }
}
```

这里我们用 id、city、desc 分别代表 id、城市名称和城市描述，用他们作为关键字来建立索引，后面我们获取内容的时候，主要来获取城市描述。南京的描述我故意写的长一点，因为下文检索的时候，根据不同的关键字会检索到不同部分的信息，有个权重的概念在里面。
然后执行一下 main 方法，将索引保存到 `D:\lucene2\` 中。 

#### 2.3.2 中文分词查询

中文分词查询代码逻辑和默认的查询差不多，有一些区别在于，我们需要将查询出来的关键字标红加粗等需要处理，需要计算出一个得分片段，这是什么意思呢？比如我搜索 “南京文化” 跟搜索 “南京文明”，这两个搜索结果应该根据关键字出现的位置，返回的结果不一样才对，这在下文会测试。我们先看一下代码和注释：

```java
public class ChineseSearch {

    private static final Logger logger = LoggerFactory.getLogger(ChineseSearch.class);

    public static List<String> search(String indexDir, String q) throws Exception {

        //获取要查询的路径，也就是索引所在的位置
        Directory dir = FSDirectory.open(Paths.get(indexDir));
        IndexReader reader = DirectoryReader.open(dir);
        IndexSearcher searcher = new IndexSearcher(reader);
        //使用中文分词器
        SmartChineseAnalyzer analyzer = new SmartChineseAnalyzer();
        //由中文分词器初始化查询解析器
        QueryParser parser = new QueryParser("desc", analyzer);
        //通过解析要查询的String，获取查询对象
        Query query = parser.parse(q);

        //记录索引开始时间
        long startTime = System.currentTimeMillis();
        //开始查询，查询前10条数据，将记录保存在docs中
        TopDocs docs = searcher.search(query, 10);
        //记录索引结束时间
        long endTime = System.currentTimeMillis();
        logger.info("匹配{}共耗时{}毫秒", q, (endTime - startTime));
        logger.info("查询到{}条记录", docs.totalHits);

        //如果不指定参数的话，默认是加粗，即<b><b/>
        SimpleHTMLFormatter simpleHTMLFormatter = new SimpleHTMLFormatter("<b><font color=red>","</font></b>");
        //根据查询对象计算得分，会初始化一个查询结果最高的得分
        QueryScorer scorer = new QueryScorer(query);
        //根据这个得分计算出一个片段
        Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);
        //将这个片段中的关键字用上面初始化好的高亮格式高亮
        Highlighter highlighter = new Highlighter(simpleHTMLFormatter, scorer);
        //设置一下要显示的片段
        highlighter.setTextFragmenter(fragmenter);

        //取出每条查询结果
        List<String> list = new ArrayList<>();
        for(ScoreDoc scoreDoc : docs.scoreDocs) {
            //scoreDoc.doc相当于docID,根据这个docID来获取文档
            Document doc = searcher.doc(scoreDoc.doc);
            logger.info("city:{}", doc.get("city"));
            logger.info("desc:{}", doc.get("desc"));
            String desc = doc.get("desc");

            //显示高亮
            if(desc != null) {
                TokenStream tokenStream = analyzer.tokenStream("desc", new StringReader(desc));
                String summary = highlighter.getBestFragment(tokenStream, desc);
                logger.info("高亮后的desc:{}", summary);
                list.add(summary);
            }
        }
        reader.close();
        return list;
    }
}
```

每一步的注释我写的很详细，在这就不赘述了。接下来我们来测试一下效果。

#### 2.3.3 测试一下

这里我们使用 thymeleaf 来写个简单的页面来展示获取到的数据，并高亮展示。在 controller 中我们指定索引的目录和需要查询的字符串，如下：

```java
@Controller
@RequestMapping("/lucene")
public class IndexController {

    @GetMapping("/test")
    public String test(Model model) {
        // 索引所在的目录
        String indexDir = "D:\\lucene2";
        // 要查询的字符
//        String q = "南京文明";
        String q = "南京文化";
        try {
            List<String> list = ChineseSearch.search(indexDir, q);
            model.addAttribute("list", list);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "result";
    }
}
```

直接返回到 result.html 页面，该页面主要来展示一下 model 中的数据即可。

```xml
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<div th:each="desc : ${list}">
    <div th:utext="${desc}"></div>
</div>
</body>
</html>
```

这里注意一下，不能使用 `th:test`，否则字符串中的 html 标签都会被转义，不会被渲染到页面。下面启动服务，在浏览器中输入 `http://localhost:8080/lucene/test`，测试一下效果，我们搜索的是 “南京文化”。

![南京文化](https://images.gitbook.cn/83b3f810-b377-11e8-88bf-23cb78d1fb4f)

再将 controller 中的搜索关键字改成 “南京文明”，看下命中的效果。

![南京文明](https://images.gitbook.cn/8ef8a4a0-b377-11e8-911d-27cc5f059829)

可以看出，不同的关键词，它会计算一个得分片段，也就是说不同的关键字会命中不同位置的内容，然后将关键字根据我们自己设定的形式高亮显示。从结果中可以看出，Lucene 也可以很智能的将关键字拆分命中，这在实际项目中会很好用。

## 3. 总结

本节课首先详细的分析了全文检索的理论规则，然后结合 Lucene，系统的讲述了在 Spring Boot 的集成步骤，首先快速带领大家从直观上感受 Lucene 如何建立索引已经如果检索，其次通过中文检索的具体实例，展示了 Lucene 在全文检索中的广泛应用。Lucene 不难，主要就是步骤比较多，代码不用死记硬背，拿到项目中根据实际情况做对应的修改即可。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程



# 第18课：Spring Boot搭建实际项目开发中的架构

前面的课程中，我主要给大家讲解了 Spring Boot 中常用的一些技术点，这些技术点在实际项目中可能不会全部用得到，因为不同的项目可能使用的技术不同，但是希望大家都能掌握如何使用，并能自己根据实际项目中的需求进行相应的扩展。

不知道大家了不了解单片机，单片机里有个最小系统，这个最小系统搭建好了之后，就可以在此基础上进行人为的扩展。这节课我们要做的就是搭建一个 “Spring Boot 最小系统架构” 。拿着这个架构，可以在此基础上根据实际需求做相应的扩展。

从零开始搭建一个环境，主要要考虑几点：统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（本文不写该项，因为现在大部分项目都前后端分离了，但是考虑到也还有非前后端分离的项目，所以我在源代码里也加上了 thymeleaf）、持久层的集成、拦截器（这个也是可选的）和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。

结合前面的课程和以上的这些点，本节课手把手带领大家搭建一个实际项目开发中可用的 Spring Boot 架构。整个项目工程如下图所示，学习的时候，可以结合我的源码，这样效果会更好。

![工程架构](https://images.gitbook.cn/6f23c980-b89e-11e8-87f1-559c9b456754)

## 1. 统一的数据封装 

由于封装的 json 数据的类型不确定，所以在定义统一的 json 结构时，我们需要用到泛型。统一的 json 结构中属性包括数据、状态码、提示信息即可，构造方法可以根据实际业务需求做相应的添加即可，一般来说，应该有默认的返回结构，也应该有用户指定的返回结构。如下：

```java
/**
 * 统一返回对象
 * @author shengwu ni
 * @param <T>
 */
public class JsonResult<T> {

    private T data;
    private String code;
    private String msg;

    /**
     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！
     */
    public JsonResult() {
        this.code = "0";
        this.msg = "操作成功！";
    }

    /**
     * 若没有数据返回，可以人为指定状态码和提示信息
     * @param code
     * @param msg
     */
    public JsonResult(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }

    /**
     * 有数据返回时，状态码为0，默认提示信息为：操作成功！
     * @param data
     */
    public JsonResult(T data) {
        this.data = data;
        this.code = "0";
        this.msg = "操作成功！";
    }

    /**
     * 有数据返回，状态码为0，人为指定提示信息
     * @param data
     * @param msg
     */
    public JsonResult(T data, String msg) {
        this.data = data;
        this.code = "0";
        this.msg = msg;
    }
    
    /**
     * 使用自定义异常作为参数传递状态码和提示信息
     * @param msgEnum
     */
    public JsonResult(BusinessMsgEnum msgEnum) {
        this.code = msgEnum.code();
        this.msg = msgEnum.msg();
    }

    // 省去get和set方法
}
```

大家可以根据自己项目中所需要的一些东西，合理的修改统一结构中的字段信息。

## 2. json的处理

Json 处理工具很多，比如阿里巴巴的 fastjson，不过 fastjson 对有些未知类型的 null 无法转成空字符串，这可能是 fastjson 自身的缺陷，可扩展性也不是太好，但是使用起来方便，使用的人也蛮多的。这节课里面我们主要集成 Spring Boot 自带的 jackson。主要是对 jackson 做一下对 null 的配置即可，然后就可以在项目中使用了。

```java
/**
 * jacksonConfig
 * @author shengwu ni
 */
@Configuration
public class JacksonConfig {
    @Bean
    @Primary
    @ConditionalOnMissingBean(ObjectMapper.class)
    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {
        ObjectMapper objectMapper = builder.createXmlMapper(false).build();
        objectMapper.getSerializerProvider().setNullValueSerializer(new JsonSerializer<Object>() {
            @Override
            public void serialize(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                jsonGenerator.writeString("");
            }
        });
        return objectMapper;
    }
}
```

这里先不测试，等下面 swagger2 配置好了之后，我们一起来测试一下。

## 3. swagger2在线可调式接口

有了 swagger，开发人员不需要给其他人员提供接口文档，只要告诉他们一个 Swagger 地址，即可展示在线的 API 接口文档，除此之外，调用接口的人员还可以在线测试接口数据，同样地，开发人员在开发接口时，同样也可以利用 Swagger 在线接口文档测试接口数据，这给开发人员提供了便利。使用 swagger 需要对其进行配置：

```java
/**
 * swagger配置
 * @author shengwu ni
 */
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket createRestApi() {
        return new Docket(DocumentationType.SWAGGER_2)
                // 指定构建api文档的详细信息的方法：apiInfo()
                .apiInfo(apiInfo())
                .select()
                // 指定要生成api接口的包路径，这里把controller作为包路径，生成controller中的所有接口
                .apis(RequestHandlerSelectors.basePackage("com.itcodai.course18.controller"))
                .paths(PathSelectors.any())
                .build();
    }

    /**
     * 构建api文档的详细信息
     * @return
     */
    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                // 设置页面标题
                .title("Spring Boot搭建实际项目中开发的架构")
                // 设置接口描述
                .description("跟武哥一起学Spring Boot第18课")
                // 设置联系方式
                .contact("倪升武，" + "微信公众号：程序员私房菜")
                // 设置版本
                .version("1.0")
                // 构建
                .build();
    }
}
```

到这里，可以先测试一下，写一个 Controller，弄一个静态的接口测试一下上面集成的内容。

```java
@RestController
@Api(value = "用户信息接口")
public class UserController {

    @Resource
    private UserService userService;

    @GetMapping("/getUser/{id}")
    @ApiOperation(value = "根据用户唯一标识获取用户信息")
    public JsonResult<User> getUserInfo(@PathVariable @ApiParam(value = "用户唯一标识") Long id) {
        User user = new User(id, "倪升武", "123456");
        return new JsonResult<>(user);
    }
}
```

然后启动项目，在浏览器中输入 `localhost:8080/swagger-ui.html` 即可看到 swagger 接口文档页面，调用一下上面这个接口，即可看到返回的 json 数据。

## 4. 持久层集成

每个项目中是必须要有持久层的，与数据库交互，这里我们主要来集成 mybatis，集成 mybatis 首先要在 application.yml 中进行配置。

```yml
# 服务端口号
server:
  port: 8080

# 数据库地址
datasource:
  url: localhost:3306/blog_test

spring:
  datasource: # 数据库配置
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://${datasource.url}?useSSL=false&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&autoReconnect=true&failOverReadOnly=false&maxReconnects=10
    username: root
    password: 123456
    hikari:
      maximum-pool-size: 10 # 最大连接池数
      max-lifetime: 1770000

mybatis:
  # 指定别名设置的包为所有entity
  type-aliases-package: com.itcodai.course18.entity
  configuration:
    map-underscore-to-camel-case: true # 驼峰命名规范
  mapper-locations: # mapper映射文件位置
    - classpath:mapper/*.xml
```

配置好了之后，接下来我们来写一下 dao 层，实际中我们使用注解比较多，因为比较方便，当然也可以使用 xml 的方式，甚至两种同时使用都行，这里我们主要使用注解的方式来集成，关于 xml 的方式，大家可以查看前面课程，实际中根据项目情况来定。

```java
public interface UserMapper {

    @Select("select * from user where id = #{id}")
    @Results({
            @Result(property = "username", column = "user_name"),
            @Result(property = "password", column = "password")
    })
    User getUser(Long id);

    @Select("select * from user where id = #{id} and user_name=#{name}")
    User getUserByIdAndName(@Param("id") Long id, @Param("name") String username);

    @Select("select * from user")
    List<User> getAll();
}
```

关于 service 层我就不在文章中写代码了，大家可以结合我的源代码学习，这一节主要带领大家来搭建一个 Spring Boot 空架构。最后别忘了在启动类上添加注解扫描 `@MapperScan("com.itcodai.course18.dao")`

## 5. 拦截器

拦截器在项目中使用的是非常多的（但不是绝对的），比如拦截一些置顶的 url，做一些判断和处理等等。除此之外，还需要将常用的静态页面或者 swagger 页面放行，不能将这些静态资源给拦截了。首先先自定义一个拦截器。

```java
public class MyInterceptor implements HandlerInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(MyInterceptor.class);

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

        logger.info("执行方法之前执行(Controller方法调用之前)");
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        logger.info("执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染");
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        logger.info("整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了");
    }
}
```

然后将自定义的拦截器加入到拦截器配置中。

```java
@Configuration
public class MyInterceptorConfig implements WebMvcConfigurer {
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        // 实现WebMvcConfigurer不会导致静态资源被拦截
        registry.addInterceptor(new MyInterceptor())
                // 拦截所有url
                .addPathPatterns("/**")
                // 放行swagger
                .excludePathPatterns("/swagger-resources/**");
    }
}
```

在 Spring Boot 中，我们通常会在如下目录里存放一些静态资源：

> classpath:/static   
> classpath:/public   
> classpath:/resources   
> classpath:/META-INF/resources  

上面代码中配置的 `/**` 是对所有 url 都进行了拦截，但我们实现了 WebMvcConfigurer 接口，不会导致 Spring Boot 对上面这些目录下的静态资源实施拦截。但是我们平时访问的 swagger 会被拦截，所以要将其放行。swagger 页面在 swagger-resources 目录下，放行该目录下所有文件即可。

然后在浏览器中输入一下 swagger 页面，若能正常显示 swagger，说明放行成功。同时可以根据后台打印的日志判断代码执行的顺序。

## 6. 全局异常处理

全局异常处理是每个项目中必须用到的东西，在具体的异常中，我们可能会做具体的处理，但是对于没有处理的异常，一般会有一个统一的全局异常处理。在异常处理之前，最好维护一个异常提示信息枚举类，专门用来保存异常提示信息的。如下：

```java
public enum BusinessMsgEnum {
    /** 参数异常 */
    PARMETER_EXCEPTION("102", "参数异常!"),
    /** 等待超时 */
    SERVICE_TIME_OUT("103", "服务调用超时！"),
    /** 参数过大 */
    PARMETER_BIG_EXCEPTION("102", "输入的图片数量不能超过50张!"),
    /** 500 : 发生异常 */
    UNEXPECTED_EXCEPTION("500", "系统发生异常，请联系管理员！");

    /**
     * 消息码
     */
    private String code;
    /**
     * 消息内容
     */
    private String msg;

    private BusinessMsgEnum(String code, String msg) {
        this.code = code;
        this.msg = msg;
    }

    public String code() {
        return code;
    }

    public String msg() {
        return msg;
    }

}
```

在全局统一异常处理类中，我们一般会对自定义的业务异常最先处理，然后去处理一些常见的系统异常，最后会来一个一劳永逸（Exception 异常）。

```java
@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    /**
     * 拦截业务异常，返回业务异常信息
     * @param ex
     * @return
     */
    @ExceptionHandler(BusinessErrorException.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleBusinessError(BusinessErrorException ex) {
        String code = ex.getCode();
        String message = ex.getMessage();
        return new JsonResult(code, message);
    }

    /**
     * 空指针异常
     * @param ex NullPointerException
     * @return
     */
    @ExceptionHandler(NullPointerException.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleTypeMismatchException(NullPointerException ex) {
        logger.error("空指针异常，{}", ex.getMessage());
        return new JsonResult("500", "空指针异常了");
    }

    /**
     * 系统异常 预期以外异常
     * @param ex
     * @return
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public JsonResult handleUnexpectedServer(Exception ex) {
        logger.error("系统异常：", ex);
        return new JsonResult(BusinessMsgEnum.UNEXPECTED_EXCEPTION);
    }

}
```

其中，BusinessErrorException 是自定义的业务异常，继承一下 RuntimeException 即可，具体可以看我的源代码，文章中就不贴代码了。
在 UserController 中有个 testException 方法，用来测试全局异常的，打开 swagger 页面，调用一下该接口，可以看出返回用户提示信息：”系统发生异常，请联系管理员！“。当然了，实际情况中，需要根据不同的业务提示不同的信息。

## 7. 总结

本文主要手把手带领大家快速搭建一个项目中可以使用的 Spring Boot 空架构，主要从统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（代码中体现）、持久层的集成、拦截器和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。

课程源代码下载地址：[戳我下载](https://gitee.com/eson15/springboot_study)

> 欢迎关注我的为微信公众号：武哥聊编程




# 附：作者信息

本课程首发于 CSDN GitChat 达人课，该文档为课程详细笔记
作者：倪升武（武哥）
微信公众号：武哥聊编程
二维码：

![武哥聊编程](https://img-blog.csdnimg.cn/202002150421550.jpg)

>版权申明：本课程已经免费，但版权属于 CSDN 和作者，未经允许，不得将该笔记用于商业用途，否则追究法律责任。

(String), http://cdn.alanliang.site/3b37b37055c1bf916df926d305f0f443.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), false(Boolean), false(Boolean), 3(Long), 5(Long), 2(Integer), 2020-06-15 12:25:03.778(Timestamp), 2020-06-15 12:25:03.778(Timestamp), 2(Integer), 1(Integer)
2020-06-15 12:25:03.848 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 12:25:03.853 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) 
2020-06-15 12:25:03.855 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 11(Long), 12(Long), 11(Long), 25(Long)
2020-06-15 12:25:03.857 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 2
2020-06-15 12:25:04.554 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:25:04.555 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:25:04.551(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: ... }(String), 0:0:0:0:0:0:0:1(String), 770(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:25:04.557 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:25:06.412 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 12:25:06.412 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 12:25:06.414 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 12:25:06.414 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:25:06.433 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 11
2020-06-15 12:25:06.438 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.438 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:25:06.440 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:25:06.441 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.441 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:25:06.443 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:06.444 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.444 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:25:06.446 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:06.447 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.447 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:25:06.448 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:06.449 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.450 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:25:06.451 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:06.454 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.454 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:25:06.455 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:06.456 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.456 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:25:06.457 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:06.458 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.458 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:25:06.459 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:25:06.460 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.460 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:25:06.461 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:06.461 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.462 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:25:06.465 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:25:06.466 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:06.466 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:25:06.472 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:25:06.477 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:25:06.477 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:25:06.476(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 65(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:25:06.478 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:25:19.294 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:25:19.294 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:25:19.293(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:25:19.295 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:25:26.887 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 12:25:26.887 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 11(Long)
2020-06-15 12:25:26.890 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 12:25:26.909 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 12:25:26.909 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 11(Long)
2020-06-15 12:25:26.911 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 12:25:27.278 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:25:27.278 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:25:27.277(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=11, status=2) }(String), 0:0:0:0:0:0:0:1(String), 390(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:25:27.280 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:25:27.299 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 12:25:27.300 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 12:25:27.301 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 12:25:27.301 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:25:27.310 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 11
2020-06-15 12:25:27.311 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.311 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:25:27.313 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:25:27.317 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.318 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:25:27.319 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:27.320 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.320 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:25:27.322 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:27.322 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.322 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:25:27.323 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:27.324 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.324 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:25:27.325 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:27.326 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.326 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:25:27.327 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:27.327 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.327 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:25:27.330 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:27.332 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.332 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:25:27.333 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:25:27.334 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.334 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:25:27.335 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:27.336 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.336 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:25:27.337 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:25:27.337 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:27.338 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:25:27.338 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:25:27.341 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:25:27.341 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:25:27.34(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 42(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:25:27.343 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:25:50.884 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-06-15 12:25:50.885 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-06-15 12:25:50.888 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 15
2020-06-15 12:25:50.898 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:25:50.899 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:25:50.897(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.front.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 10(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:25:50.900 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:25:53.992 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 12:25:53.993 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 12:25:53.996 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 4
2020-06-15 12:25:54.000 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 12:25:54.001 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 12:25:54.003 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 4
2020-06-15 12:25:54.009 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 12:25:54.010 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 12:25:54.011 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 12:25:54.011 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 12:25:54.017 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 12:25:54.018 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:54.018 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:25:54.019 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:54.021 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:54.021 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:25:54.023 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:54.025 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:54.025 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:25:54.027 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:54.029 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:54.029 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:25:54.030 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:54.031 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:54.032 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:25:54.033 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:25:54.035 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:54.035 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:25:54.036 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:54.041 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:25:54.042 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:25:54.039(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 49(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:25:54.045 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:25:57.785 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 12:25:57.785 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 12:25:57.789 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 12:25:57.790 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-06-15 12:25:57.802 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 5
2020-06-15 12:25:57.803 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:57.804 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:25:57.806 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:57.809 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:57.811 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:25:57.812 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:25:57.813 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:57.814 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:25:57.815 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:25:57.816 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:57.816 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:25:57.817 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:25:57.818 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:25:57.818 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:25:57.819 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:27:16.702 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:27:16.702 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:27:16.7(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.front.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 1(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:27:16.704 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:27:19.446 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-06-15 12:27:19.447 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-06-15 12:27:19.449 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : <==      Total: 6
2020-06-15 12:27:19.455 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:27:19.455 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:27:19.454(Timestamp), 访问分类页面(String), INFO(String), site.alanliang.geekblog.controller.front.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 10(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:27:19.457 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:27:20.999 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-15 12:27:21.000 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 5(Long)
2020-06-15 12:27:21.004 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? and ta.published = 1 and ta.status = 2 order by ta.sort desc LIMIT ?,? 
2020-06-15 12:27:21.006 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 5(Long), 0(Long), 6(Long)
2020-06-15 12:27:21.009 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 1
2020-06-15 12:27:21.010 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:27:21.010 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:27:21.012 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:27:24.320 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 12:27:24.321 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 11(Long)
2020-06-15 12:27:24.323 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 12:27:24.324 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 12:27:24.325 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 1(Integer), 11(Long)
2020-06-15 12:27:24.329 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 12:27:24.330 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 12:27:24.331 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 11(Long)
2020-06-15 12:27:24.337 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 12:27:24.339 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) and ta.published = 1 and ta.status = 2 
2020-06-15 12:27:24.342 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 11(Long)
2020-06-15 12:27:24.345 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-06-15 12:27:24.346 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:27:24.346 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:27:24.347 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:27:24.350 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) and ta.published = 1 and ta.status = 2 
2020-06-15 12:27:24.350 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 11(Long)
2020-06-15 12:27:24.351 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.A.selectNextPreviewById          : <==      Total: 0
2020-06-15 12:27:24.365 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:27:24.365 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:27:24.367 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:27:25.754 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: SELECT COUNT(1) FROM t_comment tc WHERE article_id = ? AND pid = 0 AND tc.status <> 0 
2020-06-15 12:27:25.755 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 11(Long)
2020-06-15 12:27:25.757 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listByArticleId  : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and tc.status <> 0 order by create_time DESC 
2020-06-15 12:27:25.757 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listByArticleId  : ==> Parameters: 11(Long)
2020-06-15 12:27:25.758 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listByArticleId  : <==      Total: 0
2020-06-15 12:32:57.740 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 12:32:57.741 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 12:32:57.741 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 12:32:57.741 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 12:32:57.743 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 12:32:57.743 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 15
2020-06-15 12:34:04.568 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.insert        : ==>  Preparing: INSERT INTO t_tag ( name, color, create_time, update_time ) VALUES ( ?, ?, ?, ? ) 
2020-06-15 12:34:04.569 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.insert        : ==> Parameters: Vue(String), #D5F5E3(String), 2020-06-15 12:34:04.567(Timestamp), 2020-06-15 12:34:04.567(Timestamp)
2020-06-15 12:34:04.570 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.TagMapper.insert        : <==    Updates: 1
2020-06-15 12:34:04.571 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, author_id, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:04.573 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: vue无法读取某个为null的属性的问题(String), vue无法读取某个为null的属性的问题(String), <p>最近，用vue做页面数据绑定，打开控制台有时会冒出一片红色，如图：</p>
<p><img src="http://cdn.alanliang.site/note/2020-04-25_172227.png" alt="vue控制台报错"></p>
<p>虽然显示有错误，但是对页面一点影响都没有，页面照样正常渲染。但是，身为一个强迫症，实在受不了控制台有一行红色，然后就琢磨呗！</p>
<p>从控制台的给出信息中可以知道，它说<code>cover</code>属性为空，不能读取。那没道理啊，在控制台打印这个属性是能够获取值的，如图：</p>
<p><img src="http://cdn.alanliang.site/note/2020-04-25_171123.png" alt="控制台打印"></p>
<p>而且这张图片在页面上也能正常显示。问题代码就出现在这里：</p>
<pre><code class="lang-html"> &lt;div class=&quot;bg-cover pd-header post-cover&quot; :style=&quot;{backgroundImage: &#39;url(&#39; + article.cover + &#39;)&#39; }&quot;&gt;
</code></pre>
<p>看这行代码，我想着是不是vue有特殊的机制，通过<code>article.cover</code>调用，<code>article</code>可能为空，所以就不能读取<code>cover</code>属性了？那我不通过<code>article.cover</code>调用，手动给<code>cover</code>赋值试一试，代码如下：</p>
<pre><code class="lang-js">data: {cover: null}
</code></pre>
<pre><code class="lang-js">methods: {
    getArticleById: function (id) {
        axios({
            url: &#39;/article?id=&#39; + id,
            method: &#39;GET&#39;
        }).then((result) =&gt; {
            this.article = result.data;
            this.title = this.article.title;
        })
    },
</code></pre>
<pre><code class="lang-html">&lt;div class=&quot;bg-cover pd-header post-cover&quot; :style=&quot;{backgroundImage: &#39;url(&#39; + cover + &#39;)&#39; }&quot;&gt;
</code></pre>
<p>可以看到，在<code>data</code>中单独声明了<code>cover</code>属性，当通过异步获取到<code>article</code>时再赋值给<code>cover</code>，最后在数据绑定时直接使用<code>cover</code>。再次打开控制台，发现：</p>
<p><img src="http://cdn.alanliang.site/note/2020-04-25_172227.png" alt="vue控制台报错"></p>
<p><code>cover</code>属性确实不报错了，但是另一个属性<code>title</code>又报错了，给<code>title</code>属性手动赋值后，另一个属性又报错了，整个页面几十个属性总不能每一个都手动赋值吧，就算能解决，也懒得写。</p>
<p>正当一筹莫展的时候，突然想到直接给在vue管理的整个div上对<code>article</code>进行判空行不行？那就试一试呗。代码如下：</p>
<pre><code class="lang-html">&lt;div id=&quot;app&quot; v-if=&quot;article != null&quot;&gt;
    ...
&lt;/div&gt;
</code></pre>
<p>没想到真解决了！如图：</p>
<p><img src="http://cdn.alanliang.site/note/2020-04-25_172958.png" alt="控制台信息"></p>
<p>可以看到vue没有再报错，这个红色的报错不是vue报的，而是另一个插件报的（还得继续努力啊！）</p>
<p>由于刚入门vue，不懂vue的底层，暂时还搞不明白什么原因，在网上也暂时没找到贴切的答案，这样的办法应该不是最好的，等以后对vue有了更深刻的理解后，再回来康康吧！</p>
(String), 

最近，用vue做页面数据绑定，打开控制台有时会冒出一片红色，如图：

![vue控制台报错](http://cdn.alanliang.site/note/2020-04-25_172227.png)

虽然显示有错误，但是对页面一点影响都没有，页面照样正常渲染。但是，身为一个强迫症，实在受不了控制台有一行红色，然后就琢磨呗！

从控制台的给出信息中可以知道，它说`cover`属性为空，不能读取。那没道理啊，在控制台打印这个属性是能够获取值的，如图：

![控制台打印](http://cdn.alanliang.site/note/2020-04-25_171123.png)

而且这张图片在页面上也能正常显示。问题代码就出现在这里：

```html
 <div class="bg-cover pd-header post-cover" :style="{backgroundImage: 'url(' + article.cover + ')' }">
```

看这行代码，我想着是不是vue有特殊的机制，通过`article.cover`调用，`article`可能为空，所以就不能读取`cover`属性了？那我不通过`article.cover`调用，手动给`cover`赋值试一试，代码如下：

```js
data: {cover: null}
```

```js
methods: {
    getArticleById: function (id) {
        axios({
            url: '/article?id=' + id,
            method: 'GET'
        }).then((result) => {
            this.article = result.data;
            this.title = this.article.title;
        })
    },
```

```html
<div class="bg-cover pd-header post-cover" :style="{backgroundImage: 'url(' + cover + ')' }">
```

可以看到，在`data`中单独声明了`cover`属性，当通过异步获取到`article`时再赋值给`cover`，最后在数据绑定时直接使用`cover`。再次打开控制台，发现：

![vue控制台报错](http://cdn.alanliang.site/note/2020-04-25_172227.png)

`cover`属性确实不报错了，但是另一个属性`title`又报错了，给`title`属性手动赋值后，另一个属性又报错了，整个页面几十个属性总不能每一个都手动赋值吧，就算能解决，也懒得写。

正当一筹莫展的时候，突然想到直接给在vue管理的整个div上对`article`进行判空行不行？那就试一试呗。代码如下：

```html
<div id="app" v-if="article != null">
    ...
</div>
```

没想到真解决了！如图：

![控制台信息](http://cdn.alanliang.site/note/2020-04-25_172958.png)

可以看到vue没有再报错，这个红色的报错不是vue报的，而是另一个插件报的（还得继续努力啊！）

由于刚入门vue，不懂vue的底层，暂时还搞不明白什么原因，在网上也暂时没找到贴切的答案，这样的办法应该不是最好的，等以后对vue有了更深刻的理解后，再回来康康吧！(String), http://cdn.alanliang.site/note/2020-04-25_172227.png(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), false(Boolean), false(Boolean), 3(Long), 2(Long), 1(Integer), 2020-06-15 12:34:04.565(Timestamp), 2020-06-15 12:34:04.565(Timestamp), 1(Integer), 1(Integer)
2020-06-15 12:34:04.618 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 12:34:04.620 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) 
2020-06-15 12:34:04.620 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 12(Long), 27(Long)
2020-06-15 12:34:04.623 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 1
2020-06-15 12:34:04.840 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:04.841 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:34:04.839(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: ... }(String), 0:0:0:0:0:0:0:1(String), 271(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:34:04.842 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:34:06.703 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 12:34:06.705 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 12:34:06.707 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 12:34:06.708 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:34:06.744 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 12
2020-06-15 12:34:06.746 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.747 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:34:06.749 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:34:06.751 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.753 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:34:06.757 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:06.758 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.758 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:34:06.760 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:06.761 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.761 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:34:06.763 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:06.764 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.764 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:34:06.768 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:06.772 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.772 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:34:06.773 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:06.774 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.775 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:34:06.776 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:06.777 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.777 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:34:06.779 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:34:06.782 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.782 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:34:06.784 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:06.788 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.790 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:34:06.792 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:34:06.796 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.797 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:34:06.798 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:34:06.799 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:06.799 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 12:34:06.801 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 12:34:06.812 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:06.812 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:34:06.81(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 111(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:34:06.814 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:34:18.341 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:18.341 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:34:18.34(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:34:18.342 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:34:28.207 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 12:34:28.208 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 12(Long)
2020-06-15 12:34:28.209 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 12:34:28.221 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 12:34:28.221 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 12(Long)
2020-06-15 12:34:28.222 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 12:34:28.380 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:28.380 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:34:28.379(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=12, status=2) }(String), 0:0:0:0:0:0:0:1(String), 171(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:34:28.382 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:34:28.410 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 12:34:28.410 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 12:34:28.411 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 12:34:28.412 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:34:28.427 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 12
2020-06-15 12:34:28.429 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.429 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:34:28.431 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:34:28.433 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.433 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:34:28.436 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:28.439 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.439 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:34:28.440 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:28.441 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.441 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:34:28.443 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:28.444 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.444 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:34:28.445 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:28.447 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.448 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:34:28.449 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:28.450 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.450 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:34:28.454 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:28.455 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.455 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:34:28.456 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:34:28.456 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.456 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:34:28.457 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:28.458 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.458 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:34:28.458 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:34:28.459 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.459 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:34:28.460 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:34:28.460 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:28.460 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 12:34:28.461 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 12:34:28.467 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:28.469 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:34:28.466(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 57(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:34:28.470 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:34:37.800 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-06-15 12:34:37.801 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-06-15 12:34:37.803 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-06-15 12:34:37.803 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 12:34:37.805 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-06-15 12:34:37.812 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:37.813 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 12:34:37.81(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 12(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:34:37.818 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 12:34:46.553 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 12:34:46.554 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 12(Long)
2020-06-15 12:34:46.555 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 12:34:46.557 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 12:34:46.559 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 1(Integer), 12(Long)
2020-06-15 12:34:46.562 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 12:34:46.563 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 12:34:46.564 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 12(Long)
2020-06-15 12:34:46.568 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 12:34:46.571 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) and ta.published = 1 and ta.status = 2 
2020-06-15 12:34:46.571 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 12(Long)
2020-06-15 12:34:46.574 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-06-15 12:34:46.575 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:46.575 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:34:46.577 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:34:46.579 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) and ta.published = 1 and ta.status = 2 
2020-06-15 12:34:46.580 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 12(Long)
2020-06-15 12:34:46.586 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.d.A.selectNextPreviewById          : <==      Total: 0
2020-06-15 12:34:46.601 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:46.601 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 12:34:46.603 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 12:34:46.948 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: SELECT COUNT(1) FROM t_comment tc WHERE article_id = ? AND pid = 0 AND tc.status <> 0 
2020-06-15 12:34:46.948 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 12(Long)
2020-06-15 12:34:46.953 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listByArticleId  : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and tc.status <> 0 order by create_time DESC 
2020-06-15 12:34:46.953 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listByArticleId  : ==> Parameters: 12(Long)
2020-06-15 12:34:46.954 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listByArticleId  : <==      Total: 0
2020-06-15 12:34:53.345 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:53.346 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:34:53.344(Timestamp), 访问分类页面(String), INFO(String), site.alanliang.geekblog.controller.front.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 3(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:34:53.348 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:34:55.481 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-15 12:34:55.482 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 3(Long)
2020-06-15 12:34:55.483 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? and ta.published = 1 and ta.status = 2 order by ta.sort desc LIMIT ?,? 
2020-06-15 12:34:55.484 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 3(Long), 0(Long), 6(Long)
2020-06-15 12:34:55.487 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 1
2020-06-15 12:34:55.489 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:55.490 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:34:55.494 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:34:56.343 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: SELECT COUNT(1) FROM t_article ta LEFT JOIN t_category tc ON ta.category_id = tc.id WHERE tc.id = ? AND ta.published = 1 AND ta.status = 2 
2020-06-15 12:34:56.343 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 5(Long)
2020-06-15 12:34:56.346 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByCategoryId    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where tc.id = ? and ta.published = 1 and ta.status = 2 order by ta.sort desc LIMIT ?,? 
2020-06-15 12:34:56.346 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByCategoryId    : ==> Parameters: 5(Long), 0(Long), 6(Long)
2020-06-15 12:34:56.349 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByCategoryId    : <==      Total: 1
2020-06-15 12:34:56.350 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:56.350 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:34:56.351 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:34:58.821 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 12:34:58.822 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 12:34:58.825 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 4
2020-06-15 12:34:58.829 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 12:34:58.830 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 12:34:58.833 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 4
2020-06-15 12:34:58.837 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 12:34:58.839 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 12:34:58.841 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 12:34:58.842 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 12:34:58.851 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 12:34:58.852 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:58.852 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 12:34:58.853 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:58.855 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:58.856 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 12:34:58.858 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:58.860 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:58.860 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 12:34:58.861 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:58.862 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:58.862 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 12:34:58.864 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:58.864 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:58.864 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 12:34:58.865 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:34:58.866 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:34:58.866 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 12:34:58.866 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:34:58.869 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 12:34:58.870 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 12:34:58.869(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 50(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 12:34:58.873 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 12:35:02.835 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 12:35:02.835 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 12:35:02.838 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 12:35:02.839 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-06-15 12:35:02.849 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 12:35:02.850 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:35:02.850 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 12:35:02.851 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:35:02.852 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:35:02.852 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 12:35:02.853 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 12:35:02.855 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:35:02.855 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 12:35:02.857 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 12:35:02.858 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:35:02.858 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 12:35:02.860 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 12:35:02.862 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:35:02.863 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 12:35:02.864 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 12:35:02.865 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:35:02.865 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 12:35:02.866 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 12:35:10.337 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 12:35:10.338 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 12(Long)
2020-06-15 12:35:10.342 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 12:35:10.345 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 12:35:10.345 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 12(Long)
2020-06-15 12:35:10.348 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 12:35:10.349 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 12:35:10.349 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 12(Long)
2020-06-15 12:35:10.356 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 12:35:10.371 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 12:35:10.371 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 12:35:10.374 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 12:57:35.889 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 12:57:35.890 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 12:57:35.890 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 12:57:35.890 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 12:57:35.893 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 12:57:35.893 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 16
2020-06-15 15:42:14.781 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 15:42:14.783 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 15:42:14.793 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 15:42:14.796 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 15:42:14.797 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 15:42:14.810 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 15:42:14.895 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 15:42:14.896 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 15:42:14.900 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 15:42:14.901 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 15:42:14.903 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 15:42:14.917 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:42:14.920 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:42:14.915(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 19(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:42:14.924 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:42:46.216 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuConfigMapper.selectById   : ==>  Preparing: SELECT id,access_key,secret_key,bucket,zone,host,type FROM qiniu_config WHERE id=? 
2020-06-15 15:42:46.218 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuConfigMapper.selectById   : ==> Parameters: 1(Long)
2020-06-15 15:42:46.221 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuConfigMapper.selectById   : <==      Total: 1
2020-06-15 15:42:46.553 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectOne   : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content WHERE (name = ?) 
2020-06-15 15:42:46.554 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectOne   : ==> Parameters: landscape5.jpg(String)
2020-06-15 15:42:46.555 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectOne   : <==      Total: 0
2020-06-15 15:42:48.495 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.insert      : ==>  Preparing: INSERT INTO qiniu_content ( name, bucket, size, url, suffix, type, update_time, file_type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:42:48.498 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.insert      : ==> Parameters: landscape5(String), alanliang-image(String), 163.58KB   (String), http://cdn.alanliang.site/landscape5.jpg(String), jpg(String), 公开(String), 2020-06-15 15:42:48.488(Timestamp), 图片(String)
2020-06-15 15:42:48.501 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.insert      : <==    Updates: 1
2020-06-15 15:42:48.511 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:42:48.512 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:42:48.51(Timestamp), 上传文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.upload()(String), { files: [Lorg.springframework.web.multipart.MultipartFile;@f935527 }(String), 0:0:0:0:0:0:0:1(String), 2309(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:42:48.516 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:42:52.948 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 15:42:52.948 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 15:42:52.949 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 15:42:52.949 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 15:42:52.950 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 15:42:52.954 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:42:52.954 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:42:52.953(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:42:52.955 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:43:23.340 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 15:43:23.341 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 15:43:23.342 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 15:43:23.343 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 45(Long), 15(Long)
2020-06-15 15:43:23.343 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 2
2020-06-15 15:43:23.360 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:43:23.360 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:43:23.359(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 4 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:43:23.363 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:52:06.315 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:52:06.316 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:52:06.314(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:52:06.318 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:52:38.372 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuConfigMapper.selectById   : ==>  Preparing: SELECT id,access_key,secret_key,bucket,zone,host,type FROM qiniu_config WHERE id=? 
2020-06-15 15:52:38.373 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuConfigMapper.selectById   : ==> Parameters: 1(Long)
2020-06-15 15:52:38.376 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuConfigMapper.selectById   : <==      Total: 1
2020-06-15 15:52:38.385 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectOne   : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content WHERE (name = ?) 
2020-06-15 15:52:38.385 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectOne   : ==> Parameters: landscape8.jpg(String)
2020-06-15 15:52:38.387 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.selectOne   : <==      Total: 0
2020-06-15 15:52:39.077 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.insert      : ==>  Preparing: INSERT INTO qiniu_content ( name, bucket, size, url, suffix, type, update_time, file_type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:52:39.078 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.insert      : ==> Parameters: landscape8(String), alanliang-image(String), 29.48KB   (String), http://cdn.alanliang.site/landscape8.jpg(String), jpg(String), 公开(String), 2020-06-15 15:52:39.076(Timestamp), 图片(String)
2020-06-15 15:52:39.081 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.QiNiuContentMapper.insert      : <==    Updates: 1
2020-06-15 15:52:39.098 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:52:39.099 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:52:39.095(Timestamp), 上传文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.upload()(String), { files: [Lorg.springframework.web.multipart.MultipartFile;@239575ec }(String), 0:0:0:0:0:0:0:1(String), 721(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:52:39.104 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:52:40.956 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 15:52:40.956 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 15:52:40.958 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 15:52:40.959 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 15:52:40.960 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 15:52:40.969 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:52:40.969 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:52:40.967(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:52:40.972 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:52:42.615 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 15:52:42.615 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 15:52:42.617 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 15:52:42.617 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 45(Long), 15(Long)
2020-06-15 15:52:42.618 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 3
2020-06-15 15:52:42.623 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:52:42.623 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:52:42.622(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 4 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:52:42.625 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:53:09.208 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuConfigMapper.selectById   : ==>  Preparing: SELECT id,access_key,secret_key,bucket,zone,host,type FROM qiniu_config WHERE id=? 
2020-06-15 15:53:09.208 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuConfigMapper.selectById   : ==> Parameters: 1(Long)
2020-06-15 15:53:09.210 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuConfigMapper.selectById   : <==      Total: 1
2020-06-15 15:53:09.215 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectById  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content WHERE id=? 
2020-06-15 15:53:09.216 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectById  : ==> Parameters: 48(Long)
2020-06-15 15:53:09.217 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.selectById  : <==      Total: 1
2020-06-15 15:53:10.916 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.deleteById  : ==>  Preparing: DELETE FROM qiniu_content WHERE id=? 
2020-06-15 15:53:10.932 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.deleteById  : ==> Parameters: 48(Long)
2020-06-15 15:53:10.937 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.QiNiuContentMapper.deleteById  : <==    Updates: 1
2020-06-15 15:53:10.954 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:53:10.955 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:53:10.951(Timestamp), 删除多个文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.deleteAll()(String), { idList: [48] }(String), 0:0:0:0:0:0:0:1(String), 1743(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:53:10.959 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:53:11.001 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 15:53:11.001 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 15:53:11.004 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 15:53:11.004 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 45(Long), 15(Long)
2020-06-15 15:53:11.005 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 2
2020-06-15 15:53:11.012 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:53:11.012 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:53:11.011(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 4 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:53:11.014 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:54:32.478 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuConfigMapper.selectById   : ==>  Preparing: SELECT id,access_key,secret_key,bucket,zone,host,type FROM qiniu_config WHERE id=? 
2020-06-15 15:54:32.478 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuConfigMapper.selectById   : ==> Parameters: 1(Long)
2020-06-15 15:54:32.480 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuConfigMapper.selectById   : <==      Total: 1
2020-06-15 15:54:32.486 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectOne   : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content WHERE (name = ?) 
2020-06-15 15:54:32.486 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectOne   : ==> Parameters: landscape8.jpg(String)
2020-06-15 15:54:32.488 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectOne   : <==      Total: 0
2020-06-15 15:54:34.017 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.insert      : ==>  Preparing: INSERT INTO qiniu_content ( name, bucket, size, url, suffix, type, update_time, file_type ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:54:34.018 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.insert      : ==> Parameters: landscape8(String), alanliang-image(String), 159.31KB   (String), http://cdn.alanliang.site/landscape8.jpg(String), jpg(String), 公开(String), 2020-06-15 15:54:34.016(Timestamp), 图片(String)
2020-06-15 15:54:34.021 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.insert      : <==    Updates: 1
2020-06-15 15:54:34.036 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:54:34.038 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:54:34.034(Timestamp), 上传文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.upload()(String), { files: [Lorg.springframework.web.multipart.MultipartFile;@331f090f }(String), 0:0:0:0:0:0:0:1(String), 1553(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:54:34.041 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:54:35.739 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 15:54:35.739 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 15:54:35.740 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 15:54:35.740 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 15:54:35.741 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 15:54:35.745 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:54:35.746 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:54:35.745(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:54:35.747 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:54:43.098 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 15:54:43.098 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 15:54:43.101 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 15:54:43.105 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==>  Preparing: SELECT id,name,color,create_time,update_time FROM t_tag 
2020-06-15 15:54:43.105 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : ==> Parameters: 
2020-06-15 15:54:43.107 DEBUG 15444 --- [http-nio-8889-exec-6] s.a.geekblog.dao.TagMapper.selectList    : <==      Total: 16
2020-06-15 15:54:44.066 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 15:54:44.066 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 15:54:44.070 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 15:54:44.072 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 15:54:44.092 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 12
2020-06-15 15:54:44.092 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.092 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 15:54:44.094 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 15:54:44.095 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.095 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 15:54:44.097 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:54:44.097 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.098 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 15:54:44.100 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:54:44.103 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.104 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 15:54:44.107 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:54:44.107 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.107 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 15:54:44.109 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:54:44.110 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.110 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 15:54:44.111 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:54:44.112 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.112 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 15:54:44.114 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:54:44.115 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.115 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 15:54:44.118 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 15:54:44.121 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.121 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 15:54:44.122 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:54:44.123 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.123 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 15:54:44.124 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 15:54:44.125 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.126 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 15:54:44.129 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 15:54:44.131 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:54:44.131 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 15:54:44.132 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 15:54:44.141 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:54:44.142 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:54:44.141(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 74(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:54:44.143 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:54:56.537 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount FROM t_category tc LEFT JOIN t_article ta ON tc.id = ta.category_id GROUP BY tc.id ) TOTAL 
2020-06-15 15:54:56.537 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 
2020-06-15 15:54:56.540 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.CategoryMapper.listTableByPage   : ==>  Preparing: select tc.id, tc.name, tc.display, tc.introduction, tc.color, tc.create_time, tc.update_time, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id group by tc.id LIMIT ?,? 
2020-06-15 15:54:56.540 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.CategoryMapper.listTableByPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 15:54:56.543 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.CategoryMapper.listTableByPage   : <==      Total: 6
2020-06-15 15:54:56.550 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:54:56.551 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:54:56.547(Timestamp), 查询分类(String), INFO(String), site.alanliang.geekblog.controller.admin.CategoryController.listByPage()(String), { page: 1 limit: 15 categoryQuery: CategoryQuery(name=null, display=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 14(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:54:56.554 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:55:02.085 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: SELECT COUNT(1) FROM ( SELECT tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount FROM t_tag tt LEFT JOIN t_article_tag tat ON tt.id = tat.tag_id LEFT JOIN t_article ta ON ta.id = tat.article_id GROUP BY tt.id ) TOTAL 
2020-06-15 15:55:02.085 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 
2020-06-15 15:55:02.091 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listTableByPage      : ==>  Preparing: select tt.id, tt.name, tt.color, tt.create_time, tt.update_time, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id LIMIT ?,? 
2020-06-15 15:55:02.091 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listTableByPage      : ==> Parameters: 0(Long), 15(Long)
2020-06-15 15:55:02.094 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listTableByPage      : <==      Total: 15
2020-06-15 15:55:02.102 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:55:02.102 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:55:02.101(Timestamp), 查询标签(String), INFO(String), site.alanliang.geekblog.controller.admin.TagController.listByPage()(String), { page: 1 limit: 15 tagQuery: TagQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 16(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:55:02.103 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:55:04.554 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_comment 
2020-06-15 15:55:04.555 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 
2020-06-15 15:55:04.561 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:55:04.562 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 15:55:04.56(Timestamp), 查询评论(String), INFO(String), site.alanliang.geekblog.controller.admin.CommentController.listTableByPage()(String), { page: 1 limit: 15 commentQuery: CommentQuery(startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:55:04.566 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 15:55:14.004 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 15:55:14.005 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 15:55:14.007 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 15:55:14.007 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 15:55:14.008 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 15:55:14.013 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 15:55:14.020 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 15:55:14.020 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 15:55:14.022 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 15:55:14.022 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 15:55:14.035 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 15:55:14.036 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:55:14.036 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 15:55:14.038 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:55:14.039 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:55:14.039 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 15:55:14.040 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:55:14.041 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:55:14.041 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 15:55:14.042 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:55:14.044 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:55:14.044 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 15:55:14.046 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:55:14.048 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:55:14.048 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 15:55:14.050 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 15:55:14.051 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 15:55:14.051 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 15:55:14.052 DEBUG 15444 --- [http-nio-8889-exec-8] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 15:55:22.381 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-06-15 15:55:22.382 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-06-15 15:55:22.383 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 16
2020-06-15 15:55:22.389 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:55:22.390 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 15:55:22.387(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.front.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 5(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:55:22.394 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 15:55:25.135 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-06-15 15:55:25.136 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-06-15 15:55:25.139 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.C.listByArticleCount             : <==      Total: 6
2020-06-15 15:55:25.147 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 15:55:25.148 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 15:55:25.145(Timestamp), 访问分类页面(String), INFO(String), site.alanliang.geekblog.controller.front.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 8(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 15:55:25.150 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:02:05.827 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:02:05.827 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:02:05.825(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 3(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:02:05.830 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:02:07.999 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 16:02:07.999 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 16:02:08.000 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 16:02:08.001 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 16:02:08.001 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 16:02:08.006 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:02:08.007 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:02:08.005(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:02:08.012 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:02:09.633 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 16:02:09.634 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 16:02:09.637 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 16:02:09.637 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 45(Long), 15(Long)
2020-06-15 16:02:09.637 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 3
2020-06-15 16:02:09.643 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:02:09.644 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:02:09.642(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 4 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:02:09.647 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:03:01.977 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : ==>  Preparing: INSERT INTO t_article ( title, summary, content, text_content, cover, views, likes, comments, appreciable, commentable, published, top, recommend, category_id, type, create_time, update_time, sort, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:03:01.979 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : ==> Parameters: Mybatis中两种级联方式的介绍和性能对比(String), 最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的:(String), <h2 id="h2-u57FAu672Cu4ECBu7ECD"><a name="基本介绍" class="reference-link"></a><span class="header-link octicon octicon-link"></span>基本介绍</h2><p>最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：</p>
<p><img src="http://cdn.alanliang.site/note/1.png" alt="avatar"></p>
<p>注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：</p>
<ul>
<li>基于分层次查询的</li><li>基于SQL表连接的</li></ul>
<p>这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。</p>
<ul>
<li>基于分层次查询的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<ul>
<li>基于SQL表连接的</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;

&lt;/resultMap&gt;

&lt;select id=&quot;selectArticleById2&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
&lt;/select&gt;
</code></pre>
<p>注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？</p>
<p>查过资料后，我终于明白了：</p>
<p>分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。</p>
<p>基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。</p>
<p>我们做个测试，测试代码如下：</p>
<pre><code class="lang-java">@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
</code></pre>
<p>测试结果如下：</p>
<p><img src="http://cdn.alanliang.site/note/3.png" alt="avatar"></p>
<p><img src="http://cdn.alanliang.site/note/4.png" alt="avatar"></p>
<p>结果显而易见。</p>
<h2 id="h2-u8FC7u7A0Bu5206u6790"><a name="过程分析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>过程分析</h2><ul>
<li>基于分层次查询</li></ul>
<p>我认为的大致过程是这样的。首先，测试中执行代码：</p>
<pre><code class="lang-java"> Article article = articleMapper.selectArticleById1(7L);
</code></pre>
<p>Mybatis会找到相应mapper文件中的这部分代码：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectArticleById1&quot; parameterType=&quot;long&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id from t_article where id = #{id}
&lt;/select&gt;
</code></pre>
<p>Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：</p>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;

    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;                 select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;

&lt;/resultMap&gt;
</code></pre>
<p>中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：</p>
<pre><code class="lang-xml">&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;
</code></pre>
<p>接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。</p>
<ul>
<li>基于SQL表连接</li></ul>
<p>这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。</p>
<h2 id="h2-u6027u80FDu5BF9u6BD4"><a name="性能对比" class="reference-link"></a><span class="header-link octicon octicon-link"></span>性能对比</h2><p>首先我们先了解一下数据库表的结构和对应POJO对象：</p>
<h3 id="h3--"><a name="数据库表结构如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>数据库表结构如下：</h3><p><img src="http://cdn.alanliang.site/note/2.png" alt="avatat"></p>
<h3 id="h3-pojo-article-"><a name="POJO - Article(文章)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Article(文章)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article&quot;)
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
    ...
    @TableField(exist = false)
    private Category category;

    @TableField(exist = false)
    private List&lt;Tag&gt; tagList;
}
</code></pre>
<h3 id="h3-pojo-category-"><a name="POJO - Category(分类)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Category(分类)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_category&quot;)
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
    ...
}
</code></pre>
<h3 id="h3-pojo-tag-"><a name="POJO - Tag(标签)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - Tag(标签)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_tag&quot;)
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;

    ...
}
</code></pre>
<h3 id="h3-pojo-articletag-"><a name="POJO - ArticleTag(文章标签关联)如下：" class="reference-link"></a><span class="header-link octicon octicon-link"></span>POJO - ArticleTag(文章标签关联)如下：</h3><pre><code class="lang-java">@Data
@TableName(&quot;t_article_tag&quot;)
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}
</code></pre>
<p>需要特别说明一下的是，这里用到的<code><a href="https://github.com/Data" title="&#64;Data" class="at-link">@Data</a></code>注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a></code>、<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a></code>和 <code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a></code>是MyBatisPlus提供的注解，其中<code><a href="https://github.com/TableName" title="&#64;TableName" class="at-link">@TableName</a>(&quot;t_article&quot;)</code>指明该实体类(Article)对应数据库表t_article，<code><a href="https://github.com/TableId" title="&#64;TableId" class="at-link">@TableId</a>(type = IdType.AUTO)</code>指定该属性(id)是对应表的注解，主键策略为ID自增。<code><a href="https://github.com/TableField" title="&#64;TableField" class="at-link">@TableField</a>(exist = false)</code>指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 <a href="https://mp.baomidou.com/guide/annotation.html">https://mp.baomidou.com/guide/annotation.html</a></p>
<p>从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.alanliang.geekblog.mapper.ArticleMapper&quot;&gt;
    &lt;resultMap id=&quot;adminListResultMap&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
           ...
        &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
                     select=&quot;site.alanliang.geekblog.mapper.CategoryMapper.selectByCid&quot;/&gt;
        &lt;collection property=&quot;tagList&quot; column=&quot;id&quot; select=&quot;site.alanliang.geekblog.mapper.TagMapper.selectByArticleId&quot;/&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>
<p>其中\&lt;association\&gt;标签配置了Article与Category的级联关系，\&lt;collection\&gt;配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：</p>
<p>级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。</p>
<p>级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。</p>
<p>Mybatis中有3种级联：</p>
<ul>
<li>鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。</li><li>一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。</li><li>一对多（collection）：比如班级和学生就是一种一对多的级联。</li></ul>
<p>看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。</p>
<p>关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：</p>
<ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap1&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; column=&quot;category_id&quot;
               select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById&quot;/&gt;
    &lt;collection property=&quot;tagList&quot; column=&quot;id&quot;                          select=&quot;site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId&quot;/&gt;
&lt;/resultMap&gt;

&lt;select id=&quot;selectCategoryById&quot; resultType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
    select id, name from t_category where id = #{id}
&lt;/select&gt;

&lt;select id=&quot;listTagsByArticleId&quot; resultType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
&lt;/select&gt;

&lt;select id=&quot;listArticles1&quot; resultMap=&quot;resultMap1&quot;&gt;
    select id, title, category_id
    from t_article
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<p>3次执行结果：</p>
<pre><code>-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
</code></pre><ul>
<li>分层查询</li></ul>
<pre><code class="lang-xml">&lt;resultMap id=&quot;resultMap2&quot; type=&quot;site.alanliang.geekblog.domain.Article&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;title&quot; column=&quot;title&quot;/&gt;
    &lt;association property=&quot;category&quot; javaType=&quot;site.alanliang.geekblog.domain.Category&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/association&gt;
    &lt;collection property=&quot;tagList&quot; ofType=&quot;site.alanliang.geekblog.domain.Tag&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;id property=&quot;name&quot; column=&quot;name&quot;/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>
<pre><code class="lang-xml">&lt;select id=&quot;listArticles2&quot; resultMap=&quot;resultMap2&quot;&gt;
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
&lt;/select&gt;
</code></pre>
<pre><code class="lang-java">@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List&lt;Article&gt; articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println(&quot;-----执行时间为&quot;+(endTime-startTime)+&quot;ms-----&quot;);
    System.out.println(articles);
}
</code></pre>
<pre><code>-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
</code></pre><p>这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。</p>
<p>原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。</p>
<p>分层查询的时间分别是：</p>
<pre><code>-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
</code></pre><p>连接查询的时间分别是：</p>
<pre><code>-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
</code></pre><p>这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。</p>
<h2 id="h2-u603Bu7ED3"><a name="总结" class="reference-link"></a><span class="header-link octicon octicon-link"></span>总结</h2><ul>
<li><p>分层查询</p>
<p>优点：SQL语句简单，容易理解和维护；</p>
<p>缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）</p>
</li><li><p>连接查询</p>
<p>优点：消除了N+1问题，在进行大量数据查询时效率比较高</p>
<p>缺点：SQL语句复杂，不易理解和维护。</p>
</li></ul>
<p>总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。</p>
<p>以上结论均基于个人的理解和总结，如果有不当之处还望指正！</p>
(String), 
##基本介绍

最近在做一个基于SpringBoot+MybatisPlus博客系统的项目，在管理后台需要列出所有文章，效果是这样的：

![avatar](http://cdn.alanliang.site/note/1.png)

注意红色部分，查出文章的信息时，还需要查文章的分类和文章的标签。这很容易想到需要使用Mybatis的级联查询，但是在写mapper文件代码的时候，想到级联其实有两种方式：

- 基于分层次查询的
- 基于SQL表连接的

这样说，大家可能会觉得云里雾里的，啥叫分层次的，啥又叫SQL表连接的，这里给出代码，想必平时使用过Mybatis的小伙伴就会明白了。

- 基于分层次查询的

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" column="category_id"                 select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    
</resultMap>

<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>

<select id="selectArticleById1" parameterType="long" resultMap="resultMap1">
    select id, title, category_id from t_article where id = #{id}
</select>
```

- 基于SQL表连接的

```xml
<resultMap id="resultMap2" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" javaType="site.alanliang.geekblog.domain.Category">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </association>
    
</resultMap>

<select id="selectArticleById2" parameterType="long" resultMap="resultMap2">
    select ta.id, ta.title, tc.id, tc.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    where ta.id = #{aid}
</select>
```

注意association和select标签的区别。我平时比较粗心，根本没在意它们的区别，但是这次做项目的时候再次碰到，这次才引起了我的注意，也激起了我的好奇心，究竟它们的区别在哪呢？

查过资料后，我终于明白了：

分层次查询的方式是单表查询，首先发送1条SQL查询文章(Article)的信息，然后查询文章的分类(category)时再发送1条SQL，也就是查询1条文章记录需要发送2条SQL。

基于SQL表连接的方式是多表查询，在这里也就是Article表和Category表连接查询，只需要发送1条SQL。

我们做个测试，测试代码如下：

```java
@Autowired
private ArticleMapper articleMapper;

@Test
void selectArticleById1(){
    Article article = articleMapper.selectArticleById1(7L);
    System.out.println(article);
}

@Test
void selectArticleById2(){
    Article article = articleMapper.selectArticleById2(7L);
    System.out.println(article);
}
```

测试结果如下：

![avatar](http://cdn.alanliang.site/note/3.png)

![avatar](http://cdn.alanliang.site/note/4.png)

结果显而易见。

## 过程分析

- 基于分层次查询

我认为的大致过程是这样的。首先，测试中执行代码：

```java
 Article article = articleMapper.selectArticleById1(7L);
```

Mybatis会找到相应mapper文件中的这部分代码：

```xml
<select id="selectArticleById1" parameterType="long" resultMap="resultMap1">
    select id, title, category_id from t_article where id = #{id}
</select>
```

Mybatis发送完这条SQL语句，查询到字段id，title和category_id。将字段id和title映射至resultMap1中的相应属性，category_id后面会用到（注意！SQL语句中不能缺少这个字段，否则将查不到对应的category）而resultMap1中代码：

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    
    <association property="category" column="category_id"                 select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    
</resultMap>
```

中可发现还需要映射的属性有category，因此此时Mybatis会根据column属性的值，也就是对应Article表中的字段名（外键）category_id，拿到之前查出来的 category_id（这里是7），然后在把id值传到select属性对应的语句中：

```xml
<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>
```

接着发送这条SQL语句，返回结果后映射至category对象中id和name属性，最后完成所有属性的映射。

- 基于SQL表连接

这个比较好理解，直接就是多表连接查询。需要注意的是，当两个表中存在字段名一样的时候，需要给表起别名，我这里Article和Category的主键名字都是id，所以分别起了别名ta和tc，否则没有办法映射，Mybatis会报错。

##性能对比

首先我们先了解一下数据库表的结构和对应POJO对象：

###数据库表结构如下：

![avatat](http://cdn.alanliang.site/note/2.png)

###POJO - Article(文章)如下：

```java
@Data
@TableName("t_article")
public class Article {
    @TableId(type = IdType.AUTO)
    private Long id;
	...
    @TableField(exist = false)
    private Category category;
    
    @TableField(exist = false)
    private List<Tag> tagList;
}

```

### POJO - Category(分类)如下：

```java
@Data
@TableName("t_category")
public class Category {
    @TableId(type = IdType.AUTO)
    private Long id;
    
    private String name;
    ...
}

```

### POJO - Tag(标签)如下：

```java
@Data
@TableName("t_tag")
public class Tag {
    @TableId(type = IdType.AUTO)
    private Long id;

    private String name;
	
    ...
}

```

### POJO - ArticleTag(文章标签关联)如下：

```java
@Data
@TableName("t_article_tag")
public class ArticleTag {
    @TableId
    private Long articleId;
    @TableId
    private Long tagId;
}

```

需要特别说明一下的是，这里用到的`@Data`注解是一个叫lombok的插件提供的，使用这个注解作用在类上可以帮我们生成类的getter和setter方法等，因此代码中不需要写getter和setter。然后，为了简化，我把无关的属性剔除了。最后，`@TableName`、`@TableId`和 `@TableField`是MyBatisPlus提供的注解，其中`@TableName("t_article")`指明该实体类(Article)对应数据库表t_article，`@TableId(type = IdType.AUTO)`指定该属性(id)是对应表的注解，主键策略为ID自增。`@TableField(exist = false)`指明该属性在表中没有对应的字段，详细说明可以查看MybatisPlus官方文档 https://mp.baomidou.com/guide/annotation.html

从数据库结构中，我们很明显可以看到，文章(t_article)和分类(t_category)是多对一的关系，文章(t_article)和标签(t_tag)是一对多的关系，那么在配置文章的mapper文件(ArticleMapper)时可以这样配置，代码如下：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.alanliang.geekblog.mapper.ArticleMapper">
    <resultMap id="adminListResultMap" type="site.alanliang.geekblog.domain.Article">
        <id property="id" column="id"/>
       	...
        <association property="category" column="category_id"
                     select="site.alanliang.geekblog.mapper.CategoryMapper.selectByCid"/>
        <collection property="tagList" column="id" select="site.alanliang.geekblog.mapper.TagMapper.selectByArticleId"/>
    </resultMap>
</mapper>
```

其中\<association\>标签配置了Article与Category的级联关系，\<collection\>配置了Article与Tag的级联关系。说到级联我们先了解一下它的概念：

级联是一个数据库实体的概念。比如文章就需要存在标签与之对应，这样就有了文章标签表，一篇文章可能有多个标签，这就是一对多的级联；除此之外，还有一对一的级联，比如身份证和公民是一对一的关系。

级联不是必须的，级联的好处是获取关联数据十分便捷，但是级联过多会增加系统复杂度，同时降低系统的性能。

Mybatis中有3种级联：

- 鉴别器：它是一个根据某些条件决定采用具体实现类级联的方案，比如体检表要根据性别去区分。这里我们不讨论。
- 一对一（association）：比如学生证和学生就是一种一对一的级联，雇员和工牌表也是一种一对一级联。
- 一对多（collection）：比如班级和学生就是一种一对多的级联。

看到这里，有的小伙伴可能会疑惑，既然文章和分类是多对一关系，为啥用association？其实这里是站在文章的角度看的，一篇文章就对应一个分类，这不就是一对一级联关系了吗，但是站在分类的角度上看，一个分类有多篇文章，这就是一对多级联关系，在代码中就需要用到collection。总而言之，当POJO类中，其中一个属性是另外一个类的引用，这就需要association级联，而一个属性是一个集合的时候，这就需要collection级联。

关键来了，前面提到，级联方式有两种，一种是分层查询，一种是连接查询。那么对t_article进行全表查询，而且还需要查询Article的category和tagList，那么究竟哪个更快呢？假设有100个Article，1个Article有1个Category，1个Article有3个Tag，那么根据N+1问题，查询所有数据需要201条SQL（查询所有Article只需要1条，而查询Article的Category和Tag分别需要100条），而连接查询只需要1条，但是将4个表连接起来查询（t_article，t_category，t_article_tag, t_tag）规模好像也不小，感觉也不会太快，本人弱鸡不懂SQL底层，所以没有直观感觉。只好做一个测试：

- 分层查询

```xml
<resultMap id="resultMap1" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <association property="category" column="category_id"
               select="site.alanliang.geekblog.mapper.ArticleMapper.selectCategoryById"/>
    <collection property="tagList" column="id" 		             	select="site.alanliang.geekblog.mapper.ArticleMapper.listTagsByArticleId"/>
</resultMap>

<select id="selectCategoryById" resultType="site.alanliang.geekblog.domain.Category">
    select id, name from t_category where id = #{id}
</select>

<select id="listTagsByArticleId" resultType="site.alanliang.geekblog.domain.Tag">
    select tt.id, tt.name
    from t_tag tt
    left join t_article_tag tat
    on tt.id = tat.tag_id
    where tat.article_id = #{articleId}
</select>

<select id="listArticles1" resultMap="resultMap1">
    select id, title, category_id
    from t_article
</select>
```

```java
@Test
void listArticles1(){
    long startTime = System.currentTimeMillis();
    List<Article> articles = articleMapper.listArticles1();
    long endTime = System.currentTimeMillis();
    System.out.println("-----执行时间为"+(endTime-startTime)+"ms-----");
    System.out.println(articles);
}
```

3次执行结果：

```
-----执行时间为146ms-----
-----执行时间为143ms-----
-----执行时间为140ms-----
```

- 分层查询

```xml
<resultMap id="resultMap2" type="site.alanliang.geekblog.domain.Article">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
    <association property="category" javaType="site.alanliang.geekblog.domain.Category">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </association>
    <collection property="tagList" ofType="site.alanliang.geekblog.domain.Tag">
        <id property="id" column="id"/>
        <id property="name" column="name"/>
    </collection>
</resultMap>
```

```xml
<select id="listArticles2" resultMap="resultMap2">
    select ta.id, ta.title, ta.type, ta.comments, ta.views, ta.likes, ta.published, ta.appreciable, ta.commentable, ta.top, ta.recommend, ta.create_time, ta.update_time,
    tc.id, tc.name, tt.id, tt.name
    from t_article ta
    inner join t_category tc
    on ta.category_id = tc.id
    inner join t_article_tag tat
    on ta.id = tat.article_id
    inner join t_tag tt
    on tat.tag_id = tt.id
</select>
```

```java
@Test
void listArticles2(){
    long startTime = System.currentTimeMillis();
    List<Article> articles = articleMapper.listArticles2();
    long endTime = System.currentTimeMillis();
    System.out.println("-----执行时间为"+(endTime-startTime)+"ms-----");
    System.out.println(articles);
}
```

```
-----执行时间为99ms-----
-----执行时间为112ms-----
-----执行时间为97ms-----
```

这里的数据确保了每个Article都只有1个Category，每个Article都至少有1个Tag。可以看出连接查询比分层查询快了50%左右。

原来的数据是我项目里，记录总共大概只有二三十多条，为了进一步测试，所以再增加记录1000条。

分层查询的时间分别是：

```
-----执行时间为2187ms-----
-----执行时间为2275ms-----
-----执行时间为2165ms-----
```

连接查询的时间分别是：

```
-----执行时间为230ms-----
-----执行时间为188ms-----
-----执行时间为186ms-----
```

这里的差距就很明显了，连接查询所需要的时间只需要分层查询的10%，可以看出需要查询所有数据，进行全表关联查询时，连接查询方式速度更快。但是连接查询有个很明显的缺点，就是SQL语句复杂，日后维护起来比较困难。

## 总结

- 分层查询

  优点：SQL语句简单，容易理解和维护；

  缺点：存在N+1问题，在进行大量数据查询时效率慢（当然这可以通过延迟加载和分页等进行优化）

- 连接查询

  优点：消除了N+1问题，在进行大量数据查询时效率比较高

  缺点：SQL语句复杂，不易理解和维护。

总而言之，连接查询一般用于那些比较简单且关联不多的场景下，在这种场景下效率更高。而分层查询获取关联数据十分便捷，但如果层次过多也会增加系统的复杂度，同时降低系统的性能，一般当级联的层级超过3层时就不考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、复杂和难以维护，在现实的使用过程中，要根据实际情况判断使用。按照我的理解，分层查询像一棵树的层次遍历，复杂度随着层次纵向增加而快速增加。而连接查询的复杂度随着表数量的增加而横向扩展。具体使用还需要结合实际情况。

以上结论均基于个人的理解和总结，如果有不当之处还望指正！

(String), http://cdn.alanliang.site/landscape5.jpg(String), 0(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean), false(Boolean), 6(Long), 1(Integer), 2020-06-15 16:03:01.972(Timestamp), 2020-06-15 16:03:01.972(Timestamp), 4(Integer), 1(Integer)
2020-06-15 16:03:01.990 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.geekblog.dao.ArticleMapper.insert    : <==    Updates: 1
2020-06-15 16:03:01.991 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==>  Preparing: insert into t_article_tag( article_id, tag_id ) values (?,?) , (?,?) 
2020-06-15 16:03:01.992 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : ==> Parameters: 13(Long), 12(Long), 13(Long), 15(Long)
2020-06-15 16:03:01.994 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleTagMapper.insertBatch   : <==    Updates: 2
2020-06-15 16:03:02.942 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:03:02.942 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:03:02.941(Timestamp), 新增文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.save()(String), { article: ... }(String), 0:0:0:0:0:0:0:1(String), 967(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:03:02.944 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:03:04.792 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 16:03:04.794 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 16:03:04.797 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 16:03:04.798 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:03:04.823 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 13
2020-06-15 16:03:04.824 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.825 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 16:03:04.826 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 16:03:04.827 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.828 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 16:03:04.829 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:03:04.831 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.831 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 16:03:04.832 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:03:04.833 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.833 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 16:03:04.834 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:03:04.835 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.835 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 16:03:04.837 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:03:04.840 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.841 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 16:03:04.842 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:03:04.844 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.844 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 16:03:04.846 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:03:04.848 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.850 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 16:03:04.852 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:03:04.853 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.853 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:03:04.854 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:03:04.855 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.855 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 16:03:04.856 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 16:03:04.857 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.857 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 16:03:04.858 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:03:04.859 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.859 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 16:03:04.860 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 16:03:04.861 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:03:04.861 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 13(Long)
2020-06-15 16:03:04.863 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:03:04.870 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:03:04.871 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:03:04.87(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 79(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:03:04.872 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:03:12.505 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:03:12.506 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:03:12.505(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 2(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:03:12.506 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:03:26.430 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:03:26.430 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:03:26.428(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:03:26.431 DEBUG 15444 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:03:26.680 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 16:03:26.681 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 16:03:26.689 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 16:03:27.127 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 16:03:27.127 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 16:03:27.129 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:03:27.132 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 16:03:27.132 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 16:03:27.134 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 16:03:27.138 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 16:03:27.139 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 16:03:27.143 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 16:03:27.148 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 16:03:27.148 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 16:03:27.149 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:03:27.153 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 16:03:27.154 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 16:03:27.155 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 16:03:27.162 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 16:03:27.163 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 16:03:27.164 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 16:03:27.180 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 16:03:27.180 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:03:27.180 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 16:03:27.181 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:03:27.165(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 2(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:03:27.183 DEBUG 15444 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:03:27.183 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:03:27.187 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 16:03:27.187 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 16:03:27.190 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:03:27.196 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 16:03:27.196 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 16:03:27.198 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 16:03:27.199 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 16:03:27.199 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 16:03:27.201 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 16:03:27.204 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 16:03:27.204 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 16:03:27.205 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 16:03:27.212 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 16:03:27.212 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 16:03:27.213 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 16:03:27.216 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 16:03:27.216 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 16:03:27.218 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 16:03:27.220 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:03:27.220 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 16:03:27.280 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 16:03:27.281 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:03:27.282 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 16:03:27.366 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 16:03:27.406 ERROR 15444 --- [http-nio-8889-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$db524905.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$4e17e713.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 16:03:27.477  WARN 15444 --- [http-nio-8889-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 16:10:49.116 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 16:10:49.117 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 16:10:49.119 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 16:10:49.121 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 16:10:49.121 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 16:10:49.126 DEBUG 15444 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 16:10:49.285  INFO 15444 --- [http-nio-8889-exec-7] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 16:10:51.369 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:10:51.370 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:10:51.368(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:10:51.372 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:10:52.080 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 16:10:52.080 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 16:10:52.081 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:10:52.084 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 16:10:52.084 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 16:10:52.085 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 16:10:52.087 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 16:10:52.087 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 16:10:52.089 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 16:10:52.092 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:10:52.092 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 16:10:52.147 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 16:10:52.148 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:10:52.149 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 16:10:52.226 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 16:10:52.226 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:10:52.227 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:10:52.230 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:10:52.232 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:10:52.233 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 12:09:32.0(Timestamp), 2020-06-15 16:10:52.231(Timestamp)
2020-06-15 16:10:52.235 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:10:52.235 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:10:52.235 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:10:52.240 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:10:52.242 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:10:52.243 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 12:09:32.0(Timestamp), 2020-06-15 16:10:52.24(Timestamp)
2020-06-15 16:10:52.243 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:10:52.245 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:10:52.246 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:10:52.248 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:10:52.250 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:10:52.250 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 12:09:32.0(Timestamp), 2020-06-15 16:10:52.249(Timestamp)
2020-06-15 16:10:52.252 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:10:52.253 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:10:52.253 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:10:52.254 DEBUG 15444 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:10:52.263 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:10:52.265 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 12:09:32.0(Timestamp), 2020-06-15 16:10:52.254(Timestamp)
2020-06-15 16:10:52.266 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:10:52.269 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 16:10:52.270 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 16:10:52.271 DEBUG 15444 --- [http-nio-8889-exec-3] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 16:11:00.892 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==>  Preparing: SELECT id,name FROM t_category 
2020-06-15 16:11:00.892 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : ==> Parameters: 
2020-06-15 16:11:00.895 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectList      : <==      Total: 6
2020-06-15 16:11:00.912 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:11:00.913 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:11:00.909(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:11:00.914 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:11:09.809 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:11:09.810 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:11:09.808(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:11:09.811 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:11:10.629 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 16:11:10.629 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 16:11:10.631 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:11:10.633 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 16:11:10.634 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 16:11:10.635 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 16:11:10.637 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 16:11:10.637 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 16:11:10.640 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 16:11:10.646 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:11:10.647 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 16:11:10.668 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:11:10.669 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:11:10.667(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:11:10.670 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:11:10.700 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 16:11:10.701 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:11:10.701 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 16:11:10.762 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 16:11:10.763 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:11:10.763 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:11:10.764 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:11:10.765 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:11:10.765 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 16:10:51.0(Timestamp), 2020-06-15 16:11:10.764(Timestamp)
2020-06-15 16:11:10.768 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:11:10.768 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:11:10.768 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:11:10.769 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:11:10.771 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:11:10.772 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 16:10:51.0(Timestamp), 2020-06-15 16:11:10.77(Timestamp)
2020-06-15 16:11:10.775 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:11:10.775 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:11:10.776 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:11:10.777 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:11:10.779 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:11:10.779 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 16:10:51.0(Timestamp), 2020-06-15 16:11:10.777(Timestamp)
2020-06-15 16:11:10.781 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:11:10.781 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:11:10.781 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:11:10.782 DEBUG 15444 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:11:10.783 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:11:10.784 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 16:10:51.0(Timestamp), 2020-06-15 16:11:10.782(Timestamp)
2020-06-15 16:11:10.786 DEBUG 15444 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:11:29.881 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:11:29.882 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:11:29.881(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:11:29.885 DEBUG 15444 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:11:31.157 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 16:11:31.157 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 16:11:31.159 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:11:31.162 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 16:11:31.163 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 16:11:31.164 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 16:11:31.166 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 16:11:31.166 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 16:11:31.167 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 16:11:31.171 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:11:31.172 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 16:11:31.195 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:11:31.195 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:11:31.194(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 3(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:11:31.197 DEBUG 15444 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:11:31.227 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 16:11:31.228 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:11:31.229 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 16:11:31.288 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 16:11:31.289 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:11:31.289 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:11:31.290 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:11:31.291 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:11:31.291 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 16:11:10.0(Timestamp), 2020-06-15 16:11:31.29(Timestamp)
2020-06-15 16:11:31.294 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:11:31.295 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:11:31.295 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:11:31.296 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:11:31.298 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:11:31.298 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 16:11:10.0(Timestamp), 2020-06-15 16:11:31.296(Timestamp)
2020-06-15 16:11:31.300 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:11:31.301 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:11:31.301 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:11:31.303 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:11:31.306 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:11:31.307 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 16:11:10.0(Timestamp), 2020-06-15 16:11:31.303(Timestamp)
2020-06-15 16:11:31.308 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:11:31.309 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:11:31.309 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:11:31.310 DEBUG 15444 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:11:31.311 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:11:31.311 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 16:11:10.0(Timestamp), 2020-06-15 16:11:31.31(Timestamp)
2020-06-15 16:11:31.312 DEBUG 15444 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:13:20.458  INFO 11456 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 11456 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 16:13:20.470 DEBUG 11456 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 16:13:20.472  INFO 11456 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 16:13:20.571  INFO 11456 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 16:13:20.572  INFO 11456 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 16:13:22.838  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 16:13:22.847  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 16:13:23.234  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 363ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 16:13:23.272  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 16:13:23.278  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 16:13:23.331  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 50ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 16:13:23.349  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 16:13:23.352  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 16:13:23.381  INFO 11456 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 16:13:23.381  INFO 11456 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-06-15 16:13:23.987  INFO 11456 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:13:24.244  INFO 11456 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:13:24.249  INFO 11456 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4845c386' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:13:24.253  INFO 11456 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:13:24.266  INFO 11456 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:13:24.283  INFO 11456 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$311a8c26] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:13:24.921  INFO 11456 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 16:13:24.942  INFO 11456 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 16:13:24.943  INFO 11456 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 16:13:25.429  INFO 11456 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 16:13:25.430  INFO 11456 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4856 ms
2020-06-15 16:13:25.621  INFO 11456 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 16:13:25.622  INFO 11456 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 16:13:25.644 DEBUG 11456 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 16:13:25.841  INFO 11456 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 16:13:26.715  INFO 11456 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 16:13:29.845  WARN 11456 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:13:29.846  WARN 11456 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:13:29.847  WARN 11456 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:13:29.847  WARN 11456 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:13:29.895  WARN 11456 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:13:29.896  WARN 11456 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:13:29.896  WARN 11456 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:13:29.896  WARN 11456 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:13:30.201  INFO 11456 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 16:13:30.993  WARN 11456 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 16:13:33.749  INFO 11456 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 16:13:33.787  INFO 11456 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 16:13:34.326  INFO 11456 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@729cabb5, org.springframework.security.web.context.SecurityContextPersistenceFilter@4dccee6e, org.springframework.security.web.header.HeaderWriterFilter@59a68a0b, org.springframework.security.web.authentication.logout.LogoutFilter@139665a0, site.alanliang.geekblog.security.ValidateCodeFilter@4fc56c0f, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@43a19cf0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1fb8a167, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@534ae8e6, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@14bb42d1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@682fc1a7, org.springframework.security.web.session.SessionManagementFilter@17c48780, org.springframework.security.web.access.ExceptionTranslationFilter@4b6f8288, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4cb6df1]
2020-06-15 16:13:34.511  INFO 11456 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 16:13:35.911  INFO 11456 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 16:13:35.936  INFO 11456 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 16:13:36.119  INFO 11456 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 16:13:36.481  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 16:13:36.482  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 16:13:36.490  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 16:13:36.492  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 16:13:36.493  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 16:13:36.495  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 16:13:36.496  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 16:13:36.500  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 16:13:36.501  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 16:13:36.537  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 16:13:36.540  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 16:13:36.543  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 16:13:36.553  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 16:13:36.555  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 16:13:36.559  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 16:13:36.560  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 16:13:36.563  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 16:13:36.565  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 16:13:36.567  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 16:13:36.569  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 16:13:36.572  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 16:13:36.573  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 16:13:36.577  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 16:13:36.580  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 16:13:36.581  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 16:13:36.585  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 16:13:36.585  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 16:13:36.588  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 16:13:36.589  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 16:13:36.592  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 16:13:36.594  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 16:13:36.599  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 16:13:36.600  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 16:13:36.606  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 16:13:36.607  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 16:13:36.610  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 16:13:36.611  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 16:13:36.615  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 16:13:36.616  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 16:13:36.617  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 16:13:36.618  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 16:13:36.619  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 16:13:36.622  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 16:13:36.625  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 16:13:36.625  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 16:13:36.628  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 16:13:36.629  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 16:13:36.646  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 16:13:36.650  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 16:13:36.653  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 16:13:36.660  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 16:13:36.667  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 16:13:36.669  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 16:13:36.672  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 16:13:36.675  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 16:13:36.678  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 16:13:36.693  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 16:13:36.698  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 16:13:36.701  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 16:13:36.703  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 16:13:36.707  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 16:13:36.714  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 16:13:36.718  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 16:13:36.721  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 16:13:36.741  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 16:13:36.750  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 16:13:36.752  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 16:13:36.757  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 16:13:36.760  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 16:13:36.764  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 16:13:36.775  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 16:13:36.779  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 16:13:36.782  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 16:13:36.783  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 16:13:36.795  INFO 11456 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 16:13:36.851  INFO 11456 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 16:13:36.857  INFO 11456 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 17.973 seconds (JVM running for 19.713)
2020-06-15 16:14:42.896  INFO 18588 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 18588 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 16:14:42.900 DEBUG 18588 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 16:14:42.901  INFO 18588 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 16:14:42.951  INFO 18588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 16:14:42.952  INFO 18588 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 16:14:44.585  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 16:14:44.588  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 16:14:44.835  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 241ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 16:14:44.849  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 16:14:44.850  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 16:14:44.876  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 26ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 16:14:44.892  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 16:14:44.894  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 16:14:44.919  INFO 18588 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 16:14:44.920  INFO 18588 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces.
2020-06-15 16:14:45.424  INFO 18588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:14:45.595  INFO 18588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:14:45.598  INFO 18588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@219e0ccd' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:14:45.602  INFO 18588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:14:45.625  INFO 18588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:14:45.667  INFO 18588 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$652b969] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 16:14:46.439  INFO 18588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 16:14:46.469  INFO 18588 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 16:14:46.470  INFO 18588 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 16:14:46.635  INFO 18588 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 16:14:46.636  INFO 18588 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3684 ms
2020-06-15 16:14:46.868  INFO 18588 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 16:14:46.872  INFO 18588 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 16:14:46.905 DEBUG 18588 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 16:14:47.038  INFO 18588 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 16:14:48.200  INFO 18588 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 16:14:51.120  WARN 18588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:14:51.122  WARN 18588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:14:51.123  WARN 18588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:14:51.123  WARN 18588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:14:51.173  WARN 18588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:14:51.174  WARN 18588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:14:51.174  WARN 18588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:14:51.174  WARN 18588 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 16:14:51.515  INFO 18588 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 16:14:51.772  WARN 18588 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 16:14:54.522  INFO 18588 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 16:14:54.600  INFO 18588 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 16:14:55.187  INFO 18588 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@316d9cfe, org.springframework.security.web.context.SecurityContextPersistenceFilter@5d97836f, org.springframework.security.web.header.HeaderWriterFilter@4860fb41, org.springframework.security.web.authentication.logout.LogoutFilter@e4afbab, site.alanliang.geekblog.security.ValidateCodeFilter@5342f3cb, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3e7ad920, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@371d34fb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@69fc05b5, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@6230f694, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6608cda, org.springframework.security.web.session.SessionManagementFilter@79c18a60, org.springframework.security.web.access.ExceptionTranslationFilter@3b8b1d28, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7b40a955]
2020-06-15 16:14:55.358  INFO 18588 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 16:14:56.431  INFO 18588 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 16:14:56.472  INFO 18588 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 16:14:56.712  INFO 18588 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 16:14:56.993  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 16:14:56.994  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 16:14:56.999  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 16:14:57.001  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 16:14:57.003  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 16:14:57.005  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 16:14:57.006  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 16:14:57.009  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 16:14:57.011  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 16:14:57.045  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 16:14:57.047  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 16:14:57.050  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 16:14:57.062  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 16:14:57.063  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 16:14:57.065  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 16:14:57.067  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 16:14:57.071  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 16:14:57.073  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 16:14:57.074  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 16:14:57.076  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 16:14:57.079  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 16:14:57.080  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 16:14:57.083  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 16:14:57.087  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 16:14:57.090  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 16:14:57.094  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 16:14:57.095  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 16:14:57.097  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 16:14:57.098  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 16:14:57.102  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 16:14:57.104  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 16:14:57.109  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 16:14:57.111  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 16:14:57.116  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 16:14:57.118  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 16:14:57.122  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 16:14:57.123  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 16:14:57.126  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 16:14:57.128  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 16:14:57.130  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 16:14:57.132  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 16:14:57.133  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 16:14:57.136  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 16:14:57.140  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 16:14:57.141  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 16:14:57.143  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 16:14:57.145  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 16:14:57.155  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 16:14:57.157  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 16:14:57.159  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 16:14:57.162  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 16:14:57.165  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 16:14:57.166  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 16:14:57.168  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 16:14:57.170  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 16:14:57.171  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 16:14:57.177  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 16:14:57.179  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 16:14:57.181  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 16:14:57.182  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 16:14:57.182  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 16:14:57.186  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 16:14:57.187  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 16:14:57.188  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 16:14:57.195  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 16:14:57.199  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 16:14:57.201  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 16:14:57.202  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 16:14:57.204  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 16:14:57.206  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 16:14:57.210  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 16:14:57.212  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 16:14:57.213  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 16:14:57.215  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 16:14:57.220  INFO 18588 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 16:14:57.259  INFO 18588 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 16:14:57.261  INFO 18588 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 15.213 seconds (JVM running for 16.429)
2020-06-15 16:15:01.441  INFO 18588 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 16:15:01.441  INFO 18588 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 16:15:01.463  INFO 18588 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2020-06-15 16:15:01.629 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 16:15:01.862 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 16:15:01.910 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 16:15:01.966 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 16:15:02.019 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 16:15:02.043 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 16:15:15.942 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 16:15:15.943 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 16:15:15.945 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 16:15:15.946 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 16:15:15.946 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 16:15:15.955 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 16:15:16.068  INFO 18588 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 16:15:18.326 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:15:18.339 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:15:18.321(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:15:18.342 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:15:18.995  INFO 18588 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 16:15:19.001  INFO 18588 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 16:15:20.167 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 16:15:20.186 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 16:15:20.207 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 16:15:20.654 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 16:15:20.655 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 16:15:20.657 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:15:20.667 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 16:15:20.668 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 16:15:20.670 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 16:15:20.685 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 16:15:20.686 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 16:15:20.687 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 16:15:20.695 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 16:15:20.697 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 16:15:20.698 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:15:20.706 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 16:15:20.708 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 16:15:20.709 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 16:15:20.719 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 16:15:20.719 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 16:15:20.722 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 16:15:20.728 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 16:15:20.731 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 16:15:20.733 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:15:20.739 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 16:15:20.740 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 16:15:20.742 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:15:20.749 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 16:15:20.751 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 16:15:20.755 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 16:15:20.758 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 16:15:20.759 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 16:15:20.766 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 16:15:20.770 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 16:15:20.771 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 16:15:20.773 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 0
2020-06-15 16:15:20.784 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 16:15:20.785 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 16:15:20.787 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 16:15:20.793 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 16:15:20.793 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 16:15:20.798 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 16:15:20.810 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:15:20.821 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 16:15:20.870 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 16:15:20.872 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:15:20.875 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 16:15:20.944 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 16:15:20.950 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:15:20.952 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:15:20.954 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:15:20.957 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:15:20.959 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 16:11:30.0(Timestamp), 2020-06-15 16:15:20.954(Timestamp)
2020-06-15 16:15:20.962 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:15:20.967 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:15:20.968 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:15:20.970 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:15:20.973 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:15:20.975 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 16:11:30.0(Timestamp), 2020-06-15 16:15:20.97(Timestamp)
2020-06-15 16:15:20.977 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:15:20.980 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:15:20.981 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:15:20.984 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:15:20.986 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:15:20.988 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 16:11:30.0(Timestamp), 2020-06-15 16:15:20.984(Timestamp)
2020-06-15 16:15:20.990 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:15:20.991 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:15:20.992 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:15:20.993 DEBUG 18588 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:15:20.997 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:15:21.000 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 16:11:30.0(Timestamp), 2020-06-15 16:15:20.993(Timestamp)
2020-06-15 16:15:21.001 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:15:56.100 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 16:15:56.101 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 16:15:56.116 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 16:15:56.119 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:15:56.254 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 13
2020-06-15 16:15:56.275 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.278 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 16:15:56.281 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 16:15:56.288 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.289 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 16:15:56.292 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:15:56.293 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.294 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 16:15:56.297 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:15:56.299 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.299 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 16:15:56.301 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:15:56.304 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.306 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 16:15:56.308 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:15:56.312 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.313 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 16:15:56.315 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:15:56.317 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.317 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 16:15:56.319 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:15:56.322 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.323 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 16:15:56.324 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:15:56.326 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.327 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:15:56.331 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:15:56.332 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.333 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 16:15:56.335 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 16:15:56.338 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.339 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 16:15:56.341 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:15:56.344 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.344 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 16:15:56.348 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 16:15:56.349 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:15:56.350 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 13(Long)
2020-06-15 16:15:56.351 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:15:56.360 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:15:56.365 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:15:56.358(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 322(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:15:56.367 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:16:04.237 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET status=? WHERE id=? 
2020-06-15 16:16:04.244 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 13(Long)
2020-06-15 16:16:04.248 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:16:04.329 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT id,title,summary,content,published,status FROM t_article WHERE (id = ?) 
2020-06-15 16:16:04.330 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 13(Long)
2020-06-15 16:16:04.336 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:16:04.613 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:16:04.614 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:16:04.612(Timestamp), 审核文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.audit()(String), { auditVO: AuditVO(id=13, status=2) }(String), 0:0:0:0:0:0:0:1(String), 382(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:16:04.616 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:16:04.645 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 16:16:04.646 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 
2020-06-15 16:16:04.648 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==>  Preparing: select ta.id, ta.title, ta.type, ta.cover, ta.comments, ta.views, ta.likes, ta.published, ta.commentable, ta.appreciable,ta.top, ta.recommend, ta.status, ta.sort, ta.create_time, ta.update_time, tc.id as cid, tc.name as cname, tc.color, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id LIMIT ?,? 
2020-06-15 16:16:04.648 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:16:04.693 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.listTableByPage  : <==      Total: 13
2020-06-15 16:16:04.696 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.696 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 16:16:04.698 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 16:16:04.700 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.700 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 16:16:04.703 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:04.705 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.705 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 16:16:04.710 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:04.713 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.713 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 16:16:04.715 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:04.716 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.717 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 16:16:04.720 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:04.722 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.722 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 16:16:04.726 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:04.728 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.728 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 16:16:04.730 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:04.731 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.731 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 16:16:04.733 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:16:04.735 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.735 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:16:04.738 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:04.742 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.743 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 16:16:04.744 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 16:16:04.746 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.746 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 16:16:04.748 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:16:04.749 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.749 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 16:16:04.751 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 16:16:04.754 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:04.754 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 13(Long)
2020-06-15 16:16:04.756 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:16:04.765 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:16:04.765 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:16:04.763(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 120(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:16:04.767 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:16:12.520 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 16:16:12.521 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 16:16:12.524 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 16:16:12.526 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 16:16:12.527 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 16:16:12.531 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 16:16:26.859 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 16:16:26.860 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 16:16:26.869 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 16:16:26.870 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 16:16:26.870 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 16:16:26.873 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 16:16:26.991  INFO 18588 --- [http-nio-8889-exec-6] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 16:16:29.089 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:16:29.089 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:16:29.088(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:16:29.092 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:16:29.313 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 16:16:29.316 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 3(Long)
2020-06-15 16:16:29.320 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 11
2020-06-15 16:16:29.623 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 16:16:29.624 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 16:16:29.627 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:16:29.645 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 16:16:29.648 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 16:16:29.651 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:16:29.657 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 16:16:29.658 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 16:16:29.671 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 16:16:29.674 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 16:16:29.675 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 16:16:29.688 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 16:16:29.701 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 16:16:29.702 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 16:16:29.708 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 16:16:29.716 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:16:29.718 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 16:16:29.795 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 16:16:29.799 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:16:29.801 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 16:16:29.901 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 16:16:29.902 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:16:29.902 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 16:16:29.904 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:16:29.907 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:16:29.909 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 12:17:58.0(Timestamp), 2020-06-15 16:16:29.905(Timestamp)
2020-06-15 16:16:29.912 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:16:29.916 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:16:29.917 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 16:16:29.920 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:16:29.923 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:16:29.926 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 12:17:58.0(Timestamp), 2020-06-15 16:16:29.92(Timestamp)
2020-06-15 16:16:29.931 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:16:29.933 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:16:29.933 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 16:16:29.936 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:16:29.940 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:16:29.941 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 12:17:58.0(Timestamp), 2020-06-15 16:16:29.936(Timestamp)
2020-06-15 16:16:29.944 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:16:29.948 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:16:29.948 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 16:16:29.951 DEBUG 18588 --- [http-nio-8889-exec-3] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:16:29.954 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:16:29.955 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 12:17:58.0(Timestamp), 2020-06-15 16:16:29.951(Timestamp)
2020-06-15 16:16:29.958 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:16:38.966 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:16:38.967 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:16:38.965(Timestamp), 查询文章(String), INFO(String), site.alanliang.geekblog.controller.admin.ArticleController.listTableByPage()(String), { page: 1 limit: 15 articleQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 37(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:16:38.969 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:16:50.089 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,cover FROM t_article WHERE (top = ? AND published = ? AND status = ?) ORDER BY sort DESC limit 6 
2020-06-15 16:16:50.092 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: true(Boolean), true(Boolean), 2(Integer)
2020-06-15 16:16:50.094 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 5
2020-06-15 16:16:50.098 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.recommend = 1 and ta.published = 1 and ta.status = 2 order by ta.sort desc limit ? 
2020-06-15 16:16:50.099 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : ==> Parameters: 4(Integer)
2020-06-15 16:16:50.101 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.listRecommend    : <==      Total: 4
2020-06-15 16:16:50.119 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 16:16:50.120 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 16:16:50.122 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 16:16:50.124 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 0(Long), 6(Long)
2020-06-15 16:16:50.138 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 16:16:50.139 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:50.141 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:16:50.144 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:50.144 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:50.145 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 16:16:50.146 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:50.147 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:50.147 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 16:16:50.148 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:50.149 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:50.149 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 16:16:50.150 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:50.151 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:50.151 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 13(Long)
2020-06-15 16:16:50.153 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:16:50.155 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:50.155 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 16:16:50.158 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:16:50.163 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:16:50.164 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:16:50.162(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 79(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:16:50.166 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:16:55.243 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_article ta WHERE ta.published = 1 AND ta.status = 2 
2020-06-15 16:16:55.244 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 
2020-06-15 16:16:55.246 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.published = 1 and ta.status = 2 order by ta.sort desc, ta.create_time desc LIMIT ?,? 
2020-06-15 16:16:55.246 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : ==> Parameters: 6(Long), 6(Long)
2020-06-15 16:16:55.256 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.ArticleMapper.listPreviewByPage  : <==      Total: 6
2020-06-15 16:16:55.260 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:55.261 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 16:16:55.264 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:55.265 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:55.265 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 16:16:55.267 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:55.268 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:55.268 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 16:16:55.270 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:16:55.271 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:55.273 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 16:16:55.276 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 16:16:55.277 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:55.278 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 16:16:55.279 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:16:55.281 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:16:55.281 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 16:16:55.283 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 16:17:05.533 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-06-15 16:17:05.534 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-06-15 16:17:05.539 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 16
2020-06-15 16:17:05.545 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:17:05.546 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:17:05.545(Timestamp), 访问标签页(String), INFO(String), site.alanliang.geekblog.controller.front.TagsController.tags()(String), { }(String), 0:0:0:0:0:0:0:1(String), 13(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:17:05.547 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:17:07.318 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-06-15 16:17:07.320 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-06-15 16:17:07.323 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.C.listByArticleCount             : <==      Total: 6
2020-06-15 16:17:07.331 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:17:07.332 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:17:07.33(Timestamp), 访问分类页面(String), INFO(String), site.alanliang.geekblog.controller.front.CategoriesController.categories()(String), { }(String), 0:0:0:0:0:0:0:1(String), 13(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:17:07.334 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:17:14.632 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.countByDate      : ==>  Preparing: select year(create_time) 'year' , month(create_time) 'month', day(create_time) 'day' , count(id) 'articleCount' from t_article where create_time >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) and published = 1 and status = 2 group by year(create_time) ,month(create_time), day(create_time) 
2020-06-15 16:17:14.635 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.countByDate      : ==> Parameters: 
2020-06-15 16:17:14.639 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.countByDate      : <==      Total: 2
2020-06-15 16:17:14.651 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 16:17:14.653 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 
2020-06-15 16:17:14.654 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id and ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-15 16:17:14.656 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 0(Long), 6(Long)
2020-06-15 16:17:14.667 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.d.A.listPreviewPageByDate          : <==      Total: 6
2020-06-15 16:17:14.670 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:14.671 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 13(Long)
2020-06-15 16:17:14.673 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:17:14.674 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:14.674 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 12(Long)
2020-06-15 16:17:14.677 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 1
2020-06-15 16:17:14.678 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:14.678 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 11(Long)
2020-06-15 16:17:14.680 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:17:14.681 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:14.681 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 16:17:14.682 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 16:17:14.684 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:14.685 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:17:14.688 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:17:14.690 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:14.690 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 16:17:14.692 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:17:14.700 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:17:14.702 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:17:14.699(Timestamp), 访问归档页面(String), INFO(String), site.alanliang.geekblog.controller.front.ArchivesController.archives()(String), { dateFilterType: null }(String), 0:0:0:0:0:0:0:1(String), 69(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:17:14.705 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:17:26.070 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 16:17:26.070 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 
2020-06-15 16:17:26.072 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id and ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-15 16:17:26.072 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 6(Long), 6(Long)
2020-06-15 16:17:26.080 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.listPreviewPageByDate          : <==      Total: 6
2020-06-15 16:17:26.083 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:26.084 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 7(Long)
2020-06-15 16:17:26.087 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:17:26.090 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:26.090 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 6(Long)
2020-06-15 16:17:26.091 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:17:26.093 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:26.093 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 5(Long)
2020-06-15 16:17:26.094 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:17:26.095 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:26.095 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 4(Long)
2020-06-15 16:17:26.097 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:17:26.100 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:26.100 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 3(Long)
2020-06-15 16:17:26.103 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:17:26.105 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:26.105 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 2(Long)
2020-06-15 16:17:26.107 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:17:30.627 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: SELECT COUNT(1) FROM t_article ta 
2020-06-15 16:17:30.627 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 
2020-06-15 16:17:30.631 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByDate          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id and ta.published = 1 and ta.status = 2 order by ta.create_time desc LIMIT ?,? 
2020-06-15 16:17:30.632 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByDate          : ==> Parameters: 12(Long), 6(Long)
2020-06-15 16:17:30.635 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.d.A.listPreviewPageByDate          : <==      Total: 1
2020-06-15 16:17:30.637 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:17:30.637 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 1(Long)
2020-06-15 16:17:30.639 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 5
2020-06-15 16:17:33.007 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.listRootByPage   : ==>  Preparing: SELECT COUNT(1) FROM t_message WHERE pid = 0 AND status <> 0 
2020-06-15 16:17:33.008 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.listRootByPage   : ==> Parameters: 
2020-06-15 16:17:33.011 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MessageMapper.listAll   : ==>  Preparing: select tm1.id, tm1.pid, tm1.content, tm1.nickname, tm1.avatar, tm1.link, tm1.create_time, tm1.browser, tm1.os, tm1.address, tm2.nickname as parent_nickname from t_message tm1 left join (select id, nickname from t_message) tm2 on tm1.pid = tm2.id where tm1.status <> 0 order by tm1.create_time DESC 
2020-06-15 16:17:33.012 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MessageMapper.listAll   : ==> Parameters: 
2020-06-15 16:17:33.016 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.MessageMapper.listAll   : <==      Total: 0
2020-06-15 16:17:33.023 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link WHERE (status = ?) 
2020-06-15 16:17:33.024 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer)
2020-06-15 16:17:37.358 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.PhotoMapper.selectList  : ==>  Preparing: SELECT url,description FROM t_photo WHERE (display = ?) ORDER BY sort ASC 
2020-06-15 16:17:37.359 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.PhotoMapper.selectList  : ==> Parameters: 1(Integer)
2020-06-15 16:17:37.364 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.PhotoMapper.selectList  : <==      Total: 0
2020-06-15 16:17:37.370 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.countByDate      : ==>  Preparing: select year(create_time) 'year' , month(create_time) 'month' , count(id) 'articleCount' from t_article where create_time >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) and published = 1 and status = 2 group by year(create_time) ,month(create_time) 
2020-06-15 16:17:37.372 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.countByDate      : ==> Parameters: 
2020-06-15 16:17:37.373 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.countByDate      : <==      Total: 1
2020-06-15 16:17:37.380 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:17:37.381 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:17:37.378(Timestamp), 访问关于我页面(String), INFO(String), site.alanliang.geekblog.controller.front.AboutController.about()(String), { dateFilterType: 2 }(String), 0:0:0:0:0:0:0:1(String), 49(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:17:37.383 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:17:48.903 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_comment 
2020-06-15 16:17:48.904 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 
2020-06-15 16:17:48.918 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:17:48.919 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:17:48.915(Timestamp), 查询评论(String), INFO(String), site.alanliang.geekblog.controller.admin.CommentController.listTableByPage()(String), { page: 1 limit: 15 commentQuery: CommentQuery(startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 20(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:17:48.921 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:17:54.097 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:17:54.099 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:17:54.096(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 7(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:17:54.101 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:18:00.610 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 16:18:00.613 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 16:18:00.615 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:18:00.617 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 16:18:00.618 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 1(Integer), 9(Long)
2020-06-15 16:18:00.622 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:18:00.624 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 16:18:00.626 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 9(Long)
2020-06-15 16:18:00.632 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 16:18:00.636 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) and ta.published = 1 and ta.status = 2 
2020-06-15 16:18:00.645 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 9(Long)
2020-06-15 16:18:00.649 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-06-15 16:18:00.650 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:18:00.651 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 16:18:00.652 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:18:00.659 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) and ta.published = 1 and ta.status = 2 
2020-06-15 16:18:00.662 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 9(Long)
2020-06-15 16:18:00.666 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-06-15 16:18:00.667 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:18:00.667 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 16:18:00.670 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 16:18:00.703 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:18:00.703 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:18:00.705 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:18:01.862 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: SELECT COUNT(1) FROM t_comment tc WHERE article_id = ? AND pid = 0 AND tc.status <> 0 
2020-06-15 16:18:01.863 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 9(Long)
2020-06-15 16:18:01.866 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listByArticleId  : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and tc.status <> 0 order by create_time DESC 
2020-06-15 16:18:01.866 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listByArticleId  : ==> Parameters: 9(Long)
2020-06-15 16:18:01.867 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.listByArticleId  : <==      Total: 0
2020-06-15 16:18:06.334 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 16:18:06.335 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 16:18:06.339 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:18:06.341 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 16:18:06.344 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 9(Long)
2020-06-15 16:18:06.349 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:18:06.350 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 16:18:06.351 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 9(Long)
2020-06-15 16:18:06.357 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 16:18:06.382 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:18:06.383 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:18:06.384 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:19:33.922 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (username = ?) 
2020-06-15 16:19:33.924 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: visitor001(String)
2020-06-15 16:19:33.929 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 0
2020-06-15 16:19:33.934 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (email = ?) 
2020-06-15 16:19:33.935 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: 1114173646@qq.com(String)
2020-06-15 16:19:33.938 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 0
2020-06-15 16:19:33.942 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (nickname = ?) 
2020-06-15 16:19:33.944 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: 张三(String)
2020-06-15 16:19:33.945 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 0
2020-06-15 16:19:33.950 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.VisitorMapper.insert    : ==>  Preparing: INSERT INTO t_visitor ( username, password, nickname, avatar, email, link, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:19:33.952 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.VisitorMapper.insert    : ==> Parameters: visitor001(String), e10adc3949ba59abbe56e057f20f883e(String), 张三(String), https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10(String), 1114173646@qq.com(String), (String), 1(Integer), 2020-06-15 16:19:33.917(Timestamp), 2020-06-15 16:19:33.917(Timestamp)
2020-06-15 16:19:33.955 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.VisitorMapper.insert    : <==    Updates: 1
2020-06-15 16:19:33.970 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:19:33.971 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:19:33.967(Timestamp), 访客注册(String), INFO(String), site.alanliang.geekblog.controller.front.VisitorsController.save()(String), { visitor: Visitor(id=7, username=visitor001, password=e10adc3949ba59abbe56e057f20f883e, nickname=张三, avatar=https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10, email=1114173646@qq.com, link=, status=1, createTime=Mon Jun 15 16:19:33 CST 2020, updateTime=Mon Jun 15 16:19:33 CST 2020) }(String), 0:0:0:0:0:0:0:1(String), 52(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:19:33.973 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:19:49.374 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,link,email,status FROM t_visitor WHERE (username = ? OR email = ?) 
2020-06-15 16:19:49.376 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: visitor001(String), visitor001(String)
2020-06-15 16:19:49.379 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 1
2020-06-15 16:19:49.386 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:19:49.387 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:19:49.384(Timestamp), 访客登录(String), INFO(String), site.alanliang.geekblog.controller.front.VisitorsController.login()(String), { visitorLoginVO: VisitorLoginVO(certificate=visitor001, password=e10adc3949ba59abbe56e057f20f883e) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:19:49.389 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:20:19.976 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.CommentMapper.insert    : ==>  Preparing: INSERT INTO t_comment ( pid, article_id, visitor_id, content, status, create_time, parent_nickname, browser, os, address, request_ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:20:19.978 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.CommentMapper.insert    : ==> Parameters: 0(Long), 9(Long), 7(Long), 这是一条正儿八经的评论！(String), 1(Integer), 2020-06-15 16:20:19.969(Timestamp), (String), Chrome 8(String), Windows 10(String), 内网IP(String), 0:0:0:0:0:0:0:1(String)
2020-06-15 16:20:19.981 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.CommentMapper.insert    : <==    Updates: 1
2020-06-15 16:20:19.985 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT comments FROM t_article WHERE (id = ?) 
2020-06-15 16:20:19.986 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 16:20:19.988 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:20:19.989 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET comments=? WHERE id=? 
2020-06-15 16:20:19.990 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 1(Integer), 9(Long)
2020-06-15 16:20:19.991 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:20:21.050 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: SELECT COUNT(1) FROM t_comment tc WHERE article_id = ? AND pid = 0 AND tc.status <> 0 
2020-06-15 16:20:21.051 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 9(Long)
2020-06-15 16:20:21.056 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and pid = 0 and tc.status <> 0 order by create_time DESC LIMIT ?,? 
2020-06-15 16:20:21.057 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 9(Long), 0(Long), 6(Long)
2020-06-15 16:20:21.069 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.C.listRootPageByArticleId        : <==      Total: 1
2020-06-15 16:20:21.072 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listByArticleId  : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and tc.status <> 0 order by create_time DESC 
2020-06-15 16:20:21.073 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listByArticleId  : ==> Parameters: 9(Long)
2020-06-15 16:20:21.077 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listByArticleId  : <==      Total: 1
2020-06-15 16:20:21.093 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 16:20:21.094 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 16:20:21.097 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 16:21:03.985 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 16:21:03.985 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 16:21:03.987 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:21:03.989 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 16:21:03.989 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 3(Integer), 9(Long)
2020-06-15 16:21:03.992 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:21:03.993 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 16:21:03.994 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 9(Long)
2020-06-15 16:21:04.001 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 16:21:04.021 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:21:04.022 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:21:04.024 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:21:21.140 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:21:21.141 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:21:21.139(Timestamp), 访问首页(String), INFO(String), site.alanliang.geekblog.controller.front.HomeController.home()(String), { }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:21:21.142 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:21:24.127 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 16:21:24.128 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 16:21:24.132 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:21:24.136 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 16:21:24.136 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 4(Integer), 9(Long)
2020-06-15 16:21:24.141 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:21:24.142 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 16:21:24.143 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 9(Long)
2020-06-15 16:21:24.151 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 16:21:24.169 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:21:24.169 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:21:24.171 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:22:15.176 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (username = ?) 
2020-06-15 16:22:15.177 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: visitor001(String)
2020-06-15 16:22:15.178 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 1
2020-06-15 16:22:15.191 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, exception_detail, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:22:15.196 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:22:15.189(Timestamp), 访客注册(String), [B@4fa203d6(byte[]), ERROR(String), site.alanliang.geekblog.controller.front.VisitorsController.save()(String), { visitor: Visitor(id=null, username=visitor001, password=e10adc3949ba59abbe56e057f20f883e, nickname=李四, avatar=https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10, email=m13415418397@163.com, link=, status=1, createTime=Mon Jun 15 16:22:15 CST 2020, updateTime=Mon Jun 15 16:22:15 CST 2020) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin001(String), Chrome 8(String), 内网IP(String), 0(Integer)
2020-06-15 16:22:15.202 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:22:15.206 ERROR 18588 --- [http-nio-8889-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.EntityExistException: 用户名：visitor001已存在
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl.save(VisitorServiceImpl.java:54)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$FastClassBySpringCGLIB$$5d69e84.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.cache.interceptor.CacheInterceptor.lambda$invoke$0(CacheInterceptor.java:53)
	at org.springframework.cache.interceptor.CacheAspectSupport.invokeOperation(CacheAspectSupport.java:365)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:420)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$EnhancerBySpringCGLIB$$2e7988a7.save(<generated>)
	at site.alanliang.geekblog.controller.front.VisitorsController.save(VisitorsController.java:45)
	at site.alanliang.geekblog.controller.front.VisitorsController$$FastClassBySpringCGLIB$$55cab840.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at site.alanliang.geekblog.aspect.AccessLogAspect.logAround(AccessLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.front.VisitorsController$$EnhancerBySpringCGLIB$$92387747.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 16:22:15.222  WARN 18588 --- [http-nio-8889-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.EntityExistException: 用户名：visitor001已存在]
2020-06-15 16:22:22.294 ERROR 18588 --- [http-nio-8889-exec-9] s.a.g.e.handler.GlobalExceptionHandler   : org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 16:22:22.295  WARN 18588 --- [http-nio-8889-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-06-15 16:27:41.178 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 16:27:41.179 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 16:27:41.183 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:27:41.187 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 16:27:41.188 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 5(Integer), 9(Long)
2020-06-15 16:27:41.204 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:27:41.205 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 16:27:41.206 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 9(Long)
2020-06-15 16:27:41.210 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 16:27:41.245 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:27:41.247 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:27:41.251 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:28:22.117 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (username = ?) 
2020-06-15 16:28:22.117 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: visitor001(String)
2020-06-15 16:28:22.120 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 1
2020-06-15 16:28:22.131 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, exception_detail, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:28:22.133 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:28:22.13(Timestamp), 访客注册(String), [B@729247f6(byte[]), ERROR(String), site.alanliang.geekblog.controller.front.VisitorsController.save()(String), { visitor: Visitor(id=null, username=visitor001, password=e10adc3949ba59abbe56e057f20f883e, nickname=李四, avatar=https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10, email=m13415418397@163.com, link=, status=1, createTime=Mon Jun 15 16:28:22 CST 2020, updateTime=Mon Jun 15 16:28:22 CST 2020) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 0(Integer)
2020-06-15 16:28:22.137 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:28:22.140 ERROR 18588 --- [http-nio-8889-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.EntityExistException: 用户名：visitor001已存在
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl.save(VisitorServiceImpl.java:54)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$FastClassBySpringCGLIB$$5d69e84.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.cache.interceptor.CacheInterceptor.lambda$invoke$0(CacheInterceptor.java:53)
	at org.springframework.cache.interceptor.CacheAspectSupport.invokeOperation(CacheAspectSupport.java:365)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:420)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$EnhancerBySpringCGLIB$$2e7988a7.save(<generated>)
	at site.alanliang.geekblog.controller.front.VisitorsController.save(VisitorsController.java:45)
	at site.alanliang.geekblog.controller.front.VisitorsController$$FastClassBySpringCGLIB$$55cab840.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at site.alanliang.geekblog.aspect.AccessLogAspect.logAround(AccessLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.front.VisitorsController$$EnhancerBySpringCGLIB$$92387747.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 16:28:22.141  WARN 18588 --- [http-nio-8889-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.EntityExistException: 用户名：visitor001已存在]
2020-06-15 16:28:31.117 ERROR 18588 --- [http-nio-8889-exec-5] s.a.g.e.handler.GlobalExceptionHandler   : org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110)
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 16:28:31.117  WARN 18588 --- [http-nio-8889-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-06-15 16:28:38.277 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (username = ?) 
2020-06-15 16:28:38.277 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: visitor001(String)
2020-06-15 16:28:38.279 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 1
2020-06-15 16:28:38.285 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, exception_detail, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:28:38.291 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:28:38.284(Timestamp), 访客注册(String), [B@5a5cae9e(byte[]), ERROR(String), site.alanliang.geekblog.controller.front.VisitorsController.save()(String), { visitor: Visitor(id=null, username=visitor001, password=e10adc3949ba59abbe56e057f20f883e, nickname=李四, avatar=https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10, email=m13415418397@163.com, link=, status=1, createTime=Mon Jun 15 16:28:38 CST 2020, updateTime=Mon Jun 15 16:28:38 CST 2020) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin001(String), Chrome 8(String), 内网IP(String), 0(Integer)
2020-06-15 16:28:38.294 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:28:38.296 ERROR 18588 --- [http-nio-8889-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.EntityExistException: 用户名：visitor001已存在
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl.save(VisitorServiceImpl.java:54)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$FastClassBySpringCGLIB$$5d69e84.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.cache.interceptor.CacheInterceptor.lambda$invoke$0(CacheInterceptor.java:53)
	at org.springframework.cache.interceptor.CacheAspectSupport.invokeOperation(CacheAspectSupport.java:365)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:420)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$EnhancerBySpringCGLIB$$2e7988a7.save(<generated>)
	at site.alanliang.geekblog.controller.front.VisitorsController.save(VisitorsController.java:45)
	at site.alanliang.geekblog.controller.front.VisitorsController$$FastClassBySpringCGLIB$$55cab840.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at site.alanliang.geekblog.aspect.AccessLogAspect.logAround(AccessLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.front.VisitorsController$$EnhancerBySpringCGLIB$$92387747.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 16:28:38.299  WARN 18588 --- [http-nio-8889-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.EntityExistException: 用户名：visitor001已存在]
2020-06-15 16:34:28.241 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT views FROM t_article WHERE (id = ?) 
2020-06-15 16:34:28.241 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 16:34:28.244 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:34:28.246 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET views=? WHERE id=? 
2020-06-15 16:34:28.247 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 6(Integer), 9(Long)
2020-06-15 16:34:28.251 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:34:28.252 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==>  Preparing: select ta.id, ta.title, ta.content, ta.cover, ta.create_time, ta.type, ta.likes, ta.views, ta.comments, ta.commentable, ta.appreciable, tc.id as cid, tc.name as cname, su.id as uid, su.username from t_article ta left join t_category tc on ta.category_id = tc.id left join sys_user su on ta.author_id = su.id where ta.id = ? 
2020-06-15 16:34:28.253 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : ==> Parameters: 9(Long)
2020-06-15 16:34:28.257 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.ArticleMapper.selectDetailById   : <==      Total: 1
2020-06-15 16:34:28.260 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select max(id) from t_article where id < ?) and ta.published = 1 and ta.status = 2 
2020-06-15 16:34:28.260 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : ==> Parameters: 9(Long)
2020-06-15 16:34:28.267 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.selectPrevPreviewById          : <==      Total: 1
2020-06-15 16:34:28.272 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:34:28.272 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 8(Long)
2020-06-15 16:34:28.275 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 2
2020-06-15 16:34:28.280 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : ==>  Preparing: select ta.id, ta.title, ta.summary, ta.create_time, ta.cover, tc.id as cid, tc.name as cname from t_article ta left join t_category tc on ta.category_id = tc.id where ta.id = (select min(id) from t_article where id > ?) and ta.published = 1 and ta.status = 2 
2020-06-15 16:34:28.280 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : ==> Parameters: 9(Long)
2020-06-15 16:34:28.288 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.A.selectNextPreviewById          : <==      Total: 1
2020-06-15 16:34:28.290 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:34:28.290 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 10(Long)
2020-06-15 16:34:28.294 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 4
2020-06-15 16:34:28.316 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==>  Preparing: select tt.id, tt.name, tt.color from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id where tat.article_id = ? 
2020-06-15 16:34:28.317 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : ==> Parameters: 9(Long)
2020-06-15 16:34:28.319 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.TagMapper.selectByArticleId    : <==      Total: 3
2020-06-15 16:34:28.768 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: SELECT COUNT(1) FROM t_comment tc WHERE article_id = ? AND pid = 0 AND tc.status <> 0 
2020-06-15 16:34:28.769 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 9(Long)
2020-06-15 16:34:28.770 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and pid = 0 and tc.status <> 0 order by create_time DESC LIMIT ?,? 
2020-06-15 16:34:28.770 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 9(Long), 0(Long), 6(Long)
2020-06-15 16:34:28.771 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.C.listRootPageByArticleId        : <==      Total: 1
2020-06-15 16:34:28.772 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listByArticleId  : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and tc.status <> 0 order by create_time DESC 
2020-06-15 16:34:28.772 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listByArticleId  : ==> Parameters: 9(Long)
2020-06-15 16:34:28.773 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listByArticleId  : <==      Total: 1
2020-06-15 16:34:28.774 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 16:34:28.774 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 16:34:28.776 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 16:35:02.012 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (username = ?) 
2020-06-15 16:35:02.013 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: visitor002(String)
2020-06-15 16:35:02.014 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 0
2020-06-15 16:35:02.015 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (email = ?) 
2020-06-15 16:35:02.015 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: m13415418397@163.com(String)
2020-06-15 16:35:02.016 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 0
2020-06-15 16:35:02.018 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (nickname = ?) 
2020-06-15 16:35:02.018 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: 李四(String)
2020-06-15 16:35:02.019 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 0
2020-06-15 16:35:02.022 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.VisitorMapper.insert    : ==>  Preparing: INSERT INTO t_visitor ( username, password, nickname, avatar, email, link, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:35:02.024 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.VisitorMapper.insert    : ==> Parameters: visitor002(String), e10adc3949ba59abbe56e057f20f883e(String), 李四(String), https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10(String), m13415418397@163.com(String), (String), 1(Integer), 2020-06-15 16:35:02.005(Timestamp), 2020-06-15 16:35:02.005(Timestamp)
2020-06-15 16:35:02.025 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.VisitorMapper.insert    : <==    Updates: 1
2020-06-15 16:35:02.032 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:35:02.033 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:35:02.03(Timestamp), 访客注册(String), INFO(String), site.alanliang.geekblog.controller.front.VisitorsController.save()(String), { visitor: Visitor(id=8, username=visitor002, password=e10adc3949ba59abbe56e057f20f883e, nickname=李四, avatar=https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10, email=m13415418397@163.com, link=, status=1, createTime=Mon Jun 15 16:35:02 CST 2020, updateTime=Mon Jun 15 16:35:02 CST 2020) }(String), 0:0:0:0:0:0:0:1(String), 23(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:35:02.035 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:35:10.629 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,link,email,status FROM t_visitor WHERE (username = ? OR email = ?) 
2020-06-15 16:35:10.629 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: 123(String), 123(String)
2020-06-15 16:35:10.631 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 0
2020-06-15 16:35:10.639 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, exception_detail, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:35:10.642 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:35:10.637(Timestamp), 访客登录(String), [B@4a4648b(byte[]), ERROR(String), site.alanliang.geekblog.controller.front.VisitorsController.login()(String), { visitorLoginVO: VisitorLoginVO(certificate=123, password=202cb962ac59075b964b07152d234b70) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin001(String), Chrome 8(String), 内网IP(String), 0(Integer)
2020-06-15 16:35:10.645 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:35:10.647 ERROR 18588 --- [http-nio-8889-exec-2] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户名/邮箱不存在
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl.login(VisitorServiceImpl.java:87)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$FastClassBySpringCGLIB$$5d69e84.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$EnhancerBySpringCGLIB$$2e7988a7.login(<generated>)
	at site.alanliang.geekblog.controller.front.VisitorsController.login(VisitorsController.java:54)
	at site.alanliang.geekblog.controller.front.VisitorsController$$FastClassBySpringCGLIB$$55cab840.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at site.alanliang.geekblog.aspect.AccessLogAspect.logAround(AccessLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.front.VisitorsController$$EnhancerBySpringCGLIB$$92387747.login(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 16:35:10.649  WARN 18588 --- [http-nio-8889-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户名/邮箱不存在]
2020-06-15 16:35:19.626 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,email,link,status,create_time,update_time FROM t_visitor WHERE (username = ?) 
2020-06-15 16:35:19.626 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: visitor001(String)
2020-06-15 16:35:19.629 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 1
2020-06-15 16:35:19.638 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, exception_detail, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:35:19.642 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:35:19.636(Timestamp), 访客注册(String), [B@638796c3(byte[]), ERROR(String), site.alanliang.geekblog.controller.front.VisitorsController.save()(String), { visitor: Visitor(id=null, username=visitor001, password=e10adc3949ba59abbe56e057f20f883e, nickname=李四, avatar=https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10, email=m13415418397@163.com, link=, status=1, createTime=Mon Jun 15 16:35:19 CST 2020, updateTime=Mon Jun 15 16:35:19 CST 2020) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), admin001(String), Chrome 8(String), 内网IP(String), 0(Integer)
2020-06-15 16:35:19.645 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:35:19.647 ERROR 18588 --- [http-nio-8889-exec-5] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.EntityExistException: 用户名：visitor001已存在
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl.save(VisitorServiceImpl.java:54)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$FastClassBySpringCGLIB$$5d69e84.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.cache.interceptor.CacheInterceptor.lambda$invoke$0(CacheInterceptor.java:53)
	at org.springframework.cache.interceptor.CacheAspectSupport.invokeOperation(CacheAspectSupport.java:365)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:420)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.service.impl.VisitorServiceImpl$$EnhancerBySpringCGLIB$$2e7988a7.save(<generated>)
	at site.alanliang.geekblog.controller.front.VisitorsController.save(VisitorsController.java:45)
	at site.alanliang.geekblog.controller.front.VisitorsController$$FastClassBySpringCGLIB$$55cab840.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at site.alanliang.geekblog.aspect.AccessLogAspect.logAround(AccessLogAspect.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.front.VisitorsController$$EnhancerBySpringCGLIB$$92387747.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 16:35:19.649  WARN 18588 --- [http-nio-8889-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.EntityExistException: 用户名：visitor001已存在]
2020-06-15 16:35:33.904 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : ==>  Preparing: SELECT id,username,password,nickname,avatar,link,email,status FROM t_visitor WHERE (username = ? OR email = ?) 
2020-06-15 16:35:33.904 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : ==> Parameters: visitor002(String), visitor002(String)
2020-06-15 16:35:33.906 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.VisitorMapper.selectOne        : <==      Total: 1
2020-06-15 16:35:33.910 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:35:33.910 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:35:33.909(Timestamp), 访客登录(String), INFO(String), site.alanliang.geekblog.controller.front.VisitorsController.login()(String), { visitorLoginVO: VisitorLoginVO(certificate=visitor002, password=e10adc3949ba59abbe56e057f20f883e) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:35:33.913 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:35:59.309 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.CommentMapper.insert    : ==>  Preparing: INSERT INTO t_comment ( pid, article_id, visitor_id, content, status, create_time, parent_nickname, browser, os, address, request_ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:35:59.310 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.CommentMapper.insert    : ==> Parameters: 1(Long), 9(Long), 8(Long), 这也是一条正儿八经的回复！(String), 1(Integer), 2020-06-15 16:35:59.304(Timestamp), 张三(String), Chrome 8(String), Windows 10(String), 内网IP(String), 0:0:0:0:0:0:0:1(String)
2020-06-15 16:35:59.312 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.CommentMapper.insert    : <==    Updates: 1
2020-06-15 16:35:59.313 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==>  Preparing: SELECT comments FROM t_article WHERE (id = ?) 
2020-06-15 16:35:59.314 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : ==> Parameters: 9(Long)
2020-06-15 16:35:59.315 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectOne        : <==      Total: 1
2020-06-15 16:35:59.316 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==>  Preparing: UPDATE t_article SET comments=? WHERE id=? 
2020-06-15 16:35:59.316 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : ==> Parameters: 2(Integer), 9(Long)
2020-06-15 16:35:59.317 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.updateById       : <==    Updates: 1
2020-06-15 16:36:00.362 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: SELECT COUNT(1) FROM t_comment tc WHERE article_id = ? AND pid = 0 AND tc.status <> 0 
2020-06-15 16:36:00.363 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 9(Long)
2020-06-15 16:36:00.367 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.C.listRootPageByArticleId        : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and pid = 0 and tc.status <> 0 order by create_time DESC LIMIT ?,? 
2020-06-15 16:36:00.367 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.C.listRootPageByArticleId        : ==> Parameters: 9(Long), 0(Long), 6(Long)
2020-06-15 16:36:00.370 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.C.listRootPageByArticleId        : <==      Total: 1
2020-06-15 16:36:00.372 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listByArticleId  : ==>  Preparing: select id, pid, user_id, visitor_id, content, parent_nickname, create_time, browser, os, address from t_comment tc where article_id = ? and tc.status <> 0 order by create_time DESC 
2020-06-15 16:36:00.373 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listByArticleId  : ==> Parameters: 9(Long)
2020-06-15 16:36:00.379 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.listByArticleId  : <==      Total: 2
2020-06-15 16:36:00.382 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 16:36:00.383 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 16:36:00.385 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 16:36:00.388 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 16:36:00.389 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 16:36:00.394 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 16:40:52.478 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:40:52.479 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:40:52.476(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:40:52.481 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:40:52.762 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 16:40:52.764 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 16:40:52.771 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 16:40:53.158 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: SELECT COUNT(1) FROM t_comment 
2020-06-15 16:40:53.158 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 
2020-06-15 16:40:53.160 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listTableByPage  : ==>  Preparing: select id, pid, user_id, article_id, visitor_id, content, create_time, browser, os, address, request_ip, status from t_comment order by create_time DESC LIMIT ?,? 
2020-06-15 16:40:53.160 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listTableByPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:40:53.163 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listTableByPage  : <==      Total: 2
2020-06-15 16:40:53.163 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 16:40:53.164 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 16:40:53.165 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 16:40:53.166 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 16:40:53.167 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 16:40:53.170 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 16:40:53.176 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:40:53.178 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:40:53.175(Timestamp), 查询评论(String), INFO(String), site.alanliang.geekblog.controller.admin.CommentController.listTableByPage()(String), { page: 1 limit: 15 commentQuery: CommentQuery(startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:40:53.180 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:40:53.256 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 16:40:53.256 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 16:40:53.257 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:40:53.261 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 16:40:53.261 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 16:40:53.262 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 16:40:53.265 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 16:40:53.265 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 16:40:53.270 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 16:40:53.273 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 16:40:53.273 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 16:40:53.274 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:40:53.278 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 16:40:53.278 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 16:40:53.279 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 16:40:53.285 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 16:40:53.286 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 16:40:53.288 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 16:40:53.290 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 16:40:53.291 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 16:40:53.293 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:40:53.295 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 16:40:53.296 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 16:40:53.297 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:40:53.302 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 16:40:53.303 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 16:40:53.306 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 16:40:53.308 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 16:40:53.308 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 16:40:53.310 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 16:40:53.312 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 16:40:53.312 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 16:40:53.315 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 2
2020-06-15 16:40:53.317 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 16:40:53.318 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 16:40:53.320 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 16:40:53.321 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 16:40:53.322 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 16:40:53.323 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 16:40:53.327 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 16:40:53.327 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 16:40:53.328 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : <==      Total: 0
2020-06-15 16:40:53.333 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 16:40:53.334 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 16:40:53.337 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 16:40:53.340 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:40:53.341 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 16:40:53.400 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 16:40:53.403 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 16:40:53.404 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 16:40:53.471 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 16:40:53.472 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:40:53.473 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:40:53.474 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:40:53.476 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:40:53.476 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 16:40:53.474(Timestamp)
2020-06-15 16:40:53.477 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 16:40:53.478 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:40:53.479 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:40:53.480 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:40:53.481 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:40:53.481 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 16:40:53.48(Timestamp)
2020-06-15 16:40:53.483 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:40:53.485 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:40:53.485 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:40:53.487 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:40:53.489 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:40:53.489 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 16:40:53.487(Timestamp)
2020-06-15 16:40:53.490 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 16:40:53.491 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 16:40:53.492 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 16:40:53.493 DEBUG 18588 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 16:40:53.494 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 16:40:53.495 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 16:40:53.493(Timestamp)
2020-06-15 16:40:53.496 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 16:40:53.504 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 16:40:53.505 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 16:40:53.507 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 0
2020-06-15 16:41:20.374 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.listRootByPage   : ==>  Preparing: SELECT COUNT(1) FROM t_message WHERE pid = 0 AND status <> 0 
2020-06-15 16:41:20.375 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.listRootByPage   : ==> Parameters: 
2020-06-15 16:41:20.375 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link WHERE (status = ?) 
2020-06-15 16:41:20.376 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer)
2020-06-15 16:41:20.381 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MessageMapper.listAll   : ==>  Preparing: select tm1.id, tm1.pid, tm1.content, tm1.nickname, tm1.avatar, tm1.link, tm1.create_time, tm1.browser, tm1.os, tm1.address, tm2.nickname as parent_nickname from t_message tm1 left join (select id, nickname from t_message) tm2 on tm1.pid = tm2.id where tm1.status <> 0 order by tm1.create_time DESC 
2020-06-15 16:41:20.382 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MessageMapper.listAll   : ==> Parameters: 
2020-06-15 16:41:20.385 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MessageMapper.listAll   : <==      Total: 0
2020-06-15 16:42:00.029 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MessageMapper.insert    : ==>  Preparing: INSERT INTO t_message ( pid, nickname, content, link, avatar, email, browser, os, address, request_ip, status, create_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:42:00.032 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MessageMapper.insert    : ==> Parameters: 0(Long), 李四(String), 这是一条正儿八经的留言！(String), http://www.alanliang.site(String), https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10(String), m13415418397@163.com(String), Chrome 8(String), Windows 10(String), 内网IP(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 2020-06-15 16:42:00.025(Timestamp)
2020-06-15 16:42:00.035 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.MessageMapper.insert    : <==    Updates: 1
2020-06-15 16:42:00.077 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : ==>  Preparing: SELECT COUNT(1) FROM t_message WHERE pid = 0 AND status <> 0 
2020-06-15 16:42:00.078 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : ==> Parameters: 
2020-06-15 16:42:00.080 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : ==>  Preparing: select id, pid, content, nickname, avatar, link, create_time, browser, os, address from t_message where pid =0 and status <> 0 order by create_time DESC LIMIT ?,? 
2020-06-15 16:42:00.081 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : ==> Parameters: 0(Long), 6(Long)
2020-06-15 16:42:00.082 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : <==      Total: 1
2020-06-15 16:42:00.084 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MessageMapper.listAll   : ==>  Preparing: select tm1.id, tm1.pid, tm1.content, tm1.nickname, tm1.avatar, tm1.link, tm1.create_time, tm1.browser, tm1.os, tm1.address, tm2.nickname as parent_nickname from t_message tm1 left join (select id, nickname from t_message) tm2 on tm1.pid = tm2.id where tm1.status <> 0 order by tm1.create_time DESC 
2020-06-15 16:42:00.084 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MessageMapper.listAll   : ==> Parameters: 
2020-06-15 16:42:00.086 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MessageMapper.listAll   : <==      Total: 1
2020-06-15 16:45:04.860 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MessageMapper.insert    : ==>  Preparing: INSERT INTO t_message ( pid, nickname, content, link, avatar, email, browser, os, address, request_ip, status, create_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:45:04.862 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MessageMapper.insert    : ==> Parameters: 0(Long), 张三(String), 这也是一条正儿八经的留言！(String), (String), https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10(String), 1114173646@qq.com(String), Chrome 8(String), Windows 10(String), 内网IP(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 2020-06-15 16:45:04.853(Timestamp)
2020-06-15 16:45:04.864 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MessageMapper.insert    : <==    Updates: 1
2020-06-15 16:45:04.912 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : ==>  Preparing: SELECT COUNT(1) FROM t_message WHERE pid = 0 AND status <> 0 
2020-06-15 16:45:04.913 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : ==> Parameters: 
2020-06-15 16:45:04.914 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : ==>  Preparing: select id, pid, content, nickname, avatar, link, create_time, browser, os, address from t_message where pid =0 and status <> 0 order by create_time DESC LIMIT ?,? 
2020-06-15 16:45:04.914 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : ==> Parameters: 0(Long), 6(Long)
2020-06-15 16:45:04.915 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.listRootByPage   : <==      Total: 2
2020-06-15 16:45:04.916 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MessageMapper.listAll   : ==>  Preparing: select tm1.id, tm1.pid, tm1.content, tm1.nickname, tm1.avatar, tm1.link, tm1.create_time, tm1.browser, tm1.os, tm1.address, tm2.nickname as parent_nickname from t_message tm1 left join (select id, nickname from t_message) tm2 on tm1.pid = tm2.id where tm1.status <> 0 order by tm1.create_time DESC 
2020-06-15 16:45:04.916 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MessageMapper.listAll   : ==> Parameters: 
2020-06-15 16:45:04.918 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.MessageMapper.listAll   : <==      Total: 2
2020-06-15 16:47:45.865 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MessageMapper.insert    : ==>  Preparing: INSERT INTO t_message ( pid, nickname, content, link, avatar, email, browser, os, address, request_ip, status, create_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:47:45.866 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MessageMapper.insert    : ==> Parameters: 0(Long), 王五(String), 测试评论1！(String), (String), https://gravatar.loli.net/avatar/f2c02ce7474e4b228a576f7e47f00bd1?d=mp&v=1.3.10(String), m18600000001@163com(String), Chrome 8(String), Windows 10(String), 内网IP(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 2020-06-15 16:47:45.859(Timestamp)
2020-06-15 16:47:45.867 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.MessageMapper.insert    : <==    Updates: 1
2020-06-15 16:47:45.913 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.listRootByPage   : ==>  Preparing: SELECT COUNT(1) FROM t_message WHERE pid = 0 AND status <> 0 
2020-06-15 16:47:45.913 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.listRootByPage   : ==> Parameters: 
2020-06-15 16:47:45.916 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.listRootByPage   : ==>  Preparing: select id, pid, content, nickname, avatar, link, create_time, browser, os, address from t_message where pid =0 and status <> 0 order by create_time DESC LIMIT ?,? 
2020-06-15 16:47:45.916 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.listRootByPage   : ==> Parameters: 0(Long), 6(Long)
2020-06-15 16:47:45.920 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.listRootByPage   : <==      Total: 3
2020-06-15 16:47:45.922 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MessageMapper.listAll   : ==>  Preparing: select tm1.id, tm1.pid, tm1.content, tm1.nickname, tm1.avatar, tm1.link, tm1.create_time, tm1.browser, tm1.os, tm1.address, tm2.nickname as parent_nickname from t_message tm1 left join (select id, nickname from t_message) tm2 on tm1.pid = tm2.id where tm1.status <> 0 order by tm1.create_time DESC 
2020-06-15 16:47:45.922 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MessageMapper.listAll   : ==> Parameters: 
2020-06-15 16:47:45.924 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.MessageMapper.listAll   : <==      Total: 3
2020-06-15 16:47:56.595 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:47:56.596 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:47:56.593(Timestamp), 查询评论(String), INFO(String), site.alanliang.geekblog.controller.admin.CommentController.listTableByPage()(String), { page: 1 limit: 15 commentQuery: CommentQuery(startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:47:56.598 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:47:57.684 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectPage       : ==>  Preparing: SELECT COUNT(1) FROM t_message 
2020-06-15 16:47:57.685 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectPage       : ==> Parameters: 
2020-06-15 16:47:57.688 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectPage       : ==>  Preparing: SELECT id,nickname,pid,content,email,create_time,request_ip,address,status FROM t_message ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 16:47:57.688 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectPage       : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:47:57.691 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.MessageMapper.selectPage       : <==      Total: 3
2020-06-15 16:47:57.699 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:47:57.700 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:47:57.696(Timestamp), 查询留言(String), INFO(String), site.alanliang.geekblog.controller.admin.MessageController.listTableByPage()(String), { page: 1 limit: 15 messageQuery: MessageQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 21(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:47:57.703 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:48:01.965 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-15 16:48:01.965 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-15 16:48:01.973 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:48:01.973 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:48:01.972(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 16(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:48:01.975 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:51:19.073 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.selectOne    : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link WHERE (nickname = ?) 
2020-06-15 16:51:19.074 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.selectOne    : ==> Parameters: 码酱(String)
2020-06-15 16:51:19.075 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.selectOne    : <==      Total: 0
2020-06-15 16:51:19.078 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.insert       : ==>  Preparing: INSERT INTO t_link ( nickname, avatar, introduction, link, status, sort, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:51:19.080 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.insert       : ==> Parameters: 码酱(String), http://image.luokangyuan.com/1_qq_27922023.jpg(String), 我不是大佬，只是在追寻大佬的脚步(String), http://luokangyuan.com/(String), 1(Integer), 1(Integer), 2020-06-15 16:51:19.069(Timestamp), 2020-06-15 16:51:19.069(Timestamp)
2020-06-15 16:51:19.081 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.insert       : <==    Updates: 1
2020-06-15 16:51:19.090 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:51:19.091 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:51:19.089(Timestamp), 新增友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.save()(String), { link: ... }(String), 0:0:0:0:0:0:0:1(String), 17(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:51:19.092 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:51:20.819 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-15 16:51:20.819 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-15 16:51:20.820 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link LIMIT ?,? 
2020-06-15 16:51:20.820 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:51:20.821 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 1
2020-06-15 16:51:20.830 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:51:20.830 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:51:20.829(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 12(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:51:20.832 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:51:26.235 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link WHERE (status = ?) 
2020-06-15 16:51:26.236 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer)
2020-06-15 16:51:30.292 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.LinkMapper.updateById   : ==>  Preparing: UPDATE t_link SET status=? WHERE id=? 
2020-06-15 16:51:30.293 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.LinkMapper.updateById   : ==> Parameters: 2(Integer), 21(Long)
2020-06-15 16:51:30.294 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.LinkMapper.updateById   : <==    Updates: 1
2020-06-15 16:51:30.302 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:51:30.303 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:51:30.301(Timestamp), 审核友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.audit()(String), { auditVO: AuditVO(id=21, status=2) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:51:30.304 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:51:30.325 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-15 16:51:30.325 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-15 16:51:30.327 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link LIMIT ?,? 
2020-06-15 16:51:30.328 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:51:30.329 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 1
2020-06-15 16:51:30.335 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:51:30.335 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:51:30.333(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 10(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:51:30.337 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:51:37.084 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link WHERE (status = ?) 
2020-06-15 16:51:37.085 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer)
2020-06-15 16:51:37.086 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link FROM t_link WHERE (status = ?) ORDER BY sort ASC LIMIT ?,? 
2020-06-15 16:51:37.087 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer), 0(Long), 10(Long)
2020-06-15 16:51:37.088 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 1
2020-06-15 16:52:42.148 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectOne    : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link WHERE (nickname = ?) 
2020-06-15 16:52:42.148 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectOne    : ==> Parameters: 码农(String)
2020-06-15 16:52:42.149 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectOne    : <==      Total: 0
2020-06-15 16:52:42.150 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.insert       : ==>  Preparing: INSERT INTO t_link ( nickname, avatar, introduction, link, status, sort, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:52:42.151 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.insert       : ==> Parameters: 码农(String), http://static.blinkfox.com/20190601.png(String), 这里不隐含扭曲的价值观，而是整合并充盈正能量(String), https://www.90c.vip/(String), 1(Integer), 2(Integer), 2020-06-15 16:52:42.145(Timestamp), 2020-06-15 16:52:42.145(Timestamp)
2020-06-15 16:52:42.152 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.insert       : <==    Updates: 1
2020-06-15 16:52:42.161 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:52:42.162 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:52:42.159(Timestamp), 新增友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.save()(String), { link: ... }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:52:42.164 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:52:43.932 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-15 16:52:43.932 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-15 16:52:43.933 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link LIMIT ?,? 
2020-06-15 16:52:43.934 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:52:43.935 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 2
2020-06-15 16:52:43.939 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:52:43.939 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:52:43.938(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:52:43.941 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:52:47.900 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.LinkMapper.updateById   : ==>  Preparing: UPDATE t_link SET status=? WHERE id=? 
2020-06-15 16:52:47.900 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.LinkMapper.updateById   : ==> Parameters: 2(Integer), 22(Long)
2020-06-15 16:52:47.901 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.LinkMapper.updateById   : <==    Updates: 1
2020-06-15 16:52:47.910 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:52:47.911 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:52:47.909(Timestamp), 审核友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.audit()(String), { auditVO: AuditVO(id=22, status=2) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:52:47.912 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:52:47.931 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-15 16:52:47.932 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-15 16:52:47.934 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link LIMIT ?,? 
2020-06-15 16:52:47.934 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:52:47.934 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 2
2020-06-15 16:52:47.940 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:52:47.940 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:52:47.938(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:52:47.943 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:52:52.900 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link WHERE (status = ?) 
2020-06-15 16:52:52.900 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer)
2020-06-15 16:52:52.903 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link FROM t_link WHERE (status = ?) ORDER BY sort ASC LIMIT ?,? 
2020-06-15 16:52:52.904 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer), 0(Long), 10(Long)
2020-06-15 16:52:52.905 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 2
2020-06-15 16:53:54.633 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectOne    : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link WHERE (nickname = ?) 
2020-06-15 16:53:54.634 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectOne    : ==> Parameters: 洪卫の博客(String)
2020-06-15 16:53:54.635 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectOne    : <==      Total: 0
2020-06-15 16:53:54.636 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.insert       : ==>  Preparing: INSERT INTO t_link ( nickname, avatar, introduction, link, status, sort, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:53:54.637 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.insert       : ==> Parameters: 洪卫の博客(String), http://static.blinkfox.com/2019/11/23/avatar2.png(String), 凭寄狂夫书一纸，信在成都万里桥。(String), https://sunhwee.com/(String), 1(Integer), 3(Integer), 2020-06-15 16:53:54.631(Timestamp), 2020-06-15 16:53:54.631(Timestamp)
2020-06-15 16:53:54.638 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.insert       : <==    Updates: 1
2020-06-15 16:53:54.646 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:53:54.646 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:53:54.645(Timestamp), 新增友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.save()(String), { link: ... }(String), 0:0:0:0:0:0:0:1(String), 12(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:53:54.647 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:53:56.404 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-15 16:53:56.404 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-15 16:53:56.406 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link LIMIT ?,? 
2020-06-15 16:53:56.406 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:53:56.407 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 3
2020-06-15 16:53:56.411 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:53:56.412 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:53:56.411(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 8(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:53:56.414 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:53:58.696 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.updateById   : ==>  Preparing: UPDATE t_link SET status=? WHERE id=? 
2020-06-15 16:53:58.696 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.updateById   : ==> Parameters: 2(Integer), 23(Long)
2020-06-15 16:53:58.698 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.LinkMapper.updateById   : <==    Updates: 1
2020-06-15 16:53:58.707 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:53:58.709 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:53:58.706(Timestamp), 审核友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.audit()(String), { auditVO: AuditVO(id=23, status=2) }(String), 0:0:0:0:0:0:0:1(String), 9(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:53:58.710 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:53:58.730 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link 
2020-06-15 16:53:58.731 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 
2020-06-15 16:53:58.732 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link,status,sort,create_time,update_time FROM t_link LIMIT ?,? 
2020-06-15 16:53:58.732 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:53:58.735 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 3
2020-06-15 16:53:58.742 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:53:58.742 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:53:58.741(Timestamp), 查询友链(String), INFO(String), site.alanliang.geekblog.controller.admin.LinkController.listTableByPage()(String), { page: 1 limit: 15 linkQuery: LinkQuery(nickname=null, startDate=null, endDate=null, status=null) }(String), 0:0:0:0:0:0:0:1(String), 10(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:53:58.744 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:54:04.257 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM t_link WHERE (status = ?) 
2020-06-15 16:54:04.257 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer)
2020-06-15 16:54:04.261 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.LinkMapper.selectPage   : ==>  Preparing: SELECT id,nickname,avatar,introduction,link FROM t_link WHERE (status = ?) ORDER BY sort ASC LIMIT ?,? 
2020-06-15 16:54:04.261 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.LinkMapper.selectPage   : ==> Parameters: 2(Integer), 0(Long), 10(Long)
2020-06-15 16:54:04.262 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.geekblog.dao.LinkMapper.selectPage   : <==      Total: 3
2020-06-15 16:54:31.408 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-15 16:54:31.409 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-15 16:54:31.420 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:54:31.421 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:54:31.419(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 18(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:54:31.422 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:54:46.509 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.LocalStorageMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_local_storage 
2020-06-15 16:54:46.510 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.LocalStorageMapper.selectPage  : ==> Parameters: 
2020-06-15 16:54:46.522 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:54:46.522 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:54:46.521(Timestamp), 查询本地文件(String), INFO(String), site.alanliang.geekblog.controller.admin.LocalStorageController.listTableByPage()(String), { page: 1 limit: 15 localStorageQuery: LocalStorageQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 26(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:54:46.524 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:54:47.845 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 16:54:47.847 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 16:54:47.851 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 16:54:47.852 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:54:47.854 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 16:54:47.863 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:54:47.864 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:54:47.86(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 31(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:54:47.867 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:54:49.753 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM qiniu_content 
2020-06-15 16:54:49.754 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 
2020-06-15 16:54:49.755 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==>  Preparing: SELECT id,name,bucket,size,url,suffix,type,update_time,file_type FROM qiniu_content LIMIT ?,? 
2020-06-15 16:54:49.755 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : ==> Parameters: 15(Long), 15(Long)
2020-06-15 16:54:49.760 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.QiNiuContentMapper.selectPage  : <==      Total: 15
2020-06-15 16:54:49.766 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:54:49.766 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:54:49.765(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 2 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:54:49.768 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:55:03.484 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:03.485 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:55:03.483(Timestamp), 查询文件(String), INFO(String), site.alanliang.geekblog.controller.admin.QiNiuController.listTableByPage()(String), { page: 1 limit: 15 qiNiuQuery: QiNiuQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 10(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:55:03.486 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:55:05.131 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:05.131 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:55:05.13(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:55:05.133 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:55:14.620 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.PhotoMapper.insert      : ==>  Preparing: INSERT INTO t_photo ( url, description, sort, display, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:14.622 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.PhotoMapper.insert      : ==> Parameters: http://cdn.alanliang.site/note/oilpainting1.jpg(String), 油画1(String), 1(Integer), true(Boolean), 2020-06-15 16:55:14.617(Timestamp), 2020-06-15 16:55:14.617(Timestamp)
2020-06-15 16:55:14.624 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.PhotoMapper.insert      : <==    Updates: 1
2020-06-15 16:55:14.631 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:14.632 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:55:14.631(Timestamp), 新增照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.save()(String), { photo: ... }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:55:14.633 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:55:16.331 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-15 16:55:16.331 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-15 16:55:16.333 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT id,url,description,sort,display,create_time,update_time FROM t_photo LIMIT ?,? 
2020-06-15 16:55:16.335 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:55:16.335 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.PhotoMapper.selectPage  : <==      Total: 1
2020-06-15 16:55:16.343 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:16.344 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:55:16.342(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:55:16.345 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:55:35.867 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.PhotoMapper.insert      : ==>  Preparing: INSERT INTO t_photo ( url, description, sort, display, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:35.868 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.PhotoMapper.insert      : ==> Parameters: http://cdn.alanliang.site/note/oilpainting2.jpg(String), 油画2(String), 2(Integer), true(Boolean), 2020-06-15 16:55:35.864(Timestamp), 2020-06-15 16:55:35.864(Timestamp)
2020-06-15 16:55:35.870 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.PhotoMapper.insert      : <==    Updates: 1
2020-06-15 16:55:35.879 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:35.879 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:55:35.878(Timestamp), 新增照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.save()(String), { photo: ... }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:55:35.881 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:55:37.600 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-15 16:55:37.600 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-15 16:55:37.602 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT id,url,description,sort,display,create_time,update_time FROM t_photo LIMIT ?,? 
2020-06-15 16:55:37.602 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:55:37.602 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.selectPage  : <==      Total: 2
2020-06-15 16:55:37.607 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:37.607 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:55:37.606(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:55:37.609 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:55:50.039 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.PhotoMapper.insert      : ==>  Preparing: INSERT INTO t_photo ( url, description, sort, display, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:50.040 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.PhotoMapper.insert      : ==> Parameters: http://cdn.alanliang.site/note/oilpainting3.jpg(String), 油画3(String), 3(Integer), true(Boolean), 2020-06-15 16:55:50.038(Timestamp), 2020-06-15 16:55:50.038(Timestamp)
2020-06-15 16:55:50.041 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.PhotoMapper.insert      : <==    Updates: 1
2020-06-15 16:55:50.050 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:50.050 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:55:50.049(Timestamp), 新增照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.save()(String), { photo: ... }(String), 0:0:0:0:0:0:0:1(String), 9(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:55:50.053 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:55:51.770 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-15 16:55:51.771 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-15 16:55:51.772 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT id,url,description,sort,display,create_time,update_time FROM t_photo LIMIT ?,? 
2020-06-15 16:55:51.772 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:55:51.773 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectPage  : <==      Total: 3
2020-06-15 16:55:51.777 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:55:51.777 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:55:51.776(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:55:51.778 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:56:07.583 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.insert      : ==>  Preparing: INSERT INTO t_photo ( url, description, sort, display, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:07.584 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.insert      : ==> Parameters: http://cdn.alanliang.site/note/oilpainting4.jpg(String), 油画4(String), 4(Integer), true(Boolean), 2020-06-15 16:56:07.579(Timestamp), 2020-06-15 16:56:07.579(Timestamp)
2020-06-15 16:56:07.585 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.geekblog.dao.PhotoMapper.insert      : <==    Updates: 1
2020-06-15 16:56:07.597 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:07.598 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:56:07.596(Timestamp), 新增照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.save()(String), { photo: ... }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:56:07.599 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:56:09.320 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-15 16:56:09.320 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-15 16:56:09.322 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT id,url,description,sort,display,create_time,update_time FROM t_photo LIMIT ?,? 
2020-06-15 16:56:09.322 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:56:09.323 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.selectPage  : <==      Total: 4
2020-06-15 16:56:09.327 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:09.328 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:56:09.327(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:56:09.329 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:56:29.925 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.insert      : ==>  Preparing: INSERT INTO t_photo ( url, description, sort, display, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:29.925 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.insert      : ==> Parameters: http://cdn.alanliang.site/note/oilpainting5.jpg(String), 油画5(String), 5(Integer), true(Boolean), 2020-06-15 16:56:29.924(Timestamp), 2020-06-15 16:56:29.924(Timestamp)
2020-06-15 16:56:29.926 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.insert      : <==    Updates: 1
2020-06-15 16:56:29.934 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:29.934 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:56:29.933(Timestamp), 新增照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.save()(String), { photo: ... }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:56:29.936 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:56:31.645 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-15 16:56:31.646 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-15 16:56:31.648 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT id,url,description,sort,display,create_time,update_time FROM t_photo LIMIT ?,? 
2020-06-15 16:56:31.648 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:56:31.651 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.geekblog.dao.PhotoMapper.selectPage  : <==      Total: 5
2020-06-15 16:56:31.658 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:31.658 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:56:31.656(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:56:31.660 DEBUG 18588 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:56:43.057 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.insert      : ==>  Preparing: INSERT INTO t_photo ( url, description, sort, display, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:43.057 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.insert      : ==> Parameters: http://cdn.alanliang.site/note/oilpainting6.jpg(String), 油画6(String), 6(Integer), true(Boolean), 2020-06-15 16:56:43.056(Timestamp), 2020-06-15 16:56:43.056(Timestamp)
2020-06-15 16:56:43.059 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.PhotoMapper.insert      : <==    Updates: 1
2020-06-15 16:56:43.066 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:43.067 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:56:43.065(Timestamp), 新增照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.save()(String), { photo: ... }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:56:43.068 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:56:44.790 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM t_photo 
2020-06-15 16:56:44.790 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 
2020-06-15 16:56:44.792 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectPage  : ==>  Preparing: SELECT id,url,description,sort,display,create_time,update_time FROM t_photo LIMIT ?,? 
2020-06-15 16:56:44.792 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:56:44.793 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.geekblog.dao.PhotoMapper.selectPage  : <==      Total: 6
2020-06-15 16:56:44.798 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:44.799 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:56:44.797(Timestamp), 查询照片(String), INFO(String), site.alanliang.geekblog.controller.admin.PhotoController.listTableByPage()(String), { page: 1 limit: 15 photoQuery: PhotoQuery(description=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:56:44.801 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:56:47.676 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 16:56:47.676 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 16:56:47.678 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 16:56:47.683 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 16:56:47.684 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 16:56:47.687 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 16:56:47.691 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 16:56:47.692 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 16:56:47.693 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 16:56:47.697 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : ==>  Preparing: select tc.id, tc.name, tc.color, count(ta.id) articleCount from t_category tc left join t_article ta on tc.id = ta.category_id where tc.display = 1 group by tc.id 
2020-06-15 16:56:47.699 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : ==> Parameters: 
2020-06-15 16:56:47.703 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.C.listByArticleCount             : <==      Total: 6
2020-06-15 16:56:47.708 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listByArticleCount   : ==>  Preparing: select tt.id, tt.name, tt.color, count(ta.id) articleCount from t_tag tt left join t_article_tag tat on tt.id = tat.tag_id left join t_article ta on ta.id = tat.article_id group by tt.id 
2020-06-15 16:56:47.708 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listByArticleCount   : ==> Parameters: 
2020-06-15 16:56:47.711 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.TagMapper.listByArticleCount   : <==      Total: 16
2020-06-15 16:56:47.717 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectList  : ==>  Preparing: SELECT url,description FROM t_photo WHERE (display = ?) ORDER BY sort ASC 
2020-06-15 16:56:47.719 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectList  : ==> Parameters: 1(Integer)
2020-06-15 16:56:47.720 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.PhotoMapper.selectList  : <==      Total: 6
2020-06-15 16:56:47.724 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.countByDate      : ==>  Preparing: select year(create_time) 'year' , month(create_time) 'month' , count(id) 'articleCount' from t_article where create_time >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) and published = 1 and status = 2 group by year(create_time) ,month(create_time) 
2020-06-15 16:56:47.725 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.countByDate      : ==> Parameters: 
2020-06-15 16:56:47.727 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.countByDate      : <==      Total: 1
2020-06-15 16:56:47.736 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==>  Preparing: INSERT INTO sys_access_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:56:47.738 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : ==> Parameters: 2020-06-15 16:56:47.734(Timestamp), 访问关于我页面(String), INFO(String), site.alanliang.geekblog.controller.front.AboutController.about()(String), { dateFilterType: 2 }(String), 0:0:0:0:0:0:0:1(String), 55(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:56:47.740 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.geekblog.dao.AccessLogMapper.insert  : <==    Updates: 1
2020-06-15 16:57:03.071 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_user su 
2020-06-15 16:57:03.072 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 
2020-06-15 16:57:03.073 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: select su.id, su.username, su.nickname, su.sex, su.email, su.phone, su.status, su.create_time, su.update_time, sr.id as rid, sr.role_name, sr.color from sys_user su left join sys_role_user sru on su.id = sru.user_id left join sys_role sr on sru.role_id = sr.id order by su.id LIMIT ?,? 
2020-06-15 16:57:03.074 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:57:03.081 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.UserMapper.listTableByPage     : <==      Total: 3
2020-06-15 16:57:03.092 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:57:03.092 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:57:03.091(Timestamp), 查询用户(String), INFO(String), site.alanliang.geekblog.controller.admin.UserController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 33(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:57:03.096 DEBUG 18588 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:57:06.252 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_role 
2020-06-15 16:57:06.252 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 
2020-06-15 16:57:06.254 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT id,role_name,description,rank,color,status,create_time,update_time FROM sys_role LIMIT ?,? 
2020-06-15 16:57:06.255 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:57:06.255 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.RoleMapper.selectPage   : <==      Total: 3
2020-06-15 16:57:06.257 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 16:57:06.259 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 1(Long)
2020-06-15 16:57:06.262 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 16:57:06.264 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 16:57:06.264 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 2(Long)
2020-06-15 16:57:06.265 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 16:57:06.266 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 16:57:06.266 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 3(Long)
2020-06-15 16:57:06.267 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 16:57:06.273 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:57:06.273 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:57:06.271(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 32(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:57:06.274 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:57:08.837 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,create_time,update_time FROM sys_menu 
2020-06-15 16:57:08.837 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-15 16:57:08.848 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-15 16:57:08.863 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_menu 
2020-06-15 16:57:08.863 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectCount  : ==> Parameters: 
2020-06-15 16:57:08.864 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.geekblog.dao.MenuMapper.selectCount  : <==      Total: 1
2020-06-15 16:57:08.869 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:57:08.869 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:57:08.868(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 42(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:57:08.872 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:57:12.487 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT COUNT(1) FROM t_visitor 
2020-06-15 16:57:12.487 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 
2020-06-15 16:57:12.489 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT id,username,nickname,status,email,link,create_time,update_time FROM t_visitor LIMIT ?,? 
2020-06-15 16:57:12.489 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 0(Long), 15(Long)
2020-06-15 16:57:12.490 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.VisitorMapper.selectPage       : <==      Total: 2
2020-06-15 16:57:12.498 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:57:12.498 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:57:12.497(Timestamp), 查询访客(String), INFO(String), site.alanliang.geekblog.controller.admin.VisitorController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:57:12.500 DEBUG 18588 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:57:14.068 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT COUNT(1) FROM sys_notice 
2020-06-15 16:57:14.069 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 
2020-06-15 16:57:14.074 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:57:14.074 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:57:14.073(Timestamp), 查询公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.listTableByPage()(String), { page: 1 limit: 15 noticeQuery: NoticeQuery(title=null, content=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 15(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:57:14.079 DEBUG 18588 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 16:57:20.996 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 16:57:20.997 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 16:57:20.996(Timestamp), 查询公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.listTableByPage()(String), { page: 1 limit: 15 noticeQuery: NoticeQuery(title=null, content=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 1(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 16:57:20.998 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:00:16.337 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.NoticeMapper.insert     : ==>  Preparing: INSERT INTO sys_notice ( title, content, sort, display, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:00:16.339 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.NoticeMapper.insert     : ==> Parameters: 完成了代码中的常量抽取等(String), 完成了代码中的常量抽取等(String), 1(Integer), true(Boolean), 2020-06-15 17:00:16.334(Timestamp), 2020-06-15 17:00:16.334(Timestamp)
2020-06-15 17:00:16.342 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.geekblog.dao.NoticeMapper.insert     : <==    Updates: 1
2020-06-15 17:00:16.350 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:00:16.351 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:00:16.349(Timestamp), 新增公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.save()(String), { notice: ... }(String), 0:0:0:0:0:0:0:1(String), 12(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:00:16.352 DEBUG 18588 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:00:18.125 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT COUNT(1) FROM sys_notice 
2020-06-15 17:00:18.125 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 
2020-06-15 17:00:18.128 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT id,title,content,sort,display,create_time,update_time FROM sys_notice ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 17:00:18.128 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:00:18.130 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.NoticeMapper.selectPage        : <==      Total: 1
2020-06-15 17:00:18.137 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:00:18.137 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:00:18.136(Timestamp), 查询公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.listTableByPage()(String), { page: 1 limit: 15 noticeQuery: NoticeQuery(title=null, content=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:00:18.139 DEBUG 18588 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:00:25.794 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 17:00:25.794 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 17:00:25.795 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:00:25.797 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 17:00:25.798 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 17:00:25.798 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 17:00:25.800 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 17:00:25.800 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 17:00:25.802 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 17:00:25.804 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:00:25.805 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:00:25.807 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:00:25.811 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 17:00:25.811 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 17:00:25.813 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:00:25.816 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:00:25.817 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:00:25.821 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:00:25.824 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:00:25.825 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:00:25.827 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:00:25.832 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 17:00:25.833 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 17:00:25.838 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 2
2020-06-15 17:00:25.839 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:00:25.840 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 17:00:25.842 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:00:25.844 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:00:25.845 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 17:00:25.848 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:00:25.853 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 17:00:25.853 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 17:00:25.856 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : <==      Total: 3
2020-06-15 17:00:25.862 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 17:00:25.863 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 17:00:25.866 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 17:00:25.870 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:00:25.871 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:00:25.946 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:00:25.947 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:00:25.949 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:00:26.040 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:00:26.041 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:00:26.042 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:00:26.044 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:00:26.046 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:00:26.047 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 17:00:26.044(Timestamp)
2020-06-15 17:00:26.049 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:00:26.050 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:00:26.050 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:00:26.053 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:00:26.054 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:00:26.054 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 17:00:26.053(Timestamp)
2020-06-15 17:00:26.056 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:00:26.057 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:00:26.057 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:00:26.063 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:00:26.064 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:00:26.065 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 17:00:26.063(Timestamp)
2020-06-15 17:00:26.066 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:00:26.068 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:00:26.068 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:00:26.069 DEBUG 18588 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:00:26.070 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:00:26.071 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 17:00:26.069(Timestamp)
2020-06-15 17:00:26.072 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:00:26.075 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 17:00:26.076 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 17:00:26.078 DEBUG 18588 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 1
2020-06-15 17:01:41.605 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.NoticeMapper.insert     : ==>  Preparing: INSERT INTO sys_notice ( title, content, sort, display, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:01:41.606 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.NoticeMapper.insert     : ==> Parameters: 完善了Swagger文档，重构API等(String), -(String), 2(Integer), true(Boolean), 2020-06-15 17:01:41.604(Timestamp), 2020-06-15 17:01:41.604(Timestamp)
2020-06-15 17:01:41.608 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.geekblog.dao.NoticeMapper.insert     : <==    Updates: 1
2020-06-15 17:01:41.615 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:01:41.615 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:01:41.615(Timestamp), 新增公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.save()(String), { notice: ... }(String), 0:0:0:0:0:0:0:1(String), 7(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:01:41.617 DEBUG 18588 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:01:43.376 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT COUNT(1) FROM sys_notice 
2020-06-15 17:01:43.376 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 
2020-06-15 17:01:43.377 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT id,title,content,sort,display,create_time,update_time FROM sys_notice ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 17:01:43.378 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:01:43.378 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectPage        : <==      Total: 2
2020-06-15 17:01:43.383 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:01:43.383 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:01:43.382(Timestamp), 查询公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.listTableByPage()(String), { page: 1 limit: 15 noticeQuery: NoticeQuery(title=null, content=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 5(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:01:43.385 DEBUG 18588 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:01:57.651 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:01:57.652 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:01:57.655 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:01:57.658 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:01:57.659 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:01:57.660 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:01:57.662 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:01:57.662 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:01:57.665 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:01:57.671 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:01:57.671 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:01:57.749 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:01:57.751 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:01:57.751 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:01:57.842 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:01:57.844 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:01:57.844 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:01:57.845 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:01:57.848 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:01:57.849 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 17:01:57.846(Timestamp)
2020-06-15 17:01:57.851 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:01:57.853 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:01:57.853 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:01:57.855 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:01:57.859 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:01:57.860 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 17:01:57.856(Timestamp)
2020-06-15 17:01:57.862 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:01:57.864 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:01:57.864 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:01:57.866 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:01:57.869 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:01:57.870 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 17:01:57.867(Timestamp)
2020-06-15 17:01:57.873 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:01:57.874 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:01:57.874 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:01:57.877 DEBUG 18588 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:01:57.879 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:01:57.880 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 16:15:18.0(Timestamp), 2020-06-15 17:01:57.877(Timestamp)
2020-06-15 17:01:57.882 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:01:57.887 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 17:01:57.887 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 17:01:57.889 DEBUG 18588 --- [http-nio-8889-exec-1] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 2
2020-06-15 17:03:21.287  INFO 9640 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 9640 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 17:03:21.289 DEBUG 9640 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 17:03:21.290  INFO 9640 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 17:03:21.324  INFO 9640 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 17:03:21.324  INFO 9640 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 17:03:23.503  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:03:23.505  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 17:03:23.655  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 144ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 17:03:23.664  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:03:23.665  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 17:03:23.692  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 26ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 17:03:23.722  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:03:23.725  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 17:03:23.766  INFO 9640 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 17:03:23.767  INFO 9640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 25ms. Found 0 Redis repository interfaces.
2020-06-15 17:03:24.535  INFO 9640 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:03:24.616  INFO 9640 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:03:24.619  INFO 9640 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@71613348' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:03:24.621  INFO 9640 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:03:24.627  INFO 9640 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:03:24.650  INFO 9640 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$f49c7372] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:03:25.398  INFO 9640 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 17:03:25.407  INFO 9640 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 17:03:25.408  INFO 9640 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 17:03:25.730  INFO 9640 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 17:03:25.732  INFO 9640 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4408 ms
2020-06-15 17:03:26.035  INFO 9640 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 17:03:26.038  INFO 9640 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 17:03:26.067 DEBUG 9640 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 17:03:26.363  INFO 9640 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 17:03:27.024  INFO 9640 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 17:03:29.779  WARN 9640 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:03:29.780  WARN 9640 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:03:29.782  WARN 9640 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:03:29.782  WARN 9640 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:03:29.872  WARN 9640 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:03:29.873  WARN 9640 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:03:29.873  WARN 9640 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:03:29.874  WARN 9640 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:03:30.364  INFO 9640 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 17:03:31.005  WARN 9640 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 17:03:33.024  INFO 9640 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 17:03:33.040  INFO 9640 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 17:03:33.350  INFO 9640 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@41ab7eb1, org.springframework.security.web.context.SecurityContextPersistenceFilter@32445cca, org.springframework.security.web.header.HeaderWriterFilter@321e77f3, org.springframework.security.web.authentication.logout.LogoutFilter@787dc2aa, site.alanliang.geekblog.security.ValidateCodeFilter@6f65e4a2, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1a4c9680, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@501bfd1c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2e9fb8b6, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4a2a3611, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6fcd737e, org.springframework.security.web.session.SessionManagementFilter@26d8561f, org.springframework.security.web.access.ExceptionTranslationFilter@506aa4e2, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1e6bed72]
2020-06-15 17:03:33.508  INFO 9640 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 17:03:34.547  INFO 9640 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 17:03:34.569  INFO 9640 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 17:03:34.742  INFO 9640 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 17:03:35.441  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 17:03:35.445  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 17:03:35.455  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 17:03:35.460  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 17:03:35.463  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 17:03:35.468  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 17:03:35.470  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 17:03:35.477  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 17:03:35.480  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 17:03:35.590  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 17:03:35.593  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 17:03:35.600  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 17:03:35.624  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 17:03:35.628  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 17:03:35.641  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 17:03:35.646  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 17:03:35.662  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 17:03:35.668  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 17:03:35.677  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 17:03:35.685  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 17:03:35.696  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 17:03:35.702  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 17:03:35.710  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 17:03:35.717  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 17:03:35.723  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 17:03:35.732  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 17:03:35.736  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 17:03:35.740  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 17:03:35.743  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 17:03:35.751  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 17:03:35.753  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 17:03:35.764  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 17:03:35.767  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 17:03:35.774  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 17:03:35.776  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 17:03:35.780  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 17:03:35.782  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 17:03:35.786  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 17:03:35.787  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 17:03:35.789  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 17:03:35.791  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 17:03:35.793  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 17:03:35.796  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 17:03:35.802  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 17:03:35.805  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 17:03:35.810  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 17:03:35.812  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 17:03:35.831  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 17:03:35.835  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 17:03:35.839  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 17:03:35.844  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 17:03:35.852  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 17:03:35.855  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 17:03:35.859  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 17:03:35.863  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 17:03:35.866  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 17:03:35.887  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 17:03:35.897  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 17:03:35.902  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 17:03:35.905  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 17:03:35.909  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 17:03:35.917  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 17:03:35.920  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 17:03:35.921  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 17:03:35.935  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 17:03:35.942  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 17:03:35.945  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 17:03:35.948  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 17:03:35.951  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 17:03:35.953  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 17:03:35.959  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 17:03:35.962  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 17:03:35.966  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 17:03:35.967  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 17:03:35.973  INFO 9640 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 17:03:36.066  INFO 9640 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 17:03:36.075  INFO 9640 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 15.603 seconds (JVM running for 16.809)
2020-06-15 17:10:04.369  INFO 9640 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 17:10:04.369  INFO 9640 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 17:10:04.395  INFO 9640 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 26 ms
2020-06-15 17:10:04.543 DEBUG 9640 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:10:04.753 DEBUG 9640 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:10:04.784 DEBUG 9640 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:10:04.800 DEBUG 9640 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:10:04.810 DEBUG 9640 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:10:04.826 DEBUG 9640 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:10:24.737 DEBUG 9640 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:10:24.737 DEBUG 9640 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-15 17:10:24.738 DEBUG 9640 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 0
2020-06-15 17:10:24.835  INFO 9640 --- [http-nio-8889-exec-4] s.a.g.s.MyAuthenticationFailureHandler   : 登录失败
2020-06-15 17:11:17.376 DEBUG 9640 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:11:17.378 DEBUG 9640 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 17:11:17.383 DEBUG 9640 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:11:17.386 DEBUG 9640 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:11:17.386 DEBUG 9640 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 17:11:17.399 DEBUG 9640 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 17:13:13.611  INFO 9264 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 9264 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 17:13:13.615 DEBUG 9264 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 17:13:13.616  INFO 9264 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 17:13:13.682  INFO 9264 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 17:13:13.683  INFO 9264 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 17:13:15.206  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:13:15.208  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 17:13:15.324  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 109ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 17:13:15.331  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:13:15.333  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 17:13:15.356  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 21ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 17:13:15.375  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:13:15.378  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 17:13:15.409  INFO 9264 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 17:13:15.410  INFO 9264 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 21ms. Found 0 Redis repository interfaces.
2020-06-15 17:13:16.476  INFO 9264 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:13:16.674  INFO 9264 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:13:16.684  INFO 9264 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@156e593c' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:13:16.687  INFO 9264 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:13:16.702  INFO 9264 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:13:16.742  INFO 9264 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$601cf026] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:13:17.346  INFO 9264 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 17:13:17.356  INFO 9264 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 17:13:17.356  INFO 9264 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 17:13:17.501  INFO 9264 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 17:13:17.501  INFO 9264 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3817 ms
2020-06-15 17:13:17.731  INFO 9264 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 17:13:17.734  INFO 9264 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 17:13:17.751 DEBUG 9264 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 17:13:17.960  INFO 9264 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 17:13:18.857  INFO 9264 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 17:13:21.898  WARN 9264 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:13:21.899  WARN 9264 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:13:21.900  WARN 9264 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:13:21.902  WARN 9264 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:13:21.948  WARN 9264 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:13:21.948  WARN 9264 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:13:21.949  WARN 9264 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:13:21.949  WARN 9264 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:13:22.212  INFO 9264 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 17:13:22.490  WARN 9264 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 17:13:24.478  INFO 9264 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 17:13:24.498  INFO 9264 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 17:13:24.703  INFO 9264 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4ade9f4b, org.springframework.security.web.context.SecurityContextPersistenceFilter@79f6dc6a, org.springframework.security.web.header.HeaderWriterFilter@47263e55, org.springframework.security.web.authentication.logout.LogoutFilter@25539f69, site.alanliang.geekblog.security.ValidateCodeFilter@55582696, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@775cbf0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4b213cc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@921dc24, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@668da20c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@58f118, org.springframework.security.web.session.SessionManagementFilter@60ddf8f2, org.springframework.security.web.access.ExceptionTranslationFilter@750c5cdc, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@17fd86f4]
2020-06-15 17:13:24.806  INFO 9264 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 17:13:25.458  INFO 9264 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 17:13:25.475  INFO 9264 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 17:13:25.555  INFO 9264 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 17:13:25.834  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 17:13:25.837  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 17:13:25.842  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 17:13:25.843  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 17:13:25.845  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 17:13:25.848  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 17:13:25.849  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 17:13:25.855  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 17:13:25.857  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 17:13:25.905  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 17:13:25.907  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 17:13:25.911  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 17:13:25.924  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 17:13:25.925  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 17:13:25.929  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 17:13:25.931  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 17:13:25.936  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 17:13:25.938  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 17:13:25.939  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 17:13:25.941  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 17:13:25.944  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 17:13:25.945  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 17:13:25.950  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 17:13:25.955  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 17:13:25.957  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 17:13:25.961  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 17:13:25.963  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 17:13:25.965  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 17:13:25.966  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 17:13:25.971  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 17:13:25.972  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 17:13:25.977  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 17:13:25.979  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 17:13:25.984  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 17:13:25.986  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 17:13:25.991  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 17:13:25.994  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 17:13:25.999  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 17:13:26.001  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 17:13:26.003  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 17:13:26.004  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 17:13:26.006  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 17:13:26.009  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 17:13:26.017  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 17:13:26.018  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 17:13:26.023  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 17:13:26.025  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 17:13:26.039  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 17:13:26.043  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 17:13:26.047  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 17:13:26.052  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 17:13:26.057  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 17:13:26.059  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 17:13:26.060  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 17:13:26.061  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 17:13:26.064  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 17:13:26.072  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 17:13:26.076  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 17:13:26.079  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 17:13:26.080  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 17:13:26.081  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 17:13:26.085  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 17:13:26.087  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 17:13:26.088  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 17:13:26.096  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 17:13:26.105  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 17:13:26.107  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 17:13:26.108  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 17:13:26.110  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 17:13:26.112  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 17:13:26.117  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 17:13:26.119  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 17:13:26.121  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 17:13:26.125  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 17:13:26.129  INFO 9264 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 17:13:26.171  INFO 9264 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 17:13:26.175  INFO 9264 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 13.625 seconds (JVM running for 15.205)
2020-06-15 17:13:31.617  INFO 9264 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 17:13:31.618  INFO 9264 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 17:13:31.648  INFO 9264 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 30 ms
2020-06-15 17:13:38.412 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:13:38.556 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:13:38.581 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:13:38.591 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:13:38.602 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:13:38.614 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:13:38.757  INFO 9264 --- [http-nio-8889-exec-1] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 17:13:40.998 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:13:41.005 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:13:40.988(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:13:41.007 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:13:41.499  INFO 9264 --- [http-nio-8889-exec-2] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 17:13:41.501  INFO 9264 --- [http-nio-8889-exec-2] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 17:13:42.141 DEBUG 9264 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 17:13:42.148 DEBUG 9264 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 17:13:42.157 DEBUG 9264 --- [http-nio-8889-exec-2] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 17:13:42.488 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 17:13:42.489 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 17:13:42.491 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:13:42.501 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 17:13:42.503 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 17:13:42.506 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 17:13:42.519 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 17:13:42.520 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 17:13:42.521 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 17:13:42.530 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 17:13:42.530 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 17:13:42.532 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:13:42.541 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 17:13:42.543 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 17:13:42.544 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 17:13:42.555 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 17:13:42.557 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 17:13:42.557 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 17:13:42.567 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:13:42.568 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:13:42.569 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:13:42.575 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 17:13:42.577 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 17:13:42.579 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:13:42.584 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:13:42.586 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:13:42.591 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:13:42.594 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:13:42.595 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:13:42.598 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:13:42.601 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 17:13:42.602 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 17:13:42.672 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 2
2020-06-15 17:13:42.686 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:13:42.688 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 17:13:42.691 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:13:42.699 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:13:42.701 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 17:13:42.705 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:13:42.714 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 17:13:42.715 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 17:13:42.717 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectList       : <==      Total: 3
2020-06-15 17:13:42.729 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 17:13:42.730 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 17:13:42.734 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 17:13:42.749 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:13:42.756 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:13:42.811 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:13:42.815 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:13:42.816 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:13:42.868 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:13:42.870 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:13:42.871 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:13:42.872 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:13:42.874 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:13:42.877 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 16:40:52.0(Timestamp), 2020-06-15 17:13:42.872(Timestamp)
2020-06-15 17:13:42.879 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:13:42.880 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:13:42.881 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:13:42.882 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:13:42.884 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:13:42.885 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 16:40:52.0(Timestamp), 2020-06-15 17:13:42.882(Timestamp)
2020-06-15 17:13:42.889 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:13:42.892 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:13:42.892 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:13:42.897 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:13:42.899 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:13:42.901 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 16:40:52.0(Timestamp), 2020-06-15 17:13:42.897(Timestamp)
2020-06-15 17:13:42.902 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:13:42.904 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:13:42.904 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:13:42.906 DEBUG 9264 --- [http-nio-8889-exec-9] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:13:42.913 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:13:42.915 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 16:40:52.0(Timestamp), 2020-06-15 17:13:42.907(Timestamp)
2020-06-15 17:13:42.917 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:13:42.931 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 17:13:42.933 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 17:13:42.935 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 2
2020-06-15 17:14:24.503 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-06-15 17:14:24.506 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-06-15 17:14:24.521 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time,status FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 17:14:24.521 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:14:24.528 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-06-15 17:14:24.535 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:14:24.542 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:14:24.533(Timestamp), 查询访问日志(String), INFO(String), site.alanliang.geekblog.controller.admin.AccessLogController.listByPage()(String), { page: 1 limit: 15 logQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 79(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:14:24.545 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:14:27.300 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-06-15 17:14:27.301 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-06-15 17:14:27.308 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,username,description,browser,time,create_time,status FROM sys_operation_log ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 17:14:27.311 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:14:27.321 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-06-15 17:14:27.327 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:14:27.327 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:14:27.325(Timestamp), 查询操作日志(String), INFO(String), site.alanliang.geekblog.controller.admin.OperationLogController.listByPage()(String), { page: 1 limit: 15 logQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 29(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:14:27.329 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:15:00.035 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:15:00.035 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:15:00.033(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:15:00.037 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:15:00.696 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_operation_log 
2020-06-15 17:15:00.696 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 
2020-06-15 17:15:00.699 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectPage  : ==>  Preparing: SELECT id,request_ip,address,username,description,browser,time,create_time,status FROM sys_operation_log ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 17:15:00.699 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectPage  : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:15:00.704 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectPage  : <==      Total: 15
2020-06-15 17:15:00.711 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:15:00.712 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:15:00.709(Timestamp), 查询操作日志(String), INFO(String), site.alanliang.geekblog.controller.admin.OperationLogController.listByPage()(String), { page: 1 limit: 15 logQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 11(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:15:00.713 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:15:00.767 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:15:00.767 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:15:00.770 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:15:00.778 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:15:00.779 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:15:00.782 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:15:00.783 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:15:00.783 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:15:00.786 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:15:00.818 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:15:00.818 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:15:00.867 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:15:00.869 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:15:00.869 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:15:00.930 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:15:00.931 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:15:00.931 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:15:00.934 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:15:00.936 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:15:00.937 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 17:13:41.0(Timestamp), 2020-06-15 17:15:00.934(Timestamp)
2020-06-15 17:15:00.938 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:15:00.939 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:15:00.941 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:15:00.943 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:15:00.944 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:15:00.945 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 17:13:41.0(Timestamp), 2020-06-15 17:15:00.943(Timestamp)
2020-06-15 17:15:00.946 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:15:00.947 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:15:00.947 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:15:00.948 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:15:00.951 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:15:00.951 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 17:13:41.0(Timestamp), 2020-06-15 17:15:00.949(Timestamp)
2020-06-15 17:15:00.954 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:15:00.955 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:15:00.956 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:15:00.959 DEBUG 9264 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:15:00.961 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:15:00.961 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 17:13:41.0(Timestamp), 2020-06-15 17:15:00.96(Timestamp)
2020-06-15 17:15:00.962 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:15:07.263 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_user su 
2020-06-15 17:15:07.265 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 
2020-06-15 17:15:07.269 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: select su.id, su.username, su.nickname, su.sex, su.email, su.phone, su.status, su.create_time, su.update_time, sr.id as rid, sr.role_name, sr.color from sys_user su left join sys_role_user sru on su.id = sru.user_id left join sys_role sr on sru.role_id = sr.id order by su.id LIMIT ?,? 
2020-06-15 17:15:07.273 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:15:07.280 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.UserMapper.listTableByPage     : <==      Total: 3
2020-06-15 17:15:07.299 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:15:07.300 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:15:07.298(Timestamp), 查询用户(String), INFO(String), site.alanliang.geekblog.controller.admin.UserController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 47(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:15:07.303 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:15:07.964 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_role 
2020-06-15 17:15:07.965 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 
2020-06-15 17:15:07.967 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT id,role_name,description,rank,color,status,create_time,update_time FROM sys_role LIMIT ?,? 
2020-06-15 17:15:07.968 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:15:07.969 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.geekblog.dao.RoleMapper.selectPage   : <==      Total: 3
2020-06-15 17:15:07.973 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 17:15:07.974 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 1(Long)
2020-06-15 17:15:07.977 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 17:15:07.979 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 17:15:07.979 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 2(Long)
2020-06-15 17:15:07.980 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 17:15:07.981 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 17:15:07.982 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 3(Long)
2020-06-15 17:15:07.982 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 17:15:07.990 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:15:07.991 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:15:07.988(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 38(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:15:08.002 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:15:08.571 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,create_time,update_time FROM sys_menu 
2020-06-15 17:15:08.572 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-15 17:15:08.589 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-15 17:15:08.601 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_menu 
2020-06-15 17:15:08.602 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectCount  : ==> Parameters: 
2020-06-15 17:15:08.603 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.geekblog.dao.MenuMapper.selectCount  : <==      Total: 1
2020-06-15 17:15:08.614 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:15:08.615 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:15:08.613(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 45(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:15:08.616 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:17:33.217 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:17:33.218 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:17:33.221 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:17:33.222 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:17:33.225 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:17:33.229 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:17:33.394 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT COUNT(1) FROM t_visitor 
2020-06-15 17:17:33.395 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 
2020-06-15 17:17:33.397 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT id,username,nickname,status,email,link,create_time,update_time FROM t_visitor LIMIT ?,? 
2020-06-15 17:17:33.397 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:17:33.398 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectPage       : <==      Total: 2
2020-06-15 17:17:33.406 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:17:33.407 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:17:33.405(Timestamp), 查询访客(String), INFO(String), site.alanliang.geekblog.controller.admin.VisitorController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 12(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:17:33.408 DEBUG 9264 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:17:34.257 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT COUNT(1) FROM sys_notice 
2020-06-15 17:17:34.258 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 
2020-06-15 17:17:34.262 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT id,title,content,sort,display,create_time,update_time FROM sys_notice ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 17:17:34.263 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:17:34.265 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.NoticeMapper.selectPage        : <==      Total: 2
2020-06-15 17:17:34.270 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:17:34.270 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:17:34.268(Timestamp), 查询公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.listTableByPage()(String), { page: 1 limit: 15 noticeQuery: NoticeQuery(title=null, content=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 21(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:17:34.272 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:17:35.190 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_access_log 
2020-06-15 17:17:35.191 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 
2020-06-15 17:17:35.193 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : ==>  Preparing: SELECT id,request_ip,address,description,browser,time,create_time,status FROM sys_access_log ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 17:17:35.193 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:17:35.196 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectPage     : <==      Total: 15
2020-06-15 17:17:35.199 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:17:35.200 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:17:35.198(Timestamp), 查询访问日志(String), INFO(String), site.alanliang.geekblog.controller.admin.AccessLogController.listByPage()(String), { page: 1 limit: 15 logQuery: ... }(String), 0:0:0:0:0:0:0:1(String), 7(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:17:35.204 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:18:06.250 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:18:06.250 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: author001(String)
2020-06-15 17:18:06.251 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:18:06.252 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:18:06.252 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 3(Long)
2020-06-15 17:18:06.254 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 27
2020-06-15 17:18:06.351  INFO 9264 --- [http-nio-8889-exec-6] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 17:18:08.412 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:18:08.413 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:18:08.409(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), author001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:18:08.416 DEBUG 9264 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:18:08.593 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 17:18:08.595 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 3(Long)
2020-06-15 17:18:08.599 DEBUG 9264 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 11
2020-06-15 17:18:08.824 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:18:08.824 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:18:08.825 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:18:08.830 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:18:08.831 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:18:08.833 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:18:08.834 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:18:08.835 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:18:08.836 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:18:08.844 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:18:08.848 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:18:08.898 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:18:08.899 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:18:08.900 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:18:08.948 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:18:08.949 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:18:08.950 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 17:18:08.951 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:18:08.953 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:18:08.953 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 16:16:29.0(Timestamp), 2020-06-15 17:18:08.951(Timestamp)
2020-06-15 17:18:08.954 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:18:08.955 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:18:08.955 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 17:18:08.957 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:18:08.958 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:18:08.959 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 16:16:29.0(Timestamp), 2020-06-15 17:18:08.957(Timestamp)
2020-06-15 17:18:08.962 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:18:08.963 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:18:08.963 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 17:18:08.964 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:18:08.966 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:18:08.966 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 16:16:29.0(Timestamp), 2020-06-15 17:18:08.964(Timestamp)
2020-06-15 17:18:08.967 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:18:08.968 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:18:08.968 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: author001(String)
2020-06-15 17:18:08.969 DEBUG 9264 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:18:08.970 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:18:08.971 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 16:16:29.0(Timestamp), 2020-06-15 17:18:08.969(Timestamp)
2020-06-15 17:18:08.972 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:19:01.369 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:19:01.370 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:19:01.376 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:19:01.378 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:19:01.378 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:19:01.385 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:19:01.392 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:19:01.394 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:19:01.39(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:19:01.398 DEBUG 9264 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:19:02.134 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:19:02.135 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:19:02.137 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:19:02.139 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:19:02.140 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:19:02.141 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:19:02.144 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:19:02.145 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:19:02.149 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:19:02.157 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:19:02.157 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:19:02.211 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:19:02.212 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:19:02.212 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:19:02.278 DEBUG 9264 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:19:02.283 ERROR 9264 --- [http-nio-8889-exec-8] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$6072ca2b.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$cc659029.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:19:02.292  WARN 9264 --- [http-nio-8889-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:19:22.488 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:19:22.489 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:19:22.487(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:19:22.491 DEBUG 9264 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:19:23.462 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:19:23.463 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:19:23.465 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:19:23.469 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:19:23.469 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:19:23.471 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:19:23.474 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:19:23.474 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:19:23.479 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:19:23.485 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:19:23.486 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:19:23.540 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:19:23.543 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:19:23.544 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:19:23.616 DEBUG 9264 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:19:23.618 ERROR 9264 --- [http-nio-8889-exec-4] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$6072ca2b.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$cc659029.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:19:23.619  WARN 9264 --- [http-nio-8889-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:19:26.558 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:19:26.559 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:19:26.557(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:19:26.560 DEBUG 9264 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:19:26.967 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:19:26.967 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:19:26.968 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:19:26.970 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:19:26.970 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:19:26.971 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:19:26.972 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:19:26.972 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:19:26.976 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:19:26.982 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:19:26.982 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:19:27.024 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:19:27.027 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:19:27.028 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:19:27.076 DEBUG 9264 --- [http-nio-8889-exec-9] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:19:27.079 ERROR 9264 --- [http-nio-8889-exec-9] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$6072ca2b.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$cc659029.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:19:27.080  WARN 9264 --- [http-nio-8889-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:23:34.449  INFO 7336 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 7336 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 17:23:34.453 DEBUG 7336 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 17:23:34.453  INFO 7336 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 17:23:34.501  INFO 7336 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 17:23:34.502  INFO 7336 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 17:23:35.383  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:23:35.384  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 17:23:35.450  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 61ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 17:23:35.454  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:23:35.454  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 17:23:35.466  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 17:23:35.476  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:23:35.477  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 17:23:35.495  INFO 7336 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 17:23:35.495  INFO 7336 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Redis repository interfaces.
2020-06-15 17:23:35.824  INFO 7336 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:23:35.939  INFO 7336 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:23:35.942  INFO 7336 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@67b33f6f' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:23:35.943  INFO 7336 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:23:35.949  INFO 7336 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:23:35.959  INFO 7336 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$445311a6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:23:36.304  INFO 7336 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 17:23:36.313  INFO 7336 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 17:23:36.313  INFO 7336 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 17:23:36.406  INFO 7336 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 17:23:36.406  INFO 7336 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1904 ms
2020-06-15 17:23:36.541  INFO 7336 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 17:23:36.542  INFO 7336 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 17:23:36.557 DEBUG 7336 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 17:23:36.642  INFO 7336 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 17:23:37.013  INFO 7336 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 17:23:38.500  WARN 7336 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:23:38.500  WARN 7336 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:23:38.501  WARN 7336 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:23:38.501  WARN 7336 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:23:38.524  WARN 7336 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:23:38.525  WARN 7336 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:23:38.525  WARN 7336 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:23:38.525  WARN 7336 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:23:38.671  INFO 7336 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 17:23:38.838  WARN 7336 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 17:23:39.847  INFO 7336 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 17:23:39.862  INFO 7336 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 17:23:40.000  INFO 7336 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@9f93f80, org.springframework.security.web.context.SecurityContextPersistenceFilter@7dd8d4b3, org.springframework.security.web.header.HeaderWriterFilter@7a0a9357, org.springframework.security.web.authentication.logout.LogoutFilter@1a80f28b, site.alanliang.geekblog.security.ValidateCodeFilter@7a726e21, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@cd85e68, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@25da1889, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@30fdd2a8, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@44860b40, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@416e265e, org.springframework.security.web.session.SessionManagementFilter@6030be95, org.springframework.security.web.access.ExceptionTranslationFilter@75f7c5ce, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@15ce66ed]
2020-06-15 17:23:40.072  INFO 7336 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 17:23:40.497  INFO 7336 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 17:23:40.511  INFO 7336 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 17:23:40.565  INFO 7336 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 17:23:40.756  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 17:23:40.758  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 17:23:40.763  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 17:23:40.764  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 17:23:40.765  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 17:23:40.767  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 17:23:40.768  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 17:23:40.771  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 17:23:40.772  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 17:23:40.802  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 17:23:40.803  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 17:23:40.807  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 17:23:40.833  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 17:23:40.834  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 17:23:40.837  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 17:23:40.837  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 17:23:40.840  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 17:23:40.841  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 17:23:40.842  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 17:23:40.843  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 17:23:40.846  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 17:23:40.847  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 17:23:40.849  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 17:23:40.851  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 17:23:40.853  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 17:23:40.856  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 17:23:40.857  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 17:23:40.858  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 17:23:40.859  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 17:23:40.861  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 17:23:40.862  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 17:23:40.866  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 17:23:40.868  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 17:23:40.871  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 17:23:40.872  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 17:23:40.875  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 17:23:40.875  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 17:23:40.878  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 17:23:40.879  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 17:23:40.881  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 17:23:40.882  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 17:23:40.883  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 17:23:40.884  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 17:23:40.887  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 17:23:40.888  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 17:23:40.889  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 17:23:40.890  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 17:23:40.897  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 17:23:40.899  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 17:23:40.900  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 17:23:40.902  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 17:23:40.904  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 17:23:40.905  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 17:23:40.906  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 17:23:40.906  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 17:23:40.907  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 17:23:40.911  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 17:23:40.913  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 17:23:40.914  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 17:23:40.915  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 17:23:40.916  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 17:23:40.918  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 17:23:40.919  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 17:23:40.920  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 17:23:40.926  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 17:23:40.930  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 17:23:40.930  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 17:23:40.931  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 17:23:40.932  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 17:23:40.933  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 17:23:40.935  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 17:23:40.936  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 17:23:40.937  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 17:23:40.938  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 17:23:40.940  INFO 7336 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 17:23:40.967  INFO 7336 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 17:23:40.970  INFO 7336 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.434 seconds (JVM running for 8.557)
2020-06-15 17:23:48.565  INFO 7336 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 17:23:48.565  INFO 7336 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 17:23:48.576  INFO 7336 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-06-15 17:23:48.679 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:23:48.780 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:23:48.792 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:23:48.799 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:23:48.803 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:23:48.811 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:23:55.946 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:23:55.947 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:23:55.949 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:23:55.949 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:23:55.950 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:23:55.955 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:23:56.055  INFO 7336 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 17:23:58.213 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:23:58.219 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:23:58.205(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:23:58.221 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:23:58.554  INFO 7336 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 17:23:58.556  INFO 7336 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 17:23:58.999 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 17:23:59.002 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 17:23:59.008 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 17:23:59.251 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 17:23:59.252 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 17:23:59.254 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:23:59.264 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 17:23:59.265 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 17:23:59.268 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 17:23:59.279 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 17:23:59.279 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 17:23:59.280 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 17:23:59.285 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 17:23:59.286 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 17:23:59.287 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:23:59.294 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 17:23:59.295 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 17:23:59.296 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 17:23:59.303 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 17:23:59.304 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 17:23:59.308 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 17:23:59.312 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:23:59.313 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:23:59.314 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:23:59.318 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 17:23:59.319 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 17:23:59.320 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:23:59.326 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:23:59.327 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:23:59.329 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:23:59.331 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:23:59.332 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:23:59.334 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:23:59.337 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 17:23:59.338 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 17:23:59.377 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 2
2020-06-15 17:23:59.382 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:23:59.383 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 17:23:59.384 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:23:59.388 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:23:59.388 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 17:23:59.390 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:23:59.395 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 17:23:59.396 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 17:23:59.397 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectList       : <==      Total: 3
2020-06-15 17:23:59.407 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 17:23:59.409 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 17:23:59.411 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 17:23:59.418 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:23:59.425 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:23:59.461 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:23:59.462 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:23:59.464 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:23:59.514 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:23:59.516 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:23:59.517 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:23:59.518 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:23:59.520 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:23:59.520 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 17:15:00.0(Timestamp), 2020-06-15 17:23:59.518(Timestamp)
2020-06-15 17:23:59.522 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:23:59.526 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:23:59.526 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:23:59.527 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:23:59.529 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:23:59.530 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 17:15:00.0(Timestamp), 2020-06-15 17:23:59.528(Timestamp)
2020-06-15 17:23:59.531 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:23:59.532 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:23:59.532 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:23:59.533 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:23:59.534 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:23:59.535 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 17:15:00.0(Timestamp), 2020-06-15 17:23:59.533(Timestamp)
2020-06-15 17:23:59.536 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:23:59.537 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:23:59.537 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:23:59.539 DEBUG 7336 --- [http-nio-8889-exec-4] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:23:59.544 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:23:59.545 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 17:15:00.0(Timestamp), 2020-06-15 17:23:59.542(Timestamp)
2020-06-15 17:23:59.546 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:23:59.551 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 17:23:59.552 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 17:23:59.554 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 2
2020-06-15 17:24:27.777 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:24:27.780 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:24:27.777(Timestamp), 查询用户(String), INFO(String), site.alanliang.geekblog.controller.admin.UserController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 34(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:24:27.781 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:24:55.719 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:24:55.720 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:24:55.718(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 16(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:24:55.721 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:24:57.743 DEBUG 7336 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:24:57.744 DEBUG 7336 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:24:57.741(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 6(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:24:57.746 DEBUG 7336 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:28:05.312 DEBUG 7336 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:28:05.313 DEBUG 7336 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:28:05.317 DEBUG 7336 --- [http-nio-8889-exec-8] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:28:05.318 DEBUG 7336 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:28:05.319 DEBUG 7336 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:28:05.323 DEBUG 7336 --- [http-nio-8889-exec-8] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:28:05.529 DEBUG 7336 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT COUNT(1) FROM t_visitor 
2020-06-15 17:28:05.531 DEBUG 7336 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 
2020-06-15 17:28:05.539 DEBUG 7336 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectPage       : ==>  Preparing: SELECT id,username,nickname,status,email,link,create_time,update_time FROM t_visitor LIMIT ?,? 
2020-06-15 17:28:05.540 DEBUG 7336 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectPage       : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:28:05.541 DEBUG 7336 --- [http-nio-8889-exec-3] s.a.g.dao.VisitorMapper.selectPage       : <==      Total: 2
2020-06-15 17:28:05.551 DEBUG 7336 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:28:05.552 DEBUG 7336 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:28:05.55(Timestamp), 查询访客(String), INFO(String), site.alanliang.geekblog.controller.admin.VisitorController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 50(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:28:05.554 DEBUG 7336 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:28:11.215 DEBUG 7336 --- [http-nio-8889-exec-9] s.a.g.dao.LocalStorageMapper.selectPage  : ==>  Preparing: SELECT COUNT(1) FROM sys_local_storage 
2020-06-15 17:28:11.216 DEBUG 7336 --- [http-nio-8889-exec-9] s.a.g.dao.LocalStorageMapper.selectPage  : ==> Parameters: 
2020-06-15 17:28:11.221 DEBUG 7336 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:28:11.222 DEBUG 7336 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:28:11.221(Timestamp), 查询本地文件(String), INFO(String), site.alanliang.geekblog.controller.admin.LocalStorageController.listTableByPage()(String), { page: 1 limit: 15 localStorageQuery: LocalStorageQuery(name=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 16(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:28:11.223 DEBUG 7336 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:28:12.784 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT COUNT(1) FROM sys_notice 
2020-06-15 17:28:12.784 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 
2020-06-15 17:28:12.786 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectPage        : ==>  Preparing: SELECT id,title,content,sort,display,create_time,update_time FROM sys_notice ORDER BY create_time DESC LIMIT ?,? 
2020-06-15 17:28:12.786 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectPage        : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:28:12.787 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.NoticeMapper.selectPage        : <==      Total: 2
2020-06-15 17:28:12.791 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:28:12.791 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:28:12.79(Timestamp), 查询公告(String), INFO(String), site.alanliang.geekblog.controller.admin.NoticeController.listTableByPage()(String), { page: 1 limit: 15 noticeQuery: NoticeQuery(title=null, content=null, startDate=null, endDate=null, display=null) }(String), 0:0:0:0:0:0:0:1(String), 17(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:28:12.792 DEBUG 7336 --- [http-nio-8889-exec-4] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:28:16.544 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:28:16.545 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:28:16.543(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:28:16.547 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:28:16.950 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:28:16.951 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:28:16.952 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:28:16.956 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:28:16.956 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:28:16.963 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:28:16.965 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:28:16.965 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:28:16.969 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:28:16.984 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:28:16.984 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:28:17.022 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:28:17.023 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:28:17.023 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:28:17.065 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:28:17.067 ERROR 7336 --- [http-nio-8889-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$a4872a14.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$581a01f0.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:28:17.073  WARN 7336 --- [http-nio-8889-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:28:23.799 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:28:23.800 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:28:23.802 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:28:23.809 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:28:23.810 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:28:23.812 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:28:23.814 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:28:23.814 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:28:23.816 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:28:23.820 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:28:23.820 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:28:23.849 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:28:23.850 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:28:23.850 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:28:23.886 DEBUG 7336 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:28:23.887 ERROR 7336 --- [http-nio-8889-exec-1] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$a4872a14.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$581a01f0.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:28:23.887  WARN 7336 --- [http-nio-8889-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:29:20.438 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:29:20.438 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:29:20.441 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:29:20.447 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:29:20.448 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:29:20.450 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:29:20.451 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:29:20.452 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:29:20.453 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:29:20.457 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:29:20.457 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:29:20.488 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:29:20.488 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:29:20.489 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:29:20.524 DEBUG 7336 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:29:20.525 ERROR 7336 --- [http-nio-8889-exec-6] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$a4872a14.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$581a01f0.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:29:20.527  WARN 7336 --- [http-nio-8889-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:29:45.789 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:29:45.790 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:29:45.786(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:29:45.791 DEBUG 7336 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:29:46.512 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:29:46.512 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:29:46.514 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:29:46.517 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:29:46.517 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:29:46.520 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:29:46.526 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:29:46.526 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:29:46.529 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:29:46.535 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:29:46.535 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:29:46.577 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:29:46.579 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:29:46.579 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:29:46.632 DEBUG 7336 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:29:46.633 ERROR 7336 --- [http-nio-8889-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$a4872a14.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$581a01f0.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:29:46.635  WARN 7336 --- [http-nio-8889-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:36:25.767  INFO 9192 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 9192 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 17:36:25.770 DEBUG 9192 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 17:36:25.771  INFO 9192 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 17:36:25.818  INFO 9192 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 17:36:25.818  INFO 9192 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 17:36:26.603  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:36:26.604  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 17:36:26.668  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 60ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 17:36:26.672  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:36:26.672  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 17:36:26.683  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 17:36:26.694  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 17:36:26.695  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 17:36:26.711  INFO 9192 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 17:36:26.712  INFO 9192 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-15 17:36:27.018  INFO 9192 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:36:27.163  INFO 9192 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:36:27.166  INFO 9192 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2e1041fd' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:36:27.166  INFO 9192 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:36:27.173  INFO 9192 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:36:27.183  INFO 9192 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$12a2ca31] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 17:36:27.502  INFO 9192 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 17:36:27.510  INFO 9192 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 17:36:27.510  INFO 9192 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 17:36:27.603  INFO 9192 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 17:36:27.603  INFO 9192 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1784 ms
2020-06-15 17:36:27.726  INFO 9192 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 17:36:27.726  INFO 9192 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 17:36:27.738 DEBUG 9192 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 17:36:27.826  INFO 9192 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 17:36:28.154  INFO 9192 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 17:36:29.485  WARN 9192 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:36:29.486  WARN 9192 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:36:29.486  WARN 9192 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:36:29.486  WARN 9192 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:36:29.510  WARN 9192 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:36:29.510  WARN 9192 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:36:29.510  WARN 9192 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:36:29.510  WARN 9192 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 17:36:29.630  INFO 9192 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 17:36:29.785  WARN 9192 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 17:36:30.797  INFO 9192 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 17:36:30.812  INFO 9192 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 17:36:30.957  INFO 9192 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@20629a0d, org.springframework.security.web.context.SecurityContextPersistenceFilter@b8d394a, org.springframework.security.web.header.HeaderWriterFilter@675074d8, org.springframework.security.web.authentication.logout.LogoutFilter@11ec5f48, site.alanliang.geekblog.security.ValidateCodeFilter@54f61137, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@e1243d7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@386c6661, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@729c6682, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4edd0c27, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3c5ccb4b, org.springframework.security.web.session.SessionManagementFilter@670683c9, org.springframework.security.web.access.ExceptionTranslationFilter@2c4c8377, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@676cb01]
2020-06-15 17:36:31.030  INFO 9192 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 17:36:31.433  INFO 9192 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 17:36:31.446  INFO 9192 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 17:36:31.495  INFO 9192 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 17:36:31.682  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 17:36:31.683  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 17:36:31.687  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 17:36:31.688  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 17:36:31.690  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 17:36:31.694  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 17:36:31.695  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 17:36:31.699  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 17:36:31.700  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 17:36:31.727  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 17:36:31.728  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 17:36:31.731  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 17:36:31.738  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 17:36:31.739  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 17:36:31.742  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 17:36:31.743  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 17:36:31.746  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 17:36:31.747  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 17:36:31.748  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 17:36:31.750  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 17:36:31.752  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 17:36:31.753  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 17:36:31.756  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 17:36:31.758  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 17:36:31.760  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 17:36:31.763  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 17:36:31.764  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 17:36:31.765  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 17:36:31.766  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 17:36:31.768  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 17:36:31.769  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 17:36:31.773  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 17:36:31.775  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 17:36:31.778  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 17:36:31.779  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 17:36:31.781  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 17:36:31.781  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 17:36:31.785  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 17:36:31.785  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 17:36:31.787  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 17:36:31.789  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 17:36:31.789  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 17:36:31.791  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 17:36:31.793  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 17:36:31.794  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 17:36:31.796  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 17:36:31.797  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 17:36:31.804  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 17:36:31.806  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 17:36:31.807  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 17:36:31.809  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 17:36:31.811  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 17:36:31.812  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 17:36:31.813  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 17:36:31.813  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 17:36:31.814  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 17:36:31.818  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 17:36:31.821  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 17:36:31.822  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 17:36:31.823  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 17:36:31.823  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 17:36:31.825  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 17:36:31.826  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 17:36:31.827  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 17:36:31.832  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 17:36:31.835  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 17:36:31.836  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 17:36:31.837  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 17:36:31.838  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 17:36:31.839  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 17:36:31.842  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 17:36:31.843  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 17:36:31.844  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 17:36:31.845  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 17:36:31.847  INFO 9192 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 17:36:31.872  INFO 9192 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 17:36:31.874  INFO 9192 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 6.84 seconds (JVM running for 7.777)
2020-06-15 17:36:42.862  INFO 9192 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 17:36:42.863  INFO 9192 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 17:36:42.889  INFO 9192 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 25 ms
2020-06-15 17:36:42.974 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:36:43.081 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:36:43.109 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:36:43.118 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:36:43.125 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:36:43.132 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:37:03.654 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:37:03.654 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:37:03.656 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:37:03.657 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:37:03.657 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:37:03.664 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:37:03.768  INFO 9192 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 17:37:05.940 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:37:05.948 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:37:05.936(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:37:05.950 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:37:06.303  INFO 9192 --- [http-nio-8889-exec-3] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 17:37:06.304  INFO 9192 --- [http-nio-8889-exec-3] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 17:37:06.754 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 17:37:06.758 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 17:37:06.763 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 17:37:07.004 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 17:37:07.005 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 17:37:07.007 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:07.016 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 17:37:07.017 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 17:37:07.020 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 17:37:07.026 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 17:37:07.026 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 17:37:07.028 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 17:37:07.037 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 17:37:07.037 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 17:37:07.039 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:07.047 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 17:37:07.048 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 17:37:07.049 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 17:37:07.055 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 17:37:07.056 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 17:37:07.057 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:07.061 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:37:07.063 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:37:07.065 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:37:07.069 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 17:37:07.070 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 17:37:07.071 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:07.074 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:37:07.075 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:37:07.077 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:37:07.081 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:37:07.082 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:37:07.084 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:37:07.087 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 17:37:07.088 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 17:37:07.124 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 2
2020-06-15 17:37:07.132 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:37:07.133 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 17:37:07.135 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:37:07.138 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:37:07.138 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 17:37:07.139 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:37:07.142 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 17:37:07.142 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 17:37:07.143 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : <==      Total: 3
2020-06-15 17:37:07.152 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 17:37:07.153 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 17:37:07.154 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 17:37:07.161 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:37:07.166 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:37:07.196 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:37:07.198 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:37:07.199 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:37:07.241 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:37:07.243 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:37:07.243 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:37:07.244 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:37:07.249 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:37:07.250 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 17:23:58.0(Timestamp), 2020-06-15 17:37:07.245(Timestamp)
2020-06-15 17:37:07.251 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:37:07.251 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:37:07.252 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:37:07.252 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:37:07.254 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:37:07.254 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 17:23:58.0(Timestamp), 2020-06-15 17:37:07.253(Timestamp)
2020-06-15 17:37:07.255 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:07.256 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:37:07.257 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:37:07.257 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:37:07.259 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:37:07.260 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 17:23:58.0(Timestamp), 2020-06-15 17:37:07.258(Timestamp)
2020-06-15 17:37:07.261 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:07.263 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:37:07.265 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:37:07.266 DEBUG 9192 --- [http-nio-8889-exec-10] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:37:07.267 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:37:07.268 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 17:23:58.0(Timestamp), 2020-06-15 17:37:07.266(Timestamp)
2020-06-15 17:37:07.269 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:07.274 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 17:37:07.275 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 17:37:07.276 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 2
2020-06-15 17:37:32.704 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:37:32.709 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:37:32.703(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:37:32.712 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:37:33.178 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:37:33.178 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:37:33.180 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:37:33.183 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:37:33.183 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:37:33.189 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:37:33.193 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:37:33.194 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:37:33.197 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:37:33.213 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:37:33.213 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:37:33.247 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:37:33.248 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:37:33.248 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:37:33.287 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:37:33.288 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:37:33.288 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:37:33.291 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:37:33.292 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:37:33.293 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 17:37:06.0(Timestamp), 2020-06-15 17:37:33.291(Timestamp)
2020-06-15 17:37:33.294 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:37:33.295 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:37:33.295 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:37:33.296 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:37:33.297 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:37:33.298 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:06.0(Timestamp), 2020-06-15 17:37:33.296(Timestamp)
2020-06-15 17:37:33.299 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:33.300 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:37:33.300 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:37:33.301 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:37:33.303 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:37:33.304 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:06.0(Timestamp), 2020-06-15 17:37:33.301(Timestamp)
2020-06-15 17:37:33.307 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:33.309 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:37:33.310 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:37:33.310 DEBUG 9192 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:37:33.312 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:37:33.312 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:06.0(Timestamp), 2020-06-15 17:37:33.311(Timestamp)
2020-06-15 17:37:33.313 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:37:59.225 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:37:59.227 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:37:59.221(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:37:59.229 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:37:59.873 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:37:59.873 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:37:59.875 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:37:59.880 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:37:59.881 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:37:59.886 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:37:59.888 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:37:59.888 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:37:59.891 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:37:59.897 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:37:59.898 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:37:59.966 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:37:59.969 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:37:59.969 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:38:00.055 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:38:00.058 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:38:00.058 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:38:00.059 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:38:00.111 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:38:00.112 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 17:37:33.0(Timestamp), 2020-06-15 17:38:00.059(Timestamp)
2020-06-15 17:38:00.116 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:38:00.119 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:38:00.119 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:38:00.122 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:38:00.124 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:38:00.125 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:33.0(Timestamp), 2020-06-15 17:38:00.122(Timestamp)
2020-06-15 17:38:00.127 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:38:00.128 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:38:00.128 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:38:00.130 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:38:00.135 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:38:00.135 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:33.0(Timestamp), 2020-06-15 17:38:00.131(Timestamp)
2020-06-15 17:38:00.138 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:38:00.140 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 17:38:00.140 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 17:38:00.142 DEBUG 9192 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 17:38:00.145 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 17:38:00.146 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:33.0(Timestamp), 2020-06-15 17:38:00.143(Timestamp)
2020-06-15 17:38:00.148 DEBUG 9192 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:38:09.257 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: SELECT COUNT(1) FROM sys_user su 
2020-06-15 17:38:09.258 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 
2020-06-15 17:38:09.269 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : ==>  Preparing: select su.id, su.username, su.nickname, su.sex, su.email, su.phone, su.status, su.create_time, su.update_time, sr.id as rid, sr.role_name, sr.color from sys_user su left join sys_role_user sru on su.id = sru.user_id left join sys_role sr on sru.role_id = sr.id order by su.id LIMIT ?,? 
2020-06-15 17:38:09.270 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:38:09.272 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.UserMapper.listTableByPage     : <==      Total: 3
2020-06-15 17:38:09.285 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:38:09.286 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:38:09.284(Timestamp), 查询用户(String), INFO(String), site.alanliang.geekblog.controller.admin.UserController.listByPage()(String), { page: 1 limit: 15 userQuery: UserQuery(username=null, email=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 61(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:38:09.287 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:38:10.110 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT COUNT(1) FROM sys_role 
2020-06-15 17:38:10.111 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 
2020-06-15 17:38:10.117 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.geekblog.dao.RoleMapper.selectPage   : ==>  Preparing: SELECT id,role_name,description,rank,color,status,create_time,update_time FROM sys_role LIMIT ?,? 
2020-06-15 17:38:10.118 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.geekblog.dao.RoleMapper.selectPage   : ==> Parameters: 0(Long), 15(Long)
2020-06-15 17:38:10.119 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.geekblog.dao.RoleMapper.selectPage   : <==      Total: 3
2020-06-15 17:38:10.121 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 17:38:10.122 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 1(Long)
2020-06-15 17:38:10.123 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 17:38:10.124 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 17:38:10.124 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 2(Long)
2020-06-15 17:38:10.124 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 17:38:10.125 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_role_user WHERE (role_id = ?) 
2020-06-15 17:38:10.126 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : ==> Parameters: 3(Long)
2020-06-15 17:38:10.126 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.RoleUserMapper.selectCount     : <==      Total: 1
2020-06-15 17:38:10.133 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:38:10.134 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:38:10.132(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 26(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:38:10.135 DEBUG 9192 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:41:03.168 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:41:03.169 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:41:03.172 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:41:03.173 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:41:03.174 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:41:03.177 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:41:03.183 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:41:03.184 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:41:03.182(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:41:03.187 DEBUG 9192 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:41:04.226 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:41:04.227 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:41:04.225(Timestamp), 查询角色(String), INFO(String), site.alanliang.geekblog.controller.admin.RoleController.listByPage()(String), { page: 1 limit: 15 roleQuery: RoleQuery(roleName=null, description=null, startDate=null, endDate=null) }(String), 0:0:0:0:0:0:0:1(String), 13(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:41:04.229 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:41:04.316 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:41:04.316 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:41:04.319 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:41:04.325 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:41:04.325 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:41:04.327 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:41:04.328 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:41:04.329 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:41:04.330 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:41:04.337 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:41:04.338 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:41:04.382 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:41:04.383 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:41:04.383 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:41:04.432 DEBUG 9192 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:41:04.435 ERROR 9192 --- [http-nio-8889-exec-2] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$1cc352aa.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$d47405a2.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:41:04.445  WARN 9192 --- [http-nio-8889-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:44:58.827 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:44:58.827 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:44:58.830 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:44:58.832 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:44:58.833 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:44:58.840 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:44:58.854 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:44:58.854 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:44:58.856 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:44:58.858 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:44:58.858 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:44:58.860 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:44:58.861 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:44:58.861 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:44:58.861 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:44:58.865 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:44:58.866 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:44:58.898 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:44:58.899 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:44:58.899 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:44:58.943 DEBUG 9192 --- [http-nio-8889-exec-3] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:44:58.944 ERROR 9192 --- [http-nio-8889-exec-3] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$1cc352aa.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$d47405a2.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:150)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:44:58.946  WARN 9192 --- [http-nio-8889-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:49:09.205 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 17:49:09.205 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 17:49:09.208 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 17:49:09.209 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 17:49:09.210 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 17:49:09.215 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 17:49:09.223 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 17:49:09.224 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 17:49:09.225 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 17:49:09.228 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 17:49:09.228 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 17:49:09.229 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 17:49:09.232 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 17:49:09.233 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 17:49:09.233 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 17:49:09.236 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 17:49:09.236 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 17:49:09.237 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 17:49:09.239 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 17:49:09.239 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 17:49:09.240 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 17:49:09.242 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 17:49:09.243 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 17:49:09.244 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 17:49:09.245 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:49:09.245 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:49:09.246 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:49:09.248 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 17:49:09.248 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 17:49:09.249 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 17:49:09.251 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:49:09.251 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:49:09.252 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:49:09.253 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:49:09.253 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:49:09.254 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:49:09.256 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 17:49:09.256 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 17:49:09.258 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 2
2020-06-15 17:49:09.259 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:49:09.259 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 17:49:09.260 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:49:09.261 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 17:49:09.261 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 17:49:09.261 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 17:49:09.263 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 17:49:09.264 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 17:49:09.265 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.MessageMapper.selectList       : <==      Total: 3
2020-06-15 17:49:09.267 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 17:49:09.267 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 17:49:09.271 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 17:49:09.274 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:49:09.274 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:49:09.311 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:49:09.312 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:49:09.312 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:49:09.353 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:49:09.354 ERROR 9192 --- [http-nio-8889-exec-10] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$1cc352aa.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$d47405a2.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:150)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:49:09.356  WARN 9192 --- [http-nio-8889-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 17:49:34.730 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==>  Preparing: SELECT id,pid,title,href,authority,icon,sort,type,status,create_time,update_time FROM sys_menu 
2020-06-15 17:49:34.732 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : ==> Parameters: 
2020-06-15 17:49:34.750 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectList   : <==      Total: 85
2020-06-15 17:49:34.766 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_menu 
2020-06-15 17:49:34.766 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectCount  : ==> Parameters: 
2020-06-15 17:49:34.767 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.geekblog.dao.MenuMapper.selectCount  : <==      Total: 1
2020-06-15 17:49:34.773 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:49:34.774 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:49:34.772(Timestamp), 查询菜单(String), INFO(String), site.alanliang.geekblog.controller.admin.MenuController.listAll()(String), { }(String), 0:0:0:0:0:0:0:1(String), 47(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:49:34.777 DEBUG 9192 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:49:46.206 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 17:49:46.208 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 17:49:46.206(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 17:49:46.209 DEBUG 9192 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 17:49:46.421 DEBUG 9192 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 17:49:46.422 DEBUG 9192 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 17:49:46.425 DEBUG 9192 --- [http-nio-8889-exec-7] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 17:49:46.715 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 17:49:46.716 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 17:49:46.717 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 17:49:46.721 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 17:49:46.721 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 17:49:46.722 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 17:49:46.726 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 17:49:46.726 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 17:49:46.728 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 17:49:46.734 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:49:46.735 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 17:49:46.773 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 17:49:46.775 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 17:49:46.775 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 17:49:46.818 DEBUG 9192 --- [http-nio-8889-exec-6] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 17:49:46.819 ERROR 9192 --- [http-nio-8889-exec-6] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$1cc352aa.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$d47405a2.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 17:49:46.820  WARN 9192 --- [http-nio-8889-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 18:18:01.627  INFO 21848 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 21848 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 18:18:01.630 DEBUG 21848 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 18:18:01.631  INFO 21848 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 18:18:01.666  INFO 21848 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 18:18:01.666  INFO 21848 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 18:18:02.484  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:18:02.485  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 18:18:02.553  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 64ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 18:18:02.558  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:18:02.558  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 18:18:02.569  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 18:18:02.581  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:18:02.582  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 18:18:02.598  INFO 21848 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 18:18:02.599  INFO 21848 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 9ms. Found 0 Redis repository interfaces.
2020-06-15 18:18:02.909  INFO 21848 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:18:03.050  INFO 21848 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:18:03.053  INFO 21848 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@b38dd9a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:18:03.055  INFO 21848 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:18:03.061  INFO 21848 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:18:03.071  INFO 21848 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$dfcfed36] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:18:03.410  INFO 21848 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 18:18:03.417  INFO 21848 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 18:18:03.418  INFO 21848 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 18:18:03.523  INFO 21848 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 18:18:03.523  INFO 21848 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1857 ms
2020-06-15 18:18:03.648  INFO 21848 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 18:18:03.649  INFO 21848 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 18:18:03.661 DEBUG 21848 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 18:18:03.758  INFO 21848 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 18:18:04.088  INFO 21848 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 18:18:05.467  WARN 21848 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:18:05.467  WARN 21848 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:18:05.468  WARN 21848 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:18:05.468  WARN 21848 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:18:05.490  WARN 21848 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:18:05.491  WARN 21848 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:18:05.491  WARN 21848 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:18:05.491  WARN 21848 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:18:05.615  INFO 21848 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 18:18:05.794  WARN 21848 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 18:18:06.833  INFO 21848 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 18:18:06.848  INFO 21848 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 18:18:07.002  INFO 21848 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4a123db8, org.springframework.security.web.context.SecurityContextPersistenceFilter@29123de2, org.springframework.security.web.header.HeaderWriterFilter@586a4269, org.springframework.security.web.authentication.logout.LogoutFilter@640a9b0, site.alanliang.geekblog.security.ValidateCodeFilter@7d72fbfa, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@99d3020, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7caee0aa, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6ec482d, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@7e9905c7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@31d73db1, org.springframework.security.web.session.SessionManagementFilter@8d14ba9, org.springframework.security.web.access.ExceptionTranslationFilter@55cdbd04, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5eff8439]
2020-06-15 18:18:07.080  INFO 21848 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 18:18:07.490  INFO 21848 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 18:18:07.507  INFO 21848 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 18:18:07.558  INFO 21848 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 18:18:07.744  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 18:18:07.745  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 18:18:07.748  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 18:18:07.750  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 18:18:07.751  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 18:18:07.752  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 18:18:07.753  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 18:18:07.756  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 18:18:07.757  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 18:18:07.783  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 18:18:07.784  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 18:18:07.786  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 18:18:07.795  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 18:18:07.795  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 18:18:07.798  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 18:18:07.799  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 18:18:07.801  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 18:18:07.802  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 18:18:07.804  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 18:18:07.805  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 18:18:07.807  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 18:18:07.808  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 18:18:07.810  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 18:18:07.812  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 18:18:07.814  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 18:18:07.817  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 18:18:07.818  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 18:18:07.819  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 18:18:07.820  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 18:18:07.822  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 18:18:07.823  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 18:18:07.827  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 18:18:07.828  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 18:18:07.832  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 18:18:07.833  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 18:18:07.835  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 18:18:07.836  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 18:18:07.839  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 18:18:07.840  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 18:18:07.841  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 18:18:07.842  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 18:18:07.843  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 18:18:07.844  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 18:18:07.846  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 18:18:07.847  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 18:18:07.849  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 18:18:07.850  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 18:18:07.857  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 18:18:07.858  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 18:18:07.860  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 18:18:07.862  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 18:18:07.864  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 18:18:07.865  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 18:18:07.866  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 18:18:07.866  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 18:18:07.866  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 18:18:07.870  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 18:18:07.873  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 18:18:07.873  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 18:18:07.873  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 18:18:07.875  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 18:18:07.876  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 18:18:07.877  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 18:18:07.879  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 18:18:07.882  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 18:18:07.886  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 18:18:07.887  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 18:18:07.888  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 18:18:07.889  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 18:18:07.890  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 18:18:07.893  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 18:18:07.894  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 18:18:07.895  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 18:18:07.896  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 18:18:07.898  INFO 21848 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 18:18:07.925  INFO 21848 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 18:18:07.927  INFO 21848 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.022 seconds (JVM running for 8.001)
2020-06-15 18:24:17.156  INFO 21848 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 18:24:17.157  INFO 21848 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 18:24:17.166  INFO 21848 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-06-15 18:24:17.235 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:24:17.339 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:24:17.362 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:24:17.371 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:24:17.375 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:24:17.385 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:24:24.165 DEBUG 21848 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:24:24.166 DEBUG 21848 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:24:24.168 DEBUG 21848 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:24:24.169 DEBUG 21848 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:24:24.169 DEBUG 21848 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:24:24.175 DEBUG 21848 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:24:24.273  INFO 21848 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 18:24:26.428 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 18:24:26.437 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 18:24:26.422(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 2(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 18:24:26.439 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 18:24:26.785  INFO 21848 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 18:24:26.786  INFO 21848 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 18:24:27.236 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 18:24:27.240 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 18:24:27.245 DEBUG 21848 --- [http-nio-8889-exec-1] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 18:24:28.926 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 18:24:28.927 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 18:24:28.928 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:24:28.933 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 18:24:28.933 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 18:24:28.934 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 18:24:28.939 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 18:24:28.939 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 18:24:28.940 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 18:24:28.945 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 18:24:28.946 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 18:24:28.947 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 18:24:28.953 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 18:24:28.953 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 18:24:28.954 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 18:24:28.959 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 18:24:28.960 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 18:24:28.961 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 18:24:28.965 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 18:24:28.965 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 18:24:28.967 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:24:28.970 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 18:24:28.971 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 18:24:28.972 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:24:28.975 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 18:24:28.977 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 18:24:28.979 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 18:24:28.981 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 18:24:28.982 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 18:24:28.984 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 18:24:28.987 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 18:24:28.988 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 18:24:29.021 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 2
2020-06-15 18:24:29.027 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 18:24:29.028 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 18:24:29.029 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 18:24:29.032 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 18:24:29.033 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 18:24:29.034 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 18:24:29.037 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 18:24:29.038 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 18:24:29.040 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectList       : <==      Total: 3
2020-06-15 18:24:29.047 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 18:24:29.048 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 18:24:29.050 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 18:24:29.057 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:24:29.060 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 18:24:29.091 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 18:24:29.092 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:24:29.093 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 18:24:29.129 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 18:24:29.131 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:24:29.132 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:24:29.133 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:24:29.136 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:24:29.137 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 17:37:59.0(Timestamp), 2020-06-15 18:24:29.134(Timestamp)
2020-06-15 18:24:29.138 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:24:29.140 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:24:29.140 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:24:29.141 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:24:29.142 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:24:29.143 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:59.0(Timestamp), 2020-06-15 18:24:29.141(Timestamp)
2020-06-15 18:24:29.144 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:24:29.145 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:24:29.145 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:24:29.146 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:24:29.148 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:24:29.149 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:59.0(Timestamp), 2020-06-15 18:24:29.147(Timestamp)
2020-06-15 18:24:29.150 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:24:29.151 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:24:29.151 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:24:29.152 DEBUG 21848 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:24:29.153 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:24:29.154 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 17:37:59.0(Timestamp), 2020-06-15 18:24:29.152(Timestamp)
2020-06-15 18:24:29.155 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 18:24:29.160 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 18:24:29.161 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 18:24:29.162 DEBUG 21848 --- [http-nio-8889-exec-5] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 2
2020-06-15 18:27:28.354 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:27:28.355 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:27:28.358 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:27:28.360 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:27:28.361 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:27:28.371 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:27:28.380 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 18:27:28.385 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 18:27:28.378(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), (String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 18:27:28.388 DEBUG 21848 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 18:27:29.124 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 18:27:29.124 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 18:27:29.126 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:27:29.128 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 18:27:29.128 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 18:27:29.136 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 18:27:29.139 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 18:27:29.139 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 18:27:29.142 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 18:27:29.163 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:27:29.163 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 18:27:29.197 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 18:27:29.200 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:27:29.200 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 18:27:29.240 DEBUG 21848 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 18:27:29.243 ERROR 21848 --- [http-nio-8889-exec-7] s.a.g.e.handler.GlobalExceptionHandler   : site.alanliang.geekblog.exception.BadRequestException: 用户未登录
	at site.alanliang.geekblog.utils.UserInfoUtil.getUsername(UserInfoUtil.java:15)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl.countByLastIndexViewToNow(AccessLogServiceImpl.java:102)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$FastClassBySpringCGLIB$$5c470d32.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687)
	at site.alanliang.geekblog.service.impl.AccessLogServiceImpl$$EnhancerBySpringCGLIB$$1d87b77d.countByLastIndexViewToNow(<generated>)
	at site.alanliang.geekblog.controller.admin.IndexController.index(IndexController.java:110)
	at site.alanliang.geekblog.controller.admin.IndexController$$FastClassBySpringCGLIB$$441f0a95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at site.alanliang.geekblog.controller.admin.IndexController$$EnhancerBySpringCGLIB$$354477e.index(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at site.alanliang.geekblog.security.ValidateCodeFilter.doFilterInternal(ValidateCodeFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-06-15 18:27:29.253  WARN 21848 --- [http-nio-8889-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [site.alanliang.geekblog.exception.BadRequestException: 用户未登录]
2020-06-15 18:32:24.760  INFO 17108 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 17108 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 18:32:24.764 DEBUG 17108 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 18:32:24.765  INFO 17108 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 18:32:24.822  INFO 17108 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 18:32:24.822  INFO 17108 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 18:32:25.660  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:32:25.661  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 18:32:25.725  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 60ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 18:32:25.728  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:32:25.728  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 18:32:25.740  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 18:32:25.751  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:32:25.753  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 18:32:25.771  INFO 17108 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 18:32:25.771  INFO 17108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-15 18:32:26.072  INFO 17108 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:32:26.211  INFO 17108 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:32:26.213  INFO 17108 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5f1d33e' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:32:26.216  INFO 17108 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:32:26.223  INFO 17108 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:32:26.233  INFO 17108 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$805cea2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:32:26.553  INFO 17108 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 18:32:26.561  INFO 17108 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 18:32:26.561  INFO 17108 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 18:32:26.654  INFO 17108 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 18:32:26.655  INFO 17108 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1833 ms
2020-06-15 18:32:26.785  INFO 17108 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 18:32:26.786  INFO 17108 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 18:32:26.800 DEBUG 17108 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 18:32:26.893  INFO 17108 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 18:32:27.228  INFO 17108 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 18:32:28.635  WARN 17108 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:32:28.635  WARN 17108 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:32:28.636  WARN 17108 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:32:28.636  WARN 17108 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:32:28.658  WARN 17108 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:32:28.658  WARN 17108 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:32:28.658  WARN 17108 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:32:28.658  WARN 17108 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:32:28.775  INFO 17108 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 18:32:28.928  WARN 17108 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 18:32:29.955  INFO 17108 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 18:32:29.969  INFO 17108 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 18:32:30.102  INFO 17108 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7e2f2eca, org.springframework.security.web.context.SecurityContextPersistenceFilter@499daa0d, org.springframework.security.web.header.HeaderWriterFilter@1a25fdcb, org.springframework.security.web.authentication.logout.LogoutFilter@3e87bfae, site.alanliang.geekblog.security.ValidateCodeFilter@2c90bdd2, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@61cf48dc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7ecad663, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3c17a534, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@55c93b9d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@16eea9a7, org.springframework.security.web.session.SessionManagementFilter@4380feb4, org.springframework.security.web.access.ExceptionTranslationFilter@79f94741, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@68480e85]
2020-06-15 18:32:30.178  INFO 17108 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 18:32:30.597  INFO 17108 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 18:32:30.608  INFO 17108 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 18:32:30.657  INFO 17108 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 18:32:30.835  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 18:32:30.836  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 18:32:30.841  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 18:32:30.842  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 18:32:30.843  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 18:32:30.845  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 18:32:30.846  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 18:32:30.848  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 18:32:30.849  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 18:32:30.876  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 18:32:30.878  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 18:32:30.880  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 18:32:30.889  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 18:32:30.889  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 18:32:30.892  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 18:32:30.893  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 18:32:30.895  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 18:32:30.896  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 18:32:30.897  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 18:32:30.899  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 18:32:30.901  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 18:32:30.901  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 18:32:30.905  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 18:32:30.907  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 18:32:30.909  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 18:32:30.912  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 18:32:30.913  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 18:32:30.914  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 18:32:30.915  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 18:32:30.917  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 18:32:30.918  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 18:32:30.921  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 18:32:30.923  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 18:32:30.926  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 18:32:30.927  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 18:32:30.930  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 18:32:30.930  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 18:32:30.933  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 18:32:30.934  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 18:32:30.937  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 18:32:30.938  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 18:32:30.939  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 18:32:30.940  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 18:32:30.943  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 18:32:30.944  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 18:32:30.946  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 18:32:30.947  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 18:32:30.954  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 18:32:30.956  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 18:32:30.957  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 18:32:30.958  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 18:32:30.960  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 18:32:30.961  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 18:32:30.961  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 18:32:30.962  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 18:32:30.963  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 18:32:30.968  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 18:32:30.970  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 18:32:30.971  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 18:32:30.971  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 18:32:30.972  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 18:32:30.973  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 18:32:30.974  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 18:32:30.975  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 18:32:30.981  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 18:32:30.984  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 18:32:30.985  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 18:32:30.985  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 18:32:30.986  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 18:32:30.987  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 18:32:30.990  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 18:32:30.991  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 18:32:30.992  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 18:32:30.993  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 18:32:30.995  INFO 17108 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 18:32:31.020  INFO 17108 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 18:32:31.022  INFO 17108 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 7.09 seconds (JVM running for 8.121)
2020-06-15 18:32:37.657  INFO 17108 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 18:32:37.657  INFO 17108 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 18:32:37.668  INFO 17108 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-06-15 18:32:37.728 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:32:37.813 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:32:37.829 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:32:37.836 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:32:37.841 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:32:37.849 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:32:48.257 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:32:48.258 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:32:48.260 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:32:48.261 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:32:48.261 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:32:48.266 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:32:48.360  INFO 17108 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 18:32:50.532 DEBUG 17108 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 18:32:50.543 DEBUG 17108 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 18:32:50.527(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 18:32:50.546 DEBUG 17108 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 18:32:50.897  INFO 17108 --- [http-nio-8889-exec-7] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 18:32:50.898  INFO 17108 --- [http-nio-8889-exec-7] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 18:32:51.589 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 18:32:51.592 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 18:32:51.595 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:32:51.604 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 18:32:51.608 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 18:32:51.610 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 18:32:51.612 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 18:32:51.612 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 18:32:51.615 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 18:32:51.643 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:32:51.646 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 18:32:51.683 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 18:32:51.684 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:32:51.687 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 18:32:51.729 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 18:32:51.730 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:32:51.731 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:32:51.732 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:32:51.735 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:32:51.738 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 18:24:26.0(Timestamp), 2020-06-15 18:32:51.733(Timestamp)
2020-06-15 18:32:51.739 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:32:51.743 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:32:51.743 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:32:51.744 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:32:51.745 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:32:51.746 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 18:24:26.0(Timestamp), 2020-06-15 18:32:51.744(Timestamp)
2020-06-15 18:32:51.747 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:32:51.750 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:32:51.750 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:32:51.751 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:32:51.757 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:32:51.758 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 18:24:26.0(Timestamp), 2020-06-15 18:32:51.752(Timestamp)
2020-06-15 18:32:51.759 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:32:51.762 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:32:51.762 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:32:51.764 DEBUG 17108 --- [http-nio-8889-exec-1] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:32:51.766 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:32:51.766 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 18:24:26.0(Timestamp), 2020-06-15 18:32:51.764(Timestamp)
2020-06-15 18:32:51.767 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 18:33:48.535 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 18:33:48.538 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 18:33:48.534(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 18:33:48.541 DEBUG 17108 --- [http-nio-8889-exec-1] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 18:33:49.054 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 18:33:49.055 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 18:33:49.057 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:33:49.060 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 18:33:49.061 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 18:33:49.064 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 18:33:49.068 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 18:33:49.068 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 18:33:49.073 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 18:33:49.078 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:33:49.078 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 18:33:49.109 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 18:33:49.110 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:33:49.110 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 18:33:49.142 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 18:33:49.143 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:33:49.143 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:33:49.144 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:33:49.145 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:33:49.146 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 18:32:51.0(Timestamp), 2020-06-15 18:33:49.144(Timestamp)
2020-06-15 18:33:49.147 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:33:49.147 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:33:49.147 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:33:49.148 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:33:49.149 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:33:49.150 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 18:32:51.0(Timestamp), 2020-06-15 18:33:49.148(Timestamp)
2020-06-15 18:33:49.151 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:33:49.152 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:33:49.152 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:33:49.153 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:33:49.156 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:33:49.156 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 18:32:51.0(Timestamp), 2020-06-15 18:33:49.154(Timestamp)
2020-06-15 18:33:49.157 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:33:49.159 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:33:49.159 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:33:49.161 DEBUG 17108 --- [http-nio-8889-exec-5] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:33:49.163 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:33:49.164 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 18:32:51.0(Timestamp), 2020-06-15 18:33:49.161(Timestamp)
2020-06-15 18:33:49.165 DEBUG 17108 --- [http-nio-8889-exec-5] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 18:34:26.256 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 18:34:26.257 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 18:34:26.254(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 18:34:26.259 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 18:34:26.937 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 18:34:26.938 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 18:34:26.939 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:34:26.943 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 18:34:26.943 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 18:34:26.949 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 18:34:26.953 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 18:34:26.953 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 18:34:26.955 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 18:34:26.960 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:34:26.960 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 18:34:27.001 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 18:34:27.002 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:34:27.002 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 18:34:27.043 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 18:34:27.044 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:34:27.045 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:34:27.048 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:34:27.050 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:34:27.050 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 18:33:49.0(Timestamp), 2020-06-15 18:34:27.048(Timestamp)
2020-06-15 18:34:27.051 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:34:27.052 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:34:27.052 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:34:27.053 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:34:27.055 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:34:27.055 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 18:33:49.0(Timestamp), 2020-06-15 18:34:27.053(Timestamp)
2020-06-15 18:34:27.056 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:34:27.057 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:34:27.057 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:34:27.058 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:34:27.060 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:34:27.060 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 18:33:49.0(Timestamp), 2020-06-15 18:34:27.059(Timestamp)
2020-06-15 18:34:27.065 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:34:27.066 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:34:27.066 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:34:27.067 DEBUG 17108 --- [http-nio-8889-exec-7] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:34:27.069 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:34:27.069 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 18:33:49.0(Timestamp), 2020-06-15 18:34:27.068(Timestamp)
2020-06-15 18:34:27.070 DEBUG 17108 --- [http-nio-8889-exec-7] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 18:37:44.656 DEBUG 17108 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:37:44.657 DEBUG 17108 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:37:44.660 DEBUG 17108 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:37:44.666 DEBUG 17108 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:37:44.666 DEBUG 17108 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:37:44.674 DEBUG 17108 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:37:49.635 DEBUG 17108 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:37:49.635 DEBUG 17108 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-15 18:37:49.636 DEBUG 17108 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 0
2020-06-15 18:37:49.727  INFO 17108 --- [http-nio-8889-exec-3] s.a.g.s.MyAuthenticationFailureHandler   : 登录失败
2020-06-15 18:37:56.972 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:37:56.973 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:37:56.974 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:37:56.974 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:37:56.975 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:37:56.980 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:37:57.071  INFO 17108 --- [http-nio-8889-exec-6] s.a.g.s.MyAuthenticationFailureHandler   : 登录失败
2020-06-15 18:38:06.779 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:38:06.780 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:38:06.781 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:38:06.782 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:38:06.782 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:38:06.785 DEBUG 17108 --- [http-nio-8889-exec-9] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:38:06.882  INFO 17108 --- [http-nio-8889-exec-9] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 18:38:08.921 DEBUG 17108 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 18:38:08.921 DEBUG 17108 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 18:38:08.918(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 18:38:08.925 DEBUG 17108 --- [http-nio-8889-exec-10] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 18:38:09.124 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.g.dao.MenuMapper.listMenuByUserId    : ==>  Preparing: select sm.* from (select id, pid, title, icon, href, target, sort from sys_menu where `status` = 1 and (type = 1 or type = 2)) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? order by sm.sort 
2020-06-15 18:38:09.127 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.g.dao.MenuMapper.listMenuByUserId    : ==> Parameters: 1(Long)
2020-06-15 18:38:09.132 DEBUG 17108 --- [http-nio-8889-exec-6] s.a.g.dao.MenuMapper.listMenuByUserId    : <==      Total: 24
2020-06-15 18:38:09.353 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article 
2020-06-15 18:38:09.353 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 
2020-06-15 18:38:09.354 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:38:09.362 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : ==>  Preparing: SELECT COUNT( 1 ) FROM t_category 
2020-06-15 18:38:09.363 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : ==> Parameters: 
2020-06-15 18:38:09.364 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CategoryMapper.selectCount     : <==      Total: 1
2020-06-15 18:38:09.372 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==>  Preparing: SELECT COUNT( 1 ) FROM t_tag 
2020-06-15 18:38:09.373 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : ==> Parameters: 
2020-06-15 18:38:09.376 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.TagMapper.selectCount   : <==      Total: 1
2020-06-15 18:38:09.381 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment 
2020-06-15 18:38:09.381 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 
2020-06-15 18:38:09.382 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 18:38:09.387 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_user 
2020-06-15 18:38:09.388 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : ==> Parameters: 
2020-06-15 18:38:09.389 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectCount  : <==      Total: 1
2020-06-15 18:38:09.396 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_visitor 
2020-06-15 18:38:09.396 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : ==> Parameters: 
2020-06-15 18:38:09.397 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.VisitorMapper.selectCount      : <==      Total: 1
2020-06-15 18:38:09.399 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 18:38:09.400 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 18:38:09.401 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:38:09.405 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message 
2020-06-15 18:38:09.406 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 
2020-06-15 18:38:09.409 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:38:09.413 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 18:38:09.413 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 18:38:09.415 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 18:38:09.416 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 18:38:09.416 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 18:38:09.418 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 18:38:09.419 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : ==>  Preparing: select id, user_id, article_id, visitor_id, content, create_time, status from t_comment order by create_time DESC limit ? 
2020-06-15 18:38:09.420 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : ==> Parameters: 10(Integer)
2020-06-15 18:38:09.458 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.listNewest       : <==      Total: 2
2020-06-15 18:38:09.465 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 18:38:09.466 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 8(Long)
2020-06-15 18:38:09.466 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 18:38:09.469 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==>  Preparing: select id, nickname, avatar, link from t_visitor where id = ? 
2020-06-15 18:38:09.469 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : ==> Parameters: 7(Long)
2020-06-15 18:38:09.470 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.VisitorMapper.selectByVisitorId  : <==      Total: 1
2020-06-15 18:38:09.474 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : ==>  Preparing: SELECT id,nickname,content,create_time,status FROM t_message ORDER BY create_time DESC limit 10 
2020-06-15 18:38:09.475 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : ==> Parameters: 
2020-06-15 18:38:09.477 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectList       : <==      Total: 3
2020-06-15 18:38:09.483 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==>  Preparing: SELECT id,title,summary,create_time FROM t_article ORDER BY create_time DESC limit 10 
2020-06-15 18:38:09.483 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : ==> Parameters: 
2020-06-15 18:38:09.489 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectList       : <==      Total: 10
2020-06-15 18:38:09.497 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:38:09.498 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 18:38:09.534 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 18:38:09.535 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:38:09.535 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 18:38:09.577 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 18:38:09.579 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:38:09.579 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:38:09.580 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:38:09.581 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:38:09.581 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 18:34:26.0(Timestamp), 2020-06-15 18:38:09.58(Timestamp)
2020-06-15 18:38:09.582 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:38:09.583 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:38:09.583 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:38:09.583 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:38:09.584 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:38:09.585 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 18:34:26.0(Timestamp), 2020-06-15 18:38:09.584(Timestamp)
2020-06-15 18:38:09.586 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:38:09.586 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:38:09.586 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:38:09.587 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:38:09.588 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:38:09.589 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 18:34:26.0(Timestamp), 2020-06-15 18:38:09.587(Timestamp)
2020-06-15 18:38:09.590 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:38:09.593 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:38:09.593 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:38:09.594 DEBUG 17108 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:38:09.595 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:38:09.596 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 18:34:26.0(Timestamp), 2020-06-15 18:38:09.595(Timestamp)
2020-06-15 18:38:09.596 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 18:38:09.601 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : ==>  Preparing: SELECT id,TITLE,content,create_time FROM sys_notice WHERE (display = ?) ORDER BY sort ASC,create_time DESC limit 10 
2020-06-15 18:38:09.601 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : ==> Parameters: 1(Integer)
2020-06-15 18:38:09.602 DEBUG 17108 --- [http-nio-8889-exec-2] s.a.g.dao.NoticeMapper.selectList        : <==      Total: 2
2020-06-15 18:40:21.343  INFO 15580 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 15580 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 18:40:21.346 DEBUG 15580 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 18:40:21.346  INFO 15580 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 18:40:21.389  INFO 15580 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 18:40:21.389  INFO 15580 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 18:40:22.221  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:40:22.223  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 18:40:22.288  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 61ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 18:40:22.293  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:40:22.293  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 18:40:22.304  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 18:40:22.318  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:40:22.319  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 18:40:22.336  INFO 15580 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 18:40:22.337  INFO 15580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-15 18:40:22.663  INFO 15580 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:22.810  INFO 15580 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:22.812  INFO 15580 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@45baa4f7' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:22.813  INFO 15580 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:22.820  INFO 15580 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:22.830  INFO 15580 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$3f77f574] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:23.166  INFO 15580 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 18:40:23.173  INFO 15580 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 18:40:23.174  INFO 15580 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 18:40:23.268  INFO 15580 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 18:40:23.268  INFO 15580 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1879 ms
2020-06-15 18:40:23.396  INFO 15580 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 18:40:23.397  INFO 15580 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 18:40:23.410 DEBUG 15580 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 18:40:23.501  INFO 15580 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 18:40:23.841  INFO 15580 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 18:40:25.201  WARN 15580 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:25.202  WARN 15580 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:25.202  WARN 15580 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:25.202  WARN 15580 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:25.224  WARN 15580 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:25.224  WARN 15580 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:25.225  WARN 15580 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:25.225  WARN 15580 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:25.343  INFO 15580 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 18:40:25.496  WARN 15580 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 18:40:26.499  INFO 15580 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 18:40:26.514  INFO 15580 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 18:40:26.668  INFO 15580 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5cb8a6ab, org.springframework.security.web.context.SecurityContextPersistenceFilter@13c94ac1, org.springframework.security.web.header.HeaderWriterFilter@6abebcf7, org.springframework.security.web.authentication.logout.LogoutFilter@156ba70d, site.alanliang.geekblog.security.ValidateCodeFilter@7867bd52, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4ab1af55, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@14febd08, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@10df427a, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4fdd3713, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@18f94709, org.springframework.security.web.session.SessionManagementFilter@4645065, org.springframework.security.web.access.ExceptionTranslationFilter@6bcc842, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@78f3ba8]
2020-06-15 18:40:26.738  INFO 15580 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 18:40:27.144  INFO 15580 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 18:40:27.156  INFO 15580 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 18:40:27.207  INFO 15580 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 18:40:27.387  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 18:40:27.388  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 18:40:27.392  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 18:40:27.393  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 18:40:27.394  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 18:40:27.395  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 18:40:27.396  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 18:40:27.399  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 18:40:27.400  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 18:40:27.426  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 18:40:27.428  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 18:40:27.430  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 18:40:27.437  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 18:40:27.438  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 18:40:27.441  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 18:40:27.441  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 18:40:27.445  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 18:40:27.446  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 18:40:27.447  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 18:40:27.448  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 18:40:27.450  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 18:40:27.451  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 18:40:27.454  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 18:40:27.456  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 18:40:27.458  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 18:40:27.461  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 18:40:27.462  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 18:40:27.463  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 18:40:27.464  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 18:40:27.466  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 18:40:27.467  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 18:40:27.470  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 18:40:27.472  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 18:40:27.475  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 18:40:27.477  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 18:40:27.479  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 18:40:27.479  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 18:40:27.482  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 18:40:27.483  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 18:40:27.484  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 18:40:27.485  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 18:40:27.486  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 18:40:27.487  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 18:40:27.490  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 18:40:27.491  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 18:40:27.493  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 18:40:27.493  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 18:40:27.500  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 18:40:27.501  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 18:40:27.502  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 18:40:27.504  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 18:40:27.507  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 18:40:27.508  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 18:40:27.509  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 18:40:27.509  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 18:40:27.510  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 18:40:27.514  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 18:40:27.516  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 18:40:27.516  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 18:40:27.517  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 18:40:27.517  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 18:40:27.520  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 18:40:27.521  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 18:40:27.521  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 18:40:27.528  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 18:40:27.531  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 18:40:27.532  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 18:40:27.533  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 18:40:27.534  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 18:40:27.535  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 18:40:27.537  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 18:40:27.539  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 18:40:27.540  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 18:40:27.541  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 18:40:27.544  INFO 15580 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 18:40:27.569  INFO 15580 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 18:40:27.571  INFO 15580 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 6.984 seconds (JVM running for 7.929)
2020-06-15 18:40:38.050  INFO 22356 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Starting GeekBlogApplication on DESKTOP-QNDK7AF with PID 22356 (D:\idea\geekblog\target\classes started by AlanLiang in D:\idea\geekblog)
2020-06-15 18:40:38.054 DEBUG 22356 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-06-15 18:40:38.054  INFO 22356 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : The following profiles are active: dev
2020-06-15 18:40:38.104  INFO 22356 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-06-15 18:40:38.104  INFO 22356 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-06-15 18:40:38.902  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:40:38.904  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2020-06-15 18:40:38.967  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 59ms. Found 1 Elasticsearch repository interfaces.
2020-06-15 18:40:38.971  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:40:38.972  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2020-06-15 18:40:38.983  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Reactive Elasticsearch repository interfaces.
2020-06-15 18:40:38.994  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-15 18:40:38.995  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-06-15 18:40:39.012  INFO 22356 --- [restartedMain] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface site.alanliang.geekblog.repository.ArticleDocumentRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2020-06-15 18:40:39.013  INFO 22356 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-06-15 18:40:39.308  INFO 22356 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:39.450  INFO 22356 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:39.453  INFO 22356 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@314f4777' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:39.453  INFO 22356 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:39.460  INFO 22356 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:39.470  INFO 22356 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [site.alanliang.geekblog.config.RedisConfig$$EnhancerBySpringCGLIB$$58406256] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-15 18:40:39.783  INFO 22356 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
2020-06-15 18:40:39.790  INFO 22356 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-06-15 18:40:39.791  INFO 22356 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-06-15 18:40:39.883  INFO 22356 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-06-15 18:40:39.883  INFO 22356 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1778 ms
2020-06-15 18:40:40.005  INFO 22356 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Filter webStatFilter was not registered (possibly already registered?)
2020-06-15 18:40:40.006  INFO 22356 --- [restartedMain] o.s.boot.web.servlet.RegistrationBean    : Servlet statViewServlet was not registered (possibly already registered?)
2020-06-15 18:40:40.017 DEBUG 22356 --- [restartedMain] s.a.g.security.ValidateCodeFilter        : Filter 'validateCodeFilter' configured for use
2020-06-15 18:40:40.105  INFO 22356 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2020-06-15 18:40:40.424  INFO 22356 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-06-15 18:40:41.753  WARN 22356 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:41.754  WARN 22356 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:41.755  WARN 22356 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:41.755  WARN 22356 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:41.776  WARN 22356 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:41.776  WARN 22356 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:41.777  WARN 22356 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:41.777  WARN 22356 --- [restartedMain] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2020-06-15 18:40:41.895  INFO 22356 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-06-15 18:40:42.038  WARN 22356 --- [I/O dispatcher 9] org.elasticsearch.client.RestClient      : request [PUT http://localhost:9200/article_document/_mapping/docs?master_timeout=30s&include_type_name=true&timeout=30s] returned 1 warnings: [299 Elasticsearch-6.8.7-c63e621 "[types removal] Specifying types in put mapping requests is deprecated. To be compatible with 7.0, the mapping definition should not be nested under the type name, and the parameter include_type_name must be provided and set to false."]
2020-06-15 18:40:43.036  INFO 22356 --- [restartedMain] s.alanliang.geekblog.config.RedisConfig  : 初始化 -> [Redis CacheErrorHandler]
2020-06-15 18:40:43.050  INFO 22356 --- [restartedMain] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-06-15 18:40:43.201  INFO 22356 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@87232b4, org.springframework.security.web.context.SecurityContextPersistenceFilter@655e9c12, org.springframework.security.web.header.HeaderWriterFilter@1ad88046, org.springframework.security.web.authentication.logout.LogoutFilter@65cf3c60, site.alanliang.geekblog.security.ValidateCodeFilter@53fff941, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@9a99251, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@47ca07ec, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3c5e5a79, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@71dbc6f9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@18d0b78, org.springframework.security.web.session.SessionManagementFilter@2f5ee911, org.springframework.security.web.access.ExceptionTranslationFilter@226f6658, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4bbf91d0]
2020-06-15 18:40:43.270  INFO 22356 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-06-15 18:40:43.676  INFO 22356 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed
2020-06-15 18:40:43.688  INFO 22356 --- [restartedMain] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)
2020-06-15 18:40:43.739  INFO 22356 --- [restartedMain] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2020-06-15 18:40:43.913  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_1
2020-06-15 18:40:43.914  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_2
2020-06-15 18:40:43.918  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_1
2020-06-15 18:40:43.919  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_1
2020-06-15 18:40:43.920  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_1
2020-06-15 18:40:43.922  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_1
2020-06-15 18:40:43.923  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_3
2020-06-15 18:40:43.925  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_1
2020-06-15 18:40:43.926  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_1
2020-06-15 18:40:43.952  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_2
2020-06-15 18:40:43.954  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getPageUsingGET_1
2020-06-15 18:40:43.956  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: homeUsingGET_1
2020-06-15 18:40:43.964  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_2
2020-06-15 18:40:43.965  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_4
2020-06-15 18:40:43.968  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_2
2020-06-15 18:40:43.969  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_2
2020-06-15 18:40:43.972  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_3
2020-06-15 18:40:43.973  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_2
2020-06-15 18:40:43.974  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_2
2020-06-15 18:40:43.975  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_5
2020-06-15 18:40:43.977  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_3
2020-06-15 18:40:43.978  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_3
2020-06-15 18:40:43.981  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_3
2020-06-15 18:40:43.983  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_1
2020-06-15 18:40:43.985  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_4
2020-06-15 18:40:43.988  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_4
2020-06-15 18:40:43.988  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_4
2020-06-15 18:40:43.990  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: auditUsingPUT_3
2020-06-15 18:40:43.990  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_6
2020-06-15 18:40:43.993  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_4
2020-06-15 18:40:43.993  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_5
2020-06-15 18:40:43.997  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: replyUsingPOST_1
2020-06-15 18:40:43.999  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_3
2020-06-15 18:40:44.002  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_5
2020-06-15 18:40:44.004  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_7
2020-06-15 18:40:44.006  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_5
2020-06-15 18:40:44.007  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_6
2020-06-15 18:40:44.010  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_6
2020-06-15 18:40:44.011  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_5
2020-06-15 18:40:44.013  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_4
2020-06-15 18:40:44.014  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_1
2020-06-15 18:40:44.015  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeByIdUsingDELETE_1
2020-06-15 18:40:44.016  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_8
2020-06-15 18:40:44.019  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_6
2020-06-15 18:40:44.020  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_7
2020-06-15 18:40:44.022  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_7
2020-06-15 18:40:44.022  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_6
2020-06-15 18:40:44.030  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: downloadUsingGET_1
2020-06-15 18:40:44.032  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listTableByPageUsingGET_7
2020-06-15 18:40:44.033  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2020-06-15 18:40:44.035  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_2
2020-06-15 18:40:44.037  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_5
2020-06-15 18:40:44.038  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_8
2020-06-15 18:40:44.039  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_2
2020-06-15 18:40:44.039  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_8
2020-06-15 18:40:44.040  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_7
2020-06-15 18:40:44.044  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: loginPageUsingGET_1
2020-06-15 18:40:44.046  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_9
2020-06-15 18:40:44.047  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: batchRemoveUsingDELETE_10
2020-06-15 18:40:44.048  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getColorsUsingGET_1
2020-06-15 18:40:44.048  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listAllUsingGET_3
2020-06-15 18:40:44.051  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_6
2020-06-15 18:40:44.052  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_9
2020-06-15 18:40:44.053  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_8
2020-06-15 18:40:44.057  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_1
2020-06-15 18:40:44.060  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_7
2020-06-15 18:40:44.061  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_9
2020-06-15 18:40:44.062  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_3
2020-06-15 18:40:44.063  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_10
2020-06-15 18:40:44.063  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: updateUsingPUT_9
2020-06-15 18:40:44.067  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: changeStatusUsingPUT_2
2020-06-15 18:40:44.068  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: listByPageUsingGET_8
2020-06-15 18:40:44.069  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeUsingDELETE_10
2020-06-15 18:40:44.070  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: removeBatchUsingDELETE_4
2020-06-15 18:40:44.072  INFO 22356 --- [restartedMain] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: saveUsingPOST_11
2020-06-15 18:40:44.098  INFO 22356 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path ''
2020-06-15 18:40:44.100  INFO 22356 --- [restartedMain] s.a.geekblog.GeekBlogApplication         : Started GeekBlogApplication in 6.768 seconds (JVM running for 7.89)
2020-06-15 18:40:56.243  INFO 22356 --- [http-nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-15 18:40:56.243  INFO 22356 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-06-15 18:40:56.257  INFO 22356 --- [http-nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-06-15 18:40:56.368 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:40:56.533 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:40:56.556 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:40:56.572 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:40:56.580 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:40:56.595 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:41:05.661 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:41:05.662 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:41:05.666 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:41:05.668 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:41:05.668 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:41:05.674 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:41:05.783  INFO 22356 --- [http-nio-8889-exec-3] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 18:41:07.984 DEBUG 22356 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 18:41:07.990 DEBUG 22356 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 18:41:07.976(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 4(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 18:41:07.993 DEBUG 22356 --- [http-nio-8889-exec-6] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 18:41:08.356  INFO 22356 --- [http-nio-8889-exec-1] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-06-15 18:41:08.357  INFO 22356 --- [http-nio-8889-exec-1] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-06-15 18:41:09.071 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 18:41:09.075 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 18:41:09.079 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:41:09.087 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 18:41:09.089 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 18:41:09.091 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 18:41:09.093 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 18:41:09.093 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 18:41:09.097 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 18:41:09.121 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:41:09.125 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 18:41:09.156 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 18:41:09.157 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:41:09.158 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 18:41:09.200 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 18:41:09.201 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:41:09.203 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:41:09.204 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:41:09.205 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:41:09.206 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 18:38:09.0(Timestamp), 2020-06-15 18:41:09.204(Timestamp)
2020-06-15 18:41:09.207 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:41:09.210 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:41:09.210 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:41:09.211 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:41:09.216 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:41:09.217 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 18:38:09.0(Timestamp), 2020-06-15 18:41:09.212(Timestamp)
2020-06-15 18:41:09.218 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:41:09.221 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:41:09.221 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:41:09.222 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:41:09.225 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:41:09.226 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 18:38:09.0(Timestamp), 2020-06-15 18:41:09.223(Timestamp)
2020-06-15 18:41:09.227 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:41:09.232 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:41:09.233 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:41:09.234 DEBUG 22356 --- [http-nio-8889-exec-2] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:41:09.236 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:41:09.237 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 18:38:09.0(Timestamp), 2020-06-15 18:41:09.235(Timestamp)
2020-06-15 18:41:09.238 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
2020-06-15 18:43:29.934 DEBUG 22356 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:43:29.935 DEBUG 22356 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:43:29.937 DEBUG 22356 --- [http-nio-8889-exec-10] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:43:29.938 DEBUG 22356 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:43:29.938 DEBUG 22356 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:43:29.944 DEBUG 22356 --- [http-nio-8889-exec-10] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:43:29.950 DEBUG 22356 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:43:29.951 DEBUG 22356 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:43:29.953 DEBUG 22356 --- [http-nio-8889-exec-4] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:43:29.956 DEBUG 22356 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:43:29.957 DEBUG 22356 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:43:29.962 DEBUG 22356 --- [http-nio-8889-exec-4] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:43:35.633 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:43:35.633 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-15 18:43:35.634 DEBUG 22356 --- [http-nio-8889-exec-2] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 0
2020-06-15 18:43:35.728  INFO 22356 --- [http-nio-8889-exec-2] s.a.g.s.MyAuthenticationFailureHandler   : 登录失败
2020-06-15 18:43:44.928 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:43:44.928 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin(String)
2020-06-15 18:43:44.929 DEBUG 22356 --- [http-nio-8889-exec-1] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 0
2020-06-15 18:43:45.017  INFO 22356 --- [http-nio-8889-exec-1] s.a.g.s.MyAuthenticationFailureHandler   : 登录失败
2020-06-15 18:43:54.059 DEBUG 22356 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==>  Preparing: SELECT id,username,password,nickname,avatar,sex,email,phone,status,create_time,update_time FROM sys_user WHERE (username = ?) 
2020-06-15 18:43:54.060 DEBUG 22356 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : ==> Parameters: admin001(String)
2020-06-15 18:43:54.061 DEBUG 22356 --- [http-nio-8889-exec-7] s.a.geekblog.dao.UserMapper.selectList   : <==      Total: 1
2020-06-15 18:43:54.062 DEBUG 22356 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==>  Preparing: select sm.* from (select id, authority from sys_menu where authority is not null) sm left join sys_role_menu srm on sm.id = srm.menu_id left join sys_role_user sru on srm.role_id = sru.role_id where sru.user_id = ? 
2020-06-15 18:43:54.062 DEBUG 22356 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : ==> Parameters: 1(Long)
2020-06-15 18:43:54.067 DEBUG 22356 --- [http-nio-8889-exec-7] s.a.g.d.M.listPermissionByUserId         : <==      Total: 84
2020-06-15 18:43:54.157  INFO 22356 --- [http-nio-8889-exec-7] s.a.g.s.MyAuthenticationSuccessHandler   : 登录成功
2020-06-15 18:43:56.214 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==>  Preparing: INSERT INTO sys_operation_log ( create_time, description, log_type, method, params, request_ip, time, username, browser, address, status ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-15 18:43:56.217 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : ==> Parameters: 2020-06-15 18:43:56.213(Timestamp), 访问后台首页(String), INFO(String), site.alanliang.geekblog.controller.admin.IndexController.toIndex()(String), { }(String), 0:0:0:0:0:0:0:1(String), 0(Long), admin001(String), Chrome 8(String), 内网IP(String), 1(Integer)
2020-06-15 18:43:56.218 DEBUG 22356 --- [http-nio-8889-exec-3] s.a.g.dao.OperationLogMapper.insert      : <==    Updates: 1
2020-06-15 18:43:56.688 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log 
2020-06-15 18:43:56.688 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 
2020-06-15 18:43:56.691 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:43:56.694 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==>  Preparing: SELECT id,request_ip,address,create_time,description,status FROM sys_access_log ORDER BY create_time DESC limit 10 
2020-06-15 18:43:56.694 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : ==> Parameters: 
2020-06-15 18:43:56.700 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectList     : <==      Total: 10
2020-06-15 18:43:56.703 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==>  Preparing: SELECT id,request_ip,username,address,create_time,description,status FROM sys_operation_log ORDER BY create_time DESC limit 10 
2020-06-15 18:43:56.704 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : ==> Parameters: 
2020-06-15 18:43:56.710 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.OperationLogMapper.selectList  : <==      Total: 10
2020-06-15 18:43:56.720 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_access_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:43:56.720 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : ==> Parameters: 
2020-06-15 18:43:56.759 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.d.A.countByLast7Days               : <==      Total: 6
2020-06-15 18:43:56.760 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==>  Preparing: SELECT DATE_FORMAT(create_time, '%Y-%m-%d') date, count(*) viewCount FROM (SELECT * FROM sys_operation_log WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(create_time)) as sal GROUP BY date; 
2020-06-15 18:43:56.760 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : ==> Parameters: 
2020-06-15 18:43:56.800 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.d.O.countByLast7Days               : <==      Total: 8
2020-06-15 18:43:56.801 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:43:56.801 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:43:56.802 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:43:56.805 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==>  Preparing: SELECT COUNT( 1 ) FROM sys_access_log WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:43:56.806 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : ==> Parameters: 2020-06-15 18:41:08.0(Timestamp), 2020-06-15 18:43:56.802(Timestamp)
2020-06-15 18:43:56.807 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.AccessLogMapper.selectCount    : <==      Total: 1
2020-06-15 18:43:56.808 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:43:56.808 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:43:56.809 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:43:56.810 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_article WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:43:56.811 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : ==> Parameters: 2020-06-15 18:41:08.0(Timestamp), 2020-06-15 18:43:56.809(Timestamp)
2020-06-15 18:43:56.812 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.ArticleMapper.selectCount      : <==      Total: 1
2020-06-15 18:43:56.813 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:43:56.813 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:43:56.814 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:43:56.816 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_message WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:43:56.817 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : ==> Parameters: 2020-06-15 18:41:08.0(Timestamp), 2020-06-15 18:43:56.814(Timestamp)
2020-06-15 18:43:56.818 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.MessageMapper.selectCount      : <==      Total: 1
2020-06-15 18:43:56.818 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==>  Preparing: SELECT create_time FROM sys_operation_log WHERE username = ? and description like '%首页%' ORDER BY create_time DESC LIMIT 1, 1 
2020-06-15 18:43:56.819 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : ==> Parameters: admin001(String)
2020-06-15 18:43:56.820 DEBUG 22356 --- [http-nio-8889-exec-8] .g.d.O.selectLastIndexViewTimeByUsername : <==      Total: 1
2020-06-15 18:43:56.825 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==>  Preparing: SELECT COUNT( 1 ) FROM t_comment WHERE (create_time BETWEEN ? AND ?) 
2020-06-15 18:43:56.826 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : ==> Parameters: 2020-06-15 18:41:08.0(Timestamp), 2020-06-15 18:43:56.82(Timestamp)
2020-06-15 18:43:56.827 DEBUG 22356 --- [http-nio-8889-exec-8] s.a.g.dao.CommentMapper.selectCount      : <==      Total: 1
